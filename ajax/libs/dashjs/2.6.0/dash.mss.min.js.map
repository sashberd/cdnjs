{"version":3,"sources":["node_modules/browser-pack/_prelude.js","/Users/dsparaci/Repositories/git/dash/dash.js/externals/base64.js","node_modules/codem-isoboxer/dist/iso_boxer.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/core/Debug.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/core/EventBus.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/core/FactoryMaker.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/core/events/CoreEvents.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/core/events/Events.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/core/events/EventsBase.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/MssEvents.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/MssFragmentInfoController.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/MssFragmentMoofProcessor.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/MssFragmentMoovProcessor.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/MssFragmentProcessor.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/MssHandler.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/index.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/mss/parser/MssParser.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/MediaPlayerEvents.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/constants/Constants.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/CommonEncryption.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/protection/drm/KeySystemWidevine.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/vo/DataChunk.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/vo/FragmentRequest.js","/Users/dsparaci/Repositories/git/dash/dash.js/src/streaming/vo/metrics/HTTPRequest.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","_dereq_","module","UTF8","encode","c","charCodeAt","push","decode","v","String","fromCharCode","join","BASE64","T","encodeArray","charAt","R","decodeArray","pop","ASCII","Uint8Array","encodeASCII","decodeASCII","ISOBoxer","parseBuffer","arrayBuffer","ISOFile","parse","addBoxProcessor","type","parser","ISOBox","prototype","_boxProcessors","createFile","createBox","parent","pos","newBox","create","append","createFullBox","version","flags","Utils","dataViewToString","dataView","encoding","impliedEncoding","TextDecoder","byteLength","getUint8","utf8ToByteArray","string","TextEncoder","appendBox","box","_offset","_cursor","offset","_root","_raw","_parent","undefined","boxes","index","splice","Cursor","initialOffset","this","DataView","fetch","result","fetchAll","returnEarly","_sweep","write","getLength","bytes","_rawo","buffer","_parseBox","byteOffset","_boxContainers","_procField","name","size","_parsing","_readField","_writeField","_procFieldArray","_procFullBox","_procEntries","fn","_procSubEntries","entry","_procEntryField","_procSubBoxes","_readUint","_readInt","_readTemplate","_readTerminatedString","_readString","_readData","_readUTF8String","getInt8","getInt16","getInt32","s1","s2","Math","pow","getUint16","getUint32","str","char","data","_incomplete","largesize","indexOf","_parseContainerBox","_data","_parseFullBox","_writeData","_writeInt","value","setInt8","setInt16","setInt32","floor","setUint32","_writeUint","setUint8","setUint16","_writeString","_writeTerminatedString","_writeTemplate","pre","post","Array","from","typedArray","_writeUTF8String","entry_count","nbCompatibleBrands","language","DataSize","sample_count","reference_count","reference","reference_type","referenced_size","sap","starts_with_SAP","SAP_type","SAP_delta_time","subsegment_count","subsegment","ranges_count","range","subsample_count","subsample","reserved","length_size_of_traf_num","length_size_of_trun_num","length_size_of_sample_num","number_of_entry","sample","Debug","setup","logToBrowserConsole","showLogTimestamp","showCalleeName","startTime","Date","getTime","setLogTimestampVisible","setCalleeNameVisible","setLogToBrowserConsole","getLogToBrowserConsole","log","message","logTime","getClassName","getType","apply","arguments","forEach","item","console","eventBus","trigger","_eventsEvents2","LOG","context","_EventBus2","getInstance","instance","__dashjs_factory_name","_FactoryMaker2","getSingletonFactory","EventBus","on","listener","scope","priority","EVENT_PRIORITY_LOW","getHandlerIdx","handlers","handler","callback","some","idx","off","payload","hasOwnProperty","filter","reset","EVENT_PRIORITY_HIGH","factory","updateSingletonFactory","FactoryMaker","extend","childInstance","override","extensionContext","getExtensionContext","getSingletonInstance","className","singletonContexts","obj","setSingletonInstance","registerFactory","factoriesArray","getFactoryByName","updateFactory","updateClassFactory","classFactories","getClassFactoryByName","getClassFactory","classConstructor","merge","singletonFactories","getSingletonFactoryByName","args","extensionObject","extension","prop","extensions","CoreEvents","_EventsBase","_get","Object","getPrototypeOf","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_REQUESTED","INTERNAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","QUOTA_EXCEEDED","REPRESENTATION_UPDATED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_ADD","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_APPEND_COMPLETED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","TIMED_TEXT_REQUESTED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","VIDEO_CHUNK_RECEIVED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","Events","_CoreEvents","events","EventsBase","config","publicOnly","evt","MssEvents","FRAGMENT_INFO_LOADING_COMPLETED","mssEvents","MssFragmentInfoController","_coreDebug2","initialize","started","startFragmentInfoDate","startTimeStampValue","deltaTime","segmentDuration","NaN","streamProcessor","registerExternalController","fragmentModel","getFragmentModel","indexHandler","getIndexHandler","getCurrentRepresentation","getRepresentationController","sendRequest","request","executeRequest","asFragmentInfoRequest","url","replace","onFragmentRequest","action","ACTION_COMPLETE","doStop","_fragmentInfoTime","duration","isFragmentLoadedOrPending","getNextSegmentRequest","bufferFragmentInfo","segmentTime","representation","getSegmentRequestForTime","delayLoadNextFragmentInfo","delay","delayMs","round","min","clearTimeout","bufferTimeout","setTimeout","onFragmentInfoLoadedCompleted","fragmentInfo","deltaDate","deltaTimeStamp","response","_MssFragmentMoofProcessor2","metricsModel","playbackController","updateSegmentList","startPlayback","doStart","segments","_MssEvents2","presentationStartTime","unregisterExternalController","start","_coreFactoryMaker2","MssFragmentMoofProcessor","processTfrf","tfrf","tfdt","representationController","manifest","adaptation","period","mpd","Period_asArray","AdaptationSet_asArray","segmentsUpdated","SegmentTemplate","SegmentTimeline","S","entries","fragment_absolute_time","fragment_duration","segment","j","segmentId","availabilityStartTime","d","baseMediaDecodeTime","timeShiftBufferDepth","timescale","end","dvrInfos","getMetricsFor","mediaType","DVRInfo","addDVRInfo","getStreamInfo","manifestInfo","getBoxOffset","convertFragment","sp","isoFile","_codemIsoboxer2","tfhd","track_ID","mediaInfo","traf","trun","tfxd","sepiff","usertype","_saio","saiz","default_sample_info_size","sample_info_size","NumberOfEntries","moof","data_offset","saio","trafPosInMoof","sencPosInTraf","MssFragmentMoovProcessor","createFtypBox","ftyp","major_brand","minor_version","compatible_brands","createMoovBox","moov","createMvhdBox","trak","createTkhdBox","mdia","createMdhdBox","createHdlrBox","minf","adaptationSet","_streamingConstantsConstants2","VIDEO","createVmhdBox","AUDIO","createSmhdBox","createDrefBox","stbl","createStsdBox","createTrexBox","contentProtection","createProtectionSystemSpecificHeaderBoxForPR","pro","__text","mvhd","creation_time","modification_time","TIME_SCALE","rate","volume","reserved1","reserved2","matrix","pre_defined","next_track_ID","trackId","tkhd","layer","alternate_group","reserved3","width","height","mdhd","lang","hdlr","handler_type","id","vmhd","graphicsmode","opcolor","smhd","balance","dinf","dref","location","stsd","createSampleEntry","codec","codecs","substring","createAVCVisualSampleEntry","createMP4AudioSampleEntry","avc1","data_reference_index","pre_defined1","pre_defined2","horizresolution","vertresolution","frame_count","compressorname","depth","pre_defined3","createAVC1ConfigurationRecord","sinf","createOriginalFormatBox","createSchemeTypeBox","createSchemeInformationBox","avcC","avcCLength","sps","pps","AVCProfileIndication","AVCLevelIndication","profile_compatibility","nalus","codecPrivateData","split","slice","naluBytes","_i","hexStringtoBuffer","NALUTYPE_SPS","NALUTYPE_PPS","set","mp4a","channelcount","audioChannels","samplesize","reserved_3","samplerate","audioSamplingRate","esds","createMPEG4AACESDescriptor","audioSpecificConfig","esdsLength","bandwidth","data_format","stringToCharCode","schm","scheme_type","scheme_version","createTrackEncryptionBox","initData","pssh","uint8arraydecodedPROHeader","_externalsBase642","SystemID","Data","schi","tenc","default_IsEncrypted","default_IV_size","default_KID","trex","default_sample_description_index","default_sample_duration","default_sample_size","default_sample_flags","buf","parseInt","generateMoov","rep","ContentProtection","arrayEqual","arr1","arr2","every","element","saioProcessor","saizProcessor","sencProcessor","clearAndCryptedData","uuidProcessor","tfxdUserType","tfrfUserType","sepiffUserType","fragment_count","MssFragmentProcessor","_MssFragmentMoovProcessor2","processFragment","mssFragmentMoofProcessor","sender","MssHandler","onInitializationRequested","getStreamProcessor","_streamingVoFragmentRequest2","_streamingVoMetricsHTTPRequest","HTTPRequest","INIT_SEGMENT_TYPE","quality","getMediaInfo","representationId","chunk","createDataChunk","mssFragmentProcessor","_coreEventsEvents2","streamId","_streamingVoDataChunk2","segmentType","onSegmentMediaLoaded","onPlaybackSeekAsked","getIsDynamic","streamController","getStreamController","getActiveStreamProcessors","processor","FRAGMENTED_TEXT","fragmentInfoController","_MssFragmentInfoController2","registerEvents","_coreEventBus2","_streamingMediaPlayerEvents2","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","createMssParser","mssParser","_parserMssParser2","_MssFragmentProcessor2","window","global","dashjs","_MssHandler2","MssParser","mediaPlayerModel","mapPeriod","smoothStreamingMedia","streams","parseFloat","getAttribute","Infinity","TIME_SCALE_100_NANOSECOND_UNIT","getElementsByTagName","mapAdaptationSet","AdaptationSet","streamIndex","representations","segmentTemplate","qualityLevels","contentType","mimeType","mimeTypeMap","subType","maxWidth","maxHeight","mapSegmentTemplate","BaseURL","Id","mapRepresentation","Representation","Representation_asArray","S_asArray","qualityLevel","fourCCValue","SUPPORTED_CODECS","toUpperCase","getH264Codec","getAACCodec","STPP","toString","nalHeader","exec","substr","objectType","samplingRate","codecPrivateDataHex","arr16","indexFreq","extensionSamplingFrequencyIndex","samplingFrequencyIndex","Channels","Uint16Array","setAttribute","mediaUrl","media","mapSegmentTimeline","segmentTimeline","chunks","prevSegment","tManifest","getKIDFromProtectionHeader","protectionHeader","prHeader","wrmHeader","xmlReader","KID","firstChild","getWRMHeaderFromPRHeader","DOMParser","parseFromString","querySelector","textContent","convertUuidEndianness","recordType","recordLength","recordValue","subarray","uuid","swapBytes","pos1","pos2","temp","createPRContentProtection","__prefix","schemeIdUri","pro_asArray","createWidevineContentProtection","ksWidevine","schemeIdURI","systemString","processManifest","xmlDoc","manifestLoadedTime","contentProtections","protection","adaptations","timestampOffset","protocol","profiles","mediaPresentationDuration","minBufferTime","getStableBufferTime","ttmlTimeIsRelative","refreshManifestOnSwitchTrack","doNotUpdateDVRWindowOnBufferUpdated","ignorePostponeTimePeriod","Period","ContentProtection_asArray","initialization","toFixed","max","parseDOM","errorHandler","manifestError","internalParse","performance","now","xmlParseTime","mss2dashTime","toPrecision","_streamingProtectionDrmKeySystemWidevineJs2","errHandler","96000","88200","64000","48000","44100","32000","24000","22050","16000","12000","11025","8000","7350","video","audio","text","MediaPlayerEvents","AST_IN_FUTURE","BUFFER_EMPTY","BUFFER_LOADED","BUFFER_LEVEL_STATE_CHANGED","ERROR","FRAGMENT_LOADING_STARTED","FRAGMENT_LOADING_ABANDONED","MANIFEST_LOADED","METRICS_CHANGED","METRIC_CHANGED","METRIC_ADDED","METRIC_UPDATED","PERIOD_SWITCH_COMPLETED","PERIOD_SWITCH_STARTED","QUALITY_CHANGE_REQUESTED","QUALITY_CHANGE_RENDERED","STREAM_INITIALIZED","STREAM_TEARDOWN_COMPLETE","TEXT_TRACKS_ADDED","TEXT_TRACK_ADDED","CAN_PLAY","PLAYBACK_ENDED","PLAYBACK_ERROR","PLAYBACK_NOT_ALLOWED","PLAYBACK_METADATA_LOADED","PLAYBACK_PAUSED","PLAYBACK_PLAYING","PLAYBACK_PROGRESS","PLAYBACK_RATE_CHANGED","PLAYBACK_SEEKED","PLAYBACK_SEEKING","PLAYBACK_STARTED","PLAYBACK_TIME_UPDATED","mediaPlayerEvents","Constants","init","STREAM","TEXT","EMBEDDED_TEXT","MUXED","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","TTML","VTT","WVTT","SUGGESTED_PRESENTATION_DELAY","SCHEME_ID_URI","START_TIME","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_THROUGHPUT","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","constants","CommonEncryption","cpArray","retVal","cp","toLowerCase","view","keySystem","psshList","parsePSSHList","cpData","dv","done","byteCursor","nextBox","systemID","boxStart","val","KeySystemWidevine","protectionData","protData","replaceKID","pssh_array","kidLen","getInitData","_CommonEncryption2","parseInitDataFromContentProtection","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","DataChunk","FragmentRequest","ACTION_DOWNLOAD","serviceLocation","requestStartDate","firstByteDate","requestEndDate","availabilityEndTime","wallStartTime","bytesLoaded","bytesTotal","delayLoadingTime","responseType","tcpid","actualurl","trequest","tresponse","responsecode","interval","trace","_stream","_tfinish","_mediaduration","_responseHeaders","_serviceLocation","HTTPRequestTrace","b","GET","HEAD","MPD_TYPE","XLINK_EXPANSION_TYPE","INDEX_SEGMENT_TYPE","MEDIA_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE"],"mappings":";CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAC,EAAAC,EAAAL,eCKA,IAAIM,KACJA,GAAKC,OAAS,SAASjB,GAEnB,IAAK,GADDE,MACKG,EAAI,EAAGA,EAAIL,EAAEY,SAAUP,EAAG,CAC/B,GAAIa,GAAIlB,EAAEmB,WAAWd,EACjBa,GAAI,IACJhB,EAAEkB,KAAKF,GACAA,EAAI,MACXhB,EAAEkB,KAAK,IAAQF,GAAK,GACpBhB,EAAEkB,KAAK,IAAQ,GAAKF,IACbA,EAAI,OACXhB,EAAEkB,KAAK,IAAQF,GAAK,IACpBhB,EAAEkB,KAAK,IAAQ,GAAMF,GAAK,GAC1BhB,EAAEkB,KAAK,IAAQ,GAAKF,KAEpBhB,EAAEkB,KAAK,IAAQF,GAAK,IACpBhB,EAAEkB,KAAK,IAAQ,GAAMF,GAAK,IAC1BhB,EAAEkB,KAAK,IAAQ,GAAMF,GAAK,GAC1BhB,EAAEkB,KAAK,IAAQ,GAAKF,IAG5B,MAAOhB,IAEXc,EAAKK,OAAS,SAASnB,GAGnB,IAFA,GAAIC,MACAE,EAAI,EACDA,EAAIH,EAAEU,QAAQ,CACjB,GAAIU,GAAIpB,EAAEG,IACNiB,GAAI,MAEGA,EAAI,KACXA,GAAK,GAAKA,IAAM,EAChBA,GAAM,GAAKpB,EAAEG,MACNiB,EAAI,KACXA,GAAK,GAAKA,IAAM,GAChBA,IAAM,GAAKpB,EAAEG,OAAS,EACtBiB,GAAM,GAAKpB,EAAEG,OAEbiB,GAAK,EAAIA,IAAM,GACfA,IAAM,GAAKpB,EAAEG,OAAS,GACtBiB,IAAM,GAAKpB,EAAEG,OAAS,EACtBiB,GAAM,GAAKpB,EAAEG,OAEjBF,EAAEiB,KAAKG,OAAOC,aAAaF,IAE/B,MAAOnB,GAAEsB,KAAK,IAGlB,IAAIC,OACJ,SAAUC,GACN,GAAIC,GAAc,SAAS1B,GAIvB,IAHA,GAAIG,GAAI,EACJF,KACAL,EAAI,EAAKI,EAAEU,OAAS,EACjB,EAAId,KAAK,CACZ,GAAIwB,IAAKpB,EAAEG,IAAM,KAAOH,EAAEG,EAAE,IAAM,GAAKH,EAAEG,EAAE,EAC3CA,IAAK,EACLF,EAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BnB,EAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BnB,EAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,IAC3BnB,EAAEiB,KAAKO,EAAEE,OAAO,GAAKP,IAEzB,GAAI,GAAMpB,EAAEU,OAASP,EAAI,CACrB,GAAIiB,IAAKpB,EAAEG,IAAM,KAAOH,EAAEG,EAAE,IAAM,EAClCF,GAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BnB,EAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BnB,EAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,IAC3BnB,EAAEiB,KAAK,SACJ,IAAI,GAAMlB,EAAEU,OAASP,EAAI,CAC5B,GAAIiB,GAAKpB,EAAEG,IAAM,EACjBF,GAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BnB,EAAEiB,KAAKO,EAAEE,OAAO,GAAMP,GAAK,KAC3BnB,EAAEiB,KAAK,MAEX,MAAOjB,GAAEsB,KAAK,KAEdK,EAAI,WAEJ,IAAK,GADD3B,MACKE,EAAE,EAAGA,EAAEsB,EAAEf,SAAUP,EACxBF,EAAEwB,EAAER,WAAWd,IAAMA,CAGzB,OADAF,GAAE,IAAIgB,WAAW,IAAM,EAChBhB,KAEP4B,EAAc,SAAS/B,GAIvB,IAHA,GAAIK,GAAI,EACJH,KACAJ,EAAI,EAAKE,EAAEY,OAAS,EACjB,EAAId,KAAK,CACZ,GAAIwB,IAAKQ,EAAE9B,EAAEmB,WAAWd,KAAO,KAAOyB,EAAE9B,EAAEmB,WAAWd,EAAE,KAAO,KAAOyB,EAAE9B,EAAEmB,WAAWd,EAAE,KAAO,GAAKyB,EAAE9B,EAAEmB,WAAWd,EAAE,GACnHH,GAAEkB,KAAK,IAAOE,GAAK,IACnBpB,EAAEkB,KAAK,IAAOE,GAAK,GACnBpB,EAAEkB,KAAK,IAAME,GACbjB,GAAK,EAUT,MARIH,KACI,KAAOF,EAAE6B,OAAOxB,EAAE,IAClBH,EAAE8B,MACF9B,EAAE8B,OACK,KAAOhC,EAAE6B,OAAOxB,EAAE,IACzBH,EAAE8B,OAGH9B,GAEP+B,IACJA,GAAMhB,OAAS,SAASjB,GAEpB,IAAK,GADDE,MACKG,EAAI,EAAGA,EAAEL,EAAEY,SAAUP,EAC1BH,EAAEkB,KAAKpB,EAAEmB,WAAWd,GAExB,OAAOH,IAEX+B,EAAMZ,OAAS,SAASnB,GACpB,IAAK,GAAIG,GAAI,EAAGA,EAAEL,EAAEY,SAAUP,EAC1BF,EAAEE,GAAKkB,OAAOC,aAAarB,EAAEE,GAEjC,OAAOF,GAAEsB,KAAK,KAElBC,EAAOK,YAAc,SAAS/B,GAC1B,GAAIE,GAAI6B,EAAY/B,EACpB,OAAO,IAAIkC,YAAWhC,IAE1BwB,EAAOS,YAAc,SAASnC,GAC1B,GAAIE,GAAI+B,EAAMhB,OAAOjB,EACrB,OAAO4B,GAAY1B,IAEvBwB,EAAOU,YAAc,SAASpC,GAC1B,GAAIG,GAAI4B,EAAY/B,EACpB,OAAOiC,GAAMZ,OAAOlB,IAExBuB,EAAOT,OAAS,SAASjB,GACrB,GAAIE,GAAIc,EAAKC,OAAOjB,EACpB,OAAO4B,GAAY1B,IAEvBwB,EAAOL,OAAS,SAASrB,GACrB,GAAIE,GAAI6B,EAAY/B,EACpB,OAAOgB,GAAKK,OAAOnB,KAExB,wEAYoB,KAAZQ,IACPA,EAAQW,OAASK,EAAOL,OACxBX,EAAQqB,YAAcL,EAAOK;AC7JjC,GAAAM,KAEAA,GAAAC,YAAA,SAAAC,GACA,MAAA,IAAAC,GAAAD,GAAAE,SAGAJ,EAAAK,gBAAA,SAAAC,EAAAC,GACA,gBAAAD,IAAA,kBAAAC,KAGAC,EAAAC,UAAAC,eAAAJ,GAAAC,IAGAP,EAAAW,WAAA,WACA,MAAA,IAAAR,IAIAH,EAAAY,UAAA,SAAAN,EAAAO,EAAAC,GACA,GAAAC,GAAAP,EAAAQ,OAAAV,EAIA,OAHAO,IACAA,EAAAI,OAAAF,EAAAD,GAEAC,GAIAf,EAAAkB,cAAA,SAAAZ,EAAAO,EAAAC,GACA,GAAAC,GAAAf,EAAAY,UAAAN,EAAAO,EAAAC,EAGA,OAFAC,GAAAI,QAAA,EACAJ,EAAAK,MAAA,EACAL,GAGAf,EAAAqB,SACArB,EAAAqB,MAAAC,iBAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAD,GAAA,OACA,IAAA,mBAAAE,aACA,MAAA,IAAAA,aAAAD,GAAAzC,OAAAuC,EAEA,IAAAzD,MACAE,EAAA,CAEA,IAAA,UAAAyD,EAKA,KAAAzD,EAAAuD,EAAAI,YAAA,CACA,GAAA9C,GAAA0C,EAAAK,SAAA5D,IACAa,GAAA,MAEAA,EAAA,KAEAA,GAAA,GAAAA,IAAA,EACAA,GAAA,GAAA0C,EAAAK,SAAA5D,MACAa,EAAA,KAEAA,GAAA,GAAAA,IAAA,GACAA,IAAA,GAAA0C,EAAAK,SAAA5D,OAAA,EACAa,GAAA,GAAA0C,EAAAK,SAAA5D,OAGAa,GAAA,EAAAA,IAAA,GACAA,IAAA,GAAA0C,EAAAK,SAAA5D,OAAA,GACAa,IAAA,GAAA0C,EAAAK,SAAA5D,OAAA,EACAa,GAAA,GAAA0C,EAAAK,SAAA5D,OAEAF,EAAAiB,KAAAG,OAAAC,aAAAN,QAGA,MAAAb,EAAAuD,EAAAI,YACA7D,EAAAiB,KAAAG,OAAAC,aAAAoC,EAAAK,SAAA5D,MAGA,OAAAF,GAAAsB,KAAA,KAGAY,EAAAqB,MAAAQ,gBAAA,SAAAC,GAEA,GAAAjE,GAAAG,CACA,IAAA,mBAAA+D,aACAlE,GAAA,GAAAkE,cAAAnD,OAAAkD,OAGA,KADAjE,KACAG,EAAA,EAAAA,EAAA8D,EAAAvD,SAAAP,EAAA,CACA,GAAAa,GAAAiD,EAAAhD,WAAAd,EACAa,GAAA,IACAhB,EAAAkB,KAAAF,GACAA,EAAA,MACAhB,EAAAkB,KAAA,IAAAF,GAAA,GACAhB,EAAAkB,KAAA,IAAA,GAAAF,IACAA,EAAA,OACAhB,EAAAkB,KAAA,IAAAF,GAAA,IACAhB,EAAAkB,KAAA,IAAA,GAAAF,GAAA,GACAhB,EAAAkB,KAAA,IAAA,GAAAF,KAEAhB,EAAAkB,KAAA,IAAAF,GAAA,IACAhB,EAAAkB,KAAA,IAAA,GAAAF,GAAA,IACAhB,EAAAkB,KAAA,IAAA,GAAAF,GAAA,GACAhB,EAAAkB,KAAA,IAAA,GAAAF,IAIA,MAAAhB,IAQAmC,EAAAqB,MAAAW,UAAA,SAAAnB,EAAAoB,EAAAnB,GAMA,GALAmB,EAAAC,QAAArB,EAAAsB,QAAAC,OACAH,EAAAI,MAAAxB,EAAAwB,MAAAxB,EAAAwB,MAAAxB,EACAoB,EAAAK,KAAAzB,EAAAyB,KACAL,EAAAM,QAAA1B,GAEA,IAAAC,EAAA,CAMA,OAAA0B,KAAA1B,GAAA,OAAAA,EAEA,WADAD,GAAA4B,MAAA1D,KAAAkD,EAIA,IACA3B,GADAoC,GAAA,CAGA,IAAA,gBAAA5B,GACA4B,EAAA5B,MACA,CACA,GAAA,gBAAAA,GACAR,EAAAQ,MACA,CAAA,GAAA,gBAAAA,KAAAA,EAAAR,KAIA,WADAO,GAAA4B,MAAA1D,KAAAkD,EAFA3B,GAAAQ,EAAAR,KAMA,IAAA,GAAAtC,GAAA,EAAAA,EAAA6C,EAAA4B,MAAAlE,OAAAP,IACA,GAAAsC,IAAAO,EAAA4B,MAAAzE,GAAAsC,KAAA,CACAoC,EAAA1E,EAAA,CACA,QAIA6C,EAAA4B,MAAAE,OAAAD,EAAA,EAAAT,SAGA,KAAA5D,IACAA,EAAA4B,YAAAD,EAAAC,YACA5B,EAAAgC,gBAAAL,EAAAK,gBACAhC,EAAAsC,WAAAX,EAAAW,WACAtC,EAAAuC,UAAAZ,EAAAY,UACAvC,EAAA6C,cAAAlB,EAAAkB,cACA7C,EAAAgD,MAAArB,EAAAqB,OAGArB,EAAA4C,OAAA,SAAAC,GACAC,KAAAV,WAAA,KAAAS,EAAA,EAAAA,EAGA,IAAA1C,GAAA,SAAAD,GACA4C,KAAAX,QAAA,GAAAnC,GAAA4C,OACAE,KAAAL,SACAvC,IACA4C,KAAAR,KAAA,GAAAS,UAAA7C,IAIAC,GAAAM,UAAAuC,MAAA,SAAA1C,GACA,GAAA2C,GAAAH,KAAAI,SAAA5C,GAAA,EACA,OAAA2C,GAAA1E,OAAA0E,EAAA,GAAA,MAGA9C,EAAAM,UAAAyC,SAAA,SAAA5C,EAAA6C,GACA,GAAAF,KAEA,OADA9C,GAAAiD,OAAA9E,KAAAwE,KAAAxC,EAAA2C,EAAAE,GACAF,GAGA9C,EAAAM,UAAAL,MAAA,WAGA,IAFA0C,KAAAX,QAAAC,OAAA,EACAU,KAAAL,SACAK,KAAAX,QAAAC,OAAAU,KAAAR,KAAAX,YAAA,CACA,GAAAM,GAAAzB,EAAAJ,MAAA0C,KAGA,QAAA,KAAAb,EAAA3B,KAAA,KAEAwC,MAAAL,MAAA1D,KAAAkD,GAEA,MAAAa,OAGA3C,EAAAiD,OAAA,SAAA9C,EAAA2C,EAAAE,GACAL,KAAAxC,MAAAwC,KAAAxC,MAAAA,GAAA2C,EAAAlE,KAAA+D,KACA,KAAA,GAAAb,KAAAa,MAAAL,MAAA,CACA,GAAAQ,EAAA1E,QAAA4E,EAAA,MACAhD,GAAAiD,OAAA9E,KAAAwE,KAAAL,MAAAR,GAAA3B,EAAA2C,EAAAE,KAIAhD,EAAAM,UAAA4C,MAAA,WAEA,GACArF,GADAO,EAAA,CAGA,KAAAP,EAAA,EAAAA,EAAA8E,KAAAL,MAAAlE,OAAAP,IACAO,GAAAuE,KAAAL,MAAAzE,GAAAsF,WAAA,EAGA,IAAAC,GAAA,GAAA1D,YAAAtB,EAKA,KAJAuE,KAAAU,MAAA,GAAAT,UAAAQ,EAAAE,QACAX,KAAAS,MAAAA,EACAT,KAAAX,QAAAC,OAAA,EAEApE,EAAA,EAAAA,EAAA8E,KAAAL,MAAAlE,OAAAP,IACA8E,KAAAL,MAAAzE,GAAAqF,OAGA,OAAAE,GAAAE,QAGAtD,EAAAM,UAAAQ,OAAA,SAAAgB,EAAAnB,GACAd,EAAAqB,MAAAW,UAAAc,KAAAb,EAAAnB,GAEA,IAAAN,GAAA,WACAsC,KAAAX,QAAA,GAAAnC,GAAA4C,OAGApC,GAAAJ,MAAA,SAAAS,GACA,GAAAE,GAAA,GAAAP,EAOA,OANAO,GAAAmB,QAAArB,EAAAsB,QAAAC,OACArB,EAAAsB,MAAAxB,EAAAwB,MAAAxB,EAAAwB,MAAAxB,EACAE,EAAAuB,KAAAzB,EAAAyB,KACAvB,EAAAwB,QAAA1B,EACAE,EAAA2C,YACA7C,EAAAsB,QAAAC,OAAArB,EAAAuB,KAAAqB,WAAA5C,EAAAuB,KAAAX,WACAZ,GAGAP,EAAAQ,OAAA,SAAAV,GACA,GAAAS,GAAA,GAAAP,EAGA,OAFAO,GAAAT,KAAAA,EACAS,EAAA0B,SACA1B,GAGAP,EAAAC,UAAAmD,gBAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,QAEApD,EAAAC,UAAAC,kBAKAF,EAAAC,UAAAoD,WAAA,SAAAC,EAAAxD,EAAAyD,GACAjB,KAAAkB,SACAlB,KAAAgB,GAAAhB,KAAAmB,WAAA3D,EAAAyD,GAGAjB,KAAAoB,YAAA5D,EAAAyD,EAAAjB,KAAAgB,KAIAtD,EAAAC,UAAA0D,gBAAA,SAAAL,EAAAvF,EAAA+B,EAAAyD,GACA,GAAA/F,EACA,IAAA8E,KAAAkB,SAEA,IADAlB,KAAAgB,MACA9F,EAAA,EAAAA,EAAAO,EAAAP,IACA8E,KAAAgB,GAAA9F,GAAA8E,KAAAmB,WAAA3D,EAAAyD,OAIA,KAAA/F,EAAA,EAAAA,EAAA8E,KAAAgB,GAAAvF,OAAAP,IACA8E,KAAAoB,YAAA5D,EAAAyD,EAAAjB,KAAAgB,GAAA9F,KAKAwC,EAAAC,UAAA2D,aAAA,WACAtB,KAAAe,WAAA,UAAA,OAAA,GACAf,KAAAe,WAAA,QAAA,OAAA,KAGArD,EAAAC,UAAA4D,aAAA,SAAAP,EAAAvF,EAAA+F,GACA,GAAAtG,EACA,IAAA8E,KAAAkB,SAEA,IADAlB,KAAAgB,MACA9F,EAAA,EAAAA,EAAAO,EAAAP,IACA8E,KAAAgB,GAAA/E,SACAuF,EAAAhG,KAAAwE,KAAAA,KAAAgB,GAAA9F,QAIA,KAAAA,EAAA,EAAAA,EAAAO,EAAAP,IACAsG,EAAAhG,KAAAwE,KAAAA,KAAAgB,GAAA9F,KAKAwC,EAAAC,UAAA8D,gBAAA,SAAAC,EAAAV,EAAAvF,EAAA+F,GACA,GAAAtG,EACA,IAAA8E,KAAAkB,SAEA,IADAQ,EAAAV,MACA9F,EAAA,EAAAA,EAAAO,EAAAP,IACAwG,EAAAV,GAAA/E,SACAuF,EAAAhG,KAAAwE,KAAA0B,EAAAV,GAAA9F,QAIA,KAAAA,EAAA,EAAAA,EAAAO,EAAAP,IACAsG,EAAAhG,KAAAwE,KAAA0B,EAAAV,GAAA9F,KAKAwC,EAAAC,UAAAgE,gBAAA,SAAAD,EAAAV,EAAAxD,EAAAyD,GACAjB,KAAAkB,SACAQ,EAAAV,GAAAhB,KAAAmB,WAAA3D,EAAAyD,GAGAjB,KAAAoB,YAAA5D,EAAAyD,EAAAS,EAAAV,KAIAtD,EAAAC,UAAAiE,cAAA,SAAAZ,EAAAvF,GACA,GAAAP,EACA,IAAA8E,KAAAkB,SAEA,IADAlB,KAAAgB,MACA9F,EAAA,EAAAA,EAAAO,EAAAP,IACA8E,KAAAgB,GAAA/E,KAAAyB,EAAAJ,MAAA0C,WAIA,KAAA9E,EAAA,EAAAA,EAAAO,EAAAP,IACA8E,KAAAU,MACAV,KAAAgB,GAAA9F,GAAAqF,QAEAP,KAAAiB,MAAAjB,KAAAgB,GAAA9F,GAAAsF,aASA9C,EAAAC,UAAAwD,WAAA,SAAA3D,EAAAyD,GACA,OAAAzD,GACA,IAAA,OACA,MAAAwC,MAAA6B,UAAAZ,EACA,KAAA,MACA,MAAAjB,MAAA8B,SAAAb,EACA,KAAA,WACA,MAAAjB,MAAA+B,cAAAd,EACA,KAAA,SACA,OAAA,IAAAA,EAAAjB,KAAAgC,wBAAAhC,KAAAiC,YAAAhB,EACA,KAAA,OACA,MAAAjB,MAAAkC,UAAAjB,EACA,KAAA,OACA,MAAAjB,MAAAmC,iBACA,SACA,OAAA,IAIAzE,EAAAC,UAAAmE,SAAA,SAAAb,GACA,GAAAd,GAAA,KACAb,EAAAU,KAAAX,QAAAC,OAAAU,KAAAR,KAAAqB,UACA,QAAAI,GACA,IAAA,GACAd,EAAAH,KAAAR,KAAA4C,QAAA9C,EACA,MACA,KAAA,IACAa,EAAAH,KAAAR,KAAA6C,SAAA/C,EACA,MACA,KAAA,IACAa,EAAAH,KAAAR,KAAA8C,SAAAhD,EACA,MACA,KAAA,IAGA,GAAAiD,GAAAvC,KAAAR,KAAA8C,SAAAhD,GACAkD,EAAAxC,KAAAR,KAAA8C,SAAAhD,EAAA,EACAa,GAAAoC,EAAAE,KAAAC,IAAA,EAAA,IAAAF,EAIA,MADAxC,MAAAX,QAAAC,QAAA2B,GAAA,EACAd,GAGAzC,EAAAC,UAAAkE,UAAA,SAAAZ,GACA,GAEAsB,GAAAC,EAFArC,EAAA,KACAb,EAAAU,KAAAX,QAAAC,OAAAU,KAAAR,KAAAqB,UAEA,QAAAI,GACA,IAAA,GACAd,EAAAH,KAAAR,KAAAV,SAAAQ,EACA,MACA,KAAA,IACAa,EAAAH,KAAAR,KAAAmD,UAAArD,EACA,MACA,KAAA,IACAiD,EAAAvC,KAAAR,KAAAmD,UAAArD,GACAkD,EAAAxC,KAAAR,KAAAV,SAAAQ,EAAA,GACAa,GAAAoC,GAAA,GAAAC,CACA,MACA,KAAA,IACArC,EAAAH,KAAAR,KAAAoD,UAAAtD,EACA,MACA,KAAA,IAGAiD,EAAAvC,KAAAR,KAAAoD,UAAAtD,GACAkD,EAAAxC,KAAAR,KAAAoD,UAAAtD,EAAA,GACAa,EAAAoC,EAAAE,KAAAC,IAAA,EAAA,IAAAF,EAIA,MADAxC,MAAAX,QAAAC,QAAA2B,GAAA,EACAd,GAGAzC,EAAAC,UAAAsE,YAAA,SAAAxG,GAEA,IAAA,GADAoH,GAAA,GACA9G,EAAA,EAAAA,EAAAN,EAAAM,IAAA,CACA,GAAA+G,GAAA9C,KAAA6B,UAAA,EACAgB,IAAAzG,OAAAC,aAAAyG,GAEA,MAAAD,IAGAnF,EAAAC,UAAAoE,cAAA,SAAAd,GAGA,MAFAjB,MAAA6B,UAAAZ,EAAA,GACAjB,KAAA6B,UAAAZ,EAAA,GACAwB,KAAAC,IAAA,EAAAzB,EAAA,IAGAvD,EAAAC,UAAAqE,sBAAA,WAEA,IADA,GAAAa,GAAA,GACA7C,KAAAX,QAAAC,OAAAU,KAAAZ,QAAAY,KAAAR,KAAAX,YAAA,CACA,GAAAiE,GAAA9C,KAAA6B,UAAA,EACA,IAAA,IAAAiB,EAAA,KACAD,IAAAzG,OAAAC,aAAAyG,GAEA,MAAAD,IAGAnF,EAAAC,UAAAuE,UAAA,SAAAjB,GACA,GAAAxF,GAAAwF,EAAA,EAAAA,EAAAjB,KAAAR,KAAAX,YAAAmB,KAAAX,QAAAC,OAAAU,KAAAZ,SACA2D,EAAA,GAAA9C,UAAAD,KAAAR,KAAAmB,OAAAX,KAAAX,QAAAC,OAAA7D,EAEA,OADAuE,MAAAX,QAAAC,QAAA7D,EACAsH,GAGArF,EAAAC,UAAAwE,gBAAA,WACA,GAAAY,GAAA/C,KAAAkC,WACA,OAAAhF,GAAAqB,MAAAC,iBAAAuE,IAGArF,EAAAC,UAAAiD,UAAA,WAKA,GAJAZ,KAAAkB,UAAA,EACAlB,KAAAX,QAAAC,OAAAU,KAAAZ,QAGAY,KAAAZ,QAAA,EAAAY,KAAAR,KAAAmB,OAAA9B,WAEA,YADAmB,KAAAT,MAAAyD,aAAA,EAUA,QANAhD,KAAAe,WAAA,OAAA,OAAA,IACAf,KAAAe,WAAA,OAAA,SAAA,GAEA,IAAAf,KAAAiB,MAAAjB,KAAAe,WAAA,YAAA,OAAA,IACA,SAAAf,KAAAxC,MAAAwC,KAAAqB,gBAAA,WAAA,GAAA,OAAA,GAEArB,KAAAiB,MACA,IAAA,GACAjB,KAAAR,KAAA,GAAAS,UAAAD,KAAAR,KAAAmB,OAAAX,KAAAZ,QAAAY,KAAAR,KAAAX,WAAAmB,KAAAX,QAAAC,OAAA,EACA,MACA,KAAA,GACAU,KAAAZ,QAAAY,KAAAiB,KAAAjB,KAAAR,KAAAmB,OAAA9B,YACAmB,KAAAgD,aAAA,EACAhD,KAAAT,MAAAyD,aAAA,GAEAhD,KAAAR,KAAA,GAAAS,UAAAD,KAAAR,KAAAmB,OAAAX,KAAAZ,QAAAY,KAAAiD,UAEA,MACA,SACAjD,KAAAZ,QAAAY,KAAAiB,KAAAjB,KAAAR,KAAAmB,OAAA9B,YACAmB,KAAAgD,aAAA,EACAhD,KAAAT,MAAAyD,aAAA,GAEAhD,KAAAR,KAAA,GAAAS,UAAAD,KAAAR,KAAAmB,OAAAX,KAAAZ,QAAAY,KAAAiB,MAKAjB,KAAAgD,cACAhD,KAAApC,eAAAoC,KAAAxC,OACAwC,KAAApC,eAAAoC,KAAAxC,MAAAhC,KAAAwE,OAEA,IAAAA,KAAAc,eAAAoC,QAAAlD,KAAAxC,MACAwC,KAAAmD,qBAGAnD,KAAAoD,MAAApD,KAAAkC,cAKAxE,EAAAC,UAAA0F,cAAA,WACArD,KAAA3B,QAAA2B,KAAA6B,UAAA,GACA7B,KAAA1B,MAAA0B,KAAA6B,UAAA,KAGAnE,EAAAC,UAAAwF,mBAAA,WAEA,IADAnD,KAAAL,SACAK,KAAAX,QAAAC,OAAAU,KAAAR,KAAAqB,WAAAb,KAAAR,KAAAX,YACAmB,KAAAL,MAAA1D,KAAAyB,EAAAJ,MAAA0C,QAOAtC,EAAAC,UAAAQ,OAAA,SAAAgB,EAAAnB,GACAd,EAAAqB,MAAAW,UAAAc,KAAAb,EAAAnB,IAGAN,EAAAC,UAAA6C,UAAA,WAeA,GAdAR,KAAAkB,UAAA,EACAlB,KAAAU,MAAA,KAEAV,KAAAiB,KAAA,EACAjB,KAAAe,WAAA,OAAA,OAAA,IACAf,KAAAe,WAAA,OAAA,SAAA,GAEA,IAAAf,KAAAiB,MAAAjB,KAAAe,WAAA,YAAA,OAAA,IACA,SAAAf,KAAAxC,MAAAwC,KAAAqB,gBAAA,WAAA,GAAA,OAAA,GAEArB,KAAApC,eAAAoC,KAAAxC,OACAwC,KAAApC,eAAAoC,KAAAxC,MAAAhC,KAAAwE,OAGA,IAAAA,KAAAc,eAAAoC,QAAAlD,KAAAxC,MACA,IAAA,GAAAtC,GAAA,EAAAA,EAAA8E,KAAAL,MAAAlE,OAAAP,IACA8E,KAAAiB,MAAAjB,KAAAL,MAAAzE,GAAAsF,WAQA,OAJAR,MAAAoD,OACApD,KAAAsD,WAAAtD,KAAAoD,OAGApD,KAAAiB,MAGAvD,EAAAC,UAAA4C,MAAA,WAIA,OAHAP,KAAAkB,UAAA,EACAlB,KAAAX,QAAAC,OAAAU,KAAAP,QAAAJ,QAAAC,OAEAU,KAAAiB,MACA,IAAA,GACAjB,KAAAU,MAAA,GAAAT,UAAAD,KAAAP,QAAAiB,MAAAC,OAAAX,KAAAX,QAAAC,OAAAU,KAAAjC,OAAA2C,MAAA7B,WAAAmB,KAAAX,QAAAC,OACA,MACA,KAAA,GACAU,KAAAU,MAAA,GAAAT,UAAAD,KAAAP,QAAAiB,MAAAC,OAAAX,KAAAX,QAAAC,OAAAU,KAAAiD,UACA,MACA,SACAjD,KAAAU,MAAA,GAAAT,UAAAD,KAAAP,QAAAiB,MAAAC,OAAAX,KAAAX,QAAAC,OAAAU,KAAAiB,MAaA,GAVAjB,KAAAe,WAAA,OAAA,OAAA,IACAf,KAAAe,WAAA,OAAA,SAAA,GAEA,IAAAf,KAAAiB,MAAAjB,KAAAe,WAAA,YAAA,OAAA,IACA,SAAAf,KAAAxC,MAAAwC,KAAAqB,gBAAA,WAAA,GAAA,OAAA,GAEArB,KAAApC,eAAAoC,KAAAxC,OACAwC,KAAApC,eAAAoC,KAAAxC,MAAAhC,KAAAwE,OAGA,IAAAA,KAAAc,eAAAoC,QAAAlD,KAAAxC,MACA,IAAA,GAAAtC,GAAA,EAAAA,EAAA8E,KAAAL,MAAAlE,OAAAP,IACA8E,KAAAL,MAAAzE,GAAAqF,OAUA,OANAP,MAAAoD,OACApD,KAAAsD,WAAAtD,KAAAoD,OAGApD,KAAAP,QAAAJ,QAAAC,QAAAU,KAAAiB,KAEAjB,KAAAiB,MAGAvD,EAAAC,UAAA4F,UAAA,SAAAtC,EAAAuC,GACA,GAAAxD,KAAAU,MAAA,CACA,GAAApB,GAAAU,KAAAX,QAAAC,OAAAU,KAAAU,MAAAG,UACA,QAAAI,GACA,IAAA,GACAjB,KAAAU,MAAA+C,QAAAnE,EAAAkE,EACA,MACA,KAAA,IACAxD,KAAAU,MAAAgD,SAAApE,EAAAkE,EACA,MACA,KAAA,IACAxD,KAAAU,MAAAiD,SAAArE,EAAAkE,EACA,MACA,KAAA,IAGA,GAAAjB,GAAAE,KAAAmB,MAAAJ,EAAAf,KAAAC,IAAA,EAAA,KACAF,EAAAgB,EAAAjB,EAAAE,KAAAC,IAAA,EAAA,GACA1C,MAAAU,MAAAmD,UAAAvE,EAAAiD,GACAvC,KAAAU,MAAAmD,UAAAvE,EAAA,EAAAkD,GAGAxC,KAAAX,QAAAC,QAAA2B,GAAA,MAEAjB,MAAAiB,MAAAA,GAAA,GAIAvD,EAAAC,UAAAmG,WAAA,SAAA7C,EAAAuC,GAEA,GAAAxD,KAAAU,MAAA,CACA,GACA6B,GAAAC,EADAlD,EAAAU,KAAAX,QAAAC,OAAAU,KAAAU,MAAAG,UAEA,QAAAI,GACA,IAAA,GACAjB,KAAAU,MAAAqD,SAAAzE,EAAAkE,EACA,MACA,KAAA,IACAxD,KAAAU,MAAAsD,UAAA1E,EAAAkE,EACA,MACA,KAAA,IACAjB,GAAA,SAAAiB,IAAA,EACAhB,EAAA,IAAAgB,EACAxD,KAAAU,MAAAsD,UAAA1E,EAAAiD,GACAvC,KAAAU,MAAAqD,SAAAzE,EAAA,EAAAkD,EACA,MACA,KAAA,IACAxC,KAAAU,MAAAmD,UAAAvE,EAAAkE,EACA,MACA,KAAA,IAGAjB,EAAAE,KAAAmB,MAAAJ,EAAAf,KAAAC,IAAA,EAAA,KACAF,EAAAgB,EAAAjB,EAAAE,KAAAC,IAAA,EAAA,IACA1C,KAAAU,MAAAmD,UAAAvE,EAAAiD,GACAvC,KAAAU,MAAAmD,UAAAvE,EAAA,EAAAkD,GAGAxC,KAAAX,QAAAC,QAAA2B,GAAA,MAEAjB,MAAAiB,MAAAA,GAAA,GAIAvD,EAAAC,UAAAsG,aAAA,SAAAhD,EAAA4B,GACA,IAAA,GAAA9G,GAAA,EAAAA,EAAAkF,EAAAlF,IACAiE,KAAA8D,WAAA,EAAAjB,EAAA7G,WAAAD,KAIA2B,EAAAC,UAAAuG,uBAAA,SAAArB,GACA,GAAA,IAAAA,EAAApH,OAAA,CAGA,IAAA,GAAAM,GAAA,EAAAA,EAAA8G,EAAApH,OAAAM,IACAiE,KAAA8D,WAAA,EAAAjB,EAAA7G,WAAAD,GAEAiE,MAAA8D,WAAA,EAAA,KAGApG,EAAAC,UAAAwG,eAAA,SAAAlD,EAAAuC,GACA,GAAAY,GAAA3B,KAAAmB,MAAAJ,GACAa,GAAAb,EAAAY,GAAA3B,KAAAC,IAAA,EAAAzB,EAAA,EACAjB,MAAA8D,WAAA7C,EAAA,EAAAmD,GACApE,KAAA8D,WAAA7C,EAAA,EAAAoD,IAGA3G,EAAAC,UAAA2F,WAAA,SAAAP,GACA,GAAA7H,EACA,IAAA6H,YAAAuB,OACA,GAAAvH,WAAAwH,KAOAxB,EAAA,GAAA9C,UAAAlD,WAAAwH,KAAAxB,GAAApC,YAPA,CACA,GAAA6D,GAAA,GAAAzH,YAAAgG,EAAAtH,OACA,KAAAP,EAAA,EAAAA,EAAA6H,EAAAtH,OAAAP,IACAsJ,EAAAtJ,GAAA6H,EAAA7H,EAEA6H,GAAA,GAAA9C,UAAAuE,EAAA7D,QAQA,GAHAoC,YAAAhG,cACAgG,EAAA,GAAA9C,UAAA8C,EAAApC,SAEAX,KAAAU,MAAA,CACA,GAAApB,GAAAU,KAAAX,QAAAC,OAAAU,KAAAU,MAAAG,UACA,KAAA3F,EAAA,EAAAA,EAAA6H,EAAAlE,WAAA3D,IACA8E,KAAAU,MAAAqD,SAAAzE,EAAApE,EAAA6H,EAAAjE,SAAA5D,GAEA8E,MAAAX,QAAAC,QAAAyD,EAAAlE,eAEAmB,MAAAiB,MAAA8B,EAAAlE,YAIAnB,EAAAC,UAAA8G,iBAAA,SAAAzF,GACA,GAAAjE,GAAAmC,EAAAqB,MAAAQ,gBAAAC,EACA,IAAAgB,KAAAU,MAEA,IAAA,GADAjC,GAAA,GAAAwB,UAAAD,KAAAU,MAAAC,OAAAX,KAAAX,QAAAC,OAAAvE,EAAAU,QACAP,EAAA,EAAAA,EAAAH,EAAAU,OAAAP,IACAuD,EAAAsF,SAAA7I,EAAAH,EAAAG,QAGA8E,MAAAiB,MAAAlG,EAAAU,QAIAiC,EAAAC,UAAAyD,YAAA,SAAA5D,EAAAyD,EAAAuC,GACA,OAAAhG,GACA,IAAA,OACAwC,KAAA8D,WAAA7C,EAAAuC,EACA,MACA,KAAA,MACAxD,KAAAuD,UAAAtC,EAAAuC,EACA,MACA,KAAA,WACAxD,KAAAmE,eAAAlD,EAAAuC,EACA,MACA,KAAA,UACA,GAAAvC,EACAjB,KAAAkE,uBAAAV,GAEAxD,KAAAiE,aAAAhD,EAAAuC,EAEA,MACA,KAAA,OACAxD,KAAAsD,WAAAE,EACA,MACA,KAAA,OACAxD,KAAAyE,iBAAAjB,KAQA9F,EAAAC,UAAAC,eAAA,KAAAF,EAAAC,UAAAC,eAAA,KAAA,WAEAoC,KAAAqB,gBAAA,YAAA,EAAA,OAAA,GACArB,KAAAe,WAAA,uBAAA,OAAA,IAEAf,KAAAe,WAAA,eAAA,OAAA,IACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAqB,gBAAA,eAAA,EAAA,OAAA,IACArB,KAAAe,WAAA,QAAA,OAAA,IACAf,KAAAe,WAAA,SAAA,OAAA,IACAf,KAAAe,WAAA,kBAAA,WAAA,IACAf,KAAAe,WAAA,iBAAA,WAAA,IACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAAqB,gBAAA,iBAAA,GAAA,OAAA,GACArB,KAAAe,WAAA,QAAA,OAAA,IACAf,KAAAe,WAAA,eAAA,MAAA,IAEAf,KAAAe,WAAA,SAAA,QAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAA4B,cAAA,UAAA5B,KAAA0E,cAIAhH,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAAuB,aAAA,UAAAvB,KAAA0E,YAAA,SAAAhD,GACA1B,KAAA2B,gBAAAD,EAAA,mBAAA,OAAA,IAAA1B,KAAA3B,QAAA,GAAA,IACA2B,KAAA2B,gBAAAD,EAAA,aAAA,MAAA,IAAA1B,KAAA3B,QAAA,GAAA,IACA2B,KAAA2B,gBAAAD,EAAA,qBAAA,MAAA,IACA1B,KAAA2B,gBAAAD,EAAA,sBAAA,MAAA,OAKAhE,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,gBAAA,UAAA,GACAf,KAAAe,WAAA,QAAA,UAAA,GACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAe,WAAA,0BAAA,OAAA,IACAf,KAAAe,WAAA,iBAAA,OAAA,IACAf,KAAAe,WAAA,KAAA,OAAA,IACAf,KAAAe,WAAA,eAAA,QAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAAF,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAe,WAAA,OAAA,QAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAe,WAAA,cAAA,OAAA,KAGArD,EAAAC,UAAAC,eAAA,KACAF,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAe,WAAA,cAAA,SAAA,GACAf,KAAAe,WAAA,gBAAA,OAAA,GACA,IAAA4D,IAAA,CACA3E,MAAAkB,WACAyD,GAAA3E,KAAAR,KAAAX,YAAAmB,KAAAX,QAAAC,OAAAU,KAAAR,KAAAqB,aAAA,GAEAb,KAAAqB,gBAAA,oBAAAsD,EAAA,SAAA,IAIAjH,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAAe,WAAA,eAAA,SAAA,GACAf,KAAAqB,gBAAA,WAAA,EAAA,OAAA,IACArB,KAAAe,WAAA,OAAA,UAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAe,WAAA,OAAA,QAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,gBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,oBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAe,WAAA,WAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAkB,UAAA,gBAAAlB,MAAA4E,WAEA5E,KAAA4E,SAAA5E,KAAA4E,SAAA5I,WAAA,GAAA,IAAA,GACAgE,KAAA4E,SAAA5I,WAAA,GAAA,IAAA,EACAgE,KAAA4E,SAAA5I,WAAA,GAAA,IAEAgE,KAAAe,WAAA,WAAA,OAAA,IACAf,KAAAkB,WACAlB,KAAA4E,SAAAxI,OAAAC,aAAA,IAAA2D,KAAA4E,UAAA,GAAA,IACA,IAAA5E,KAAA4E,UAAA,EAAA,IACA,IAAA,GAAA5E,KAAA4E,YAEA5E,KAAAe,WAAA,cAAA,OAAA,KAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,oBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,KAIAX,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,kBAAA,OAAA,KAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,YAAA,OAAA,KAKArD,EAAAC,UAAAC,eAAA,KAAAF,EAAAC,UAAAC,eAAA,KAAA,WAEAoC,KAAAqB,gBAAA,YAAA,EAAA,OAAA,GACArB,KAAAe,WAAA,uBAAA,OAAA,IAEAf,KAAAqB,gBAAA,YAAA,EAAA,OAAA,IACArB,KAAAe,WAAA,eAAA,OAAA,IACAf,KAAAe,WAAA,aAAA,OAAA,IACAf,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAe,WAAA,aAAA,WAAA,IAEAf,KAAAe,WAAA,OAAA,QAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,gBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,oBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAe,WAAA,WAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,OAAA,WAAA,IACAf,KAAAe,WAAA,SAAA,WAAA,IACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAqB,gBAAA,YAAA,EAAA,OAAA,IACArB,KAAAqB,gBAAA,SAAA,EAAA,WAAA,IACArB,KAAAqB,gBAAA,cAAA,EAAA,OAAA,IACArB,KAAAe,WAAA,gBAAA,OAAA,KAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAe,WAAA,WAAA,SAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eAEAtB,KAAAqB,gBAAA,WAAA,GAAA,OAAA,GACArB,KAAAe,WAAA,WAAA,OAAA,IACAf,KAAAqB,gBAAA,OAAArB,KAAA6E,SAAA,OAAA,IAGAnH,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eAEAtB,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAAe,WAAA,iBAAA,OAAA,IAEA,EAAAf,KAAA1B,OACA0B,KAAAe,WAAA,aAAA,UAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,cAEA,IAAAwD,IAAA,CACA9E,MAAAkB,WACA4D,EAAA9E,KAAAR,KAAAX,YAAAmB,KAAAX,QAAAC,OAAAU,KAAAR,KAAAqB,aAGAb,KAAAqB,gBAAA,0BAAAyD,EAAA,OAAA,IAIApH,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,eAAA,OAAA,IACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAe,WAAA,6BAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,eAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,WAAA,OAAA,IACAf,KAAAe,WAAA,kBAAA,OAAA,IACAf,KAAAuB,aAAA,aAAAvB,KAAA+E,gBAAA,SAAArD,GACA1B,KAAAkB,WACAQ,EAAAsD,WAAA,EAAAtD,EAAAuD,iBAAA,GACAvD,EAAAsD,WAAA,WAAAtD,EAAAwD,gBACAxD,EAAAyD,KAAA,EAAAzD,EAAA0D,kBAAA,GACA1D,EAAAyD,MAAA,EAAAzD,EAAA2D,WAAA,GACA3D,EAAAyD,KAAA,UAAAzD,EAAA4D,gBAEAtF,KAAA2B,gBAAAD,EAAA,YAAA,OAAA,IACA1B,KAAA2B,gBAAAD,EAAA,sBAAA,OAAA,IACA1B,KAAA2B,gBAAAD,EAAA,MAAA,OAAA,IACA1B,KAAAkB,WACAQ,EAAAuD,eAAAvD,EAAAsD,WAAA,GAAA,EACAtD,EAAAwD,gBAAA,WAAAxD,EAAAsD,UACAtD,EAAA0D,gBAAA1D,EAAAyD,KAAA,GAAA,EACAzD,EAAA2D,SAAA3D,EAAAyD,KAAA,GAAA,EACAzD,EAAA4D,eAAA,UAAA5D,EAAAyD,QAMAzH,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,UAAA,OAAA,IACAf,KAAAe,WAAA,WAAA,OAAA,KAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,mBAAA,OAAA,IACAf,KAAAuB,aAAA,cAAAvB,KAAAuF,iBAAA,SAAAC,GACAxF,KAAA2B,gBAAA6D,EAAA,eAAA,OAAA,IACAxF,KAAAyB,gBAAA+D,EAAA,SAAAA,EAAAC,aAAA,SAAAC,GACA1F,KAAA2B,gBAAA+D,EAAA,QAAA,OAAA,GACA1F,KAAA2B,gBAAA+D,EAAA,aAAA,OAAA,SAMAhI,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAA4B,cAAA,UAAA5B,KAAA0E,cAIAhH,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,cAAA,OAAA,IACAf,KAAAuB,aAAA,UAAAvB,KAAA0E,YAAA,SAAAhD,GACA1B,KAAA2B,gBAAAD,EAAA,eAAA,OAAA,IACA1B,KAAA2B,gBAAAD,EAAA,kBAAA,OAAA,IACA1B,KAAAyB,gBAAAC,EAAA,aAAAA,EAAAiE,gBAAA,SAAAC,GACA5F,KAAA2B,gBAAAiE,EAAA,iBAAA,OAAA,IAAA5F,KAAA3B,QAAA,GAAA,IACA2B,KAAA2B,gBAAAiE,EAAA,qBAAA,OAAA,GACA5F,KAAA2B,gBAAAiE,EAAA,cAAA,OAAA,GACA5F,KAAA2B,gBAAAiE,EAAA,4BAAA,OAAA,SAMAlI,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eAEAtB,KAAAe,WAAA,sBAAA,OAAA,IACAf,KAAAe,WAAA,kBAAA,OAAA,GACAf,KAAAqB,gBAAA,cAAA,GAAA,OAAA,IAIA3D,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,sBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,KAIAX,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,WAAA,OAAA,IACA,EAAAf,KAAA1B,OAAA0B,KAAAe,WAAA,mBAAA,OAAA,IACA,EAAAf,KAAA1B,OAAA0B,KAAAe,WAAA,4BAAA,OAAA,IACA,EAAAf,KAAA1B,OAAA0B,KAAAe,WAAA,0BAAA,OAAA,IACA,GAAAf,KAAA1B,OAAA0B,KAAAe,WAAA,sBAAA,OAAA,IACA,GAAAf,KAAA1B,OAAA0B,KAAAe,WAAA,uBAAA,OAAA,KAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,WAAA,OAAA,IACAf,KAAAkB,WACAlB,KAAA6F,SAAA,EACA7F,KAAA6F,WAAA,GAAA7F,KAAA8F,0BAAA,EACA9F,KAAA6F,WAAA,GAAA7F,KAAA+F,0BAAA,EACA/F,KAAA6F,UAAA,EAAA7F,KAAAgG,2BAEAhG,KAAAe,WAAA,WAAA,OAAA,IACAf,KAAAkB,WACAlB,KAAA8F,yBAAA,GAAA9F,KAAA6F,WAAA,EACA7F,KAAA+F,yBAAA,GAAA/F,KAAA6F,WAAA,EACA7F,KAAAgG,0BAAA,EAAAhG,KAAA6F,UAEA7F,KAAAe,WAAA,kBAAA,OAAA,IACAf,KAAAuB,aAAA,UAAAvB,KAAAiG,gBAAA,SAAAvE,GACA1B,KAAA2B,gBAAAD,EAAA,OAAA,OAAA,IAAA1B,KAAA3B,QAAA,GAAA,IACA2B,KAAA2B,gBAAAD,EAAA,cAAA,OAAA,IAAA1B,KAAA3B,QAAA,GAAA,IACA2B,KAAA2B,gBAAAD,EAAA,cAAA,OAAA,GAAA1B,KAAA8F,wBAAA,IACA9F,KAAA2B,gBAAAD,EAAA,cAAA,OAAA,GAAA1B,KAAA+F,wBAAA,IACA/F,KAAA2B,gBAAAD,EAAA,gBAAA,OAAA,GAAA1B,KAAAgG,0BAAA,OAKAtI,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,gBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,oBAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAe,WAAA,WAAA,OAAA,IACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAe,WAAA,WAAA,OAAA,GAAAf,KAAA3B,QAAA,GAAA,IACA2B,KAAAqB,gBAAA,YAAA,EAAA,OAAA,IACArB,KAAAe,WAAA,QAAA,OAAA,IACAf,KAAAe,WAAA,kBAAA,OAAA,IACAf,KAAAe,WAAA,SAAA,WAAA,IACAf,KAAAe,WAAA,YAAA,OAAA,IACAf,KAAAqB,gBAAA,SAAA,EAAA,WAAA,IACArB,KAAAe,WAAA,QAAA,WAAA,IACAf,KAAAe,WAAA,SAAA,WAAA,KAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,WAAA,OAAA,IACAf,KAAAe,WAAA,mCAAA,OAAA,IACAf,KAAAe,WAAA,0BAAA,OAAA,IACAf,KAAAe,WAAA,sBAAA,OAAA,IACAf,KAAAe,WAAA,uBAAA,OAAA,KAMArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,eAAA,OAAA,IACA,EAAAf,KAAA1B,OAAA0B,KAAAe,WAAA,cAAA,MAAA,IACA,EAAAf,KAAA1B,OAAA0B,KAAAe,WAAA,qBAAA,OAAA,IACAf,KAAAuB,aAAA,UAAAvB,KAAA8E,aAAA,SAAAoB,GACA,IAAAlG,KAAA1B,OAAA0B,KAAA2B,gBAAAuE,EAAA,kBAAA,OAAA,IACA,IAAAlG,KAAA1B,OAAA0B,KAAA2B,gBAAAuE,EAAA,cAAA,OAAA,IACA,KAAAlG,KAAA1B,OAAA0B,KAAA2B,gBAAAuE,EAAA,eAAA,OAAA,IACA,KAAAlG,KAAA1B,OAAA0B,KAAA2B,gBAAAuE,EAAA,iCAAA,IAAAlG,KAAA3B,QAAA,MAAA,OAAA,OAKAX,EAAAC,UAAAC,eAAA,QAAAF,EAAAC,UAAAC,eAAA,QAAA,WACAoC,KAAAsB,eACA,SAAAtB,KAAAxC,MACAwC,KAAAe,WAAA,OAAA,UAAA,GAEAf,KAAAe,WAAA,WAAA,UAAA,IAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAe,WAAA,eAAA,SAIArD,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAsB,eACAtB,KAAAe,WAAA,eAAA,OAAA,IACAf,KAAAqB,gBAAA,UAAA,EAAA,OAAA,KAIA3D,EAAAC,UAAAC,eAAA,KAAA,WACAoC,KAAAe,WAAA,SAAA,SAIArD,EAAAC,UAAAC,eAAA,KAAA,qGC3lCA,QAASuI,KAWL,QAASC,KACLC,GAAsB,EACtBC,GAAmB,EACnBC,GAAiB,EACjBC,GAAY,GAAIC,OAAOC,UAU3B,QAASC,GAAuBnD,GAC5B8C,EAAmB9C,EASvB,QAASoD,GAAqBpD,GAC1B+C,EAAiB/C,EASrB,QAASqD,GAAuBrD,GAC5B6C,EAAsB7C,EAQ1B,QAASsD,KACL,MAAOT,GAQX,QAASU,KAEL,GAAIC,GAAU,GACVC,EAAU,IAEVX,KACAW,GAAU,GAAIR,OAAOC,UACrBM,GAAW,KAAOC,EAAUT,GAAa,KAGzCD,GAAkBvG,MAAQA,KAAKkH,eAC/BF,GAAW,IAAMhH,KAAKkH,eAAiB,IACnClH,KAAKmH,UACLH,GAAW,IAAMhH,KAAKmH,UAAY,MAItCH,EAAQvL,OAAS,IACjBuL,GAAW,KAGf1C,MAAM8C,MAAM,KAAMC,WAAWC,QAAQ,SAAUC,GAC3CP,GAAWO,EAAO,MAGlBlB,GACAmB,QAAQT,IAAIC,GAGhBS,EAASC,QAAQC,EAAA,QAAOC,KAAMZ,QAASA,IA1F3C,GAAIa,GAAU7H,KAAK6H,QACfJ,GAAW,EAAAK,EAAA,SAASD,GAASE,cAE7BC,MAAQtI,GACR2G,MAAmB3G,GACnB4G,MAAgB5G,GAChB6G,MAAc7G,GACd8G,MAAS9G,EAgGb,OAVAsI,IACIjB,IAAKA,EACLJ,uBAAwBA,EACxBC,qBAAsBA,EACtBC,uBAAwBA,EACxBC,uBAAwBA,GAG5BV,IAEO4B,2DAhHU,cACF,cACM,SAiHzB7B,GAAM8B,sBAAwB,kBACfC,EAAA,QAAaC,oBAAoBhC,0HC/GhD,QAASiC,KAIL,QAASC,GAAG7K,EAAM8K,EAAUC,MAAOC,GAAQnB,UAAA5L,QAAA,OAAAiE,KAAA2H,UAAA,GAAGoB,EAAkBpB,UAAA,EAE5D,KAAK7J,EACD,KAAM,IAAIpC,OAAM,yCAEpB,KAAKkN,GAAkC,kBAAdA,GACrB,KAAM,IAAIlN,OAAM,gCAAkCkN,EAGtD,MAAII,EAAclL,EAAM8K,EAAUC,IAAU,GAA5C,CAEAI,EAASnL,GAAQmL,EAASnL,MAE1B,IAAMoL,IACFC,SAAUP,EACVC,MAAOA,EACPC,SAAUA,EAGGG,GAASnL,GAAMsL,KAAK,SAACvB,EAAOwB,GACzC,GAAIxB,GAAQiB,EAAWjB,EAAKiB,SAExB,MADAG,GAASnL,GAAMqC,OAAOkJ,EAAK,EAAGH,IACvB,KAKXD,EAASnL,GAAMvB,KAAK2M,IAI5B,QAASI,GAAIxL,EAAM8K,EAAUC,GACzB,GAAK/K,GAAS8K,GAAaK,EAASnL,GAApC,CACA,GAAMuL,GAAML,EAAclL,EAAM8K,EAAUC,EACtCQ,GAAM,IACVJ,EAASnL,GAAMuL,GAAO,OAG1B,QAASrB,GAAQlK,EAAMyL,GACnB,GAAKzL,GAASmL,EAASnL,GAAvB,CAIA,GAFAyL,EAAUA,MAENA,EAAQC,eAAe,QAAS,KAAM,IAAI9N,OAAM,kDAEpD6N,GAAQzL,KAAOA,EAEfmL,EAASnL,GAAQmL,EAASnL,GAAM2L,OAAO,SAAC5B,SAASA,KACjDoB,EAASnL,GAAM8J,QAAS,SAAAsB,SAAWA,IAAWA,EAAQC,SAASrN,KAAKoN,EAAQL,MAAOU,MAGvF,QAASP,GAAclL,EAAM8K,EAAUC,GAEnC,GAAIQ,IAAO,CAEX,OAAKJ,GAASnL,IAEdmL,EAASnL,GAAMsL,KAAM,SAACvB,EAAM3H,GACxB,GAAI2H,GAAQA,EAAKsB,WAAaP,KAAcC,GAASA,IAAUhB,EAAKgB,OAEhE,MADAQ,GAAMnJ,GACC,IAGRmJ,GARqBA,EAWhC,QAASK,KACLT,KArEJ,GAAIA,KA+EJ,QANIN,GAAIA,EACJW,IAAKA,EACLtB,QAASA,EACT0B,MAAOA,4DAnFU,UAEnBX,EAAqB,EACrBY,EAAsB,GAsF5BjB,GAASH,sBAAwB,UACjC,IAAMqB,GAAUpB,EAAA,QAAaC,oBAAoBC,EACjDkB,GAAQb,mBAAqBA,EAC7Ba,EAAQD,oBAAsBA,EAC9BnB,EAAA,QAAaqB,uBAAuBnB,EAASH,sBAAuBqB,aACrDA,8GC3Ff,IAAIE,GAAgB,WAQhB,QAASC,GAAOzI,EAAM0I,EAAeC,EAAU9B,GAC3C,GAAI+B,GAAmBC,EAAoBhC,IACtC+B,EAAiB5I,IAAS0I,IAC3BE,EAAiB5I,IACbgH,SAAU0B,EACVC,SAAUA,IAiBtB,QAASG,GAAqBjC,EAASkC,GACnC,IAAK,GAAI7O,KAAK8O,GAAmB,CAC7B,GAAIC,GAAMD,EAAkB9O,EAC5B,IAAI+O,EAAIpC,UAAYA,GAAWoC,EAAIjJ,OAAS+I,EACxC,MAAOE,GAAIjC,SAGnB,MAAO,MAYX,QAASkC,GAAqBrC,EAASkC,EAAW/B,GAC9C,IAAK,GAAI9M,KAAK8O,GAAmB,CAC7B,GAAIC,GAAMD,EAAkB9O,EAC5B,IAAI+O,EAAIpC,UAAYA,GAAWoC,EAAIjJ,OAAS+I,EAExC,YADAC,EAAkB9O,GAAG8M,SAAWA,GAIxCgC,EAAkB/N,MACd+E,KAAM+I,EACNlC,QAASA,EACTG,SAAUA,IAUlB,QAASmC,GAAgBnJ,EAAMsI,EAASc,GACpC,IAAK,GAAIlP,KAAKkP,GAAgB,CAE1B,GADUA,EAAelP,GACjB8F,OAASA,EAEb,YADAoJ,EAAelP,GAAGoO,QAAUA,GAIpCc,EAAenO,MACX+E,KAAMA,EACNsI,QAASA,IAIjB,QAASe,GAAiBrJ,EAAMoJ,GAC5B,IAAK,GAAIlP,KAAKkP,GAAgB,CAE1B,GADUA,EAAelP,GACjB8F,OAASA,EACb,MAAOoJ,GAAelP,GAAGoO,QAGjC,MAAO,MAGX,QAASgB,GAActJ,EAAMsI,EAASc,GAClC,IAAK,GAAIlP,KAAKkP,GAAgB,CAE1B,GADUA,EAAelP,GACjB8F,OAASA,EAEb,YADAoJ,EAAelP,GAAGoO,QAAUA,IAYxC,QAASiB,GAAmBvJ,EAAMsI,GAC9BgB,EAActJ,EAAMsI,EAASkB,GAGjC,QAASC,GAAsBzJ,GAC3B,MAAOqJ,GAAiBrJ,EAAMwJ,GAGlC,QAASE,GAAgBC,GACrB,GAAIrB,GAAUe,EAAiBM,EAAiB1C,sBAAuBuC,EAkBvE,OAhBKlB,KACDA,EAAU,SAAUzB,GAIhB,WAHgBnI,KAAZmI,IACAA,OAGA3J,OAAQ,WACJ,MAAO0M,GAAMD,EAAiB1C,sBAAuB0C,EAAiBvD,OAClES,QAASA,GACVR,WAAYQ,EAASR,cAKpC8C,EAAgBQ,EAAiB1C,sBAAuBqB,EAASkB,IAE9DlB,EASX,QAASC,GAAuBvI,EAAMsI,GAClCgB,EAActJ,EAAMsI,EAASuB,GAGjC,QAASC,GAA0B9J,GAC/B,MAAOqJ,GAAiBrJ,EAAM6J,GAGlC,QAAS1C,GAAoBwC,GACzB,GAAIrB,GAAUe,EAAiBM,EAAiB1C,sBAAuB4C,EA+BvE,OA9BKvB,KACDA,EAAU,SAAUzB,GAChB,GAAIG,OAAQtI,EAIZ,YAHgBA,KAAZmI,IACAA,OAGAE,YAAa,WAgBT,MAdKC,KACDA,EAAW8B,EAAqBjC,EAAS8C,EAAiB1C,wBAGzDD,IACDA,EAAW4C,EAAMD,EAAiB1C,sBAAuB0C,EAAiBvD,OACtES,QAASA,GACVR,WAAYQ,EAASR,WACxB2C,EAAkB/N,MACd+E,KAAM2J,EAAiB1C,sBACvBJ,QAASA,EACTG,SAAUA,KAGXA,KAInBmC,EAAgBQ,EAAiB1C,sBAAuBqB,EAASuB,IAG9DvB,EAGX,QAASsB,GAAM5J,EAAM2J,EAAkB9C,EAASkD,GAE5CJ,EAAiBzD,aAAe,WAAa,MAAOlG,GAEpD,IAAI4I,GAAmBC,EAAoBhC,GACvCmD,EAAkBpB,EAAiB5I,EACvC,IAAIgK,EAAiB,CACjB,GAAIC,GAAYD,EAAgBhD,QAChC,KAAIgD,EAAgBrB,SAYhB,MAAOsB,GAAU7D,OACbS,QAASA,EACTyB,QAAStB,GACV+C,EAdHE,GAAYA,EAAU7D,OAClBS,QAASA,EACTyB,QAAStB,EACTjK,OAAQ4M,GACTI,EACH,KAAK,GAAMG,KAAQD,GACXN,EAAiBzB,eAAegC,KAChCP,EAAiBO,GAAQD,EAAUC,IAUnD,MAAOP,GAGX,QAASd,GAAoBhC,GACzB,GAAI+B,OAAgBlK,EASpB,OARAyL,GAAW7D,QAAQ,SAAU2C,GACrBA,IAAQpC,IACR+B,EAAmBK,KAGtBL,IACDA,EAAmBuB,EAAWlP,KAAK4L,IAEhC+B,EAlOX,GAAI5B,OAAQtI,GACRyL,KACAnB,KACAa,KACAL,IA6OJ,OAZAxC,IACIyB,OAAQA,EACRK,qBAAsBA,EACtBI,qBAAsBA,EACtB/B,oBAAqBA,EACrB2C,0BAA2BA,EAC3BvB,uBAAwBA,EACxBmB,gBAAiBA,EACjBD,sBAAuBA,EACvBF,mBAAoBA,gBAObf,m3BC1PQ,UASjB4B,EAAU,SAAAC,GACA,QADVD,YAAAA,GAEEE,EAAAC,OAAAC,eAFFJ,EAAUzN,WAAA,cAAAqC,MAAAxE,KAAAwE,MAGRA,KAAKyL,oBAAsB,qBAC3BzL,KAAK0L,eAAiB,gBACtB1L,KAAK2L,qBAAuB,qBAC5B3L,KAAK4L,eAAiB,gBACtB5L,KAAK6L,8BAAgC,6BACrC7L,KAAK8L,sBAAwB,sBAC7B9L,KAAK+L,sBAAwB,sBAC7B/L,KAAKgM,oBAAsB,oBAC3BhM,KAAKiM,sBAAwB,uBAC7BjM,KAAKkM,qBAAuB,qBAC5BlM,KAAKmM,eAAiB,gBACtBnM,KAAKoM,yBAA2B,yBAChCpM,KAAKqM,2BAA6B,0BAClCrM,KAAKsM,kBAAoB,mBACzBtM,KAAKuM,iBAAmB,kBACxBvM,KAAKwM,iBAAmB,kBACxBxM,KAAKyM,sBAAwB,sBAC7BzM,KAAK0M,eAAiB,gBACtB1M,KAAK2M,uBAAyB,wBAC9B3M,KAAK4M,gBAAkB,iBACvB5M,KAAK6M,+BAAiC,8BACtC7M,KAAK8M,mCAAqC,kCAC1C9M,KAAK+M,8BAAgC,8BACrC/M,KAAKgN,8BAAgC,8BACrChN,KAAKiN,iBAAmB,kBACxBjN,KAAKkN,2BAA6B,2BAClClN,KAAKmN,iBAAmB,kBACxBnN,KAAKoN,qBAAuB,qBAC5BpN,KAAKqN,+BAAiC,8BACtCrN,KAAKsN,sBAAwB,sBAC7BtN,KAAKuN,qBAAuB,qBAC5BvN,KAAKwN,uBAAyB,uBAC9BxN,KAAKyN,qBAAuB,qBAC5BzN,KAAK0N,YAAc,sBApCrBtC,EAAUC,GAAVD,wBAwCSA,s3BC7CQ,UACjBuC,EAAM,SAAAC,WAAND,YAAAA,2BAAAA,EAAMhQ,WAAA,cAAAqC,MAAAoH,MAAApH,KAAAqH,oBAANsG,EAAMC,GAAND,cAEFE,EAAS,GAAIF,aACFE,scCJTC,EAAU,mBAAVA,YAAAA,YAAAA,uBACK,SAACD,EAAQE,GACZ,GAAKF,EAAL,CAEA,GAAIlE,KAAWoE,GAASA,EAAOpE,SAC3BqE,IAAaD,GAASA,EAAOC,UAGjC,KAAK,GAAMC,KAAOJ,IACTA,EAAO3E,eAAe+E,IAASjO,KAAKiO,KAAStE,GAC9CqE,IAAkD,IAApCH,EAAOI,GAAK/K,QAAQ,aACtClD,KAAKiO,GAAOJ,EAAOI,SAXzBH,eAiBSA,m3BCrBQ,UAEjBI,EAAS,SAAA7C,GAEA,QAFT6C;oBAAAA,GAGE5C,EAAAC,OAAAC,eAHF0C,EAASvQ,WAAA,cAAAqC,MAAAxE,KAAAwE,MAKPA,KAAKmO,gCAAkC,wCALzCD,EAAS7C,GAAT6C,cASFE,EAAY,GAAIF,aACLE,kHCNf,QAASC,GAA0BN,GAsB/B,QAAS3H,KACLW,GAAM,EAAAuH,EAAA,SAAMzG,GAASE,cAAchB,IAGvC,QAASwH,KACLC,GAAU,EAEVC,EAAwB,KACxBC,EAAsB,KACtBC,EAAY,EACZC,EAAkBC,IAGlBC,EAAgBC,2BAA2B/G,GAC3CxK,EAAOsR,EAAgB3H,UACvB6H,EAAgBF,EAAgBG,mBAChCC,EAAeJ,EAAgBK,kBAGnC,QAASC,KAIL,MAH+BN,GAAgBO,8BACDD,2BAKlD,QAASE,GAAYC,GACGT,EAAgBG,mBACtBO,eAAeD,GAGjC,QAASE,GAAsBF,GAM3B,MALIA,IAAWA,EAAQG,MACnBH,EAAQG,IAAMH,EAAQG,IAAIC,QAAQ,YAAa,gBAC/CJ,EAAQ/R,KAAO,uBAGZ+R,EAGX,QAASK,GAAkBL,GAGvB,GAAiB,OAAbA,GAAuBA,EAAQM,SAAWN,EAAQO,gBAElD,WADAC,IAIJ,IAAgB,OAAZR,EAAkB,CAIlB,GAHAS,EAAoBT,EAAQ/I,UAAY+I,EAAQU,SAChDV,EAAUE,EAAsBF,GAE5BT,EAAgBG,mBAAmBiB,0BAA0BX,GAG7D,MAFAA,GAAUL,EAAaiB,sBAAsBf,SAC7CQ,GAAkBL,EAItBxI,GAAI,4BAA8BvJ,EAAO,uBAAyB+R,EAAQG,KAG1EJ,EAAYC,OAGZxI,GAAI,4BAA8BvJ,EAAO,+BAIjD,QAAS4S,KACL,GAAIC,EAGJ,IAAK7B,EAAL,CAIAzH,EAAI,4BAA8BvJ,EAAO,gCAGzC6S,EAAcL,EAEdjJ,EAAI,4BAA8BvJ,EAAO,gCAAkC6S,EAE3E,IAAIC,GAAiBlB,GAErBQ,GADcV,EAAaqB,yBAAyBD,EAAgBD,KAIxE,QAASG,GAA0BC,GAC/B,GAAIC,GAAUjO,KAAKkO,MAAMlO,KAAKmO,IAAa,IAARH,EAAe,KAElD1J,GAAI,4BAA8BvJ,EAAO,0BAA4BkT,EAAU,OAE/EG,aAAaC,GACbA,EAAgBC,WAAW,WACvBD,EAAgB,KAChBV,KACDM,GAGP,QAASM,GAA8BvW,GACnC,GAAIA,EAAEqU,kBAAoBA,EAA1B,CAIA,GAAIS,GAAU9U,EAAEwW,aAAa1B,QACzB2B,MAASxR,GACTyR,MAAczR,EAGlB,KAAKjF,EAAEwW,aAAaG,SAEhB,WADArK,GAAI,4BAA8BvJ,EAAO,mBAAoB+R,EAAQG,IAIzEd,GAAkBW,EAAQU,SAC1BlJ,EAAI,4BAA8BvJ,EAAO,yBAA0B+R,EAAQG,IAC3E,MAGmC,EAAA2B,EAAA,SAAyBxJ,GAAS3J,QAC7DoT,aAAcA,EACdC,mBAAoBA,IAECC,kBAAkB/W,EAAEwW,aAAcnC,GAE3DoC,IAAa,GAAIzK,OAAOC,UAAY+H,GAAyB,IAC7D0C,EAAiBnB,EAAqBpB,EAAmBF,EACzDC,EAAYwC,EAAkBD,EAAa,EAAKC,EAAiBD,EAAa,EAC9EV,EAA0B7B,GAC5B,MAAOlU,GACLsM,EAAI,4BAA8BvJ,EAAO,sEAIjD,QAASiU,KACAjD,IAILC,GAAwB,GAAIhI,OAAOC,UACnCgI,EAAsBsB,EAEtBjJ,EAAI,4BAA8BvJ,EAAO,mBAGzC4S,EAAmB5U,KAAKwE,OAG5B,QAAS0R,KAEL,GAAIC,OAAQjS,EAEZ,KAAgB,IAAZ8O,EAAJ,CAIA/G,EAASY,GAAGuJ,EAAA,QAAUzD,gCAAiC6C,EAA+BhJ,GAEtFwG,GAAU,EACVzH,EAAI,4BAA8BvJ,EAAO,UAEzC,IAAI8S,GAAiBlB,GACrBuC,GAAWrB,EAAeqB,SAEtBA,GACA3B,EAAoB2B,EAASA,EAASlW,OAAS,GAAGoW,sBAAwBF,EAASA,EAASlW,OAAS,GAAGwU,SAExGwB,MAEAvC,EAAasC,kBAAkBlB,GAC/BqB,EAAWrB,EAAeqB,SAC1B3B,EAAoB2B,EAASA,EAASlW,OAAS,GAAGoW,sBAAwBF,EAASA,EAASlW,OAAS,GAAGwU,SAExGwB,MAIR,QAAS1B,KACAvB,IAGLzH,EAAI,4BAA8BvJ,EAAO,UAEzCiK,EAASuB,IAAI4I,EAAA,QAAUzD,gCAAiC6C,EAA+BhJ,GAGvF6I,aAAaC,GACbtC,GAAU,EAEVC,EAAwB,KACxBC,EAAsB,MAG1B,QAAStF,KACL2G,IACAjB,EAAgBgD,6BAA6B9J,GAxNjD,GAAIH,GAAU7H,KAAK6H,QAEfG,MAAQtI,GACRqH,MAAGrH,GACHsP,MAAatP,GACbwP,MAAYxP,GACZ8O,MAAO9O,GACPlC,MAAIkC,GACJoR,MAAapR,GACbsQ,MAAiBtQ,GACjB+O,MAAqB/O,GACrBgP,MAAmBhP,GACnBiP,MAASjP,GACTkP,MAAelP,GAEfoP,EAAkBf,EAAOe,gBACzBrH,EAAWsG,EAAOtG,SAClB6J,EAAevD,EAAOuD,aACtBC,EAAqBxD,EAAOwD,kBAiNhC,OARAvJ,IACIuG,WAAYA,EACZwD,MAAOL,EACPtI,MAAOA,GAGXhD,IAEO4B,2DA1Oc,cACP,cACI,cACe,UA0OrCqG,GAA0BpG,sBAAwB,sCACnC+J,EAAA,QAAatH,gBAAgB2D,aAC7B2D,EAAA,QAAatH,gBAAgB2D,iIC3O5C,QAAS4D,GAAyBlE,GAQ9B,QAAS3H,KACLW,GAAM,EAAAuH,EAAA,SAAMzG,GAASE,cAAchB,IAGvC,QAASmL,GAAY3C,EAAS4C,EAAMC,EAAMtD,GACtC,GAAIuD,GAA2BvD,EAAgBO,8BAC3CiB,EAAiB+B,EAAyBjD,2BAC1CF,EAAeJ,EAAgBK,kBAE/BmD,EAAWhC,EAAeiC,WAAWC,OAAOC,IAAIH,SAChDC,EAAaD,EAASI,eAAepC,EAAeiC,WAAWC,OAAO5S,OAAO+S,sBAAsBrC,EAAeiC,WAAW3S,OAE7HgT,GAAkB,EAElBjB,EAAWY,EAAWM,gBAAgBC,gBAAgBC,EACtDC,EAAUb,EAAKzQ,MACfuR,EAAyB,EACzBC,EAAoB,EACpBC,EAAU,KACVzY,EAAI,EACJQ,EAAI,EACJkY,EAAI,EACJC,GAAa,EACbC,EAAwB,KACxB5N,MAAKhG,EAET,IAAsB,YAAlB4S,EAAS9U,KACT,OAAO,CAIX,MAAOtC,EAAI8X,EAAQvX,QACfwX,EAAyBD,EAAQ9X,GAAG+X,uBACpCC,EAAoBF,EAAQ9X,GAAGgY,kBAG/BC,EAAUxB,EAASA,EAASlW,OAAS,GACrCf,EAAIyY,EAAQzY,EAERuY,EAAyBvY,IACzBqM,EAAI,mDAAsDkM,EAAyB,KACnFtB,EAAS1V,MACLvB,EAAGuY,EACHM,EAAGL,IAEPN,GAAkB,GAGtB1X,GAAK,CAGT,KAAKkY,EAAIzB,EAASlW,OAAS,EAAG2X,GAAK,EAAGA,GAAK,EACvC,GAAIzB,EAASyB,GAAG1Y,IAAM0X,EAAKoB,oBAAqB,CAC5CH,EAAYD,CACZ,OAIR,GAAIC,GAAa,EACb,IAAKnY,EAAI,EAAGA,EAAI8X,EAAQvX,OAAQP,GAAK,EAC7BmY,EAAYnY,EAAIyW,EAASlW,SACzBf,EAAIiX,EAAS0B,EAAYnY,GAAGR,GACnBiX,EAAS0B,EAAYnY,GAAGqY,IAAOP,EAAQ9X,GAAG+X,yBAC/CtB,EAAS0B,EAAYnY,GAAGR,EAAIsY,EAAQ9X,GAAG+X,uBACvCtB,EAAS0B,EAAYnY,GAAGqY,EAAIP,EAAQ9X,GAAGgY,kBACvCnM,EAAI,kDAAoDiM,EAAQ9X,GAAG+X,uBAAyB,kBAAoBD,EAAQ9X,GAAGgY,kBAAoB,cAC/IN,GAAkB,EAOlC,IAAIN,EAASmB,sBAAwBnB,EAASmB,qBAAuB,EAAG,CACpE,GAAIb,EAUA,IARAO,EAAUxB,EAASA,EAASlW,OAAS,GACrCf,EAAIyY,EAAQzY,EAGZ4Y,EAAwB5Y,EAAqC,IAAhC4X,EAASmB,qBAGtCN,EAAUxB,EAAS,GACZwB,EAAQzY,EAAI4Y,GACfvM,EAAI,mDAAsDoM,EAAQzY,EAAI,KACtEiX,EAAS9R,OAAO,EAAG,GACnBsT,EAAUxB,EAAS,EAM3BjM,IACIqM,MAAOJ,EAAS,GAAGjX,EAAI6X,EAAWM,gBAAgBa,UAClDC,IAAKvB,EAAMoB,oBAAsBjB,EAAWM,gBAAgBa,UAAanE,EAAQU,SAGrF,IAAI2D,GAAWtC,EAAauC,cAActE,EAAQuE,WAAWC,OACzDH,KACwB,IAApBA,EAASnY,QAAiBmY,EAASnY,OAAS,GAAKiK,EAAMiO,IAAMC,EAASA,EAASnY,OAAS,GAAGiK,MAAMiO,OACjG5M,EAAI,8BAAgCwI,EAAQuE,UAAY,uBAAyBpO,EAAMqM,MAAQ,MAAQrM,EAAMiO,IAAM,KACnHrC,EAAa0C,WAAWzE,EAAQuE,UAAWvC,EAAmB7K,UAAWoI,EAAgBmF,gBAAgBC,aAAcxO,IAQnI,MAHIkN,IACA1D,EAAasC,kBAAkBlB,GAE5BsC,EAIX,QAASuB,GAAapW,EAAQP,GAC1B,GAAI8B,GAAS,EACTpE,EAAI,CAER,KAAKA,EAAI,EAAGA,EAAI6C,EAAO4B,MAAMlE,OAAQP,IAAK,CACtC,GAAI6C,EAAO4B,MAAMzE,GAAGsC,OAASA,EACzB,MAAO8B,EAEXA,IAAUvB,EAAO4B,MAAMzE,GAAG+F,KAE9B,MAAO3B,GAGX,QAAS8U,GAAgB3Z,EAAG4Z,GAExB,GAAInZ,OAACwE,EAIL,IAAKjF,EAAE2W,SAAP,CAGA,GAAIkD,GAAUC,EAAA,QAASpX,YAAY1C,EAAE2W,UAEjCoD,EAAOF,EAAQpU,MAAM,OACzBsU,GAAKC,SAAWha,EAAE8U,QAAQmF,UAAU9U,MAAQ,CAG5C,IAAIwS,GAAOkC,EAAQpU,MAAM,QACrByU,EAAOL,EAAQpU,MAAM,OACZ,QAATkS,IACAA,EAAOmC,EAAA,QAASnW,cAAc,OAAQuW,EAAMH,GAC5CpC,EAAK/T,QAAU,EACf+T,EAAK9T,MAAQ,EACb8T,EAAKoB,oBAAsB/Q,KAAKmB,MAAMnJ,EAAE8U,QAAQ/I,UAAY/L,EAAE8U,QAAQmE,WAG1E,IAAIkB,GAAON,EAAQpU,MAAM,QAIrB2U,EAAOP,EAAQpU,MAAM,OACrB2U,KACAA,EAAKpV,QAAQE,MAAME,OAAOgV,EAAKpV,QAAQE,MAAMuD,QAAQ2R,GAAO,GAC5DA,EAAO,KAEX,IAAI1C,GAAOmC,EAAQpU,MAAM,OACrBiS,KACAD,EAAYzX,EAAE8U,QAAS4C,EAAMC,EAAMiC,GACnClC,EAAK1S,QAAQE,MAAME,OAAOsS,EAAK1S,QAAQE,MAAMuD,QAAQiP,GAAO,GAC5DA,EAAO,KAMX,IAAI2C,GAASR,EAAQpU,MAAM,SAC3B,IAAe,OAAX4U,EAAiB,CACjBA,EAAOtX,KAAO,OACdsX,EAAOC,aAAWrV,EAElB,IAAIsV,GAAOV,EAAQpU,MAAM,OACzB,IAAa,OAAT8U,EAAe,CAEfA,EAAOT,EAAA,QAASnW,cAAc,OAAQuW,GACtCK,EAAK3W,QAAU,EACf2W,EAAK1W,MAAQ,EACb0W,EAAKtQ,YAAc,EACnBsQ,EAAK1V,QAAU,EAEf,IAAI2V,GAAOV,EAAA,QAASnW,cAAc,OAAQuW,EAO1C,IANAM,EAAK5W,QAAU,EACf4W,EAAK3W,MAAQ,EACb2W,EAAKnQ,aAAegQ,EAAOhQ,aAC3BmQ,EAAKC,yBAA2B,EAChCD,EAAKE,oBAEc,EAAfL,EAAOxW,MAEP,IAAKpD,EAAI,EAAGA,EAAI4Z,EAAOhQ,aAAc5J,GAAK,EAGtC+Z,EAAKE,iBAAiBja,GAAK,GAAM,EAAI4Z,EAAOpT,MAAMxG,GAAGka,oBAIzDH,GAAKC,yBAA2B,GAK5CV,EAAKlW,OAAS,SACdkW,EAAKlW,OAAS,OACdsW,EAAKtW,OAAS,CAGd,IAAI+W,GAAOf,EAAQpU,MAAM,QACrBzE,EAAS4Z,EAAK7U,WAClBoU,GAAKU,YAAc7Z,EAAS,CAG5B,IAAI8Z,GAAOjB,EAAQpU,MAAM,OACzB,IAAa,OAATqV,EAAe,CACf,GAAIC,GAAgBrB,EAAakB,EAAM,QACnCI,EAAgBtB,EAAaQ,EAAM,OAEvCY,GAAKjW,OAAO,GAAKkW,EAAgBC,EAAgB,GAIrDhb,EAAE2W,SAAWkD,EAAQ/T,SAGzB,QAASiR,GAAkB/W,EAAG4Z,GAI1B,GAAK5Z,EAAE2W,SAAP,CAIA,GAAIkD,GAAUC,EAAA,QAASpX,YAAY1C,EAAE2W,UAEjCoD,EAAOF,EAAQpU,MAAM,OACzBsU,GAAKC,SAAWha,EAAE8U,QAAQmF,UAAU9U,MAAQ,CAG5C,IAAIwS,GAAOkC,EAAQpU,MAAM,QACrByU,EAAOL,EAAQpU,MAAM,OACZ,QAATkS,IACAA,EAAOmC,EAAA,QAASnW,cAAc,OAAQuW,EAAMH,GAC5CpC,EAAK/T,QAAU,EACf+T,EAAK9T,MAAQ,EACb8T,EAAKoB,oBAAsB/Q,KAAKmB,MAAMnJ,EAAE8U,QAAQ/I,UAAY/L,EAAE8U,QAAQmE,WAG1E,IAAIvB,GAAOmC,EAAQpU,MAAM,OACrBiS,KACAD,EAAYzX,EAAE8U,QAAS4C,EAAMC,EAAMiC,GACnClC,EAAK1S,QAAQE,MAAME,OAAOsS,EAAK1S,QAAQE,MAAMuD,QAAQiP,GAAO,GAC5DA,EAAO,OApQf,GAAItK,GAAU7H,KAAK6H,QACfG,MAAQtI,GACRqH,MAAGrH,GACH4R,EAAevD,EAAOuD,aACtBC,EAAqBxD,EAAOwD,kBA0QhC,OANAvJ,IACIoM,gBAAiBA,EACjB5C,kBAAmBA,GAGvBpL,IACO4B,2DApRc,cACP,cACG,SAqRrBiK,GAAyBhK,sBAAwB,qCAClC+J,EAAA,QAAatH,gBAAgBuH,2HCnR5C,QAASyD,KAYL,QAASC,GAAcrB,GACnB,GAAIsB,GAAOrB,EAAA,QAASzW,UAAU,OAAQwW,EAQtC,OAPAsB,GAAKC,YAAc,OACnBD,EAAKE,cAAgB,EACrBF,EAAKG,qBACLH,EAAKG,kBAAkB,GAAK,OAC5BH,EAAKG,kBAAkB,GAAK,OAC5BH,EAAKG,kBAAkB,GAAK,OAErBH,EAGX,QAASI,GAAc1B,GAGnB,GAAI2B,GAAO1B,EAAA,QAASzW,UAAU,OAAQwW,EAGtC4B,GAAcD,EAGd,IAAIE,GAAO5B,EAAA,QAASzW,UAAU,OAAQmY,EAGtCG,GAAcD,EAGd,IAAIE,GAAO9B,EAAA,QAASzW,UAAU,OAAQqY,EAGtCG,GAAcD,GAGdE,EAAcF,EAGd,IAAIG,GAAOjC,EAAA,QAASzW,UAAU,OAAQuY,EAEtC,QAAQI,EAAcjZ,MAClB,IAAKkZ,GAAA,QAAUC,MAEXC,EAAcJ,EACd,MAAM,KACLE,GAAA,QAAUG,MAEXC,EAAcN,GAUtBO,EAHWxC,EAAA,QAASzW,UAAU,OAAQ0Y,GAMtC,IAAIQ,GAAOzC,EAAA,QAASzW,UAAU,OAAQ0Y,EAM3BjC,GAAA,QAASnW,cAAc,OAAQ4Y,GACrC5T,OAAS,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGxBmR,EAAA,QAASnW,cAAc,OAAQ4Y,GACrC5T,OAAS,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGxBmR,EAAA,QAASnW,cAAc,OAAQ4Y,GACrC5T,OAAS,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGxBmR,EAAA,QAASnW,cAAc,OAAQ4Y,GACrC5T,OAAS,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG/C6T,EAAcD,GAMdE,EAHW3C,EAAA,QAASzW,UAAU,OAAQmY,IAKlCkB,GACAC,EAA6CnB,EAAMkB,EAAkB,GAAGE,IAAIC,QAIpF,QAASpB,GAAcD,GAEnB,GAAIsB,GAAOhD,EAAA,QAASnW,cAAc,OAAQ6X,EAoB1C,OAlBAsB,GAAKlZ,QAAU,EAEfkZ,EAAKC,cAAgB,EACrBD,EAAKE,kBAAoB,EACzBF,EAAK7D,UAAYgE,EACjBH,EAAKtH,SAAWxN,KAAKkO,MAAM6B,EAAOvC,SAAWyH,GAC7CH,EAAKI,KAAO,EACZJ,EAAKK,OAAS,EACdL,EAAKM,UAAY,EACjBN,EAAKO,WAAa,EAAK,GACvBP,EAAKQ,QACD,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,OAEVR,EAAKS,aAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCT,EAAKU,cAAgBC,EAAU,EAExBX,EAGX,QAASnB,GAAcD,GAEnB,GAAIgC,GAAO5D,EAAA,QAASnW,cAAc,OAAQ+X,EAyB1C,OAvBAgC,GAAK9Z,QAAU,EACf8Z,EAAK7Z,MAAQ,EAIb6Z,EAAKX,cAAgB,EACrBW,EAAKV,kBAAoB,EACzBU,EAAK1D,SAAWyD,EAChBC,EAAKN,UAAY,EACjBM,EAAKlI,SAAWxN,KAAKkO,MAAM6B,EAAOvC,SAAWyH,GAC7CS,EAAKL,WAAa,EAAK,GACvBK,EAAKC,MAAQ,EACbD,EAAKE,gBAAkB,EACvBF,EAAKP,OAAS,EACdO,EAAKG,UAAY,EACjBH,EAAKJ,QACD,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,OAEVI,EAAKI,MAAQjI,EAAeiI,MAC5BJ,EAAKK,OAASlI,EAAekI,OAEtBL,EAGX,QAAS7B,GAAcD,GAEnB,GAAIoC,GAAOlE,EAAA,QAASnW,cAAc,OAAQiY,EAW1C,OATAoC,GAAKpa,QAAU,EAEfoa,EAAKjB,cAAgB,EACrBiB,EAAKhB,kBAAoB,EACzBgB,EAAK/E,UAAYgE,EACjBe,EAAKxI,SAAWxN,KAAKkO,MAAM6B,EAAOvC,SAAWyH,GAC7Ce,EAAK7T,SAAW6R,EAAciC,MAAQ,MACtCD,EAAKT,YAAc,EAEZS,EAGX,QAASlC,GAAcF,GAEnB,GAAIsC,GAAOpE,EAAA,QAASnW,cAAc,OAAQiY,EAG1C,QADAsC,EAAKX,YAAc,EACXvB,EAAcjZ,MAClB,IAAKkZ,GAAA,QAAUC,MACXgC,EAAKC,aAAe,MACpB,MAAM,KACLlC,GAAA,QAAUG,MACX8B,EAAKC,aAAe,MACpB,MAAM,SAEND,EAAKC,aAAe,OAM5B,MAHAD,GAAK3X,KAAOsP,EAAeuI,GAC3BF,EAAK9S,UAAY,EAAG,EAAG,GAEhB8S,EAGX,QAAS/B,GAAcJ,GAEnB,GAAIsC,GAAOvE,EAAA,QAASnW,cAAc,OAAQoY,EAO1C,OALAsC,GAAKxa,MAAQ,EAEbwa,EAAKC,aAAe,EACpBD,EAAKE,SAAW,EAAG,EAAG,GAEfF,EAGX,QAAShC,GAAcN,GAEnB,GAAIyC,GAAO1E,EAAA,QAASnW,cAAc,OAAQoY,EAO1C,OALAyC,GAAK3a,MAAQ,EAEb2a,EAAKC,QAAU,EACfD,EAAKpT,SAAW,EAEToT,EAGX,QAASlC,GAAcoC,GAEnB,GAAIC,GAAO7E,EAAA,QAASnW,cAAc,OAAQ+a,EAE1CC,GAAK1U,YAAc,EACnB0U,EAAKpG,UAEL,IAAItD,GAAM6E,EAAA,QAASnW,cAAc,OAAQgb,GAAM,EAM/C,OALA1J,GAAI2J,SAAW,GACf3J,EAAIpR,MAAQ,EAEZ8a,EAAKpG,QAAQ/W,KAAKyT,GAEX0J,EAGX,QAASnC,GAAcD,GAEnB,GAAIsC,GAAO/E,EAAA,QAASnW,cAAc,OAAQ4Y,EAG1C,QADAsC,EAAKtG,WACGyD,EAAcjZ,MAClB,IAAKkZ,GAAA,QAAUC,MACf,IAAKD,GAAA,QAAUG,MACXyC,EAAKtG,QAAQ/W,KAAKsd,EAAkBD,IAO5C,MADAA,GAAK5U,YAAc4U,EAAKtG,QAAQvX,OACzB6d,EAGX,QAASC,GAAkBD,GACvB,GAAIE,GAAQlJ,EAAemJ,OAAOC,UAAU,EAAGpJ,EAAemJ,OAAOvW,QAAQ,KAE7E,QAAQsW,GACJ,IAAK,OACD,MAAOG,GAA2BL,EAAME,EAAO,KAC9C,OACD,MAAOI,GAA0BN,EAAME,EAAO,SAE9C,MACIxY,KAAM,oBACNgG,QAAS,oBACTjE,MACIyW,MAAOA,KAM3B,QAASG,GAA2BL,EAAME,GACtC,GAAIK,OAAIna,EA+BR,IA5BIma,EADA1C,EACO5C,EAAA,QAASzW,UAAU,OAAQwb,GAAM,GAEjC/E,EAAA,QAASzW,UAAU,OAAQwb,GAAM,GAI5CO,EAAKhC,WAAa,EAAK,EAAK,EAAK,EAAK,EAAK,GAC3CgC,EAAKC,qBAAuB,EAG5BD,EAAKE,aAAe,EACpBF,EAAK/B,UAAY,EACjB+B,EAAKG,cAAgB,EAAG,EAAG,GAC3BH,EAAKrB,OAASlI,EAAekI,OAC7BqB,EAAKtB,MAAQjI,EAAeiI,MAC5BsB,EAAKI,gBAAkB,GACvBJ,EAAKK,eAAiB,GACtBL,EAAKvB,UAAY,EACjBuB,EAAKM,YAAc,EACnBN,EAAKO,gBACD,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAC1C,IAAM,IAAM,IAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,GAE9CP,EAAKQ,MAAQ,GACbR,EAAKS,aAAe,MACpBT,EAAK9L,OAASwM,IACVpD,EAAmB,CAEnB,GAAIqD,GAAOjG,EAAA,QAASzW,UAAU,OAAQ+b,EAGtCY,GAAwBD,EAAMhB,GAG9BkB,EAAoBF,GAGpBG,EAA2BH,GAG/B,MAAOX,GAGX,QAASU,KAgBL,IAAK,GAdDK,GAAO,KACPC,EAAa,GAGbC,KACAC,KACAC,EAAuB,EACvBC,EAAqB,EACrBC,EAAwB,EAGxBC,EAAQ7K,EAAe8K,iBAAiBC,MAAM,YAAYC,MAAM,GAChEC,MAAS7b,GAEJ8b,EAAI,EAAGA,EAAIL,EAAM1f,OAAQ+f,IAK9B,OAJAD,EAAYE,EAAkBN,EAAMK,IAEV,GAAfD,EAAU,IAGjB,IAAKG,GACDZ,EAAI7e,KAAKsf,GACTV,GAAcU,EAAU9f,OAAS,CACjC,MAAM,KACLkgB,GACDZ,EAAI9e,KAAKsf,GACTV,GAAcU,EAAU9f,OAAS,EAQzCqf,EAAIrf,OAAS,IACbuf,EAAuBF,EAAI,GAAG,GAC9BI,EAAwBJ,EAAI,GAAG,GAC/BG,EAAqBH,EAAI,GAAG,IAIhCF,EAAO,GAAI7d,YAAW8d,EAEtB,IAAI3f,GAAI,CAER0f,GAAK1f,MAAqB,WAAb2f,IAA4B,GACzCD,EAAK1f,MAAqB,SAAb2f,IAA4B,GACzCD,EAAK1f,MAAqB,MAAb2f,IAA4B,EACzCD,EAAK1f,KAAqB,IAAb2f,EACbD,EAAKgB,KAAK,GAAM,IAAM,GAAM,IAAO1gB,GACnCA,GAAK,EACL0f,EAAK1f,KAAO,EACZ0f,EAAK1f,KAAO8f,EACZJ,EAAK1f,KAAOggB,EACZN,EAAK1f,KAAO+f,EACZL,EAAK1f,KAAO,IACZ0f,EAAK1f,KAAO,IAAO4f,EAAIrf,MACvB,KAAK,GAAId,GAAI,EAAGA,EAAImgB,EAAIrf,OAAQd,IAC5BigB,EAAK1f,MAAwB,MAAhB4f,EAAIngB,GAAGc,SAAoB,EACxCmf,EAAK1f,KAAwB,IAAhB4f,EAAIngB,GAAGc,OACpBmf,EAAKgB,IAAId,EAAIngB,GAAIO,GACjBA,GAAK4f,EAAIngB,GAAGc,MAEhBmf,GAAK1f,KAAO6f,EAAItf,MAChB,KAAK,GAAId,GAAI,EAAGA,EAAIogB,EAAItf,OAAQd,IAC5BigB,EAAK1f,MAAwB,MAAhB6f,EAAIpgB,GAAGc,SAAoB,EACxCmf,EAAK1f,KAAwB,IAAhB6f,EAAIpgB,GAAGc,OACpBmf,EAAKgB,IAAIb,EAAIpgB,GAAIO,GACjBA,GAAK6f,EAAIpgB,GAAGc,MAGhB,OAAOmf,GAGX,QAAShB,GAA0BN,EAAME,GACrC,GAAIqC,OAAInc,EAsBR,IAnBImc,EADA1E,EACO5C,EAAA,QAASzW,UAAU,OAAQwb,GAAM,GAEjC/E,EAAA,QAASzW,UAAU,OAAQwb,GAAM,GAI5CuC,EAAKhE,WAAa,EAAK,EAAK,EAAK,EAAK,EAAK,GAC3CgE,EAAK/B,qBAAuB,EAG5B+B,EAAK/D,WAAa,EAAK,GACvB+D,EAAKC,aAAexL,EAAeyL,cACnCF,EAAKG,WAAa,GAClBH,EAAK7D,YAAc,EACnB6D,EAAKI,WAAa,EAClBJ,EAAKK,WAAa5L,EAAe6L,mBAAqB,GAEtDN,EAAKO,KAAOC,IAERlF,EAAmB,CAEnB,GAAIqD,GAAOjG,EAAA,QAASzW,UAAU,OAAQ+d,EAGtCpB,GAAwBD,EAAMhB,GAG9BkB,EAAoBF,GAGpBG,EAA2BH,GAG/B,MAAOqB,GAGX,QAASQ,KAGL,GAAIC,GAAsBb,EAAkBnL,EAAe8K,kBAOvDmB,EAAa,GAAKD,EAAoB7gB,OACtC2gB,EAAO,GAAIrf,YAAWwf,GAEtBrhB,EAAI,CAyCR,OAvCAkhB,GAAKlhB,MAAqB,WAAbqhB,IAA4B,GACzCH,EAAKlhB,MAAqB,SAAbqhB,IAA4B,GACzCH,EAAKlhB,MAAqB,MAAbqhB,IAA4B,EACzCH,EAAKlhB,KAAqB,IAAbqhB,EACbH,EAAKR,KAAK,IAAM,IAAM,IAAM,KAAO1gB,GACnCA,GAAK,EACLkhB,EAAKR,KAAK,EAAG,EAAG,EAAG,GAAI1gB,GACvBA,GAAK,EAELkhB,EAAKlhB,KAAO,EACZkhB,EAAKlhB,KAAO,GAAKohB,EAAoB7gB,OACrC2gB,EAAKlhB,MAAkB,MAAVgd,IAAqB,EAClCkE,EAAKlhB,KAAkB,IAAVgd,EACbkE,EAAKlhB,KAAO,EAGZkhB,EAAKlhB,KAAO,EACZkhB,EAAKlhB,KAAO,GAAKohB,EAAoB7gB,OACrC2gB,EAAKlhB,KAAO,GACZkhB,EAAKlhB,GAAK,GACVkhB,EAAKlhB,IAAM,EACXkhB,EAAKlhB,MAAQ,EACbkhB,EAAKlhB,KAAO,IACZkhB,EAAKlhB,KAAO,IACZkhB,EAAKlhB,KAAO,IACZkhB,EAAKlhB,MAAmC,WAA3BoV,EAAekM,YAA2B,GACvDJ,EAAKlhB,MAAmC,SAA3BoV,EAAekM,YAA2B,GACvDJ,EAAKlhB,MAAmC,MAA3BoV,EAAekM,YAA2B,EACvDJ,EAAKlhB,KAAmC,IAA3BoV,EAAekM,UAC5BJ,EAAKlhB,MAAmC,WAA3BoV,EAAekM,YAA2B,GACvDJ,EAAKlhB,MAAmC,SAA3BoV,EAAekM,YAA2B,GACvDJ,EAAKlhB,MAAmC,MAA3BoV,EAAekM,YAA2B,EACvDJ,EAAKlhB,KAAmC,IAA3BoV,EAAekM,UAG5BJ,EAAKlhB,KAAO,EACZkhB,EAAKlhB,KAAOohB,EAAoB7gB,OAChC2gB,EAAKR,IAAIU,EAAqBphB,GAEvBkhB,EAGX,QAAS3B,GAAwBD,EAAMhB,GACxBjF,EAAA,QAASzW,UAAU,OAAQ0c,GACjCiC,YAAcC,EAAiBlD,GAGxC,QAASkB,GAAoBF,GACzB,GAAImC,GAAOpI,EAAA,QAASnW,cAAc,OAAQoc,EAE1CmC,GAAKre,MAAQ,EACbqe,EAAKte,QAAU,EACfse,EAAKC,YAAc,WACnBD,EAAKE,eAAiB,MAG1B,QAASlC,GAA2BH,GAIhCsC,EAHWvI,EAAA,QAASzW,UAAU,OAAQ0c,IAM1C,QAASpD,GAA6CnB,EAAM8G,GACxD,GAAIC,GAAOzI,EAAA,QAASnW,cAAc,OAAQ6X,GACtCgH,EAA6BC,EAAA,QAAOtgB,YAAYmgB,EAEpDC,GAAK1e,MAAQ,EACb0e,EAAK3e,QAAU,EACf2e,EAAKG,SAAW,GAAIpgB,aAAY,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAE1HigB,EAAKnY,SAAWoY,EAA2BxhB,OAC3CuhB,EAAKI,KAAOH,EAGhB,QAASH,GAAyBO,GAC9B,GAAIC,GAAO/I,EAAA,QAASnW,cAAc,OAAQif,EAE1CC,GAAKhf,MAAQ,EACbgf,EAAKjf,QAAU,EAEfif,EAAKC,oBAAsB,EAC3BD,EAAKE,gBAAkB,EACvBF,EAAKG,YAActG,GAAsBA,EAAmB1b,OAAU,GAAK0b,EAAkB,GAAG,oBAC5FA,EAAkB,GAAG,qBAAuB,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAG/H,QAASD,GAAcjB,GAEnB,GAAIyH,GAAOnJ,EAAA,QAASnW,cAAc,OAAQ6X,EAQ1C,OANAyH,GAAKjJ,SAAWyD,EAChBwF,EAAKC,iCAAmC,EACxCD,EAAKE,wBAA0B,EAC/BF,EAAKG,oBAAsB,EAC3BH,EAAKI,qBAAuB,EAErBJ,EAGX,QAASjC,GAAkB5Y,GACvB,GAAIkb,GAAM,GAAIhhB,YAAW8F,EAAIpH,OAAS,GAClCP,MAACwE,EAEL,KAAKxE,EAAI,EAAGA,EAAI2H,EAAIpH,OAAS,EAAGP,GAAK,EACjC6iB,EAAI7iB,GAAK8iB,SAAS,GAAKnb,EAAQ,EAAJ3H,GAAS2H,EAAQ,EAAJ3H,EAAQ,GAAI,GAExD,OAAO6iB,GAGX,QAASrB,GAAiB7Z,GACtB,GAAIxH,GAAO,EACPH,MAACwE,EAEL,KAAKxE,EAAI,EAAGA,EAAI2H,EAAIpH,OAAQP,GAAK,EAC7BG,GAAQwH,EAAI7G,WAAWd,IAA8B,GAAtB2H,EAAIpH,OAASP,EAAI,EAEpD,OAAOG,GAGX,QAAS4iB,GAAaC,GAClB,GAAKA,GAAQA,EAAI3L,WAAjB,CAIA,GAAI+B,OAAO5U,EAgBX,OAbA4Q,GAAiB4N,EACjBzH,EAAgBnG,EAAeiC,WAE/BC,EAASiE,EAAcjE,OACvB0F,EAAUzB,EAAc7W,MAAQ,EAChCuX,EAAoB3E,EAAOC,IAAIH,SAASI,eAAeF,EAAO5S,OAAO+S,sBAAsB8D,EAAc7W,OAAOue,kBAEhH7J,EAAUC,EAAA,QAAS1W,aACnB8X,EAAcrB,GACd0B,EAAc1B,GAEAA,EAAQ/T,SAjlB1B,GAAMmX,GAAa,IACbgE,EAAe,EACfC,EAAe,EAGjBnJ,MAAM9S,GACN+W,MAAa/W,GACb4Q,MAAc5Q,GACdyX,MAAiBzX,GACjBwY,MAAOxY,EAilBX,QAHIue,aAAcA,4DA7lBA,eACG,cACJ,cACF,SAgmBnBvI,GAAyBzN,sBAAwB,qCAClC+J,EAAA,QAAatH,gBAAgBgL,iIC5lB5C,QAAS0I,GAAWC,EAAMC,GACtB,MAAOD,GAAM5iB,SAAW6iB,EAAK7iB,QAAW4iB,EAAKE,MAAM,SAAUC,EAAS5e,GAClE,MAAO4e,KAAYF,EAAK1e,KAIhC,QAAS6e,KACLze,KAAKsB,eACY,EAAbtB,KAAK1B,QACL0B,KAAKe,WAAW,gBAAiB,OAAQ,IACzCf,KAAKe,WAAW,0BAA2B,OAAQ,KAEvDf,KAAKe,WAAW,cAAe,OAAQ,IACvCf,KAAKqB,gBAAgB,SAAUrB,KAAK0E,YAAa,OAA0B,IAAlB1E,KAAM3B,QAAiB,GAAK,IAGzF,QAASqgB,KACL1e,KAAKsB,eACY,EAAbtB,KAAK1B,QACL0B,KAAKe,WAAW,gBAAiB,OAAQ,IACzCf,KAAKe,WAAW,0BAA2B,OAAQ,KAEvDf,KAAKe,WAAW,2BAA4B,OAAQ,GACpDf,KAAKe,WAAW,eAAgB,OAAQ,IACF,IAAlCf,KAAKkV,0BACLlV,KAAKqB,gBAAgB,mBAAoBrB,KAAK8E,aAAc,OAAQ,GAI5E,QAAS6Z,KACL3e,KAAKsB,eACLtB,KAAKe,WAAW,eAAgB,OAAQ,IACvB,EAAbf,KAAK1B,OACL0B,KAAKe,WAAW,UAAW,OAAQ,GAEvCf,KAAKuB,aAAa,QAASvB,KAAK8E,aAAc,SAAUpD,GACpD1B,KAAK2B,gBAAgBD,EAAO,uBAAwB,OAAQ,GAC3C,EAAb1B,KAAK1B,QACL0B,KAAK2B,gBAAgBD,EAAO,kBAAmB,OAAQ,IACvD1B,KAAKyB,gBAAgBC,EAAO,sBAAuBA,EAAM0T,gBAAiB,SAAUwJ,GAChF5e,KAAK2B,gBAAgBid,EAAqB,mBAAoB,OAAQ,IACtE5e,KAAK2B,gBAAgBid,EAAqB,uBAAwB,OAAQ,SAM1F,QAASC,KACL,GAAIC,IAAgB,IAAM,GAAM,IAAM,EAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,KAC1GC,GAAgB,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,KAC1GC,GAAkB,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAE5GZ,GAAWpe,KAAK+U,SAAU+J,KAC1B9e,KAAKsB,eACDtB,KAAKkB,WACLlB,KAAKxC,KAAO,QAEhBwC,KAAKe,WAAW,yBAA0B,OAA0B,IAAlBf,KAAM3B,QAAiB,GAAK,IAC9E2B,KAAKe,WAAW,oBAAqB,OAA0B,IAAlBf,KAAM3B,QAAiB,GAAK,KAGzE+f,EAAWpe,KAAK+U,SAAUgK,KAC1B/e,KAAKsB,eACDtB,KAAKkB,WACLlB,KAAKxC,KAAO,QAEhBwC,KAAKe,WAAW,iBAAkB,OAAQ,GAC1Cf,KAAKuB,aAAa,QAASvB,KAAKif,eAAgB,SAAUvd,GACtD1B,KAAK2B,gBAAgBD,EAAO,yBAA0B,OAA0B,IAAlB1B,KAAM3B,QAAiB,GAAK,IAC1F2B,KAAK2B,gBAAgBD,EAAO,oBAAqB,OAA0B,IAAlB1B,KAAM3B,QAAiB,GAAK,OAIzF+f,EAAWpe,KAAK+U,SAAUiK,KACtBhf,KAAKkB,WACLlB,KAAKxC,KAAO,UAEhBmhB,EAAcnjB,KAAKwE,OAW3B,QAASkf,GAAqBnR,GAQ1B,QAAS3H,MAET,QAAS6X,GAAaC,GAElB,OAD+B,EAAAiB,EAAA,SAAyBtX,GAAS3J,SACjC+f,aAAaC,GAGjD,QAASkB,GAAgB3kB,EAAG4Z,GACxB,GAAK5Z,EAAL,CAIA,GAAI8U,GAAU9U,EAAE8U,OAEhB,IAAKA,EAIL,GAAqB,iBAAjBA,EAAQ/R,KAAyB,CAGjC,GAAI6hB,IAA2B,EAAAhO,EAAA,SAAyBxJ,GAAS3J,QAC7DoT,aAAcA,EACdC,mBAAoBA,GAExB8N,GAAyBjL,gBAAgB3Z,EAAG4Z,OAEpB,wBAAjB9E,EAAQ/R,OAGfiK,EAASC,QAAQkK,EAAA,QAAUzD,iCACvB8C,aAAcxW,EACdqU,gBAAiBuF,IAIrB5Z,EAAE6kB,OAAS,OA1CnB,GAAIzX,GAAU7H,KAAK6H,QACfyJ,EAAevD,EAAOuD,aACtBC,EAAqBxD,EAAOwD,mBAC5B9J,EAAWsG,EAAOtG,SAClBO,MAAQtI,EAiDZ,OAPAsI,IACIiW,aAAcA,EACdmB,gBAAiBA,GAGrBhZ,IAEO4B,2DAxJc,cACJ,cACgB,eACA,eACf,SAsFtBuM,GAAA,QAAShX,gBAAgB,OAAQshB,GACjCtK,EAAA,QAAShX,gBAAgB,OAAQkhB,GACjClK,EAAA,QAAShX,gBAAgB,OAAQmhB,GACjCnK,EAAA,QAAShX,gBAAgB,OAAQohB,GA8DjCO,EAAqBjX,sBAAwB,iCAC9B+J,EAAA,QAAatH,gBAAgBwU,uIC9I5C,QAASK,GAAWxR,GAehB,QAAS3H,MAET,QAASoZ,GAA0B/kB,GAC/B,GAAIqU,GAAkBrU,EAAE6kB,OAAOG,qBAC3BlQ,EAAU,GAAAmQ,GAAA,QACVrN,EAA2BvD,EAAgBO,8BAC3CiB,EAAiB+B,EAAyBjD,2BAC1CoD,MAAM9S,EAGV8S,GAASlC,EAAeiC,WAAWC,OAEnCjD,EAAQuE,UAAYxD,EAAeiC,WAAW/U,KAC9C+R,EAAQ/R,KAAOmiB,EAAAC,YAAYC,kBAC3BtQ,EAAQ7J,MAAQ4K,EAAe5K,MACP8M,EAAOT,MAG/BxC,EAAQuQ,QAAUxP,EAAe1Q,MACjC2P,EAAQmF,UAAY5F,EAAgBiR,eACpCxQ,EAAQyQ,iBAAmB1P,EAAeuI,EAE1C,IAAMoH,GAAQC,EAAgB3Q,EAAST,EAAgBmF,gBAAgB4E,GAGvEoH,GAAMxf,MAAQ0f,EAAqBlC,aAAa3N,GAEhD7I,EAASC,QAAQ0Y,EAAA,QAAOlU,sBACpB+T,MAAOA,EACPjR,cAAeF,EAAgBG,qBAInCxU,EAAE6kB,OAAS,KAGf,QAASY,GAAgB3Q,EAAS8Q,GAC9B,GAAMJ,GAAQ,GAAAK,GAAA,OAYd,OAVAL,GAAMI,SAAWA,EACjBJ,EAAMvL,UAAYnF,EAAQmF,UAC1BuL,EAAMM,YAAchR,EAAQ/R,KAC5ByiB,EAAMlO,MAAQxC,EAAQ/I,UACtByZ,EAAMhQ,SAAWV,EAAQU,SACzBgQ,EAAMtM,IAAMsM,EAAMlO,MAAQkO,EAAMhQ,SAChCgQ,EAAMrgB,MAAQ2P,EAAQ3P,MACtBqgB,EAAMH,QAAUvQ,EAAQuQ,QACxBG,EAAMD,iBAAmBzQ,EAAQyQ,iBAE1BC,EAGX,QAASO,GAAqB/lB,GAE1B,GAAIqU,GAAkBrU,EAAE6kB,OAAOG,oBAC/BU,GAAqBf,gBAAgB3kB,EAAGqU,GAG5C,QAAS2R,KACL,GAAIlP,EAAmBmP,gBAAmD,IAAjCnP,EAAmB7K,UAAiB,CAGzE,GAAIia,GAAmBpP,EAAmBqP,qBAC1C,IAAID,EAAkB,CACDA,EAAiBE,4BACvBvZ,QAAQ,SAAUwZ,GACzB,GAAIA,EAAU3Z,YAAcuP,EAAA,QAAUC,OAClCmK,EAAU3Z,YAAcuP,EAAA,QAAUG,OAClCiK,EAAU3Z,YAAcuP,EAAA,QAAUqK,gBAAiB,CAEnD,GAAIC,IAAyB,EAAAC,EAAA,SAA0BpZ,GAAS3J,QAC5D4Q,gBAAiBgS,EACjBrZ,SAAUA,EACV6J,aAAcA,EACdC,mBAAoBA,GAExByP,GAAuBzS,aACvByS,EAAuBjP,aAO3C,QAASmP,KACLzZ,EAASY,GAAG+X,EAAA,QAAOjU,eAAgBqT,EAA2BxX,EAAUmZ,EAAA,QAAS9X,qBACjF5B,EAASY,GAAG+Y,EAAA,QAAkBC,oBAAqBZ,EAAqBzY,EAAUmZ,EAAA,QAAS9X,qBAC3F5B,EAASY,GAAG+Y,EAAA,QAAkBE,2BAA4Bd,EAAsBxY,EAAUmZ,EAAA,QAAS9X,qBAGvG,QAASD,KACL3B,EAASuB,IAAIoX,EAAA,QAAOjU,eAAgBqT,EAA2Bxf,MAC/DyH,EAASuB,IAAIoY,EAAA,QAAkBC,oBAAqBZ,EAAqBzgB,MACzEyH,EAASuB,IAAIoY,EAAA,QAAkBE,2BAA4Bd,EAAsBxgB,MAGrF,QAASuhB,KAEL,MADAC,IAAY,EAAAC,EAAA,SAAU5Z,GAAS3J,OAAO6P,GA9G1C,GAAIlG,GAAU7H,KAAK6H,QACfJ,EAAWsG,EAAOtG,SAClB6J,EAAevD,EAAOuD,aACtBC,EAAqBxD,EAAOwD,mBAC5B4O,GAAuB,EAAAuB,EAAA,SAAqB7Z,GAAS3J,QACrDoT,aAAcA,EACdC,mBAAoBA,EACpB9J,SAAUA,IAEV+Z,MAAS9hB,GAETsI,MAAQtI,EA+GZ,OARAsI,IACIoB,MAAOA,EACPmY,gBAAiBA,EACjBL,eAAgBA,GAGpB9a,IAEO4B,2DA1IW,eACH,cACW,eACT,cACI,cACH,eACM,eAGrB,QAC+B,eACL,eACX,UAiItBuX,GAAWtX,sBAAwB,uBACpB+J,EAAA,QAAatH,gBAAgB6U,iPC7IrB,WAGnB1X,EAA6B,mBAAX8Z,SAA0BA,QAAWC,EAEvDC,EAASha,EAAQga,MAChBA,KACDA,EAASha,EAAQga,WAGrBA,EAAOtC,WAAUuC,EAAA,kBAEFD,IACNtC,WAAUuC,EAAA,wNCRnB,QAASC,GAAUhU,GAkCf,QAAS3H,KACL4b,EAAmBjU,EAAOiU,iBAG9B,QAASC,GAAUC,GACf,GAAI1P,MACA2P,MAAOziB,GACP6S,MAAU7S,EAEd8S,GAAOvC,SAA0E,IAA/DmS,WAAYF,EAAqBG,aAAa,aAAsBC,EAAAA,EAAWF,WAAWF,EAAqBG,aAAa,aAAeE,EAG7J/P,EAAOG,yBACPwP,EAAUD,EAAqBM,qBAAqB,cACpD,KAAK,GAAItnB,GAAI,EAAGA,EAAIinB,EAAQ1mB,OAAQP,IAEb,QADnBqX,EAAakQ,EAAiBN,EAAQjnB,MAElCsX,EAAOG,sBAAsB1W,KAAKsW,EAQ1C,OAJIC,GAAOG,sBAAsBlX,OAAS,IACtC+W,EAAOkQ,cAAgBlQ,EAAQG,sBAAsBlX,OAAS,EAAK+W,EAAOG,sBAAwBH,EAAOG,sBAAsB,IAG5HH,EAGX,QAASiQ,GAAiBE,GAEtB,GAAIlM,MACAmM,KACAC,KACAC,MAAapjB,GACb4Q,MAAc5Q,GACdiS,MAAQjS,GAERxE,MAACwE,EAeL,KAbA+W,EAAcoC,GAAK8J,EAAYN,aAAa,QAAUM,EAAYN,aAAa,QAAUM,EAAYN,aAAa,QAClH5L,EAAcsM,YAAcJ,EAAYN,aAAa,QACrD5L,EAAciC,KAAOiK,EAAYN,aAAa,aAAe,MAC7D5L,EAAcuM,SAAWC,EAAYxM,EAAcsM,aACnDtM,EAAcyM,QAAUP,EAAYN,aAAa,WACjD5L,EAAc0M,SAAWR,EAAYN,aAAa,YAClD5L,EAAc2M,UAAYT,EAAYN,aAAa,aAGnDQ,EAAkBQ,EAAmBV,GAErCG,EAAgBH,EAAYH,qBAAqB,gBAE5CtnB,EAAI,EAAGA,EAAI4nB,EAAcrnB,OAAQP,IAElC4nB,EAAc5nB,GAAGooB,QAAU7M,EAAc6M,QACzCR,EAAc5nB,GAAG8nB,SAAWvM,EAAcuM,SAG1CF,EAAc5nB,GAAGqoB,GAAK9M,EAAcoC,GAAK,IAAMiK,EAAc5nB,GAAGmnB,aAAa,SAKtD,QAFvB/R,EAAiBkT,EAAkBV,EAAc5nB,GAAIynB,MAIjDrS,EAAeuC,gBAAkBgQ,EAEjCD,EAAgB3mB,KAAKqU,GAI7B,OAA+B,KAA3BsS,EAAgBnnB,OACT,MAGXgb,EAAcgN,eAAiBb,EAAiBnnB,OAAS,EAAKmnB,EAAkBA,EAAgB,GAChGnM,EAAciN,uBAAyBd,EAGvCnM,EAAc5D,gBAAkBgQ,EAEhClR,EAAWkR,EAAgB/P,gBAAgB6Q,WAGvC5R,MAAOJ,EAAS,GAAGjX,EAAImoB,EAAgBnP,UACvCC,KAAMhC,EAASA,EAASlW,OAAS,GAAGf,EAAIiX,EAASA,EAASlW,OAAS,GAAG8X,GAAKsP,EAAgBnP,WAGxF+C,GAGX,QAAS+M,GAAkBI,EAAcjB,GAErC,GAAIrS,MACAuT,EAAc,IAsBlB,OApBAvT,GAAeuI,GAAK+K,EAAaL,GACjCjT,EAAekM,UAAYwB,SAAS4F,EAAavB,aAAa,WAAY,IAC1E/R,EAAe0S,SAAWY,EAAaZ,SACvC1S,EAAeiI,MAAQyF,SAAS4F,EAAavB,aAAa,YAAa,IACvE/R,EAAekI,OAASwF,SAAS4F,EAAavB,aAAa,aAAc,IAEzEwB,EAAcD,EAAavB,aAAa,UAGpB,OAAhBwB,IACAA,EAAclB,EAAYN,aAAa,WAKvB,OAAhBwB,IACAA,EAAc,QAI2C,IAAzDC,EAAiB5gB,QAAQ2gB,EAAYE,gBAGrChd,EAAI,oCAAsC8c,GACnC,OAIS,SAAhBA,GAA0C,SAAhBA,EAC1BvT,EAAemJ,OAASuK,EAAaJ,GAC9BC,EAAY3gB,QAAQ,QAAU,GACrCoN,EAAemJ,OAASwK,EAAYL,EAAcC,GAClDvT,EAAe6L,kBAAoB6B,SAAS4F,EAAavB,aAAa,gBAAiB,IACvF/R,EAAeyL,cAAgBiC,SAAS4F,EAAavB,aAAa,YAAa,MACxEwB,EAAY3gB,QAAQ,SAAW2gB,EAAY3gB,QAAQ,WAC1DoN,EAAemJ,OAAS/C,EAAA,QAAUwN,MAGtC5T,EAAe8K,iBAAmB,GAAKwI,EAAavB,aAAa,oBACjE/R,EAAegT,QAAUM,EAAaN,QAE/BhT,GAGX,QAAS0T,GAAaJ,GAClB,GAAIxI,GAAmBwI,EAAavB,aAAa,oBAAoB8B,WACjEC,MAAS1kB,EAWb,OAJA0kB,GAAY,iBAAiBC,KAAKjJ,GAI3B,SAFEgJ,GAAaA,EAAU,GAAMhJ,EAAiBkJ,OAAOlJ,EAAiBlY,QAAQkhB,EAAU,IAAM,GAAI,OAAM1kB,IAKrH,QAASukB,GAAYL,EAAcC,GAC/B,GAAIU,GAAa,EACbnJ,EAAmBwI,EAAavB,aAAa,oBAAoB8B,WACjEK,EAAexG,SAAS4F,EAAavB,aAAa,gBAAiB,IACnEoC,MAAmB/kB,GACnBglB,MAAKhlB,GACLilB,MAASjlB,GACTklB,MAA+BllB,EAoDnC,OAhDoB,SAAhBmkB,IACAU,EAAa,OAGQ7kB,KAArB0b,GAAuD,KAArBA,GAClCmJ,EAAa,EACbI,EAAYE,EAAuBL,GACf,SAAhBX,GAGAU,EAAa,EACbnJ,EAAmB,GAAIre,YAAW,GAClC6nB,EAAkCC,EAAsC,EAAfL,GAGzDpJ,EAAiB,GAAKmJ,GAAe,EAAMI,GAAa,EACxDvJ,EAAiB,GAAKuJ,GAAc,EAAMf,EAAakB,UAAY,EAAMF,GAAmC,EAC5GxJ,EAAiB,GAAKwJ,GAAoC,EAAM,EAChExJ,EAAiB,GAAK,EAEtBsJ,EAAQ,GAAIK,aAAY,GACxBL,EAAM,IAAMtJ,EAAiB,IAAM,GAAKA,EAAiB,GACzDsJ,EAAM,IAAMtJ,EAAiB,IAAM,GAAKA,EAAiB,GAEzDqJ,EAAsBC,EAAM,GAAGP,SAAS,IACxCM,EAAsBC,EAAM,GAAGP,SAAS,IAAMO,EAAM,GAAGP,SAAS,MAKhE/I,EAAmB,GAAIre,YAAW,GAElCqe,EAAiB,GAAKmJ,GAAe,EAAMI,GAAa,EACxDvJ,EAAiB,GAAKuJ,GAAc,EAAM3G,SAAS4F,EAAavB,aAAa,YAAa,KAAO,EAEjGqC,EAAQ,GAAIK,aAAY,GACxBL,EAAM,IAAMtJ,EAAiB,IAAM,GAAKA,EAAiB,GAEzDqJ,EAAsBC,EAAM,GAAGP,SAAS,KAG5C/I,EAAmB,GAAKqJ,EACxBrJ,EAAmBA,EAAiB2I,cACpCH,EAAaoB,aAAa,mBAAoB5J,IACxB,IAAfmJ,IACPA,GAA4D,IAA9CvG,SAAS5C,EAAiBkJ,OAAO,EAAG,GAAI,MAAe,GAGlE,WAAaC,EAGxB,QAASlB,GAAmBV,GAExB,GAAIE,MACAoC,MAAQvlB,EAUZ,OARAulB,GAAWtC,EAAYN,aAAa,OAAO1S,QAAQ,YAAa,eAChEsV,EAAWA,EAAStV,QAAQ,eAAgB,UAE5CkT,EAAgBqC,MAAQD,EACxBpC,EAAgBnP,UAAY6O,EAE5BM,EAAgB/P,gBAAkBqS,EAAmBxC,GAE9CE,EAGX,QAASsC,GAAmBxC,GAExB,GAAIyC,MACAC,EAAS1C,EAAYH,qBAAqB,KAC1C7Q,KACAwB,MAAOzT,GACP4lB,MAAW5lB,GACX6lB,MAAS7lB,GACTxE,MAACwE,GACDuQ,EAAW,CAEf,KAAK/U,EAAI,EAAGA,EAAImqB,EAAO5pB,OAAQP,IAC3BiY,KAGAoS,EAAYF,EAAOnqB,GAAGmnB,aAAa,KAInClP,EAAQoS,UAAYnD,WAAWmD,GAC/BpS,EAAQzY,EAAI0nB,WAAWmD,GAGvBpS,EAAQI,EAAI6O,WAAWiD,EAAOnqB,GAAGmnB,aAAa,MAGnC,IAAPnnB,GAAciY,EAAQzY,IACtByY,EAAQzY,EAAI,GAGZQ,EAAI,IACJoqB,EAAc3T,EAASA,EAASlW,OAAS,GAEpC6pB,EAAY/R,IACT+R,EAAYC,UACZD,EAAY/R,EAAI6O,WAAWmD,GAAanD,WAAWkD,EAAYC,WAE/DD,EAAY/R,EAAIJ,EAAQzY,EAAI4qB,EAAY5qB,GAI3CyY,EAAQzY,IACL4qB,EAAYC,WACZpS,EAAQoS,UAAYnD,WAAWkD,EAAYC,WAAaD,EAAY/R,EACpEJ,EAAQzY,EAAI0nB,WAAWjP,EAAQoS,YAE/BpS,EAAQzY,EAAI4qB,EAAY5qB,EAAI4qB,EAAY/R,IAKpDtD,GAAYkD,EAAQI,EAGpB5B,EAAS1V,KAAKkX,EAOlB,OAJAiS,GAAgBrS,EAAIpB,EACpByT,EAAgBzB,UAAYhS,EAC5ByT,EAAgBnV,SAAWA,EAAWsS,EAE/B6C,EAGX,QAASI,GAA2BC,GAChC,GAAIC,OAAQhmB,GACRimB,MAASjmB,GACTkmB,MAASlmB,GACTmmB,MAAGnmB,EAwBP,OArBAgmB,GAAWxI,EAAA,QAAOtgB,YAAY6oB,EAAiBK,WAAW/iB,MAG1D4iB,EAAYI,EAAyBL,GAGrCC,EAAY,GAAIZ,aAAYY,EAAUhlB,QAGtCglB,EAAYvpB,OAAOC,aAAa+K,MAAM,KAAMue,GAG5CC,GAAY,GAAKI,YAAaC,gBAAgBN,EAAW,mBACzDE,EAAMD,EAAUM,cAAc,OAAOC,YAGrCN,EAAM3I,EAAA,QAAOtgB,YAAYipB,GAGzBO,EAAsBP,GAEfA,EAGX,QAASE,GAAyBL,GAC9B,GAEIW,OAAU3mB,GACV4mB,MAAY5mB,GACZ6mB,MAAW7mB,GACXxE,EAAI,CAaR,MARUwqB,EAASxqB,EAAI,IAAM,KAAOwqB,EAASxqB,EAAI,IAAM,KAAOwqB,EAASxqB,EAAI,IAAM,GAAKwqB,EAASxqB,GAC/FA,GAAK,GAGUwqB,EAASxqB,EAAI,IAAM,GAAKwqB,EAASxqB,GAChDA,GAAK,EAGEA,EAAIwqB,EAASjqB,QAMhB,GAJA4qB,GAAcX,EAASxqB,EAAI,IAAM,GAAKwqB,EAASxqB,GAC/CA,GAAK,EAGc,IAAfmrB,EASA,MANAC,IAAgBZ,EAASxqB,EAAI,IAAM,GAAKwqB,EAASxqB,GACjDA,GAAK,EAGLqrB,EAAc,GAAIxpB,YAAWupB,GAC7BC,EAAY3K,IAAI8J,EAASc,SAAStrB,EAAGA,EAAIorB,IAClCC,CAIf,OAAO,MAGX,QAASH,GAAsBK,GAC3BC,EAAUD,EAAM,EAAG,GACnBC,EAAUD,EAAM,EAAG,GACnBC,EAAUD,EAAM,EAAG,GACnBC,EAAUD,EAAM,EAAG,GAGvB,QAASC,GAAUjmB,EAAOkmB,EAAMC,GAC5B,GAAIC,GAAOpmB,EAAMkmB,EACjBlmB,GAAMkmB,GAAQlmB,EAAMmmB,GACpBnmB,EAAMmmB,GAAQC,EAIlB,QAASC,GAA0BrB,GAE/B,GAAItO,MACAE,MAAG3X,EAYP,OAVA2X,IACIC,OAAQmO,EAAiBK,WAAW/iB,KACpCgkB,SAAU,QAGd5P,EAAkB6P,YAAc,gDAChC7P,EAAkB3T,MAAQ,0BAC1B2T,EAAkBE,IAAMA,EACxBF,EAAkB8P,YAAc5P,EAEzBF,EAGX,QAAS+P,KAEL,GAAI/P,KAKJ,OAHAA,GAAkB6P,YAAcG,EAAWC,YAC3CjQ,EAAkB3T,MAAQ2jB,EAAWE,aAE9BlQ,EAGX,QAASmQ,GAAgBC,EAAQC,GAC7B,GAAIlV,MACAmV,KACAvF,EAAuBqF,EAAO/E,qBAAqB,wBAAwB,GAC3EkF,EAAaH,EAAO/E,qBAAqB,cAAc,GACvDiD,EAAmB,KACnBjT,MAAM9S,GACNioB,MAAWjoB,GACXyX,MAAiBzX,GACjBmmB,MAAGnmB,GACHkoB,MAAeloB,GACf8G,MAAS9G,GACTiS,MAAQjS,GACRxE,MAACwE,GAAE0T,MAAC1T,EAsDR,KAnDA4S,EAASuV,SAAW,MACpBvV,EAASwV,SAAW,wCACpBxV,EAAS9U,KAAuD,SAAhD0kB,EAAqBG,aAAa,UAAuB,UAAY,SACrF/P,EAASmB,qBAAuB2O,WAAWF,EAAqBG,aAAa,oBAAsBE,EACnGjQ,EAASyV,0BAA2F,IAA/D3F,WAAYF,EAAqBG,aAAa,aAAsBC,EAAAA,EAAWF,WAAWF,EAAqBG,aAAa,aAAeE,EAChLjQ,EAAS0V,cAAgBhG,EAAiBiG,sBAC1C3V,EAAS4V,oBAAqB,EAGR,YAAlB5V,EAAS9U,OACT8U,EAASgB,sBAAwB,GAAI7M,MAAK+gB,EAAmB9gB,UAA6C,IAAhC4L,EAASmB,sBACnFnB,EAAS6V,8BAA+B,EACxC7V,EAAS8V,qCAAsC,EAC/C9V,EAAS+V,0BAA2B,GAIxC/V,EAASgW,OAASrG,EAAUC,GAC5B5P,EAASI,gBAAkBJ,EAASgW,QAGpC9V,EAASF,EAASgW,OAClB9V,EAAOT,MAAQ,MAGIrS,KAAfgoB,IACAjC,EAAmB8B,EAAO/E,qBAAqB,oBAAoB,GAInEiD,EAAiBK,WAAW/iB,KAAO0iB,EAAiBK,WAAW/iB,KAAK4M,QAAQ,SAAU,IAGtFkW,EAAML,EAA2BC,GAGjCtO,EAAoB2P,EAA0BrB,GAC9CtO,EAAkB,oBAAsB0O,EACxC4B,EAAmBxrB,KAAKkb,GAGxBA,EAAoB+P,EAAgC1rB,KAAKwE,KAAMylB,GAC/DtO,EAAkB,oBAAsB0O,EACxC4B,EAAmBxrB,KAAKkb,GAExB7E,EAAS6L,kBAAoBsJ,EAC7BnV,EAASiW,0BAA4Bd,GAGzCE,EAAcnV,EAAOG,sBAEhBzX,EAAI,EAAGA,EAAIysB,EAAYlsB,OAAQP,GAAK,EACrCysB,EAAYzsB,GAAG2X,gBAAgB2V,eAAiB,kBAEb9oB,KAA/B4S,EAAS6L,oBACTwJ,EAAYzsB,GAAGijB,kBAAoB7L,EAAS6L,kBAC5CwJ,EAAYzsB,GAAGqtB,0BAA4BjW,EAASiW,2BAGlC,YAAlBjW,EAAS9U,MAEL8U,EAASmB,qBAAuB,GACD,UAA/BkU,EAAYzsB,GAAG6nB,aACfzQ,EAASmB,qBAAuBkU,EAAYzsB,GAAG2X,gBAAgBC,gBAAgB7C,WAC/EqC,EAASmB,qBAAuBkU,EAAYzsB,GAAG2X,gBAAgBC,gBAAgB7C,SAgB3F,IAXIqC,EAASmB,qBAAuBnB,EAAS0V,gBACzC1V,EAAS0V,cAAgB1V,EAASmB,4BAI/BnB,GAAS6L,wBACT7L,GAASiW,0BAKM,WAAlBjW,EAAS9U,KAAmB,CAC5B,IAAKtC,EAAI,EAAGA,EAAIysB,EAAYlsB,OAAQP,IACG,UAA/BysB,EAAYzsB,GAAG6nB,aAA0D,UAA/B4E,EAAYzsB,GAAG6nB,cACzDpR,EAAWgW,EAAYzsB,GAAG2X,gBAAgBC,gBAAgB6Q,UAC1Dnd,EAAYmL,EAAS,GAAGjX,EACnBktB,IACDA,EAAkBphB,GAEtBohB,EAAkBnlB,KAAKmO,IAAIgX,EAAiBphB,GAG5C8L,EAASyV,0BAA4BtlB,KAAKmO,IAAI0B,EAASyV,4BAA6BpW,EAASA,EAASlW,OAAS,GAAGf,EAAIiX,EAASA,EAASlW,OAAS,GAAG8X,GAAKgP,GAAgCkG,QAAQ,IAKzM,IAAIb,EAAkB,EAAG,CACrB,IAAK1sB,EAAI,EAAGA,EAAIysB,EAAYlsB,OAAQP,IAAK,CAErC,IADAyW,EAAWgW,EAAYzsB,GAAG2X,gBAAgBC,gBAAgB6Q,UACrDvQ,EAAI,EAAGA,EAAIzB,EAASlW,OAAQ2X,IACxBzB,EAASyB,GAAGmS,YACb5T,EAASyB,GAAGmS,UAAY5T,EAASyB,GAAG1Y,GAExCiX,EAASyB,GAAG1Y,GAAKktB,CAEc,WAA/BD,EAAYzsB,GAAG6nB,aAA0D,UAA/B4E,EAAYzsB,GAAG6nB,cACzDvQ,EAAOT,MAAQtP,KAAKimB,IAAI/W,EAAS,GAAGjX,EAAG8X,EAAOT,QAGtDS,EAAOT,OAASwQ,GAMxB,MAFA/P,GAAOvC,SAAWqC,EAASyV,0BAEpBzV,EAGX,QAASqW,GAAS5lB,GAEd,GAAIwkB,GAAS,IAEb,IAAI5F,OAAOqE,UACP,IACI,GAAIvoB,GAAS,GAAIkkB,QAAOqE,SAGxB,IADAuB,EAAS9pB,EAAOwoB,gBAAgBljB,EAAM,YAClCwkB,EAAO/E,qBAAqB,eAAe/mB,OAAS,EACpD,KAAM,IAAIL,OAAM,qBAEtB,MAAOX,GACLmuB,EAAaC,cAAc,8BAA+B,QAAS9lB,EAAMtI,GACzE8sB,EAAS,KAIjB,MAAOA,GAIX,QAASuB,GAAc/lB,GACnB,GAAIwkB,GAAS,KACTjV,EAAW,KAET9L,EAAYmb,OAAOoH,YAAYC,KAGrCzB,GAASoB,EAAS5lB,EAElB,IAAMkmB,GAAetH,OAAOoH,YAAYC,KAExC,IAAe,OAAXzB,EACA,MAAO,KAIXjV,GAAWgV,EAAgBC,EAAQ,GAAI9gB,MAEvC,IAAMyiB,GAAevH,OAAOoH,YAAYC,KAIxC,OAFAjiB,GAAI,mCAAqCkiB,EAAeziB,GAAW2iB,YAAY,GAAK,kBAAoBD,EAAeD,GAAcE,YAAY,GAAK,gBAAkBD,EAAe1iB,GAAa,KAAM2iB,YAAY,GAAK,MAEpN7W,EA9mBX,GAAMzK,GAAU7H,KAAK6H,QACfsf,GAAa,EAAAiC,EAAA,SAAkBvhB,GAASE,cACxChB,GAAM,EAAAuH,EAAA,SAAMzG,GAASE,cAAchB,IACnC6hB,EAAe7a,EAAOsb,WAEtB9G,EAAiC,IACjCuB,GAAoB,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,QAC3De,GACFyE,KAAO,EACPC,MAAO,EACPC,KAAO,EACPC,KAAO,EACPC,MAAO,EACPC,KAAO,EACPC,KAAO,EACPC,MAAO,EACPC,KAAO,EACPC,KAAO,EACPC,MAAO,GACPC,IAAM,GACNC,KAAM,IAEJjH,GACFkH,MAAS,YACTC,MAAS,YACTC,KAAQ,mBAGRriB,MAAQtI,GACRsiB,MAAgBtiB,EA0lBpB,OANAsI,IACI1K,MAAOwrB,GAGX1iB,IAEO4B,2DA/nBW,eACG,cACP,cACC,cACW,UA8nB9B+Z,GAAU9Z,sBAAwB,sBACnB+J,EAAA,QAAatH,gBAAgBqX,44BCnoBrB,UAKjBuI,EAAiB,SAAAjf,GAKR,QALTif,YAAAA,GAMEhf,EAAAC,OAAAC,eANF8e,EAAiB3sB,WAAA,cAAAqC,MAAAxE,KAAAwE,MAYfA,KAAKuqB,cAAgB,cAMrBvqB,KAAKwqB,aAAe,gBAMpBxqB,KAAKyqB,cAAgB,eAMrBzqB,KAAK0qB,2BAA6B,qBAMlC1qB,KAAK2qB,MAAQ,QAMb3qB,KAAKshB,2BAA6B,2BAKlCthB,KAAK4qB,yBAA2B,yBAKhC5qB,KAAK6qB,2BAA6B,2BAKlC7qB,KAAK4H,IAAM,MAMX5H,KAAK8qB,gBAAkB,iBAKvB9qB,KAAK+qB,gBAAkB,iBAKvB/qB,KAAKgrB,eAAiB,gBAKtBhrB,KAAKirB,aAAe,cAKpBjrB,KAAKkrB,eAAiB,gBAKtBlrB,KAAKmrB,wBAA0B,wBAK/BnrB,KAAKorB,sBAAwB,sBAM7BprB,KAAKqrB,yBAA2B,yBAMhCrrB,KAAKsrB,wBAA0B,wBAM/BtrB,KAAKurB,mBAAqB,oBAM1BvrB,KAAKwrB,yBAA2B,yBAMhCxrB,KAAKyrB,kBAAoB,qBAKzBzrB,KAAK0rB,iBAAmB,iBAQxB1rB,KAAK2rB,SAAW,UAMhB3rB,KAAK4rB,eAAiB,gBAOtB5rB,KAAK6rB,eAAiB,gBAKtB7rB,KAAK8rB,qBAAuB,qBAM5B9rB,KAAK+rB,yBAA2B,yBAKhC/rB,KAAKgsB,gBAAkB,iBAOvBhsB,KAAKisB,iBAAmB,kBAOxBjsB,KAAKksB,kBAAoB,mBAKzBlsB,KAAKmsB,sBAAwB,sBAK7BnsB,KAAKosB,gBAAkB,iBAKvBpsB,KAAKqsB,iBAAmB,kBAMxBrsB,KAAKqhB,oBAAsB,oBAQ3BrhB,KAAKssB,iBAAmB,kBAKxBtsB,KAAKusB,sBAAwB,+BArN/BjC,EAAiBjf,GAAjBif,cAyNFkC,EAAoB,GAAIlC,aACbkC,ucCzNTC,EAAS,WA+BC,QA/BVA,YAAAA,GAgCEzsB,KAAK0sB,gBAhCPD,qBAEG,WACDzsB,KAAK2sB,OAAS,SACd3sB,KAAK2W,MAAQ,QACb3W,KAAK6W,MAAQ,QACb7W,KAAK4sB,KAAO,OACZ5sB,KAAK+gB,gBAAkB,iBACvB/gB,KAAK6sB,cAAgB,eACrB7sB,KAAK8sB,MAAQ,QACb9sB,KAAK+sB,SAAW,WAChB/sB,KAAKgtB,WAAa,aAClBhtB,KAAKitB,aAAe,UACpBjtB,KAAKktB,YAAc,SACnBltB,KAAKmtB,IAAM,MACXntB,KAAKotB,IAAM,MACXptB,KAAKkkB,KAAO,OACZlkB,KAAKqtB,KAAO,OACZrtB,KAAKstB,IAAM,MACXttB,KAAKutB,KAAO,OACZvtB,KAAKnE,KAAO,QACZmE,KAAKwtB,6BAA+B,6BACpCxtB,KAAKytB,cAAgB,cACrBztB,KAAK0tB,WAAa,YAClB1tB,KAAK2tB,qBAAuB,aAC5B3tB,KAAK4tB,kBAAoB,UACzB5tB,KAAK6tB,wBAA0B,gBAC/B7tB,KAAK8tB,8BAAgC,gBACrC9tB,KAAK+tB,oBAAsB,WA5B7BtB,KAoCFuB,EAAY,GAAIvB,aACLuB,2fC1CI,UAEbC,EAAgB,mBAAhBA,YAAAA,YAAAA,EAAgB;wDASc,SAACC,GAE7B,IAAK,GADDC,GAAS,KACJjzB,EAAI,EAAGA,EAAIgzB,EAAQzyB,SAAUP,EAAG,CACrC,GAAIkzB,GAAKF,EAAQhzB,EACoB,sCAAjCkzB,EAAGpH,YAAYqH,eACgB,SAA3BD,EAAG5qB,MAAM6qB,gBACbF,EAASC,GAEjB,MAAOD,8BASO,SAACnR,GACf,GAAI1d,GAAS,EACTgvB,EAAO,GAAIruB,UAAS+c,GAGpB3e,EAAUiwB,EAAKxvB,SAASQ,EAS5B,OAPAA,IAAU,GAENjB,EAAU,IACViB,GAAU,EAAK,GAAKgvB,EAAK1rB,UAAUtD,IAGvCA,GAAU,EACH0d,EAAK1B,MAAMhc,sCAaI,SAACivB,EAAWxR,GAClC,GAAIyR,GAAWP,EAAiBQ,cAAc1R,EAC9C,OAAIyR,GAAStlB,eAAeqlB,EAAU9H,KAAK4H,eAChCG,EAASD,EAAU9H,KAAK4H,eAE5B,uDAU8B,SAACK,GACtC,MAAI,QAAUA,GACHxR,EAAA,QAAOtgB,YAAY8xB,EAAO1R,KAAK1F,QAAQ3W,OAE3C,kCAYS,SAACoC,GAEjB,GAAa,OAATA,EACA,QAQJ,KANA,GAAI4rB,GAAK,GAAI1uB,UAAS8C,GAClB6rB,GAAO,EACP5R,KAGA6R,EAAa,GACTD,GAAM,CAEV,GAAI3tB,OAAIvB,GACJovB,MAAOpvB,GACPrB,MAAOqB,GACPqvB,MAAQrvB,GAERsvB,EAAWH,CAEf,IAAIA,GAAcF,EAAGhuB,OAAO9B,WACxB,KAQJ,IALAoC,EAAO0tB,EAAG/rB,UAAUisB,GACpBC,EAAUD,EAAa5tB,EACvB4tB,GAAc,EAGmB,aAA7BF,EAAG/rB,UAAUisB,GAQjB,GAJAA,GAAc,EAIE,KADhBxwB,EAAUswB,EAAG7vB,SAAS+vB,KACW,IAAZxwB,EAArB,CAIAwwB,IAEAA,GAAc,EAGdE,EAAW,EACX,IAAI7zB,OAACwE,GAAEuvB,MAAGvvB,EACV,KAAKxE,EAAI,EAAGA,EAAI,EAAGA,IACf+zB,EAAMN,EAAG7vB,SAAS+vB,EAAa3zB,GAAGipB,SAAS,IAC3C4K,GAA4B,IAAhBE,EAAKxzB,OAAgB,IAAMwzB,EAAMA,CAIjD,KAFAJ,GAAc,EACdE,GAAY,IACP7zB,EAAI,EAAGA,EAAI,EAAGA,IACf+zB,EAAMN,EAAG7vB,SAAS+vB,EAAa3zB,GAAGipB,SAAS,IAC3C4K,GAA4B,IAAhBE,EAAKxzB,OAAgB,IAAMwzB,EAAMA,CAIjD,KAFAJ,GAAc,EACdE,GAAY,IACP7zB,EAAI,EAAGA,EAAI,EAAGA,IACf+zB,EAAMN,EAAG7vB,SAAS+vB,EAAa3zB,GAAGipB,SAAS,IAC3C4K,GAA4B,IAAhBE,EAAKxzB,OAAgB,IAAMwzB,EAAMA,CAIjD,KAFAJ,GAAc,EACdE,GAAY,IACP7zB,EAAI,EAAGA,EAAI,EAAGA,IACf+zB,EAAMN,EAAG7vB,SAAS+vB,EAAa3zB,GAAGipB,SAAS,IAC3C4K,GAA4B,IAAhBE,EAAKxzB,OAAgB,IAAMwzB,EAAMA,CAIjD,KAFAJ,GAAc,EACdE,GAAY,IACP7zB,EAAI,EAAGA,EAAI,EAAGA,IACf+zB,EAAMN,EAAG7vB,SAAS+vB,EAAa3zB,GAAGipB,SAAS,IAC3C4K,GAA4B,IAAhBE,EAAKxzB,OAAgB,IAAMwzB,EAAMA,CAEjDJ,IAAc,EAEdE,EAAWA,EAASV,cAGLM,EAAG/rB,UAAUisB,GAC5BA,GAAc,EAGd7R,EAAK+R,GAAYJ,EAAGhuB,OAAO2a,MAAM0T,EAAUF,GAC3CD,EAAaC,MAhDTD,GAAaC,MARbD,GAAaC,EA2DrB,MAAO9R,OA7KTiR,eAiLSA,kHCpKf,QAASiB,KAKL,QAASxC,GAAKyC,GACNA,IACAC,EAAWD,GAInB,QAASE,GAAWrS,EAAM6I,GACtB,GAAIyJ,OAAU5vB,GACViQ,GAAU,EACV4f,EAAS,GACTvxB,MAAG0B,GACHxE,MAACwE,GAAE0T,MAAC1T,EAIR,KAFA4vB,EAAa,GAAIvyB,YAAWigB,GAEvB9hB,EAAI,EAAGA,GAAKo0B,EAAW7zB,QAAU8zB,EAAS,GAAIr0B,IAC/C,GAAsB,KAAlBo0B,EAAWp0B,IAAqC,KAAtBo0B,EAAWp0B,EAAI,GAAa,CAEtD,IADA8C,EAAM9C,EAAI,EACLkY,EAAIpV,EAAKoV,EAAKpV,EAAMuxB,EAASnc,IAC9B,GAAsB,MAAlBkc,EAAWlc,GAAa,CACxBzD,GAAU,CACV,OAGR,MAQR,MAJIA,IACA2f,EAAW1T,IAAIiK,EAAK7nB,GAGjBsxB,EAAW3uB,OAGtB,QAAS6uB,GAAYpB,GACjB,GAAIpR,GAAO,IAaX,OAVIA,GADAoS,GAAYA,EAASpS,KACdE,EAAA,QAAOtgB,YAAYwyB,EAASpS,MAAMrc,OAElC8uB,EAAA,QAAiBC,mCAAmCtB,GAI3DpR,IACAA,EAAOqS,EAAWrS,EAAMoR,EAAG,sBAGxBpR,EAGX,QAAS2S,KACL,MAAO,MAGX,QAASC,GAA6B5oB,GAClC,MAAO,IAAIjK,YAAWiK,GAG1B,QAAS6oB,KACL,MAAO,MAhEX,GACIT,GAAW,IA6Ef,QAVI3I,KAAMA,EACNW,YAAaA,EACbC,aAAcA,EACdqF,KAAMA,EACN8C,YAAaA,EACbG,6BAA8BA,EAC9BC,6BAA8BA,EAC9BC,gCAAiCA,4DArFZ,eACJ,cAKN,UAHbpJ,EAAO,uCACPY,EAAe,qBACfD,EAAc,YAAcX,CAsFlCyI,GAAkBjnB,sBAAwB,8BAC3B+J,EAAA,QAAa7J,oBAAoB+mB,4NC/F1CY,GAES,QAFTA,YAAAA,GAGE9vB,KAAKqgB,SAAW,KAChBrgB,KAAK0U,UAAY,KACjB1U,KAAKugB,YAAc,KACnBvgB,KAAK8f,QAAUjR,IACf7O,KAAKJ,MAAQiP,IACb7O,KAAKS,MAAQ,KACbT,KAAK+R,MAAQlD,IACb7O,KAAK2T,IAAM9E,IACX7O,KAAKiQ,SAAWpB,IAChB7O,KAAKggB,iBAAmB,gBAIjB8P,8MCjBTC,GACS,QADTA,YAAAA,GAEE/vB,KAAK6P,OAASkgB,EAAgBC,gBAC9BhwB,KAAKwG,UAAYqI,IACjB7O,KAAK8T,UAAY,KACjB9T,KAAK0U,UAAY,KACjB1U,KAAKxC,KAAO,KACZwC,KAAKiQ,SAAWpB,IAChB7O,KAAK0T,UAAY7E,IACjB7O,KAAK0F,MAAQ,KACb1F,KAAK0P,IAAM,KACX1P,KAAKiwB,gBAAkB,KACvBjwB,KAAKkwB,iBAAmB,KACxBlwB,KAAKmwB,cAAgB,KACrBnwB,KAAKowB,eAAiB,KACtBpwB,KAAK8f,QAAUjR,IACf7O,KAAKJ,MAAQiP,IACb7O,KAAKsT,sBAAwB,KAC7BtT,KAAKqwB,oBAAsB,KAC3BrwB,KAAKswB,cAAgB,KACrBtwB,KAAKuwB,YAAc1hB,IACnB7O,KAAKwwB,WAAa3hB,IAClB7O,KAAKywB,iBAAmB5hB,IACxB7O,KAAK0wB,aAAe,cACpB1wB,KAAKggB,iBAAmB,KAIhC+P,GAAgBC,gBAAkB,WAClCD,EAAgBjgB,gBAAkB,qBAEnBigB,8MC9BTnQ,GAIS,QAJTA,YAAAA,GASE5f,KAAK2wB,MAAQ,KAab3wB,KAAKxC,KAAO,KAKZwC,KAAK0P,IAAM,KAKX1P,KAAK4wB,UAAY,KAKjB5wB,KAAK0F,MAAQ,KAKb1F,KAAK6wB,SAAW,KAKhB7wB,KAAK8wB,UAAY,KAKjB9wB,KAAK+wB,aAAe,KAKpB/wB,KAAKgxB,SAAW,KAKhBhxB,KAAKixB,SAMLjxB,KAAKkxB,QAAU,KAKflxB,KAAKmxB,SAAW,KAKhBnxB,KAAKoxB,eAAiB,KAKtBpxB,KAAKqxB,iBAAmB,KAKxBrxB,KAAKsxB,iBAAmB,MAO1BC,EAIS,QAJTA,YAAAA,GASEvxB,KAAKnF,EAAI,KAKTmF,KAAKuT,EAAI,KAKTvT,KAAKwxB,KAIb5R,GAAY6R,IAAM,MAClB7R,EAAY8R,KAAO,OACnB9R,EAAY+R,SAAW,MACvB/R,EAAYgS,qBAAuB,iBACnChS,EAAYC,kBAAoB,wBAChCD,EAAYiS,mBAAqB,eACjCjS,EAAYkS,mBAAqB,eACjClS,EAAYmS,iCAAmC,4BAC/CnS,EAAYoS,WAAa,UAEhBpS,YAAAA,IAAa2R,iBAAAA","file":"dash.mss.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* $Date: 2007-06-12 18:02:31 $ */\n\n// from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/\n// Handles encode/decode of ASCII and Unicode strings.\n\nvar UTF8 = {};\nUTF8.encode = function(s) {\n    var u = [];\n    for (var i = 0; i < s.length; ++i) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            u.push(c);\n        } else if (c < 0x800) {\n            u.push(0xC0 | (c >> 6));\n            u.push(0x80 | (63 & c));\n        } else if (c < 0x10000) {\n            u.push(0xE0 | (c >> 12));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        } else {\n            u.push(0xF0 | (c >> 18));\n            u.push(0x80 | (63 & (c >> 12)));\n            u.push(0x80 | (63 & (c >> 6)));\n            u.push(0x80 | (63 & c));\n        }\n    }\n    return u;\n};\nUTF8.decode = function(u) {\n    var a = [];\n    var i = 0;\n    while (i < u.length) {\n        var v = u[i++];\n        if (v < 0x80) {\n            // no need to mask byte\n        } else if (v < 0xE0) {\n            v = (31 & v) << 6;\n            v |= (63 & u[i++]);\n        } else if (v < 0xF0) {\n            v = (15 & v) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        } else {\n            v = (7 & v) << 18;\n            v |= (63 & u[i++]) << 12;\n            v |= (63 & u[i++]) << 6;\n            v |= (63 & u[i++]);\n        }\n        a.push(String.fromCharCode(v));\n    }\n    return a.join('');\n};\n\nvar BASE64 = {};\n(function(T){\n    var encodeArray = function(u) {\n        var i = 0;\n        var a = [];\n        var n = 0 | (u.length / 3);\n        while (0 < n--) {\n            var v = (u[i] << 16) + (u[i+1] << 8) + u[i+2];\n            i += 3;\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push(T.charAt(63 & v));\n        }\n        if (2 == (u.length - i)) {\n            var v = (u[i] << 16) + (u[i+1] << 8);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push(T.charAt(63 & (v >> 6)));\n            a.push('=');\n        } else if (1 == (u.length - i)) {\n            var v = (u[i] << 16);\n            a.push(T.charAt(63 & (v >> 18)));\n            a.push(T.charAt(63 & (v >> 12)));\n            a.push('==');\n        }\n        return a.join('');\n    }\n    var R = (function(){\n        var a = [];\n        for (var i=0; i<T.length; ++i) {\n            a[T.charCodeAt(i)] = i;\n        }\n        a['='.charCodeAt(0)] = 0;\n        return a;\n    })();\n    var decodeArray = function(s) {\n        var i = 0;\n        var u = [];\n        var n = 0 | (s.length / 4);\n        while (0 < n--) {\n            var v = (R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i+1)] << 12) + (R[s.charCodeAt(i+2)] << 6) + R[s.charCodeAt(i+3)];\n            u.push(255 & (v >> 16));\n            u.push(255 & (v >> 8));\n            u.push(255 & v);\n            i += 4;\n        }\n        if (u) {\n            if ('=' == s.charAt(i-2)) {\n                u.pop();\n                u.pop();\n            } else if ('=' == s.charAt(i-1)) {\n                u.pop();\n            }\n        }\n        return u;\n    }\n    var ASCII = {};\n    ASCII.encode = function(s) {\n        var u = [];\n        for (var i = 0; i<s.length; ++i) {\n            u.push(s.charCodeAt(i));\n        }\n        return u;\n    };\n    ASCII.decode = function(u) {\n        for (var i = 0; i<s.length; ++i) {\n            a[i] = String.fromCharCode(a[i]);\n        }\n        return a.join('');\n    };\n    BASE64.decodeArray = function(s) {\n        var u = decodeArray(s);\n        return new Uint8Array(u);\n    };\n    BASE64.encodeASCII = function(s) {\n        var u = ASCII.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decodeASCII = function(s) {\n        var a = decodeArray(s);\n        return ASCII.decode(a);\n    };\n    BASE64.encode = function(s) {\n        var u = UTF8.encode(s);\n        return encodeArray(u);\n    };\n    BASE64.decode = function(s) {\n        var u = decodeArray(s);\n        return UTF8.decode(u);\n    };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\n/*The following polyfills are not used in dash.js but have caused multiplayer integration issues.\n Therefore commenting them out.\nif (undefined === btoa) {\n    var btoa = BASE64.encode;\n}\nif (undefined === atob) {\n    var atob = BASE64.decode;\n}\n*/\n\nif (typeof exports !== 'undefined') {\n    exports.decode = BASE64.decode;\n    exports.decodeArray = BASE64.decodeArray;\n}\n","/*! codem-isoboxer v0.3.4 https://github.com/madebyhiro/codem-isoboxer/blob/master/LICENSE.txt */\nvar ISOBoxer = {};\n\nISOBoxer.parseBuffer = function(arrayBuffer) {\n  return new ISOFile(arrayBuffer).parse();\n};\n\nISOBoxer.addBoxProcessor = function(type, parser) {\n  if (typeof type !== 'string' || typeof parser !== 'function') {\n    return;\n  }\n  ISOBox.prototype._boxProcessors[type] = parser;\n};\n\nISOBoxer.createFile = function() {\n  return new ISOFile();\n};\n\n// See ISOBoxer.append() for 'pos' parameter syntax\nISOBoxer.createBox = function(type, parent, pos) {\n  var newBox = ISOBox.create(type);\n  if (parent) {\n    parent.append(newBox, pos);\n  }\n  return newBox;\n};\n\n// See ISOBoxer.append() for 'pos' parameter syntax\nISOBoxer.createFullBox = function(type, parent, pos) {\n  var newBox = ISOBoxer.createBox(type, parent, pos);\n  newBox.version = 0;\n  newBox.flags = 0;\n  return newBox;\n};\n\nISOBoxer.Utils = {};\nISOBoxer.Utils.dataViewToString = function(dataView, encoding) {\n  var impliedEncoding = encoding || 'utf-8';\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder(impliedEncoding).decode(dataView);\n  }\n  var a = [];\n  var i = 0;\n\n  if (impliedEncoding === 'utf-8') {\n    /* The following algorithm is essentially a rewrite of the UTF8.decode at\n    http://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/\n    */\n\n    while (i < dataView.byteLength) {\n      var c = dataView.getUint8(i++);\n      if (c < 0x80) {\n        // 1-byte character (7 bits)\n      } else if (c < 0xe0) {\n        // 2-byte character (11 bits)\n        c = (c & 0x1f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      } else if (c < 0xf0) {\n        // 3-byte character (16 bits)\n        c = (c & 0xf) << 12;\n        c |= (dataView.getUint8(i++) & 0x3f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      } else {\n        // 4-byte character (21 bits)\n        c = (c & 0x7) << 18;\n        c |= (dataView.getUint8(i++) & 0x3f) << 12;\n        c |= (dataView.getUint8(i++) & 0x3f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      }\n      a.push(String.fromCharCode(c));\n    }\n  } else { // Just map byte-by-byte (probably wrong)\n    while (i < dataView.byteLength) {\n      a.push(String.fromCharCode(dataView.getUint8(i++)));\n    }\n  }\n  return a.join('');\n};\n\nISOBoxer.Utils.utf8ToByteArray = function(string) {\n  // Only UTF-8 encoding is supported by TextEncoder\n  var u, i;\n  if (typeof TextEncoder !== 'undefined') {\n    u = new TextEncoder().encode(string);\n  } else {\n    u = [];\n    for (i = 0; i < string.length; ++i) {\n      var c = string.charCodeAt(i);\n      if (c < 0x80) {\n        u.push(c);\n      } else if (c < 0x800) {\n        u.push(0xC0 | (c >> 6));\n        u.push(0x80 | (63 & c));\n      } else if (c < 0x10000) {\n        u.push(0xE0 | (c >> 12));\n        u.push(0x80 | (63 & (c >> 6)));\n        u.push(0x80 | (63 & c));\n      } else {\n        u.push(0xF0 | (c >> 18));\n        u.push(0x80 | (63 & (c >> 12)));\n        u.push(0x80 | (63 & (c >> 6)));\n        u.push(0x80 | (63 & c));\n      }\n    }\n  }\n  return u;\n};\n\n// Method to append a box in the list of child boxes\n// The 'pos' parameter can be either:\n//   - (number) a position index at which to insert the new box\n//   - (string) the type of the box after which to insert the new box\n//   - (object) the box after which to insert the new box\nISOBoxer.Utils.appendBox = function(parent, box, pos) {\n  box._offset = parent._cursor.offset;\n  box._root = (parent._root ? parent._root : parent);\n  box._raw = parent._raw;\n  box._parent = parent;\n\n  if (pos === -1) {\n    // The new box is a sub-box of the parent but not added in boxes array,\n    // for example when the new box is set as an entry (see dref and stsd for example)\n    return;\n  }\n\n  if (pos === undefined || pos === null) {\n    parent.boxes.push(box);\n    return;\n  }\n\n  var index = -1,\n      type;\n\n  if (typeof pos === \"number\") {\n    index = pos;\n  } else {\n    if (typeof pos === \"string\") {\n      type = pos;\n    } else if (typeof pos === \"object\" && pos.type) {\n      type = pos.type;\n    } else {\n      parent.boxes.push(box);\n      return;\n    }\n\n    for (var i = 0; i < parent.boxes.length; i++) {\n      if (type === parent.boxes[i].type) {\n        index = i + 1;\n        break;\n      }\n    }\n  }\n  parent.boxes.splice(index, 0, box);\n};\n\nif (typeof exports !== 'undefined') {\n  exports.parseBuffer     = ISOBoxer.parseBuffer;\n  exports.addBoxProcessor = ISOBoxer.addBoxProcessor;\n  exports.createFile      = ISOBoxer.createFile;\n  exports.createBox       = ISOBoxer.createBox;\n  exports.createFullBox   = ISOBoxer.createFullBox;\n  exports.Utils           = ISOBoxer.Utils;\n}\n\nISOBoxer.Cursor = function(initialOffset) {\n  this.offset = (typeof initialOffset == 'undefined' ? 0 : initialOffset);\n};\n\nvar ISOFile = function(arrayBuffer) {\n  this._cursor = new ISOBoxer.Cursor();\n  this.boxes = [];\n  if (arrayBuffer) {\n    this._raw = new DataView(arrayBuffer);\n  }\n};\n\nISOFile.prototype.fetch = function(type) {\n  var result = this.fetchAll(type, true);\n  return (result.length ? result[0] : null);\n};\n\nISOFile.prototype.fetchAll = function(type, returnEarly) {\n  var result = [];\n  ISOFile._sweep.call(this, type, result, returnEarly);\n  return result;\n};\n\nISOFile.prototype.parse = function() {\n  this._cursor.offset = 0;\n  this.boxes = [];\n  while (this._cursor.offset < this._raw.byteLength) {\n    var box = ISOBox.parse(this);\n\n    // Box could not be parsed\n    if (typeof box.type === 'undefined') break;\n\n    this.boxes.push(box);\n  }\n  return this;\n};\n\nISOFile._sweep = function(type, result, returnEarly) {\n  if (this.type && this.type == type) result.push(this);\n  for (var box in this.boxes) {\n    if (result.length && returnEarly) return;\n    ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);\n  }\n};\n\nISOFile.prototype.write = function() {\n\n  var length = 0,\n      i;\n\n  for (i = 0; i < this.boxes.length; i++) {\n    length += this.boxes[i].getLength(false);\n  }\n\n  var bytes = new Uint8Array(length);\n  this._rawo = new DataView(bytes.buffer);\n  this.bytes = bytes;\n  this._cursor.offset = 0;\n\n  for (i = 0; i < this.boxes.length; i++) {\n    this.boxes[i].write();\n  }\n\n  return bytes.buffer;\n};\n\nISOFile.prototype.append = function(box, pos) {\n  ISOBoxer.Utils.appendBox(this, box, pos);\n};\nvar ISOBox = function() {\n  this._cursor = new ISOBoxer.Cursor();\n};\n\nISOBox.parse = function(parent) {\n  var newBox = new ISOBox();\n  newBox._offset = parent._cursor.offset;\n  newBox._root = (parent._root ? parent._root : parent);\n  newBox._raw = parent._raw;\n  newBox._parent = parent;\n  newBox._parseBox();\n  parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength;\n  return newBox;\n};\n\nISOBox.create = function(type) {\n  var newBox = new ISOBox();\n  newBox.type = type;\n  newBox.boxes = [];\n  return newBox;\n};\n\nISOBox.prototype._boxContainers = ['dinf', 'edts', 'mdia', 'meco', 'mfra', 'minf', 'moof', 'moov', 'mvex', 'stbl', 'strk', 'traf', 'trak', 'tref', 'udta', 'vttc', 'sinf', 'schi', 'encv', 'enca'];\n\nISOBox.prototype._boxProcessors = {};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Generic read/write functions\n\nISOBox.prototype._procField = function (name, type, size) {\n  if (this._parsing) {\n    this[name] = this._readField(type, size);\n  }\n  else {\n    this._writeField(type, size, this[name]);\n  }\n};\n\nISOBox.prototype._procFieldArray = function (name, length, type, size) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name][i] = this._readField(type, size);\n    }\n  }\n  else {\n    for (i = 0; i < this[name].length; i++) {\n      this._writeField(type, size, this[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procFullBox = function() {\n  this._procField('version', 'uint', 8);\n  this._procField('flags', 'uint', 24);\n};\n\nISOBox.prototype._procEntries = function(name, length, fn) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name].push({});\n      fn.call(this, this[name][i]);\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      fn.call(this, this[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procSubEntries = function(entry, name, length, fn) {\n  var i;\n  if (this._parsing) {\n    entry[name] = [];\n    for (i = 0; i < length; i++) {\n      entry[name].push({});\n      fn.call(this, entry[name][i]);\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      fn.call(this, entry[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procEntryField = function (entry, name, type, size) {\n  if (this._parsing) {\n    entry[name] = this._readField(type, size);\n  }\n  else {\n    this._writeField(type, size, entry[name]);\n  }\n};\n\nISOBox.prototype._procSubBoxes = function(name, length) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name].push(ISOBox.parse(this));\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      if (this._rawo) {\n        this[name][i].write();\n      } else {\n        this.size += this[name][i].getLength();\n      }\n    }\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Read/parse functions\n\nISOBox.prototype._readField = function(type, size) {\n  switch (type) {\n    case 'uint':\n      return this._readUint(size);\n    case 'int':\n      return this._readInt(size);\n    case 'template':\n      return this._readTemplate(size);\n    case 'string':\n      return (size === -1) ? this._readTerminatedString() : this._readString(size);\n    case 'data':\n      return this._readData(size);\n    case 'utf8':\n      return this._readUTF8String();\n    default:\n      return -1;\n  }\n};\n\nISOBox.prototype._readInt = function(size) {\n  var result = null,\n      offset = this._cursor.offset - this._raw.byteOffset;\n  switch(size) {\n  case 8:\n    result = this._raw.getInt8(offset);\n    break;\n  case 16:\n    result = this._raw.getInt16(offset);\n    break;\n  case 32:\n    result = this._raw.getInt32(offset);\n    break;\n  case 64:\n    // Warning: JavaScript cannot handle 64-bit integers natively.\n    // This will give unexpected results for integers >= 2^53\n    var s1 = this._raw.getInt32(offset);\n    var s2 = this._raw.getInt32(offset + 4);\n    result = (s1 * Math.pow(2,32)) + s2;\n    break;\n  }\n  this._cursor.offset += (size >> 3);\n  return result;\n};\n\nISOBox.prototype._readUint = function(size) {\n  var result = null,\n      offset = this._cursor.offset - this._raw.byteOffset,\n      s1, s2;\n  switch(size) {\n  case 8:\n    result = this._raw.getUint8(offset);\n    break;\n  case 16:\n    result = this._raw.getUint16(offset);\n    break;\n  case 24:\n    s1 = this._raw.getUint16(offset);\n    s2 = this._raw.getUint8(offset + 2);\n    result = (s1 << 8) + s2;\n    break;\n  case 32:\n    result = this._raw.getUint32(offset);\n    break;\n  case 64:\n    // Warning: JavaScript cannot handle 64-bit integers natively.\n    // This will give unexpected results for integers >= 2^53\n    s1 = this._raw.getUint32(offset);\n    s2 = this._raw.getUint32(offset + 4);\n    result = (s1 * Math.pow(2,32)) + s2;\n    break;\n  }\n  this._cursor.offset += (size >> 3);\n  return result;\n};\n\nISOBox.prototype._readString = function(length) {\n  var str = '';\n  for (var c = 0; c < length; c++) {\n    var char = this._readUint(8);\n    str += String.fromCharCode(char);\n  }\n  return str;\n};\n\nISOBox.prototype._readTemplate = function(size) {\n  var pre = this._readUint(size / 2);\n  var post = this._readUint(size / 2);\n  return pre + (post / Math.pow(2, size / 2));\n};\n\nISOBox.prototype._readTerminatedString = function() {\n  var str = '';\n  while (this._cursor.offset - this._offset < this._raw.byteLength) {\n    var char = this._readUint(8);\n    if (char === 0) break;\n    str += String.fromCharCode(char);\n  }\n  return str;\n};\n\nISOBox.prototype._readData = function(size) {\n  var length = (size > 0) ? size : (this._raw.byteLength - (this._cursor.offset - this._offset));\n  var data = new DataView(this._raw.buffer, this._cursor.offset, length);\n  this._cursor.offset += length;\n  return data;\n};\n\nISOBox.prototype._readUTF8String = function() {\n  var data = this._readData();\n  return ISOBoxer.Utils.dataViewToString(data);\n};\n\nISOBox.prototype._parseBox = function() {\n  this._parsing = true;\n  this._cursor.offset = this._offset;\n\n  // return immediately if there are not enough bytes to read the header\n  if (this._offset + 8 > this._raw.buffer.byteLength) {\n    this._root._incomplete = true;\n    return;\n  }\n\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  switch(this.size) {\n  case 0:\n    this._raw = new DataView(this._raw.buffer, this._offset, (this._raw.byteLength - this._cursor.offset + 8));\n    break;\n  case 1:\n    if (this._offset + this.size > this._raw.buffer.byteLength) {\n      this._incomplete = true;\n      this._root._incomplete = true;\n    } else {\n      this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);\n    }\n    break;\n  default:\n    if (this._offset + this.size > this._raw.buffer.byteLength) {\n      this._incomplete = true;\n      this._root._incomplete = true;\n    } else {\n      this._raw = new DataView(this._raw.buffer, this._offset, this.size);\n    }\n  }\n\n  // additional parsing\n  if (!this._incomplete) {\n    if (this._boxProcessors[this.type]) {\n      this._boxProcessors[this.type].call(this);\n    }\n    if (this._boxContainers.indexOf(this.type) !== -1) {\n      this._parseContainerBox();\n    } else{\n      // Unknown box => read and store box content\n      this._data = this._readData();\n    }\n  }\n};\n\nISOBox.prototype._parseFullBox = function() {\n  this.version = this._readUint(8);\n  this.flags = this._readUint(24);\n};\n\nISOBox.prototype._parseContainerBox = function() {\n  this.boxes = [];\n  while (this._cursor.offset - this._raw.byteOffset < this._raw.byteLength) {\n    this.boxes.push(ISOBox.parse(this));\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Write functions\n\nISOBox.prototype.append = function(box, pos) {\n  ISOBoxer.Utils.appendBox(this, box, pos);\n};\n\nISOBox.prototype.getLength = function() {\n  this._parsing = false;\n  this._rawo = null;\n\n  this.size = 0;\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  if (this._boxProcessors[this.type]) {\n    this._boxProcessors[this.type].call(this);\n  }\n\n  if (this._boxContainers.indexOf(this.type) !== -1) {\n    for (var i = 0; i < this.boxes.length; i++) {\n      this.size += this.boxes[i].getLength();\n    }\n  } \n\n  if (this._data) {\n    this._writeData(this._data);\n  }\n\n  return this.size;\n};\n\nISOBox.prototype.write = function() {\n  this._parsing = false;\n  this._cursor.offset = this._parent._cursor.offset;\n\n  switch(this.size) {\n  case 0:\n    this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, (this.parent._rawo.byteLength - this._cursor.offset));\n    break;\n  case 1:\n      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.largesize);\n    break;\n  default:\n      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.size);\n  }\n\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  if (this._boxProcessors[this.type]) {\n    this._boxProcessors[this.type].call(this);\n  }\n\n  if (this._boxContainers.indexOf(this.type) !== -1) {\n    for (var i = 0; i < this.boxes.length; i++) {\n      this.boxes[i].write();\n    }\n  } \n\n  if (this._data) {\n    this._writeData(this._data);\n  }\n\n  this._parent._cursor.offset += this.size;\n\n  return this.size;\n};\n\nISOBox.prototype._writeInt = function(size, value) {\n  if (this._rawo) {\n    var offset = this._cursor.offset - this._rawo.byteOffset;\n    switch(size) {\n    case 8:\n      this._rawo.setInt8(offset, value);\n      break;\n    case 16:\n      this._rawo.setInt16(offset, value);\n      break;\n    case 32:\n      this._rawo.setInt32(offset, value);\n      break;\n    case 64:\n      // Warning: JavaScript cannot handle 64-bit integers natively.\n      // This will give unexpected results for integers >= 2^53\n      var s1 = Math.floor(value / Math.pow(2,32));\n      var s2 = value - (s1 * Math.pow(2,32));\n      this._rawo.setUint32(offset, s1);\n      this._rawo.setUint32(offset + 4, s2);\n      break;\n    }\n    this._cursor.offset += (size >> 3);\n  } else {\n    this.size += (size >> 3);\n  }\n};\n\nISOBox.prototype._writeUint = function(size, value) {\n\n  if (this._rawo) {\n    var offset = this._cursor.offset - this._rawo.byteOffset,\n        s1, s2;\n    switch(size) {\n    case 8:\n      this._rawo.setUint8(offset, value);\n      break;\n    case 16:\n      this._rawo.setUint16(offset, value);\n      break;\n    case 24:\n      s1 = (value & 0xFFFF00) >> 8;\n      s2 = (value & 0x0000FF);\n      this._rawo.setUint16(offset, s1);\n      this._rawo.setUint8(offset + 2, s2);\n      break;\n    case 32:\n      this._rawo.setUint32(offset, value);\n      break;\n    case 64:\n      // Warning: JavaScript cannot handle 64-bit integers natively.\n      // This will give unexpected results for integers >= 2^53\n      s1 = Math.floor(value / Math.pow(2,32));\n      s2 = value - (s1 * Math.pow(2,32));\n      this._rawo.setUint32(offset, s1);\n      this._rawo.setUint32(offset + 4, s2);\n      break;\n    }\n    this._cursor.offset += (size >> 3);\n  } else {\n    this.size += (size >> 3);\n  }\n};\n\nISOBox.prototype._writeString = function(size, str) {\n  for (var c = 0; c < size; c++) {\n    this._writeUint(8, str.charCodeAt(c));\n  }\n};\n\nISOBox.prototype._writeTerminatedString = function(str) {\n  if (str.length === 0) {\n    return;\n  }\n  for (var c = 0; c < str.length; c++) {\n    this._writeUint(8, str.charCodeAt(c));\n  }\n  this._writeUint(8, 0);\n};\n\nISOBox.prototype._writeTemplate = function(size, value) {\n  var pre = Math.floor(value);\n  var post = (value - pre) * Math.pow(2, size / 2);\n  this._writeUint(size / 2, pre);\n  this._writeUint(size / 2, post);\n};\n\nISOBox.prototype._writeData = function(data) {\n  var i;\n  if (data instanceof Array) {\n    if (!Uint8Array.from) {\n      var typedArray = new Uint8Array(data.length);\n      for (i = 0; i < data.length; i++) {\n        typedArray[i] = data[i];\n      }\n      data = new DataView(typedArray.buffer);\n    } else {\n      data = new DataView(Uint8Array.from(data).buffer);\n    }\n  }\n  if (data instanceof Uint8Array) {\n    data = new DataView(data.buffer);\n  }\n  if (this._rawo) {\n    var offset = this._cursor.offset - this._rawo.byteOffset;\n    for (i = 0; i < data.byteLength; i++) {\n        this._rawo.setUint8(offset + i, data.getUint8(i));\n    }\n    this._cursor.offset += data.byteLength;\n  } else {\n    this.size += data.byteLength;\n  }\n};\n\nISOBox.prototype._writeUTF8String = function(string) {\n  var u = ISOBoxer.Utils.utf8ToByteArray(string);\n  if (this._rawo) {\n    var dataView = new DataView(this._rawo.buffer, this._cursor.offset, u.length);\n    for (var i = 0; i < u.length; i++) {\n      dataView.setUint8(i, u[i]);\n    }\n  } else {\n    this.size += u.length;\n  }\n};\n\nISOBox.prototype._writeField = function(type, size, value) {\n  switch (type) {\n  case 'uint':\n    this._writeUint(size, value);\n    break;\n  case 'int':\n    this._writeInt(size, value);\n    break;\n  case 'template':\n    this._writeTemplate(size, value);\n    break;\n  case 'string':\n      if (size == -1) {\n        this._writeTerminatedString(value);\n      } else {\n        this._writeString(size, value);\n      }\n      break;\n  case 'data':\n    this._writeData(value);\n    break;\n  case 'utf8':\n    this._writeUTF8String(value);\n    break;\n  default:\n    break;\n  }\n};\n\n// ISO/IEC 14496-15:2014 - avc1 box\nISOBox.prototype._boxProcessors['avc1'] = ISOBox.prototype._boxProcessors['encv'] = function() {\n  // SampleEntry fields\n  this._procFieldArray('reserved1', 6,    'uint', 8);\n  this._procField('data_reference_index', 'uint', 16);\n  // VisualSampleEntry fields\n  this._procField('pre_defined1',         'uint',     16);\n  this._procField('reserved2',            'uint',     16);\n  this._procFieldArray('pre_defined2', 3, 'uint',     32);\n  this._procField('width',                'uint',     16);\n  this._procField('height',               'uint',     16);\n  this._procField('horizresolution',      'template', 32);\n  this._procField('vertresolution',       'template', 32);\n  this._procField('reserved3',            'uint',     32);\n  this._procField('frame_count',          'uint',     16);\n  this._procFieldArray('compressorname', 32,'uint',    8);\n  this._procField('depth',                'uint',     16);\n  this._procField('pre_defined3',         'int',      16);\n  // AVCSampleEntry fields\n  this._procField('config', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box\nISOBox.prototype._boxProcessors['dref'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procSubBoxes('entries', this.entry_count);\n};\n\n// ISO/IEC 14496-12:2012 - 8.6.6 Edit List Box\nISOBox.prototype._boxProcessors['elst'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procEntries('entries', this.entry_count, function(entry) {\n    this._procEntryField(entry, 'segment_duration',     'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'media_time',           'int',  (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'media_rate_integer',   'int',  16);\n    this._procEntryField(entry, 'media_rate_fraction',  'int',  16);\n  });\n};\n\n// ISO/IEC 23009-1:2014 - 5.10.3.3 Event Message Box\nISOBox.prototype._boxProcessors['emsg'] = function() {\n  this._procFullBox();\n  this._procField('scheme_id_uri',            'string', -1);\n  this._procField('value',                    'string', -1);\n  this._procField('timescale',                'uint',   32);\n  this._procField('presentation_time_delta',  'uint',   32);\n  this._procField('event_duration',           'uint',   32);\n  this._procField('id',                       'uint',   32);\n  this._procField('message_data',             'data',   -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.1.2 Free Space Box\nISOBox.prototype._boxProcessors['free'] = ISOBox.prototype._boxProcessors['skip'] = function() {\n  this._procField('data', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.12.2 Original Format Box\nISOBox.prototype._boxProcessors['frma'] = function() {\n  this._procField('data_format', 'uint', 32);\n};\n// ISO/IEC 14496-12:2012 - 4.3 File Type Box / 8.16.2 Segment Type Box\nISOBox.prototype._boxProcessors['ftyp'] =\nISOBox.prototype._boxProcessors['styp'] = function() {\n  this._procField('major_brand', 'string', 4);\n  this._procField('minor_version', 'uint', 32);\n  var nbCompatibleBrands = -1;\n  if (this._parsing) {\n    nbCompatibleBrands = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)) / 4;\n  }\n  this._procFieldArray('compatible_brands', nbCompatibleBrands, 'string', 4);\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.3 Handler Reference Box\nISOBox.prototype._boxProcessors['hdlr'] = function() {\n  this._procFullBox();\n  this._procField('pre_defined',      'uint',   32);\n  this._procField('handler_type',     'string', 4);\n  this._procFieldArray('reserved', 3, 'uint', 32);\n  this._procField('name',             'string', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.1.1 Media Data Box\nISOBox.prototype._boxProcessors['mdat'] = function() {\n  this._procField('data', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.2 Media Header Box\nISOBox.prototype._boxProcessors['mdhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint', (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint', (this.version == 1) ? 64 : 32);\n  this._procField('timescale',          'uint', 32);\n  this._procField('duration',           'uint', (this.version == 1) ? 64 : 32);\n  if (!this._parsing && typeof this.language === 'string') {\n    // In case of writing and language has been set as a string, then convert it into char codes array\n    this.language = ((this.language.charCodeAt(0) - 0x60) << 10) |\n                    ((this.language.charCodeAt(1) - 0x60) << 5) |\n                    ((this.language.charCodeAt(2) - 0x60));\n  }\n  this._procField('language',           'uint', 16);\n  if (this._parsing) {\n    this.language = String.fromCharCode(((this.language >> 10) & 0x1F) + 0x60,\n                                        ((this.language >> 5) & 0x1F) + 0x60,\n                                        (this.language & 0x1F) + 0x60);\n  }\n  this._procField('pre_defined',        'uint', 16);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.2 Movie Extends Header Box\nISOBox.prototype._boxProcessors['mehd'] = function() {\n  this._procFullBox();\n  this._procField('fragment_duration', 'uint', (this.version == 1) ? 64 : 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.5 Movie Fragment Header Box\nISOBox.prototype._boxProcessors['mfhd'] = function() {\n  this._procFullBox();\n  this._procField('sequence_number', 'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.11 Movie Fragment Random Access Box\nISOBox.prototype._boxProcessors['mfro'] = function() {\n  this._procFullBox();\n  this._procField('mfra_size', 'uint', 32); // Called mfra_size to distinguish from the normal \"size\" attribute of a box\n};\n\n\n// ISO/IEC 14496-12:2012 - 8.5.2.2 mp4a box (use AudioSampleEntry definition and naming)\nISOBox.prototype._boxProcessors['mp4a'] = ISOBox.prototype._boxProcessors['enca'] = function() {\n  // SampleEntry fields\n  this._procFieldArray('reserved1', 6,    'uint', 8);\n  this._procField('data_reference_index', 'uint', 16);\n  // AudioSampleEntry fields\n  this._procFieldArray('reserved2', 2,    'uint', 32);\n  this._procField('channelcount',         'uint', 16);\n  this._procField('samplesize',           'uint', 16);\n  this._procField('pre_defined',          'uint', 16);\n  this._procField('reserved3',            'uint', 16);\n  this._procField('samplerate',           'template', 32);\n  // ESDescriptor fields\n  this._procField('esds',                 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.2.2 Movie Header Box\nISOBox.prototype._boxProcessors['mvhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('timescale',          'uint',     32);\n  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('rate',               'template', 32);\n  this._procField('volume',             'template', 16);\n  this._procField('reserved1',          'uint',  16);\n  this._procFieldArray('reserved2', 2,  'uint',     32);\n  this._procFieldArray('matrix', 9,     'template', 32);\n  this._procFieldArray('pre_defined', 6,'uint',   32);\n  this._procField('next_track_ID',      'uint',     32);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Cue Payload Box.\nISOBox.prototype._boxProcessors['payl'] = function() {\n  this._procField('cue_text', 'utf8');\n};\n\n//ISO/IEC 23001-7:2011 - 8.1 Protection System Specific Header Box\nISOBox.prototype._boxProcessors['pssh'] = function() {\n  this._procFullBox();\n  \n  this._procFieldArray('SystemID', 16, 'uint', 8);\n  this._procField('DataSize', 'uint', 32);\n  this._procFieldArray('Data', this.DataSize, 'uint', 8);\n};\n// ISO/IEC 14496-12:2012 - 8.12.5 Scheme Type Box\nISOBox.prototype._boxProcessors['schm'] = function() {\n    this._procFullBox();\n    \n    this._procField('scheme_type', 'uint', 32);\n    this._procField('scheme_version', 'uint', 32);\n\n    if (this.flags & 0x000001) {\n        this._procField('scheme_uri', 'string', -1);\n    }\n};\n// ISO/IEC 14496-12:2012 - 8.6.4.1 sdtp box \nISOBox.prototype._boxProcessors['sdtp'] = function() {\n  this._procFullBox();\n\n  var sample_count = -1;\n  if (this._parsing) {\n    sample_count = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset));\n  }\n\n  this._procFieldArray('sample_dependency_table', sample_count, 'uint', 8);\n};\n\n// ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box\nISOBox.prototype._boxProcessors['sidx'] = function() {\n  this._procFullBox();\n  this._procField('reference_ID', 'uint', 32);\n  this._procField('timescale', 'uint', 32);\n  this._procField('earliest_presentation_time', 'uint', (this.version == 1) ? 64 : 32);\n  this._procField('first_offset', 'uint', (this.version == 1) ? 64 : 32);\n  this._procField('reserved', 'uint', 16);\n  this._procField('reference_count', 'uint', 16);\n  this._procEntries('references', this.reference_count, function(entry) {\n    if (!this._parsing) {\n      entry.reference  = (entry.reference_type  & 0x00000001) << 31;\n      entry.reference |= (entry.referenced_size & 0x7FFFFFFF);\n      entry.sap  = (entry.starts_with_SAP & 0x00000001) << 31;\n      entry.sap |= (entry.SAP_type        & 0x00000003) << 28;\n      entry.sap |= (entry.SAP_delta_time  & 0x0FFFFFFF);\n    }\n    this._procEntryField(entry, 'reference', 'uint', 32);\n    this._procEntryField(entry, 'subsegment_duration', 'uint', 32);\n    this._procEntryField(entry, 'sap', 'uint', 32);\n    if (this._parsing) {\n      entry.reference_type = (entry.reference >> 31) & 0x00000001;\n      entry.referenced_size = entry.reference & 0x7FFFFFFF;\n      entry.starts_with_SAP  = (entry.sap >> 31) & 0x00000001;\n      entry.SAP_type = (entry.sap >> 28) & 0x00000007;\n      entry.SAP_delta_time = (entry.sap  & 0x0FFFFFFF);\n    }\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.5.3 Sound Media Header Box\nISOBox.prototype._boxProcessors['smhd'] = function() {\n  this._procFullBox();\n  this._procField('balance',  'uint', 16);\n  this._procField('reserved', 'uint', 16);\n};\n\n// ISO/IEC 14496-12:2012 - 8.16.4 Subsegment Index Box\nISOBox.prototype._boxProcessors['ssix'] = function() {\n  this._procFullBox();\n  this._procField('subsegment_count', 'uint', 32);\n  this._procEntries('subsegments', this.subsegment_count, function(subsegment) {\n    this._procEntryField(subsegment, 'ranges_count', 'uint', 32);\n    this._procSubEntries(subsegment, 'ranges', subsegment.ranges_count, function(range) {\n      this._procEntryField(range, 'level', 'uint', 8);\n      this._procEntryField(range, 'range_size', 'uint', 24);\n    });\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.5.2 Sample Description Box\nISOBox.prototype._boxProcessors['stsd'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procSubBoxes('entries', this.entry_count);\n};\n\n// ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box\nISOBox.prototype._boxProcessors['subs'] = function () {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procEntries('entries', this.entry_count, function(entry) {\n    this._procEntryField(entry, 'sample_delta', 'uint', 32);\n    this._procEntryField(entry, 'subsample_count', 'uint', 16);\n    this._procSubEntries(entry, 'subsamples', entry.subsample_count, function(subsample) {\n      this._procEntryField(subsample, 'subsample_size', 'uint', (this.version === 1) ? 32 : 16);\n      this._procEntryField(subsample, 'subsample_priority', 'uint', 8);\n      this._procEntryField(subsample, 'discardable', 'uint', 8);\n      this._procEntryField(subsample, 'codec_specific_parameters', 'uint', 32);\n    });\n  });\n};\n\n//ISO/IEC 23001-7:2011 - 8.2 Track Encryption Box\nISOBox.prototype._boxProcessors['tenc'] = function() {\n    this._procFullBox();\n\n    this._procField('default_IsEncrypted', 'uint', 24);\n    this._procField('default_IV_size', 'uint', 8);\n    this._procFieldArray('default_KID', 16,    'uint', 8);\n };\n\n// ISO/IEC 14496-12:2012 - 8.8.12 Track Fragmnent Decode Time\nISOBox.prototype._boxProcessors['tfdt'] = function() {\n  this._procFullBox();\n  this._procField('baseMediaDecodeTime', 'uint', (this.version == 1) ? 64 : 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.7 Track Fragment Header Box\nISOBox.prototype._boxProcessors['tfhd'] = function() {\n  this._procFullBox();\n  this._procField('track_ID', 'uint', 32);\n  if (this.flags & 0x01) this._procField('base_data_offset',          'uint', 64);\n  if (this.flags & 0x02) this._procField('sample_description_offset', 'uint', 32);\n  if (this.flags & 0x08) this._procField('default_sample_duration',   'uint', 32);\n  if (this.flags & 0x10) this._procField('default_sample_size',       'uint', 32);\n  if (this.flags & 0x20) this._procField('default_sample_flags',      'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box\nISOBox.prototype._boxProcessors['tfra'] = function() {\n  this._procFullBox();\n  this._procField('track_ID', 'uint', 32);\n  if (!this._parsing) {\n    this.reserved = 0;\n    this.reserved |= (this.length_size_of_traf_num  & 0x00000030) << 4;\n    this.reserved |= (this.length_size_of_trun_num  & 0x0000000C) << 2;\n    this.reserved |= (this.length_size_of_sample_num  & 0x00000003);\n  }\n  this._procField('reserved', 'uint', 32);\n  if (this._parsing) {\n    this.length_size_of_traf_num = (this.reserved & 0x00000030) >> 4;\n    this.length_size_of_trun_num = (this.reserved & 0x0000000C) >> 2;\n    this.length_size_of_sample_num = (this.reserved & 0x00000003);\n  }\n  this._procField('number_of_entry', 'uint', 32);\n  this._procEntries('entries', this.number_of_entry, function(entry) {\n    this._procEntryField(entry, 'time', 'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'moof_offset', 'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'traf_number', 'uint', (this.length_size_of_traf_num + 1) * 8);\n    this._procEntryField(entry, 'trun_number', 'uint', (this.length_size_of_trun_num + 1) * 8);\n    this._procEntryField(entry, 'sample_number', 'uint', (this.length_size_of_sample_num + 1) * 8);\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.3.2 Track Header Box\nISOBox.prototype._boxProcessors['tkhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('track_ID',           'uint',     32);\n  this._procField('reserved1',          'uint',     32);\n  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);\n  this._procFieldArray('reserved2', 2,  'uint',     32);\n  this._procField('layer',              'uint',     16);\n  this._procField('alternate_group',    'uint',     16);\n  this._procField('volume',             'template', 16);\n  this._procField('reserved3',          'uint',     16);\n  this._procFieldArray('matrix', 9,     'template', 32);\n  this._procField('width',              'template', 32);\n  this._procField('height',             'template', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.3 Track Extends Box\nISOBox.prototype._boxProcessors['trex'] = function() {\n  this._procFullBox();\n  this._procField('track_ID',                         'uint', 32);\n  this._procField('default_sample_description_index', 'uint', 32);\n  this._procField('default_sample_duration',          'uint', 32);\n  this._procField('default_sample_size',              'uint', 32);\n  this._procField('default_sample_flags',             'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.8 Track Run Box\n// Note: the 'trun' box has a direct relation to the 'tfhd' box for defaults.\n// These defaults are not set explicitly here, but are left to resolve for the user.\nISOBox.prototype._boxProcessors['trun'] = function() {\n  this._procFullBox();\n  this._procField('sample_count', 'uint', 32);\n  if (this.flags & 0x1) this._procField('data_offset', 'int', 32);\n  if (this.flags & 0x4) this._procField('first_sample_flags', 'uint', 32);\n  this._procEntries('samples', this.sample_count, function(sample) {\n    if (this.flags & 0x100) this._procEntryField(sample, 'sample_duration', 'uint', 32);\n    if (this.flags & 0x200) this._procEntryField(sample, 'sample_size', 'uint', 32);\n    if (this.flags & 0x400) this._procEntryField(sample, 'sample_flags', 'uint', 32);\n    if (this.flags & 0x800) this._procEntryField(sample, 'sample_composition_time_offset', (this.version === 1) ? 'int' : 'uint',  32);\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box\nISOBox.prototype._boxProcessors['url '] = ISOBox.prototype._boxProcessors['urn '] = function() {\n  this._procFullBox();\n  if (this.type === 'urn ') {\n    this._procField('name', 'string', -1);\n  }\n  this._procField('location', 'string', -1);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Source Label Box\nISOBox.prototype._boxProcessors['vlab'] = function() {\n  this._procField('source_label', 'utf8');\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.5.2 Video Media Header Box\nISOBox.prototype._boxProcessors['vmhd'] = function() {\n  this._procFullBox();\n  this._procField('graphicsmode', 'uint', 16);\n  this._procFieldArray('opcolor', 3, 'uint', 16);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Configuration Box\nISOBox.prototype._boxProcessors['vttC'] = function() {\n  this._procField('config', 'utf8');\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Empty Sample Box\nISOBox.prototype._boxProcessors['vtte'] = function() {\n  // Nothing should happen here.\n};\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from './EventBus';\nimport Events from './events/Events';\nimport FactoryMaker from './FactoryMaker';\n\n/**\n * @module Debug\n */\nfunction Debug() {\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logToBrowserConsole,\n        showLogTimestamp,\n        showCalleeName,\n        startTime;\n\n    function setup() {\n        logToBrowserConsole = true;\n        showLogTimestamp = true;\n        showCalleeName = false;\n        startTime = new Date().getTime();\n    }\n\n    /**\n     * Prepends a timestamp in milliseconds to each log message.\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\n     * @default false\n     * @memberof module:Debug\n     * @instance\n     */\n    function setLogTimestampVisible(value) {\n        showLogTimestamp = value;\n    }\n    /**\n     * Prepends the callee object name, and media type if available, to each log message.\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\n     * @default false\n     * @memberof module:Debug\n     * @instance\n     */\n    function setCalleeNameVisible(value) {\n        showCalleeName = value;\n    }\n    /**\n     * Toggles logging to the browser's javascript console.  If you set to false you will still receive a log event with the same message.\n     * @param {boolean} value Set to false if you want to turn off logging to the browser's console.\n     * @default true\n     * @memberof module:Debug\n     * @instance\n     */\n    function setLogToBrowserConsole(value) {\n        logToBrowserConsole = value;\n    }\n    /**\n     * Use this method to get the state of logToBrowserConsole.\n     * @returns {boolean} The current value of logToBrowserConsole\n     * @memberof module:Debug\n     * @instance\n     */\n    function getLogToBrowserConsole() {\n        return logToBrowserConsole;\n    }\n    /**\n     * This method will allow you send log messages to either the browser's console and/or dispatch an event to capture at the media player level.\n     * @param {...*} arguments The message you want to log. The Arguments object is supported for this method so you can send in comma separated logging items.\n     * @memberof module:Debug\n     * @instance\n     */\n    function log() {\n\n        let message = '';\n        let logTime = null;\n\n        if (showLogTimestamp) {\n            logTime = new Date().getTime();\n            message += '[' + (logTime - startTime) + ']';\n        }\n\n        if (showCalleeName && this && this.getClassName) {\n            message += '[' + this.getClassName() + ']';\n            if (this.getType) {\n                message += '[' + this.getType() + ']';\n            }\n        }\n\n        if (message.length > 0) {\n            message += ' ';\n        }\n\n        Array.apply(null, arguments).forEach(function (item) {\n            message += item + ' ';\n        });\n\n        if (logToBrowserConsole) {\n            console.log(message);\n        }\n\n        eventBus.trigger(Events.LOG, {message: message});\n    }\n\n    instance = {\n        log: log,\n        setLogTimestampVisible: setLogTimestampVisible,\n        setCalleeNameVisible: setCalleeNameVisible,\n        setLogToBrowserConsole: setLogToBrowserConsole,\n        getLogToBrowserConsole: getLogToBrowserConsole\n    };\n\n    setup();\n\n    return instance;\n}\n\nDebug.__dashjs_factory_name = 'Debug';\nexport default FactoryMaker.getSingletonFactory(Debug);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from './FactoryMaker';\n\nconst EVENT_PRIORITY_LOW = 0;\nconst EVENT_PRIORITY_HIGH = 5000;\n\nfunction EventBus() {\n\n    let handlers = {};\n\n    function on(type, listener, scope, priority = EVENT_PRIORITY_LOW) {\n\n        if (!type) {\n            throw new Error('event type cannot be null or undefined');\n        }\n        if (!listener || typeof (listener) !== 'function') {\n            throw new Error('listener must be a function: ' + listener);\n        }\n\n        if (getHandlerIdx(type, listener, scope) >= 0) return;\n\n        handlers[type] = handlers[type] || [];\n\n        const handler = {\n            callback: listener,\n            scope: scope,\n            priority: priority\n        };\n\n        const inserted = handlers[type].some((item , idx) => {\n            if (item && priority > item.priority ) {\n                handlers[type].splice(idx, 0, handler);\n                return true;\n            }\n        });\n\n        if (!inserted) {\n            handlers[type].push(handler);\n        }\n    }\n\n    function off(type, listener, scope) {\n        if (!type || !listener || !handlers[type]) return;\n        const idx = getHandlerIdx(type, listener, scope);\n        if (idx < 0) return;\n        handlers[type][idx] = null;\n    }\n\n    function trigger(type, payload) {\n        if (!type || !handlers[type]) return;\n\n        payload = payload || {};\n\n        if (payload.hasOwnProperty('type')) throw new Error('\\'type\\' is a reserved word for event dispatching');\n\n        payload.type = type;\n\n        handlers[type] = handlers[type].filter((item) => item);\n        handlers[type].forEach( handler => handler && handler.callback.call(handler.scope, payload) );\n    }\n\n    function getHandlerIdx(type, listener, scope) {\n\n        let idx = -1;\n\n        if (!handlers[type]) return idx;\n\n        handlers[type].some( (item, index) => {\n            if (item && item.callback === listener && (!scope || scope === item.scope)) {\n                idx = index;\n                return true;\n            }\n        });\n        return idx;\n    }\n\n    function reset() {\n        handlers = {};\n    }\n\n    const instance = {\n        on: on,\n        off: off,\n        trigger: trigger,\n        reset: reset\n    };\n\n    return instance;\n}\n\nEventBus.__dashjs_factory_name = 'EventBus';\nconst factory = FactoryMaker.getSingletonFactory(EventBus);\nfactory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW;\nfactory.EVENT_PRIORITY_HIGH = EVENT_PRIORITY_HIGH;\nFactoryMaker.updateSingletonFactory(EventBus.__dashjs_factory_name, factory);\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nlet FactoryMaker = (function () {\n\n    let instance;\n    let extensions = [];\n    let singletonContexts = [];\n    let singletonFactories = [];\n    let classFactories = [];\n\n    function extend(name, childInstance, override, context) {\n        let extensionContext = getExtensionContext(context);\n        if (!extensionContext[name] && childInstance) {\n            extensionContext[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function registerFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n        factoriesArray.push({\n            name: name,\n            factory: factory\n        });\n    }\n\n    function getFactoryByName(name, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                return factoriesArray[i].factory;\n            }\n        }\n        return null;\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        for (let i in factoriesArray) {\n            let obj = factoriesArray[i];\n            if (obj.name === name) {\n                factoriesArray[i].factory = factory;\n                return;\n            }\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                            context: context\n                        }, arguments), context, arguments);\n                    }\n                };\n            };\n\n            registerFactory(classConstructor.__dashjs_factory_name, factory, classFactories); // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({\n                                context: context\n                            }, arguments), context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            registerFactory(classConstructor.__dashjs_factory_name, factory, singletonFactories); // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(name, classConstructor, context, args) {\n        // Add getClassName function to class instance prototype (used by Debug)\n        classConstructor.getClassName = function () {return name;};\n\n        let extensionContext = getExtensionContext(context);\n        let extensionObject = extensionContext[name];\n        if (extensionObject) {\n            let extension = extensionObject.instance;\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n                extension = extension.apply({\n                    context: context,\n                    factory: instance,\n                    parent: classConstructor\n                }, args);\n                for (const prop in extension) {\n                    if (classConstructor.hasOwnProperty(prop)) {\n                        classConstructor[prop] = extension[prop];\n                    }\n                }\n            } else { //replace parent object completely with new object. Same as dijon.\n                return extension.apply({\n                    context: context,\n                    factory: instance\n                }, args);\n            }\n        }\n        return classConstructor;\n    }\n\n    function getExtensionContext(context) {\n        let extensionContext;\n        extensions.forEach(function (obj) {\n            if (obj === context) {\n                extensionContext = obj;\n            }\n        });\n        if (!extensionContext) {\n            extensionContext = extensions.push(context);\n        }\n        return extensionContext;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from './EventsBase';\n\n/**\n * These are internal events that should not be needed at the player level.\n * If you find and event in here that you would like access to from MediaPlayer level\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\n * @class\n * @ignore\n */\nclass CoreEvents extends EventsBase {\n    constructor () {\n        super();\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\n        this.BUFFER_CLEARED = 'bufferCleared';\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\n        this.BYTES_APPENDED = 'bytesAppended';\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\n        this.INIT_REQUESTED = 'initRequested';\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\n        this.LOADING_COMPLETED = 'loadingCompleted';\n        this.LOADING_PROGRESS = 'loadingProgress';\n        this.MANIFEST_UPDATED = 'manifestUpdated';\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\n        this.REPRESENTATION_UPDATED = 'representationUpdated';\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\n        this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\n        this.SOURCEBUFFER_APPEND_COMPLETED = 'sourceBufferAppendCompleted';\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\n        this.STREAMS_COMPOSED = 'streamsComposed';\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\n        this.STREAM_COMPLETED = 'streamCompleted';\n        this.TIMED_TEXT_REQUESTED = 'timedTextRequested';\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\n        this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\n        this.XLINK_READY = 'xlinkReady';\n    }\n}\n\nexport default CoreEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nimport CoreEvents from './CoreEvents';\nclass Events extends CoreEvents {\n}\nlet events = new Events();\nexport default events;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../core/events/EventsBase';\n\nclass MssEvents extends EventsBase {\n\n    constructor() {\n        super();\n\n        this.FRAGMENT_INFO_LOADING_COMPLETED = 'fragmentInfoLoadingCompleted';\n    }\n}\n\nlet mssEvents = new MssEvents();\nexport default mssEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport MssEvents from './MssEvents';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\n\nfunction MssFragmentInfoController(config) {\n\n    let context = this.context;\n\n    let instance;\n    let log;\n    let fragmentModel;\n    let indexHandler;\n    let started;\n    let type;\n    let bufferTimeout;\n    let _fragmentInfoTime;\n    let startFragmentInfoDate;\n    let startTimeStampValue;\n    let deltaTime;\n    let segmentDuration;\n\n    let streamProcessor = config.streamProcessor;\n    let eventBus = config.eventBus;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n\n    function setup() {\n        log = Debug(context).getInstance().log;\n    }\n\n    function initialize() {\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n        deltaTime = 0;\n        segmentDuration = NaN;\n\n        // register to stream processor as external controller\n        streamProcessor.registerExternalController(instance);\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getCurrentRepresentation() {\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n\n        return representation;\n    }\n\n    function sendRequest(request) {\n        let fragmentModel = streamProcessor.getFragmentModel();\n        fragmentModel.executeRequest(request);\n    }\n\n    function asFragmentInfoRequest(request) {\n        if (request && request.url) {\n            request.url = request.url.replace('Fragments', 'FragmentInfo');\n            request.type = 'FragmentInfoSegment';\n        }\n\n        return request;\n    }\n\n    function onFragmentRequest(request) {\n\n        // Check if current request signals end of stream\n        if ((request !== null) && (request.action === request.ACTION_COMPLETE)) {\n            doStop();\n            return;\n        }\n\n        if (request !== null) {\n            _fragmentInfoTime = request.startTime + request.duration;\n            request = asFragmentInfoRequest(request);\n\n            if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n                request = indexHandler.getNextSegmentRequest(getCurrentRepresentation());\n                onFragmentRequest(request);\n                return;\n            }\n\n            log('[FragmentInfoController][' + type + '] onFragmentRequest ' + request.url);\n\n            // Download the fragment info segment\n            sendRequest(request);\n        } else {\n            // No more fragment in current list\n            log('[FragmentInfoController][' + type + '] bufferFragmentInfo failed');\n        }\n    }\n\n    function bufferFragmentInfo() {\n        var segmentTime;\n\n        // Check if running state\n        if (!started) {\n            return;\n        }\n\n        log('[FragmentInfoController][' + type + '] Start buffering process...');\n\n        // Get next segment time\n        segmentTime = _fragmentInfoTime;\n\n        log('[FragmentInfoController][' + type + '] loadNextFragment for time: ' + segmentTime);\n\n        let representation = getCurrentRepresentation();\n        let request = indexHandler.getSegmentRequestForTime(representation, segmentTime);\n        onFragmentRequest(request);\n    }\n\n    function delayLoadNextFragmentInfo(delay) {\n        var delayMs = Math.round(Math.min((delay * 1000), 2000));\n\n        log('[FragmentInfoController][' + type + '] Check buffer delta = ' + delayMs + ' ms');\n\n        clearTimeout(bufferTimeout);\n        bufferTimeout = setTimeout(function () {\n            bufferTimeout = null;\n            bufferFragmentInfo();\n        }, delayMs);\n    }\n\n    function onFragmentInfoLoadedCompleted(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        let request = e.fragmentInfo.request;\n        let deltaDate,\n            deltaTimeStamp;\n\n\n        if (!e.fragmentInfo.response) {\n            log('[FragmentInfoController][' + type + '] ERROR loading ', request.url);\n            return;\n        }\n\n        segmentDuration = request.duration;\n        log('[FragmentInfoController][' + type + '] FragmentInfo loaded ', request.url);\n        try {\n\n            // update segment list\n            let mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController\n            });\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\n\n            deltaDate = (new Date().getTime() - startFragmentInfoDate) / 1000;\n            deltaTimeStamp = (_fragmentInfoTime + segmentDuration) - startTimeStampValue;\n            deltaTime = (deltaTimeStamp - deltaDate) > 0 ? (deltaTimeStamp - deltaDate) : 0;\n            delayLoadNextFragmentInfo(deltaTime);\n        } catch (e) {\n            log('[FragmentInfoController][' + type + '] ERROR - Internal error while processing fragment info segment ');\n        }\n    }\n\n    function startPlayback() {\n        if (!started) {\n            return;\n        }\n\n        startFragmentInfoDate = new Date().getTime();\n        startTimeStampValue = _fragmentInfoTime;\n\n        log('[FragmentInfoController][' + type + '] startPlayback');\n\n        // Start buffering process\n        bufferFragmentInfo.call(this);\n    }\n\n    function doStart() {\n\n        let segments;\n\n        if (started === true) {\n            return;\n        }\n\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        started = true;\n        log('[FragmentInfoController][' + type + '] START');\n\n        let representation = getCurrentRepresentation();\n        segments = representation.segments;\n\n        if (segments) {\n            _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n\n            startPlayback();\n        } else {\n            indexHandler.updateSegmentList(representation);\n            segments = representation.segments;\n            _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n\n            startPlayback();\n        }\n    }\n\n    function doStop() {\n        if (!started) {\n            return;\n        }\n        log('[FragmentInfoController][' + type + '] STOP');\n\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        // Stop buffering process\n        clearTimeout(bufferTimeout);\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n    }\n\n    function reset() {\n        doStop();\n        streamProcessor.unregisterExternalController(instance);\n    }\n\n    instance = {\n        initialize: initialize,\n        start: doStart,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default FactoryMaker.getClassFactory(MssFragmentInfoController);\nexport default FactoryMaker.getClassFactory(MssFragmentInfoController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport ISOBoxer from 'codem-isoboxer';\n\nfunction MssFragmentMoofProcessor(config) {\n\n    let context = this.context;\n    let instance,\n        log;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n\n    function setup() {\n        log = Debug(context).getInstance().log;\n    }\n\n    function processTfrf(request, tfrf, tfdt, streamProcessor) {\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let indexHandler = streamProcessor.getIndexHandler();\n\n        let manifest = representation.adaptation.period.mpd.manifest;\n        let adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n\n        let segmentsUpdated = false;\n        // Get adaptation's segment timeline (always a SegmentTimeline in Smooth Streaming use case)\n        let segments = adaptation.SegmentTemplate.SegmentTimeline.S;\n        let entries = tfrf.entry;\n        let fragment_absolute_time = 0;\n        let fragment_duration = 0;\n        let segment = null;\n        let t = 0;\n        let i = 0;\n        let j = 0;\n        let segmentId = -1;\n        let availabilityStartTime = null;\n        let range;\n\n        if (manifest.type !== 'dynamic') {\n            return false;\n        }\n\n        // Go through tfrf entries\n        while (i < entries.length) {\n            fragment_absolute_time = entries[i].fragment_absolute_time;\n            fragment_duration = entries[i].fragment_duration;\n\n            // Get timestamp of the last segment\n            segment = segments[segments.length - 1];\n            t = segment.t;\n\n            if (fragment_absolute_time > t) {\n                log('[MssFragmentMoofProcessor]Add new segment - t = ' + (fragment_absolute_time / 10000000.0));\n                segments.push({\n                    t: fragment_absolute_time,\n                    d: fragment_duration\n                });\n                segmentsUpdated = true;\n            }\n\n            i += 1;\n        }\n\n        for (j = segments.length - 1; j >= 0; j -= 1) {\n            if (segments[j].t === tfdt.baseMediaDecodeTime) {\n                segmentId = j;\n                break;\n            }\n        }\n\n        if (segmentId >= 0) {\n            for (i = 0; i < entries.length; i += 1) {\n                if (segmentId + i < segments.length) {\n                    t = segments[segmentId + i].t;\n                    if ((t + segments[segmentId + i].d) !== entries[i].fragment_absolute_time) {\n                        segments[segmentId + i].t = entries[i].fragment_absolute_time;\n                        segments[segmentId + i].d = entries[i].fragment_duration;\n                        log('[MssFragmentMoofProcessor]Correct tfrf time  = ' + entries[i].fragment_absolute_time + 'and duration = ' + entries[i].fragment_duration + '! ********');\n                        segmentsUpdated = true;\n                    }\n                }\n            }\n        }\n\n        //\n        if (manifest.timeShiftBufferDepth && manifest.timeShiftBufferDepth > 0) {\n            if (segmentsUpdated) {\n                // Get timestamp of the last segment\n                segment = segments[segments.length - 1];\n                t = segment.t;\n\n                // Determine the segments' availability start time\n                availabilityStartTime = t - (manifest.timeShiftBufferDepth * 10000000);\n\n                // Remove segments prior to availability start time\n                segment = segments[0];\n                while (segment.t < availabilityStartTime) {\n                    log('[MssFragmentMoofProcessor]Remove segment  - t = ' + (segment.t / 10000000.0));\n                    segments.splice(0, 1);\n                    segment = segments[0];\n                }\n            }\n\n            // Update DVR window range\n            // => set range end to end time of current segment\n            range = {\n                start: segments[0].t / adaptation.SegmentTemplate.timescale,\n                end: (tfdt.baseMediaDecodeTime / adaptation.SegmentTemplate.timescale) + request.duration\n            };\n\n            var dvrInfos = metricsModel.getMetricsFor(request.mediaType).DVRInfo;\n            if (dvrInfos) {\n                if (dvrInfos.length === 0 || (dvrInfos.length > 0 && range.end > dvrInfos[dvrInfos.length - 1].range.end)) {\n                    log('[MssFragmentMoofProcessor][' + request.mediaType + '] Update DVR Infos [' + range.start + ' - ' + range.end + ']');\n                    metricsModel.addDVRInfo(request.mediaType, playbackController.getTime(), streamProcessor.getStreamInfo().manifestInfo, range);\n                }\n            }\n        }\n\n        if (segmentsUpdated) {\n            indexHandler.updateSegmentList(representation);\n        }\n        return segmentsUpdated;\n    }\n\n    // This function returns the offset of the 1st byte of a child box within a container box\n    function getBoxOffset(parent, type) {\n        let offset = 8;\n        let i = 0;\n\n        for (i = 0; i < parent.boxes.length; i++) {\n            if (parent.boxes[i].type === type) {\n                return offset;\n            }\n            offset += parent.boxes[i].size;\n        }\n        return offset;\n    }\n\n    function convertFragment(e, sp) {\n\n        let i;\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        if (!e.response) {\n            return;\n        }\n        let isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        let tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        let traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        let trun = isoFile.fetch('trun');\n\n        // Process tfxd boxes\n        // This box provide absolute timestamp but we take the segment start time for tfdt\n        let tfxd = isoFile.fetch('tfxd');\n        if (tfxd) {\n            tfxd._parent.boxes.splice(tfxd._parent.boxes.indexOf(tfxd), 1);\n            tfxd = null;\n        }\n        let tfrf = isoFile.fetch('tfrf');\n        if (tfrf) {\n            processTfrf(e.request, tfrf, tfdt, sp);\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n\n        // If protected content in PIFF1.1 format (sepiff box = Sample Encryption PIFF)\n        // => convert sepiff box it into a senc box\n        // => create saio and saiz boxes (if not already present)\n        let sepiff = isoFile.fetch('sepiff');\n        if (sepiff !== null) {\n            sepiff.type = 'senc';\n            sepiff.usertype = undefined;\n\n            let saio = isoFile.fetch('saio');\n            if (saio === null) {\n                // Create Sample Auxiliary Information Offsets Box box (saio)\n                saio = ISOBoxer.createFullBox('saio', traf);\n                saio.version = 0;\n                saio.flags = 0;\n                saio.entry_count = 1;\n                saio.offset = [0];\n\n                let saiz = ISOBoxer.createFullBox('saiz', traf);\n                saiz.version = 0;\n                saiz.flags = 0;\n                saiz.sample_count = sepiff.sample_count;\n                saiz.default_sample_info_size = 0;\n                saiz.sample_info_size = [];\n\n                if (sepiff.flags & 0x02) {\n                    // Sub-sample encryption => set sample_info_size for each sample\n                    for (i = 0; i < sepiff.sample_count; i += 1) {\n                        // 10 = 8 (InitializationVector field size) + 2 (subsample_count field size)\n                        // 6 = 2 (BytesOfClearData field size) + 4 (BytesOfEncryptedData field size)\n                        saiz.sample_info_size[i] = 10 + (6 * sepiff.entry[i].NumberOfEntries);\n                    }\n                } else {\n                    // No sub-sample encryption => set default sample_info_size = InitializationVector field size (8)\n                    saiz.default_sample_info_size = 8;\n                }\n            }\n        }\n\n        tfhd.flags &= 0xFFFFFE; // set tfhd.base-data-offset-present to false\n        tfhd.flags |= 0x020000; // set tfhd.default-base-is-moof to true\n        trun.flags |= 0x000001; // set trun.data-offset-present to true\n\n        // Update trun.data_offset field that corresponds to first data byte (inside mdat box)\n        let moof = isoFile.fetch('moof');\n        let length = moof.getLength();\n        trun.data_offset = length + 8;\n\n        // Update saio box offset field according to new senc box offset\n        let saio = isoFile.fetch('saio');\n        if (saio !== null) {\n            let trafPosInMoof = getBoxOffset(moof, 'traf');\n            let sencPosInTraf = getBoxOffset(traf, 'senc');\n            // Set offset from begin fragment to the first IV field in senc box\n            saio.offset[0] = trafPosInMoof + sencPosInTraf + 16; // 16 = box header (12) + sample_count field size (4)\n        }\n\n        // Write transformed/processed fragment into request reponse data\n        e.response = isoFile.write();\n    }\n\n    function updateSegmentList(e, sp) {\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        if (!e.response) {\n            return;\n        }\n\n        let isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        let tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        let traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        let tfrf = isoFile.fetch('tfrf');\n        if (tfrf) {\n            processTfrf(e.request, tfrf, tfdt, sp);\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n    }\n\n    instance = {\n        convertFragment: convertFragment,\n        updateSegmentList: updateSegmentList\n    };\n\n    setup();\n    return instance;\n}\n\nMssFragmentMoofProcessor.__dashjs_factory_name = 'MssFragmentMoofProcessor';\nexport default FactoryMaker.getClassFactory(MssFragmentMoofProcessor);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Constants from '../streaming/constants/Constants';\nimport FactoryMaker from '../core/FactoryMaker';\nimport ISOBoxer from 'codem-isoboxer';\nimport BASE64 from '../../externals/base64';\n\nfunction MssFragmentMoovProcessor() {\n    const TIME_SCALE = 10000000;\n    const NALUTYPE_SPS = 7;\n    const NALUTYPE_PPS = 8;\n\n    let instance,\n        period,\n        adaptationSet,\n        representation,\n        contentProtection,\n        trackId;\n\n    function createFtypBox(isoFile) {\n        let ftyp = ISOBoxer.createBox('ftyp', isoFile);\n        ftyp.major_brand = 'iso6';\n        ftyp.minor_version = 1; // is an informative integer for the minor version of the major brand\n        ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\n        ftyp.compatible_brands[0] = 'isom'; // => decimal ASCII value for isom\n        ftyp.compatible_brands[1] = 'iso6'; // => decimal ASCII value for iso6\n        ftyp.compatible_brands[2] = 'msdh'; // => decimal ASCII value for msdh\n\n        return ftyp;\n    }\n\n    function createMoovBox(isoFile) {\n\n        // moov box\n        let moov = ISOBoxer.createBox('moov', isoFile);\n\n        // moov/mvhd\n        createMvhdBox(moov);\n\n        // moov/trak\n        let trak = ISOBoxer.createBox('trak', moov);\n\n        // moov/trak/tkhd\n        createTkhdBox(trak);\n\n        // moov/trak/mdia\n        let mdia = ISOBoxer.createBox('mdia', trak);\n\n        // moov/trak/mdia/mdhd\n        createMdhdBox(mdia);\n\n        // moov/trak/mdia/hdlr\n        createHdlrBox(mdia);\n\n        // moov/trak/mdia/minf\n        let minf = ISOBoxer.createBox('minf', mdia);\n\n        switch (adaptationSet.type) {\n            case Constants.VIDEO:\n                // moov/trak/mdia/minf/vmhd\n                createVmhdBox(minf);\n                break;\n            case Constants.AUDIO:\n                // moov/trak/mdia/minf/smhd\n                createSmhdBox(minf);\n                break;\n            default:\n                break;\n        }\n\n        // moov/trak/mdia/minf/dinf\n        let dinf = ISOBoxer.createBox('dinf', minf);\n\n        // moov/trak/mdia/minf/dinf/dref\n        createDrefBox(dinf);\n\n        // moov/trak/mdia/minf/stbl\n        let stbl = ISOBoxer.createBox('stbl', minf);\n\n        // Create empty stts, stsc, stco and stsz boxes\n        // Use data field as for codem-isoboxer unknown boxes for setting fields value\n\n        // moov/trak/mdia/minf/stbl/stts\n        let stts = ISOBoxer.createFullBox('stts', stbl);\n        stts._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsc\n        let stsc = ISOBoxer.createFullBox('stsc', stbl);\n        stsc._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stco\n        let stco = ISOBoxer.createFullBox('stco', stbl);\n        stco._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsz\n        let stsz = ISOBoxer.createFullBox('stsz', stbl);\n        stsz._data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, sample_size = 0, sample_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsd\n        createStsdBox(stbl);\n\n        // moov/mvex\n        let mvex = ISOBoxer.createBox('mvex', moov);\n\n        // moov/mvex/trex\n        createTrexBox(mvex);\n\n        if (contentProtection) {\n            createProtectionSystemSpecificHeaderBoxForPR(moov, contentProtection[0].pro.__text);\n        }\n    }\n\n    function createMvhdBox(moov) {\n\n        let mvhd = ISOBoxer.createFullBox('mvhd', moov);\n\n        mvhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mvhd.timescale = TIME_SCALE; // the time-scale for the entire presentation => 10000000 for MSS\n        mvhd.duration = Math.round(period.duration * TIME_SCALE); // the length of the presentation (in the indicated timescale) =>  take duration of period\n        mvhd.rate = 1.0; // 16.16 number, '1.0' = normal playback\n        mvhd.volume = 1.0; // 8.8 number, '1.0' = full volume\n        mvhd.reserved1 = 0;\n        mvhd.reserved2 = [0x0, 0x0];\n        mvhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        mvhd.pre_defined = [0, 0, 0, 0, 0, 0];\n        mvhd.next_track_ID = trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\n\n        return mvhd;\n    }\n\n    function createTkhdBox(trak) {\n\n        let tkhd = ISOBoxer.createFullBox('tkhd', trak);\n\n        tkhd.version = 1; // version = 1  in order to have 64bits duration value\n        tkhd.flags = 0x1 | // Track_enabled (0x000001): Indicates that the track is enabled\n            0x2 | // Track_in_movie (0x000002):  Indicates that the track is used in the presentation\n            0x4; // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation\n\n        tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        tkhd.track_ID = trackId; // uniquely identifies this track over the entire life-time of this presentation\n        tkhd.reserved1 = 0;\n        tkhd.duration = Math.round(period.duration * TIME_SCALE); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\n        tkhd.reserved2 = [0x0, 0x0];\n        tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\n        tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\n        tkhd.volume = 1.0; // '1.0' = full volume\n        tkhd.reserved3 = 0;\n        tkhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        tkhd.width = representation.width; // visual presentation width\n        tkhd.height = representation.height; // visual presentation height\n\n        return tkhd;\n    }\n\n    function createMdhdBox(mdia) {\n\n        let mdhd = ISOBoxer.createFullBox('mdhd', mdia);\n\n        mdhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mdhd.timescale = TIME_SCALE; // the time-scale for the entire presentation\n        mdhd.duration = Math.round(period.duration * TIME_SCALE); // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.\n        mdhd.language = adaptationSet.lang || 'und'; // declares the language code for this media (see getLanguageCode())\n        mdhd.pre_defined = 0;\n\n        return mdhd;\n    }\n\n    function createHdlrBox(mdia) {\n\n        let hdlr = ISOBoxer.createFullBox('hdlr', mdia);\n\n        hdlr.pre_defined = 0;\n        switch (adaptationSet.type) {\n            case Constants.VIDEO:\n                hdlr.handler_type = 'vide';\n                break;\n            case Constants.AUDIO:\n                hdlr.handler_type = 'soun';\n                break;\n            default:\n                hdlr.handler_type = 'meta';\n                break;\n        }\n        hdlr.name = representation.id;\n        hdlr.reserved = [0, 0, 0];\n\n        return hdlr;\n    }\n\n    function createVmhdBox(minf) {\n\n        let vmhd = ISOBoxer.createFullBox('vmhd', minf);\n\n        vmhd.flags = 1;\n\n        vmhd.graphicsmode = 0; // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image\n        vmhd.opcolor = [0, 0, 0]; // is a set of 3 colour values (red, green, blue) available for use by graphics modes\n\n        return vmhd;\n    }\n\n    function createSmhdBox(minf) {\n\n        let smhd = ISOBoxer.createFullBox('smhd', minf);\n\n        smhd.flags = 1;\n\n        smhd.balance = 0; // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.\n        smhd.reserved = 0;\n\n        return smhd;\n    }\n\n    function createDrefBox(dinf) {\n\n        let dref = ISOBoxer.createFullBox('dref', dinf);\n\n        dref.entry_count = 1;\n        dref.entries = [];\n\n        let url = ISOBoxer.createFullBox('url ', dref, false);\n        url.location = '';\n        url.flags = 1;\n\n        dref.entries.push(url);\n\n        return dref;\n    }\n\n    function createStsdBox(stbl) {\n\n        let stsd = ISOBoxer.createFullBox('stsd', stbl);\n\n        stsd.entries = [];\n        switch (adaptationSet.type) {\n            case Constants.VIDEO:\n            case Constants.AUDIO:\n                stsd.entries.push(createSampleEntry(stsd));\n                break;\n            default:\n                break;\n        }\n\n        stsd.entry_count = stsd.entries.length; // is an integer that counts the actual entries\n        return stsd;\n    }\n\n    function createSampleEntry(stsd) {\n        let codec = representation.codecs.substring(0, representation.codecs.indexOf('.'));\n\n        switch (codec) {\n            case 'avc1':\n                return createAVCVisualSampleEntry(stsd, codec);\n            case 'mp4a':\n                return createMP4AudioSampleEntry(stsd, codec);\n            default:\n                throw {\n                    name: 'Unsupported codec',\n                    message: 'Unsupported codec',\n                    data: {\n                        codec: codec\n                    }\n                };\n        }\n    }\n\n    function createAVCVisualSampleEntry(stsd, codec) {\n        let avc1;\n\n        if (contentProtection) {\n            avc1 = ISOBoxer.createBox('encv', stsd, false);\n        } else {\n            avc1 = ISOBoxer.createBox('avc1', stsd, false);\n        }\n\n        // SampleEntry fields\n        avc1.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        avc1.data_reference_index = 1;\n\n        // VisualSampleEntry fields\n        avc1.pre_defined1 = 0;\n        avc1.reserved2 = 0;\n        avc1.pre_defined2 = [0, 0, 0];\n        avc1.height = representation.height;\n        avc1.width = representation.width;\n        avc1.horizresolution = 72; // 72 dpi\n        avc1.vertresolution = 72; // 72 dpi\n        avc1.reserved3 = 0;\n        avc1.frame_count = 1; // 1 compressed video frame per sample\n        avc1.compressorname = [\n            0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64, // = 'AVC Coding';\n            0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n        ];\n        avc1.depth = 0x0018; // 0x0018 – images are in colour with no alpha.\n        avc1.pre_defined3 = 65535;\n        avc1.config = createAVC1ConfigurationRecord();\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', avc1);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return avc1;\n    }\n\n    function createAVC1ConfigurationRecord() {\n\n        let avcC = null;\n        let avcCLength = 15; // length = 15 by default (0 SPS and 0 PPS)\n\n        // First get all SPS and PPS from codecPrivateData\n        let sps = [];\n        let pps = [];\n        let AVCProfileIndication = 0;\n        let AVCLevelIndication = 0;\n        let profile_compatibility = 0;\n\n\n        let nalus = representation.codecPrivateData.split('00000001').slice(1);\n        let naluBytes, naluType;\n\n        for (let i = 0; i < nalus.length; i++) {\n            naluBytes = hexStringtoBuffer(nalus[i]);\n\n            naluType = naluBytes[0] & 0x1F;\n\n            switch (naluType) {\n                case NALUTYPE_SPS:\n                    sps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = sequenceParameterSetLength field length\n                    break;\n                case NALUTYPE_PPS:\n                    pps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = pictureParameterSetLength field length\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // Get profile and level from SPS\n        if (sps.length > 0) {\n            AVCProfileIndication = sps[0][1];\n            profile_compatibility = sps[0][2];\n            AVCLevelIndication = sps[0][3];\n        }\n\n        // Generate avcC buffer\n        avcC = new Uint8Array(avcCLength);\n\n        let i = 0;\n        // length\n        avcC[i++] = (avcCLength & 0xFF000000) >> 24;\n        avcC[i++] = (avcCLength & 0x00FF0000) >> 16;\n        avcC[i++] = (avcCLength & 0x0000FF00) >> 8;\n        avcC[i++] = (avcCLength & 0x000000FF);\n        avcC.set([0x61, 0x76, 0x63, 0x43], i); // type = 'avcC'\n        i += 4;\n        avcC[i++] = 1; // configurationVersion = 1\n        avcC[i++] = AVCProfileIndication;\n        avcC[i++] = profile_compatibility;\n        avcC[i++] = AVCLevelIndication;\n        avcC[i++] = 0xFF; // '11111' + lengthSizeMinusOne = 3\n        avcC[i++] = 0xE0 | sps.length; // '111' + numOfSequenceParameterSets\n        for (let n = 0; n < sps.length; n++) {\n            avcC[i++] = (sps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (sps[n].length & 0x00FF);\n            avcC.set(sps[n], i);\n            i += sps[n].length;\n        }\n        avcC[i++] = pps.length; // numOfPictureParameterSets\n        for (let n = 0; n < pps.length; n++) {\n            avcC[i++] = (pps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (pps[n].length & 0x00FF);\n            avcC.set(pps[n], i);\n            i += pps[n].length;\n        }\n\n        return avcC;\n    }\n\n    function createMP4AudioSampleEntry(stsd, codec) {\n        let mp4a;\n\n        if (contentProtection) {\n            mp4a = ISOBoxer.createBox('enca', stsd, false);\n        } else {\n            mp4a = ISOBoxer.createBox('mp4a', stsd, false);\n        }\n\n        // SampleEntry fields\n        mp4a.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        mp4a.data_reference_index = 1;\n\n        // AudioSampleEntry fields\n        mp4a.reserved2 = [0x0, 0x0];\n        mp4a.channelcount = representation.audioChannels;\n        mp4a.samplesize = 16;\n        mp4a.pre_defined = 0;\n        mp4a.reserved_3 = 0;\n        mp4a.samplerate = representation.audioSamplingRate << 16;\n\n        mp4a.esds = createMPEG4AACESDescriptor();\n\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', mp4a);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return mp4a;\n    }\n\n    function createMPEG4AACESDescriptor() {\n\n        // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field\n        let audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData);\n\n        // ESDS length = esds box header length (= 12) +\n        //               ES_Descriptor header length (= 5) +\n        //               DecoderConfigDescriptor header length (= 15) +\n        //               decoderSpecificInfo header length (= 2) +\n        //               AudioSpecificConfig length (= codecPrivateData length)\n        let esdsLength = 34 + audioSpecificConfig.length;\n        let esds = new Uint8Array(esdsLength);\n\n        let i = 0;\n        // esds box\n        esds[i++] = (esdsLength & 0xFF000000) >> 24; // esds box length\n        esds[i++] = (esdsLength & 0x00FF0000) >> 16; // ''\n        esds[i++] = (esdsLength & 0x0000FF00) >> 8; // ''\n        esds[i++] = (esdsLength & 0x000000FF); // ''\n        esds.set([0x65, 0x73, 0x64, 0x73], i); // type = 'esds'\n        i += 4;\n        esds.set([0, 0, 0, 0], i); // version = 0, flags = 0\n        i += 4;\n        // ES_Descriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x03; // tag = 0x03 (ES_DescrTag)\n        esds[i++] = 20 + audioSpecificConfig.length; // size\n        esds[i++] = (trackId & 0xFF00) >> 8; // ES_ID = track_id\n        esds[i++] = (trackId & 0x00FF); // ''\n        esds[i++] = 0; // flags and streamPriority\n\n        // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x04; // tag = 0x04 (DecoderConfigDescrTag)\n        esds[i++] = 15 + audioSpecificConfig.length; // size\n        esds[i++] = 0x40; // objectTypeIndication = 0x40 (MPEG-4 AAC)\n        esds[i] = 0x05 << 2; // streamType = 0x05 (Audiostream)\n        esds[i] |= 0 << 1; // upStream = 0\n        esds[i++] |= 1; // reserved = 1\n        esds[i++] = 0xFF; // buffersizeDB = undefined\n        esds[i++] = 0xFF; // ''\n        esds[i++] = 0xFF; // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // maxBitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // avgbitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n\n        // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x05; // tag = 0x05 (DecSpecificInfoTag)\n        esds[i++] = audioSpecificConfig.length; // size\n        esds.set(audioSpecificConfig, i); // AudioSpecificConfig bytes\n\n        return esds;\n    }\n\n    function createOriginalFormatBox(sinf, codec) {\n        let frma = ISOBoxer.createBox('frma', sinf);\n        frma.data_format = stringToCharCode(codec);\n    }\n\n    function createSchemeTypeBox(sinf) {\n        let schm = ISOBoxer.createFullBox('schm', sinf);\n\n        schm.flags = 0;\n        schm.version = 0;\n        schm.scheme_type = 0x63656E63; // 'cenc' => common encryption\n        schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\n    }\n\n    function createSchemeInformationBox(sinf) {\n        let schi = ISOBoxer.createBox('schi', sinf);\n\n        // Create and add Track Encryption Box\n        createTrackEncryptionBox(schi);\n    }\n\n    function createProtectionSystemSpecificHeaderBoxForPR(moov, initData) {\n        let pssh = ISOBoxer.createFullBox('pssh', moov);\n        let uint8arraydecodedPROHeader = BASE64.decodeArray(initData);\n\n        pssh.flags = 0;\n        pssh.version = 0;\n        pssh.SystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]); //PlayReady System ID\n\n        pssh.DataSize = uint8arraydecodedPROHeader.length;\n        pssh.Data = uint8arraydecodedPROHeader;\n    }\n\n    function createTrackEncryptionBox(schi) {\n        let tenc = ISOBoxer.createFullBox('tenc', schi);\n\n        tenc.flags = 0;\n        tenc.version = 0;\n\n        tenc.default_IsEncrypted = 0x1;\n        tenc.default_IV_size = 8;\n        tenc.default_KID = (contentProtection && (contentProtection.length) > 0 && contentProtection[0]['cenc:default_KID']) ?\n            contentProtection[0]['cenc:default_KID'] : [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n    }\n\n    function createTrexBox(moov) {\n\n        let trex = ISOBoxer.createFullBox('trex', moov);\n\n        trex.track_ID = trackId;\n        trex.default_sample_description_index = 1;\n        trex.default_sample_duration = 0;\n        trex.default_sample_size = 0;\n        trex.default_sample_flags = 0;\n\n        return trex;\n    }\n\n    function hexStringtoBuffer(str) {\n        let buf = new Uint8Array(str.length / 2);\n        let i;\n\n        for (i = 0; i < str.length / 2; i += 1) {\n            buf[i] = parseInt('' + str[i * 2] + str[i * 2 + 1], 16);\n        }\n        return buf;\n    }\n\n    function stringToCharCode(str) {\n        let code = 0;\n        let i;\n\n        for (i = 0; i < str.length; i += 1) {\n            code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\n        }\n        return code;\n    }\n\n    function generateMoov(rep) {\n        if (!rep || !rep.adaptation) {\n            return;\n        }\n\n        let isoFile,\n            arrayBuffer;\n\n        representation = rep;\n        adaptationSet = representation.adaptation;\n\n        period = adaptationSet.period;\n        trackId = adaptationSet.index + 1;\n        contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection;\n\n        isoFile = ISOBoxer.createFile();\n        createFtypBox(isoFile);\n        createMoovBox(isoFile);\n\n        arrayBuffer = isoFile.write();\n\n        return arrayBuffer;\n    }\n\n    instance = {\n        generateMoov: generateMoov\n    };\n\n    return instance;\n}\n\nMssFragmentMoovProcessor.__dashjs_factory_name = 'MssFragmentMoovProcessor';\nexport default FactoryMaker.getClassFactory(MssFragmentMoovProcessor);","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../core/FactoryMaker';\nimport ISOBoxer from 'codem-isoboxer';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\nimport MSSFragmentMoovProcessor from './MssFragmentMoovProcessor';\nimport MssEvents from './MssEvents';\n\n\n// Add specific box processors not provided by codem-isoboxer library\n\nfunction arrayEqual(arr1, arr2) {\n    return (arr1.length === arr2.length) && arr1.every(function (element, index) {\n        return element === arr2[index];\n    });\n}\n\nfunction saioProcessor() {\n    this._procFullBox();\n    if (this.flags & 1) {\n        this._procField('aux_info_type', 'uint', 32);\n        this._procField('aux_info_type_parameter', 'uint', 32);\n    }\n    this._procField('entry_count', 'uint', 32);\n    this._procFieldArray('offset', this.entry_count, 'uint', (this.version === 1) ? 64 : 32);\n}\n\nfunction saizProcessor() {\n    this._procFullBox();\n    if (this.flags & 1) {\n        this._procField('aux_info_type', 'uint', 32);\n        this._procField('aux_info_type_parameter', 'uint', 32);\n    }\n    this._procField('default_sample_info_size', 'uint', 8);\n    this._procField('sample_count', 'uint', 32);\n    if (this.default_sample_info_size === 0) {\n        this._procFieldArray('sample_info_size', this.sample_count, 'uint', 8);\n    }\n}\n\nfunction sencProcessor() {\n    this._procFullBox();\n    this._procField('sample_count', 'uint', 32);\n    if (this.flags & 1) {\n        this._procField('IV_size', 'uint', 8);\n    }\n    this._procEntries('entry', this.sample_count, function (entry) {\n        this._procEntryField(entry, 'InitializationVector', 'data', 8);\n        if (this.flags & 2) {\n            this._procEntryField(entry, 'NumberOfEntries', 'uint', 16);\n            this._procSubEntries(entry, 'clearAndCryptedData', entry.NumberOfEntries, function (clearAndCryptedData) {\n                this._procEntryField(clearAndCryptedData, 'BytesOfClearData', 'uint', 16);\n                this._procEntryField(clearAndCryptedData, 'BytesOfEncryptedData', 'uint', 32);\n            });\n        }\n    });\n}\n\nfunction uuidProcessor() {\n    let tfxdUserType = [0x6D, 0x1D, 0x9B, 0x05, 0x42, 0xD5, 0x44, 0xE6, 0x80, 0xE2, 0x14, 0x1D, 0xAF, 0xF7, 0x57, 0xB2];\n    let tfrfUserType = [0xD4, 0x80, 0x7E, 0xF2, 0xCA, 0x39, 0x46, 0x95, 0x8E, 0x54, 0x26, 0xCB, 0x9E, 0x46, 0xA7, 0x9F];\n    let sepiffUserType = [0xA2, 0x39, 0x4F, 0x52, 0x5A, 0x9B, 0x4f, 0x14, 0xA2, 0x44, 0x6C, 0x42, 0x7C, 0x64, 0x8D, 0xF4];\n\n    if (arrayEqual(this.usertype, tfxdUserType)) {\n        this._procFullBox();\n        if (this._parsing) {\n            this.type = 'tfxd';\n        }\n        this._procField('fragment_absolute_time', 'uint', (this.version === 1) ? 64 : 32);\n        this._procField('fragment_duration', 'uint', (this.version === 1) ? 64 : 32);\n    }\n\n    if (arrayEqual(this.usertype, tfrfUserType)) {\n        this._procFullBox();\n        if (this._parsing) {\n            this.type = 'tfrf';\n        }\n        this._procField('fragment_count', 'uint', 8);\n        this._procEntries('entry', this.fragment_count, function (entry) {\n            this._procEntryField(entry, 'fragment_absolute_time', 'uint', (this.version === 1) ? 64 : 32);\n            this._procEntryField(entry, 'fragment_duration', 'uint', (this.version === 1) ? 64 : 32);\n        });\n    }\n\n    if (arrayEqual(this.usertype, sepiffUserType)) {\n        if (this._parsing) {\n            this.type = 'sepiff';\n        }\n        sencProcessor.call(this);\n    }\n}\n\nISOBoxer.addBoxProcessor('uuid', uuidProcessor);\nISOBoxer.addBoxProcessor('saio', saioProcessor);\nISOBoxer.addBoxProcessor('saiz', saizProcessor);\nISOBoxer.addBoxProcessor('senc', sencProcessor);\n\n\n\nfunction MssFragmentProcessor(config) {\n\n    let context = this.context;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let eventBus = config.eventBus;\n    let instance;\n\n    function setup() {}\n\n    function generateMoov(rep) {\n        let mssFragmentMoovProcessor = MSSFragmentMoovProcessor(context).create();\n        return mssFragmentMoovProcessor.generateMoov(rep);\n    }\n\n    function processFragment(e, sp) {\n        if (!e) {\n            return;\n        }\n\n        let request = e.request;\n\n        if (!request) {\n            return;\n        }\n\n        if (request.type === 'MediaSegment') {\n\n            // it's a MediaSegment, let's convert fragment\n            let mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController\n            });\n            mssFragmentMoofProcessor.convertFragment(e, sp);\n\n        } else if (request.type === 'FragmentInfoSegment') {\n\n            // it's a FragmentInfo, ask relative fragment info controller to handle it\n            eventBus.trigger(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, {\n                fragmentInfo: e,\n                streamProcessor: sp\n            });\n\n            // Change the sender value to stop event to be propagated (fragment info must not be added to buffer)\n            e.sender = null;\n        }\n    }\n\n    instance = {\n        generateMoov: generateMoov,\n        processFragment: processFragment\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentProcessor.__dashjs_factory_name = 'MssFragmentProcessor';\nexport default FactoryMaker.getClassFactory(MssFragmentProcessor);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../streaming/constants/Constants';\nimport Events from '../core/events/Events';\nimport MediaPlayerEvents from '../streaming/MediaPlayerEvents';\nimport EventBus from '../core/EventBus';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport {\n    HTTPRequest\n} from '../streaming/vo/metrics/HTTPRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\n\nfunction MssHandler(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        metricsModel: metricsModel,\n        playbackController: playbackController,\n        eventBus: eventBus\n    });\n    let mssParser;\n\n    let instance;\n\n    function setup() {}\n\n    function onInitializationRequested(e) {\n        let streamProcessor = e.sender.getStreamProcessor();\n        let request = new FragmentRequest();\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let period,\n            presentationStartTime;\n\n        period = representation.adaptation.period;\n\n        request.mediaType = representation.adaptation.type;\n        request.type = HTTPRequest.INIT_SEGMENT_TYPE;\n        request.range = representation.range;\n        presentationStartTime = period.start;\n        //request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic);\n        //request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic);\n        request.quality = representation.index;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id);\n\n        // Generate initialization segment (moov)\n        chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n\n        eventBus.trigger(Events.INIT_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: streamProcessor.getFragmentModel()\n        });\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function createDataChunk(request, streamId) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n\n        return chunk;\n    }\n\n    function onSegmentMediaLoaded(e) {\n        // Process moof to transcode it from MSS to DASH\n        let streamProcessor = e.sender.getStreamProcessor();\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n\n            //create fragment info controllers for each stream processors of active stream (only for audio, video or fragmentedText)\n            let streamController = playbackController.getStreamController();\n            if (streamController) {\n                let processors = streamController.getActiveStreamProcessors();\n                processors.forEach(function (processor) {\n                    if (processor.getType() === Constants.VIDEO ||\n                        processor.getType() === Constants.AUDIO ||\n                        processor.getType() === Constants.FRAGMENTED_TEXT) {\n\n                        let fragmentInfoController = MssFragmentInfoController(context).create({\n                            streamProcessor: processor,\n                            eventBus: eventBus,\n                            metricsModel: metricsModel,\n                            playbackController: playbackController\n                        });\n                        fragmentInfoController.initialize();\n                        fragmentInfoController.start();\n                    }\n                });\n            }\n        }\n    }\n\n    function registerEvents() {\n        eventBus.on(Events.INIT_REQUESTED, onInitializationRequested, instance, EventBus.EVENT_PRIORITY_HIGH);\n        eventBus.on(MediaPlayerEvents.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, EventBus.EVENT_PRIORITY_HIGH);\n        eventBus.on(MediaPlayerEvents.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, EventBus.EVENT_PRIORITY_HIGH);\n    }\n\n    function reset() {\n        eventBus.off(Events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(MediaPlayerEvents.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(MediaPlayerEvents.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nexport default FactoryMaker.getClassFactory(MssHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssHandler from './MssHandler';\n\n// Shove both of these into the global scope\nvar context = (typeof window !== 'undefined' && window) || global;\n\nvar dashjs = context.dashjs;\nif (!dashjs) {\n    dashjs = context.dashjs = {};\n}\n\ndashjs.MssHandler = MssHandler;\n\nexport default dashjs;\nexport { MssHandler };\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../streaming/constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport BASE64 from '../../../externals/base64';\nimport KeySystemWidevine from '../../streaming/protection/drm/KeySystemWidevine.js';\n\nfunction MssParser(config) {\n\n    const context = this.context;\n    const ksWidevine = KeySystemWidevine(context).getInstance();\n    const log = Debug(context).getInstance().log;\n    const errorHandler = config.errHandler;\n\n    const TIME_SCALE_100_NANOSECOND_UNIT = 10000000.0;\n    const SUPPORTED_CODECS = ['AAC', 'AACL', 'AVC1', 'H264', 'TTML', 'DFXP'];\n    const samplingFrequencyIndex = {\n        96000: 0x0,\n        88200: 0x1,\n        64000: 0x2,\n        48000: 0x3,\n        44100: 0x4,\n        32000: 0x5,\n        24000: 0x6,\n        22050: 0x7,\n        16000: 0x8,\n        12000: 0x9,\n        11025: 0xA,\n        8000: 0xB,\n        7350: 0xC\n    };\n    const mimeTypeMap = {\n        'video': 'video/mp4',\n        'audio': 'audio/mp4',\n        'text': 'application/mp4'\n    };\n\n    let instance,\n        mediaPlayerModel;\n\n\n    function setup() {\n        mediaPlayerModel = config.mediaPlayerModel;\n    }\n\n    function mapPeriod(smoothStreamingMedia) {\n        let period = {};\n        let streams,\n            adaptation;\n\n        period.duration = (parseFloat(smoothStreamingMedia.getAttribute('Duration')) === 0) ? Infinity : parseFloat(smoothStreamingMedia.getAttribute('Duration')) / TIME_SCALE_100_NANOSECOND_UNIT;\n\n        // For each StreamIndex node, create an AdaptationSet element\n        period.AdaptationSet_asArray = [];\n        streams = smoothStreamingMedia.getElementsByTagName('StreamIndex');\n        for (let i = 0; i < streams.length; i++) {\n            adaptation = mapAdaptationSet(streams[i]);\n            if (adaptation !== null) {\n                period.AdaptationSet_asArray.push(adaptation);\n            }\n        }\n\n        if (period.AdaptationSet_asArray.length > 0) {\n            period.AdaptationSet = (period.AdaptationSet_asArray.length > 1) ? period.AdaptationSet_asArray : period.AdaptationSet_asArray[0];\n        }\n\n        return period;\n    }\n\n    function mapAdaptationSet(streamIndex) {\n\n        let adaptationSet = {};\n        let representations = [];\n        let segmentTemplate = {};\n        let qualityLevels,\n            representation,\n            segments,\n            range,\n            i;\n\n        adaptationSet.id = streamIndex.getAttribute('Name') ? streamIndex.getAttribute('Name') : streamIndex.getAttribute('Type');\n        adaptationSet.contentType = streamIndex.getAttribute('Type');\n        adaptationSet.lang = streamIndex.getAttribute('Language') || 'und';\n        adaptationSet.mimeType = mimeTypeMap[adaptationSet.contentType];\n        adaptationSet.subType = streamIndex.getAttribute('Subtype');\n        adaptationSet.maxWidth = streamIndex.getAttribute('MaxWidth');\n        adaptationSet.maxHeight = streamIndex.getAttribute('MaxHeight');\n\n        // Create a SegmentTemplate with a SegmentTimeline\n        segmentTemplate = mapSegmentTemplate(streamIndex);\n\n        qualityLevels = streamIndex.getElementsByTagName('QualityLevel');\n        // For each QualityLevel node, create a Representation element\n        for (i = 0; i < qualityLevels.length; i++) {\n            // Propagate BaseURL and mimeType\n            qualityLevels[i].BaseURL = adaptationSet.BaseURL;\n            qualityLevels[i].mimeType = adaptationSet.mimeType;\n\n            // Set quality level id\n            qualityLevels[i].Id = adaptationSet.id + '_' + qualityLevels[i].getAttribute('Index');\n\n            // Map Representation to QualityLevel\n            representation = mapRepresentation(qualityLevels[i], streamIndex);\n\n            if (representation !== null) {\n                // Copy SegmentTemplate into Representation\n                representation.SegmentTemplate = segmentTemplate;\n\n                representations.push(representation);\n            }\n        }\n\n        if (representations.length === 0) {\n            return null;\n        }\n\n        adaptationSet.Representation = (representations.length > 1) ? representations : representations[0];\n        adaptationSet.Representation_asArray = representations;\n\n        // Set SegmentTemplate\n        adaptationSet.SegmentTemplate = segmentTemplate;\n\n        segments = segmentTemplate.SegmentTimeline.S_asArray;\n\n        range = {\n            start: segments[0].t / segmentTemplate.timescale,\n            end: (segments[segments.length - 1].t + segments[segments.length - 1].d) / segmentTemplate.timescale\n        };\n\n        return adaptationSet;\n    }\n\n    function mapRepresentation(qualityLevel, streamIndex) {\n\n        let representation = {};\n        let fourCCValue = null;\n\n        representation.id = qualityLevel.Id;\n        representation.bandwidth = parseInt(qualityLevel.getAttribute('Bitrate'), 10);\n        representation.mimeType = qualityLevel.mimeType;\n        representation.width = parseInt(qualityLevel.getAttribute('MaxWidth'), 10);\n        representation.height = parseInt(qualityLevel.getAttribute('MaxHeight'), 10);\n\n        fourCCValue = qualityLevel.getAttribute('FourCC');\n\n        // If FourCC not defined at QualityLevel level, then get it from StreamIndex level\n        if (fourCCValue === null) {\n            fourCCValue = streamIndex.getAttribute('FourCC');\n        }\n\n        // If still not defined (optionnal for audio stream, see https://msdn.microsoft.com/en-us/library/ff728116%28v=vs.95%29.aspx),\n        // then we consider the stream is an audio AAC stream\n        if (fourCCValue === null) {\n            fourCCValue = 'AAC';\n        }\n\n        // Check if codec is supported\n        if (SUPPORTED_CODECS.indexOf(fourCCValue.toUpperCase()) === -1) {\n            // Do not send warning\n            //this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, 'Codec not supported', {codec: fourCCValue});\n            log('[MssParser] Codec not supported: ' + fourCCValue);\n            return null;\n        }\n\n        // Get codecs value according to FourCC field\n        if (fourCCValue === 'H264' || fourCCValue === 'AVC1') {\n            representation.codecs = getH264Codec(qualityLevel);\n        } else if (fourCCValue.indexOf('AAC') >= 0) {\n            representation.codecs = getAACCodec(qualityLevel, fourCCValue);\n            representation.audioSamplingRate = parseInt(qualityLevel.getAttribute('SamplingRate'), 10);\n            representation.audioChannels = parseInt(qualityLevel.getAttribute('Channels'), 10);\n        } else if (fourCCValue.indexOf('TTML') || fourCCValue.indexOf('DFXP')) {\n            representation.codecs = Constants.STPP;\n        }\n\n        representation.codecPrivateData = '' + qualityLevel.getAttribute('CodecPrivateData');\n        representation.BaseURL = qualityLevel.BaseURL;\n\n        return representation;\n    }\n\n    function getH264Codec(qualityLevel) {\n        let codecPrivateData = qualityLevel.getAttribute('CodecPrivateData').toString();\n        let nalHeader,\n            avcoti;\n\n\n        // Extract from the CodecPrivateData field the hexadecimal representation of the following\n        // three bytes in the sequence parameter set NAL unit.\n        // => Find the SPS nal header\n        nalHeader = /00000001[0-9]7/.exec(codecPrivateData);\n        // => Find the 6 characters after the SPS nalHeader (if it exists)\n        avcoti = nalHeader && nalHeader[0] ? (codecPrivateData.substr(codecPrivateData.indexOf(nalHeader[0]) + 10, 6)) : undefined;\n\n        return 'avc1.' + avcoti;\n    }\n\n    function getAACCodec(qualityLevel, fourCCValue) {\n        let objectType = 0;\n        let codecPrivateData = qualityLevel.getAttribute('CodecPrivateData').toString();\n        let samplingRate = parseInt(qualityLevel.getAttribute('SamplingRate'), 10);\n        let codecPrivateDataHex,\n            arr16,\n            indexFreq,\n            extensionSamplingFrequencyIndex;\n\n        //chrome problem, in implicit AAC HE definition, so when AACH is detected in FourCC\n        //set objectType to 5 => strange, it should be 2\n        if (fourCCValue === 'AACH') {\n            objectType = 0x05;\n        }\n        //if codecPrivateData is empty, build it :\n        if (codecPrivateData === undefined || codecPrivateData === '') {\n            objectType = 0x02; //AAC Main Low Complexity => object Type = 2\n            indexFreq = samplingFrequencyIndex[samplingRate];\n            if (fourCCValue === 'AACH') {\n                // 4 bytes :     XXXXX         XXXX          XXXX             XXXX                  XXXXX      XXX   XXXXXXX\n                //           ' ObjectType' 'Freq Index' 'Channels value'   'Extens Sampl Freq'  'ObjectType'  'GAS' 'alignment = 0'\n                objectType = 0x05; // High Efficiency AAC Profile = object Type = 5 SBR\n                codecPrivateData = new Uint8Array(4);\n                extensionSamplingFrequencyIndex = samplingFrequencyIndex[samplingRate * 2]; // in HE AAC Extension Sampling frequence\n                // equals to SamplingRate*2\n                //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                codecPrivateData[1] = (indexFreq << 7) | (qualityLevel.Channels << 3) | (extensionSamplingFrequencyIndex >> 1);\n                codecPrivateData[2] = (extensionSamplingFrequencyIndex << 7) | (0x02 << 2); // origin object type equals to 2 => AAC Main Low Complexity\n                codecPrivateData[3] = 0x0; //alignment bits\n\n                arr16 = new Uint16Array(2);\n                arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                arr16[1] = (codecPrivateData[2] << 8) + codecPrivateData[3];\n                //convert decimal to hex value\n                codecPrivateDataHex = arr16[0].toString(16);\n                codecPrivateDataHex = arr16[0].toString(16) + arr16[1].toString(16);\n\n            } else {\n                // 2 bytes :     XXXXX         XXXX          XXXX              XXX\n                //           ' ObjectType' 'Freq Index' 'Channels value'   'GAS = 000'\n                codecPrivateData = new Uint8Array(2);\n                //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                codecPrivateData[1] = (indexFreq << 7) | (parseInt(qualityLevel.getAttribute('Channels'), 10) << 3);\n                // put the 2 bytes in an 16 bits array\n                arr16 = new Uint16Array(1);\n                arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                //convert decimal to hex value\n                codecPrivateDataHex = arr16[0].toString(16);\n            }\n\n            codecPrivateData = '' + codecPrivateDataHex;\n            codecPrivateData = codecPrivateData.toUpperCase();\n            qualityLevel.setAttribute('CodecPrivateData', codecPrivateData);\n        } else if (objectType === 0) {\n            objectType = (parseInt(codecPrivateData.substr(0, 2), 16) & 0xF8) >> 3;\n        }\n\n        return 'mp4a.40.' + objectType;\n    }\n\n    function mapSegmentTemplate(streamIndex) {\n\n        let segmentTemplate = {};\n        let mediaUrl;\n\n        mediaUrl = streamIndex.getAttribute('Url').replace('{bitrate}', '$Bandwidth$');\n        mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n\n        segmentTemplate.media = mediaUrl;\n        segmentTemplate.timescale = TIME_SCALE_100_NANOSECOND_UNIT;\n\n        segmentTemplate.SegmentTimeline = mapSegmentTimeline(streamIndex);\n\n        return segmentTemplate;\n    }\n\n    function mapSegmentTimeline(streamIndex) {\n\n        let segmentTimeline = {};\n        let chunks = streamIndex.getElementsByTagName('c');\n        let segments = [];\n        let segment;\n        let prevSegment;\n        let tManifest;\n        let i;\n        let duration = 0;\n\n        for (i = 0; i < chunks.length; i++) {\n            segment = {};\n\n            // Get time 't' attribute value\n            tManifest = chunks[i].getAttribute('t');\n\n            // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n            // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n            segment.tManifest = parseFloat(tManifest);\n            segment.t = parseFloat(tManifest);\n\n            // Get duration 'd' attribute value\n            segment.d = parseFloat(chunks[i].getAttribute('d'));\n\n            // If 't' not defined for first segment then t=0\n            if ((i === 0) && !segment.t) {\n                segment.t = 0;\n            }\n\n            if (i > 0) {\n                prevSegment = segments[segments.length - 1];\n                // Update previous segment duration if not defined\n                if (!prevSegment.d) {\n                    if (prevSegment.tManifest) {\n                        prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest);\n                    } else {\n                        prevSegment.d = segment.t - prevSegment.t;\n                    }\n                }\n                // Set segment absolute timestamp if not set in manifest\n                if (!segment.t) {\n                    if (prevSegment.tManifest) {\n                        segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d;\n                        segment.t = parseFloat(segment.tManifest);\n                    } else {\n                        segment.t = prevSegment.t + prevSegment.d;\n                    }\n                }\n            }\n\n            duration += segment.d;\n\n            // Create new segment\n            segments.push(segment);\n        }\n\n        segmentTimeline.S = segments;\n        segmentTimeline.S_asArray = segments;\n        segmentTimeline.duration = duration / TIME_SCALE_100_NANOSECOND_UNIT;\n\n        return segmentTimeline;\n    }\n\n    function getKIDFromProtectionHeader(protectionHeader) {\n        let prHeader,\n            wrmHeader,\n            xmlReader,\n            KID;\n\n        // Get PlayReady header as byte array (base64 decoded)\n        prHeader = BASE64.decodeArray(protectionHeader.firstChild.data);\n\n        // Get Right Management header (WRMHEADER) from PlayReady header\n        wrmHeader = getWRMHeaderFromPRHeader(prHeader);\n\n        // Convert from multi-byte to unicode\n        wrmHeader = new Uint16Array(wrmHeader.buffer);\n\n        // Convert to string\n        wrmHeader = String.fromCharCode.apply(null, wrmHeader);\n\n        // Parse <WRMHeader> to get KID field value\n        xmlReader = (new DOMParser()).parseFromString(wrmHeader, 'application/xml');\n        KID = xmlReader.querySelector('KID').textContent;\n\n        // Get KID (base64 decoded) as byte array\n        KID = BASE64.decodeArray(KID);\n\n        // Convert UUID from little-endian to big-endian\n        convertUuidEndianness(KID);\n\n        return KID;\n    }\n\n    function getWRMHeaderFromPRHeader(prHeader) {\n        let length,\n            recordCount,\n            recordType,\n            recordLength,\n            recordValue;\n        let i = 0;\n\n        // Parse PlayReady header\n\n        // Length - 32 bits (LE format)\n        length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n        i += 4;\n\n        // Record count - 16 bits (LE format)\n        recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n        i += 2;\n\n        // Parse records\n        while (i < prHeader.length) {\n            // Record type - 16 bits (LE format)\n            recordType = (prHeader[i + 1] << 8) + prHeader[i];\n            i += 2;\n\n            // Check if Rights Management header (record type = 0x01)\n            if (recordType === 0x01) {\n\n                // Record length - 16 bits (LE format)\n                recordLength = (prHeader[i + 1] << 8) + prHeader[i];\n                i += 2;\n\n                // Record value => contains <WRMHEADER>\n                recordValue = new Uint8Array(recordLength);\n                recordValue.set(prHeader.subarray(i, i + recordLength));\n                return recordValue;\n            }\n        }\n\n        return null;\n    }\n\n    function convertUuidEndianness(uuid) {\n        swapBytes(uuid, 0, 3);\n        swapBytes(uuid, 1, 2);\n        swapBytes(uuid, 4, 5);\n        swapBytes(uuid, 6, 7);\n    }\n\n    function swapBytes(bytes, pos1, pos2) {\n        let temp = bytes[pos1];\n        bytes[pos1] = bytes[pos2];\n        bytes[pos2] = temp;\n    }\n\n\n    function createPRContentProtection(protectionHeader) {\n\n        let contentProtection = {};\n        let pro;\n\n        pro = {\n            __text: protectionHeader.firstChild.data,\n            __prefix: 'mspr'\n        };\n\n        contentProtection.schemeIdUri = 'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95';\n        contentProtection.value = 'com.microsoft.playready';\n        contentProtection.pro = pro;\n        contentProtection.pro_asArray = pro;\n\n        return contentProtection;\n    }\n\n    function createWidevineContentProtection(/*protectionHeader*/) {\n\n        var contentProtection = {};\n\n        contentProtection.schemeIdUri = ksWidevine.schemeIdURI;\n        contentProtection.value = ksWidevine.systemString;\n\n        return contentProtection;\n    }\n\n    function processManifest(xmlDoc, manifestLoadedTime) {\n        let manifest = {};\n        let contentProtections = [];\n        let smoothStreamingMedia = xmlDoc.getElementsByTagName('SmoothStreamingMedia')[0];\n        let protection = xmlDoc.getElementsByTagName('Protection')[0];\n        let protectionHeader = null;\n        let period,\n            adaptations,\n            contentProtection,\n            KID,\n            timestampOffset,\n            startTime,\n            segments,\n            i, j;\n\n        // Set manifest node properties\n        manifest.protocol = 'MSS';\n        manifest.profiles = 'urn:mpeg:dash:profile:isoff-live:2011';\n        manifest.type = smoothStreamingMedia.getAttribute('IsLive') === 'TRUE' ? 'dynamic' : 'static';\n        manifest.timeShiftBufferDepth = parseFloat(smoothStreamingMedia.getAttribute('DVRWindowLength')) / TIME_SCALE_100_NANOSECOND_UNIT;\n        manifest.mediaPresentationDuration = (parseFloat(smoothStreamingMedia.getAttribute('Duration')) === 0) ? Infinity : parseFloat(smoothStreamingMedia.getAttribute('Duration')) / TIME_SCALE_100_NANOSECOND_UNIT;\n        manifest.minBufferTime = mediaPlayerModel.getStableBufferTime();\n        manifest.ttmlTimeIsRelative = true;\n\n        // In case of live streams, set availabilityStartTime property according to DVRWindowLength\n        if (manifest.type === 'dynamic') {\n            manifest.availabilityStartTime = new Date(manifestLoadedTime.getTime() - (manifest.timeShiftBufferDepth * 1000));\n            manifest.refreshManifestOnSwitchTrack = true;\n            manifest.doNotUpdateDVRWindowOnBufferUpdated = true; // done by Mss fragment processor\n            manifest.ignorePostponeTimePeriod = true; // in Mss, manifest is never updated\n        }\n\n        // Map period node to manifest root node\n        manifest.Period = mapPeriod(smoothStreamingMedia);\n        manifest.Period_asArray = [manifest.Period];\n\n        // Initialize period start time\n        period = manifest.Period;\n        period.start = 0;\n\n        // ContentProtection node\n        if (protection !== undefined) {\n            protectionHeader = xmlDoc.getElementsByTagName('ProtectionHeader')[0];\n\n            // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n            // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n            protectionHeader.firstChild.data = protectionHeader.firstChild.data.replace(/\\n|\\r/g, '');\n\n            // Get KID (in CENC format) from protection header\n            KID = getKIDFromProtectionHeader(protectionHeader);\n\n            // Create ContentProtection for PlayReady\n            contentProtection = createPRContentProtection(protectionHeader);\n            contentProtection['cenc:default_KID'] = KID;\n            contentProtections.push(contentProtection);\n\n            // Create ContentProtection for Widevine (as a CENC protection)\n            contentProtection = createWidevineContentProtection.call(this, protectionHeader);\n            contentProtection['cenc:default_KID'] = KID;\n            contentProtections.push(contentProtection);\n\n            manifest.ContentProtection = contentProtections;\n            manifest.ContentProtection_asArray = contentProtections;\n        }\n\n        adaptations = period.AdaptationSet_asArray;\n\n        for (i = 0; i < adaptations.length; i += 1) {\n            adaptations[i].SegmentTemplate.initialization = '$Bandwidth$';\n            // Propagate content protection information into each adaptation\n            if (manifest.ContentProtection !== undefined) {\n                adaptations[i].ContentProtection = manifest.ContentProtection;\n                adaptations[i].ContentProtection_asArray = manifest.ContentProtection_asArray;\n            }\n\n            if (manifest.type === 'dynamic') {\n                // Match timeShiftBufferDepth to video segment timeline duration\n                if (manifest.timeShiftBufferDepth > 0 &&\n                    adaptations[i].contentType === 'video' &&\n                    manifest.timeShiftBufferDepth > adaptations[i].SegmentTemplate.SegmentTimeline.duration) {\n                    manifest.timeShiftBufferDepth = adaptations[i].SegmentTemplate.SegmentTimeline.duration;\n                }\n            }\n        }\n\n        if (manifest.timeShiftBufferDepth < manifest.minBufferTime) {\n            manifest.minBufferTime = manifest.timeShiftBufferDepth;\n        }\n\n        // Delete Content Protection under root manifest node\n        delete manifest.ContentProtection;\n        delete manifest.ContentProtection_asArray;\n\n        // In case of VOD streams, check if start time is greater than 0\n        // Then determine timestamp offset according to higher audio/video start time\n        // (use case = live stream delinearization)\n        if (manifest.type === 'static') {\n            for (i = 0; i < adaptations.length; i++) {\n                if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                    segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                    startTime = segments[0].t;\n                    if (!timestampOffset) {\n                        timestampOffset = startTime;\n                    }\n                    timestampOffset = Math.min(timestampOffset, startTime);\n                    // Correct content duration according to minimum adaptation's segments duration\n                    // in order to force <video> element sending 'ended' event\n                    manifest.mediaPresentationDuration = Math.min(manifest.mediaPresentationDuration, ((segments[segments.length - 1].t + segments[segments.length - 1].d) / TIME_SCALE_100_NANOSECOND_UNIT).toFixed(3));\n                }\n            }\n\n            // Patch segment templates timestamps and determine period start time (since audio/video should not be aligned to 0)\n            if (timestampOffset > 0) {\n                for (i = 0; i < adaptations.length; i++) {\n                    segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                    for (j = 0; j < segments.length; j++) {\n                        if (!segments[j].tManifest) {\n                            segments[j].tManifest = segments[j].t;\n                        }\n                        segments[j].t -= timestampOffset;\n                    }\n                    if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                        period.start = Math.max(segments[0].t, period.start);\n                    }\n                }\n                period.start /= TIME_SCALE_100_NANOSECOND_UNIT;\n            }\n        }\n\n        period.duration = manifest.mediaPresentationDuration;\n\n        return manifest;\n    }\n\n    function parseDOM(data) {\n\n        let xmlDoc = null;\n\n        if (window.DOMParser) {\n            try {\n                let parser = new window.DOMParser();\n\n                xmlDoc = parser.parseFromString(data, 'text/xml');\n                if (xmlDoc.getElementsByTagName('parsererror').length > 0) {\n                    throw new Error('Error parsing XML');\n                }\n            } catch (e) {\n                errorHandler.manifestError('parsing the manifest failed', 'parse', data, e);\n                xmlDoc = null;\n            }\n        }\n\n        return xmlDoc;\n    }\n\n\n    function internalParse(data) {\n        let xmlDoc = null;\n        let manifest = null;\n\n        const startTime = window.performance.now();\n\n        // Parse the MSS XML manifest\n        xmlDoc = parseDOM(data);\n\n        const xmlParseTime = window.performance.now();\n\n        if (xmlDoc === null) {\n            return null;\n        }\n\n        // Convert MSS manifest into DASH manifest\n        manifest = processManifest(xmlDoc, new Date());\n\n        const mss2dashTime = window.performance.now();\n\n        log('Parsing complete: (xmlParsing: ' + (xmlParseTime - startTime).toPrecision(3) + 'ms, mss2dash: ' + (mss2dashTime - xmlParseTime).toPrecision(3) + 'ms, total: ' + ((mss2dashTime - startTime) / 1000).toPrecision(3) + 's)');\n\n        return manifest;\n    }\n\n    instance = {\n        parse: internalParse\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssParser.__dashjs_factory_name = 'MssParser';\nexport default FactoryMaker.getClassFactory(MssParser);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass MediaPlayerEvents extends EventsBase {\n\n    /**\n     * @description Public facing external events to be used when developing a player that implements dash.js.\n     */\n    constructor() {\n        super();\n        /**\n         * Triggered when playback will not start yet\n         * as the MPD's availabilityStartTime is in the future.\n         * Check delay property in payload to determine time before playback will start.\n         */\n        this.AST_IN_FUTURE = 'astInFuture';\n        /**\n         * Triggered when the video element's buffer state changes to stalled.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_EMPTY\n         */\n        this.BUFFER_EMPTY = 'bufferStalled';\n        /**\n         * Triggered when the video element's buffer state changes to loaded.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_LOADED\n         */\n        this.BUFFER_LOADED = 'bufferLoaded';\n\n        /**\n         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.\n         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED\n         */\n        this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';\n\n        /**\n         * Triggered when there is an error from the element or MSE source buffer.\n         * @event MediaPlayerEvents#ERROR\n         */\n        this.ERROR = 'error';\n\n        /**\n         * Triggered when a fragment download has completed.\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED\n         */\n        this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';\n        /**\n         * Triggered when a fragment download has started.\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED\n         */\n        this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';\n        /**\n         * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED\n         */\n        this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';\n        /**\n         * Triggered when {@link module:Debug} log method is called.\n         * @event MediaPlayerEvents#LOG\n         */\n        this.LOG = 'log';\n        //TODO refactor with internal event\n        /**\n         * Triggered when the manifest load is complete\n         * @event MediaPlayerEvents#MANIFEST_LOADED\n         */\n        this.MANIFEST_LOADED = 'manifestLoaded';\n        /**\n         * Triggered anytime there is a change to the overall metrics.\n         * @event MediaPlayerEvents#METRICS_CHANGED\n         */\n        this.METRICS_CHANGED = 'metricsChanged';\n        /**\n         * Triggered when an individual metric is added, updated or cleared.\n         * @event MediaPlayerEvents#METRIC_CHANGED\n         */\n        this.METRIC_CHANGED = 'metricChanged';\n        /**\n         * Triggered every time a new metric is added.\n         * @event MediaPlayerEvents#METRIC_ADDED\n         */\n        this.METRIC_ADDED = 'metricAdded';\n        /**\n         * Triggered every time a metric is updated.\n         * @event MediaPlayerEvents#METRIC_UPDATED\n         */\n        this.METRIC_UPDATED = 'metricUpdated';\n        /**\n         * Triggered at the stream end of a period.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED\n         */\n        this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted';\n        /**\n         * Triggered when a new period starts.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED\n         */\n        this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted';\n\n        /**\n         * Triggered when an ABR up /down switch is initialed; either by user in manual mode or auto mode via ABR rules.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED\n         */\n        this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';\n\n        /**\n         * Triggered when the new ABR quality is being rendered on-screen.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED\n         */\n        this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';\n\n        /**\n         * Triggered when the stream is setup and ready.\n         * @event MediaPlayerEvents#STREAM_INITIALIZED\n         */\n        this.STREAM_INITIALIZED = 'streamInitialized';\n\n        /**\n         * Triggered when the player has been reset.\n         * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE\n         */\n        this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';\n\n        /**\n         * Triggered once all text tracks detected in the MPD are added to the video element.\n         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED\n         */\n        this.TEXT_TRACKS_ADDED = 'allTextTracksAdded';\n        /**\n         * Triggered when a text track is added to the video element's TextTrackList\n         * @event MediaPlayerEvents#TEXT_TRACK_ADDED\n         */\n        this.TEXT_TRACK_ADDED = 'textTrackAdded';\n\n        /**\n         * Sent when enough data is available that the media can be played,\n         * at least for a couple of frames.  This corresponds to the\n         * HAVE_ENOUGH_DATA readyState.\n         * @event MediaPlayerEvents#CAN_PLAY\n         */\n        this.CAN_PLAY = 'canPlay';\n\n        /**\n         * Sent when playback completes.\n         * @event MediaPlayerEvents#PLAYBACK_ENDED\n         */\n        this.PLAYBACK_ENDED = 'playbackEnded';\n\n        /**\n         * Sent when an error occurs.  The element's error\n         * attribute contains more information.\n         * @event MediaPlayerEvents#PLAYBACK_ERROR\n         */\n        this.PLAYBACK_ERROR = 'playbackError';\n        /**\n         * Sent when playback is not allowed (for example if user gesture is needed).\n         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED\n         */\n        this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';\n        /**\n         * The media's metadata has finished loading; all attributes now\n         * contain as much useful information as they're going to.\n         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED\n         */\n        this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';\n        /**\n         * Sent when playback is paused.\n         * @event MediaPlayerEvents#PLAYBACK_PAUSED\n         */\n        this.PLAYBACK_PAUSED = 'playbackPaused';\n        /**\n         * Sent when the media begins to play (either for the first time, after having been paused,\n         * or after ending and then restarting).\n         *\n         * @event MediaPlayerEvents#PLAYBACK_PLAYING\n         */\n        this.PLAYBACK_PLAYING = 'playbackPlaying';\n        /**\n         * Sent periodically to inform interested parties of progress downloading\n         * the media. Information about the current amount of the media that has\n         * been downloaded is available in the media element's buffered attribute.\n         * @event MediaPlayerEvents#PLAYBACK_PROGRESS\n         */\n        this.PLAYBACK_PROGRESS = 'playbackProgress';\n        /**\n         * Sent when the playback speed changes.\n         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED\n         */\n        this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';\n        /**\n         * Sent when a seek operation completes.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKED\n         */\n        this.PLAYBACK_SEEKED = 'playbackSeeked';\n        /**\n         * Sent when a seek operation begins.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKING\n         */\n        this.PLAYBACK_SEEKING = 'playbackSeeking';\n\n        /**\n         * Sent when a seek operation has been asked.\n         * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED\n         */\n        this.PLAYBACK_SEEK_ASKED = 'playbackSeekAsked';\n\n        /**\n         * Sent when playback of the media starts after having been paused;\n         * that is, when playback is resumed after a prior pause event.\n         *\n         * @event MediaPlayerEvents#PLAYBACK_STARTED\n         */\n        this.PLAYBACK_STARTED = 'playbackStarted';\n        /**\n         * The time indicated by the element's currentTime attribute has changed.\n         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED\n         */\n        this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';\n    }\n}\n\nlet mediaPlayerEvents = new MediaPlayerEvents();\nexport default mediaPlayerEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n */\nclass Constants {\n\n    init () {\n        this.STREAM = 'stream';\n        this.VIDEO = 'video';\n        this.AUDIO = 'audio';\n        this.TEXT = 'text';\n        this.FRAGMENTED_TEXT = 'fragmentedText';\n        this.EMBEDDED_TEXT = 'embeddedText';\n        this.MUXED = 'muxed';\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.STPP = 'stpp';\n        this.TTML = 'ttml';\n        this.VTT = 'vtt';\n        this.WVTT = 'wvtt';\n        this.UTF8 = 'utf-8';\n        this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n        this.ABR_STRATEGY_BOLA = 'abrBola';\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n        this.MOVING_AVERAGE_EWMA = 'ewma';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new Constants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BASE64 from '../../../externals/base64';\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data);\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = 'com.widevine.alpha';\nconst schemeIdURI = 'urn:uuid:' + uuid;\nimport BASE64 from '../../../../externals/base64';\n\nfunction KeySystemWidevine() {\n\n    let instance;\n    let protData = null;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function replaceKID(pssh, KID) {\n        let pssh_array;\n        let replace = true;\n        let kidLen = 16;\n        let pos;\n        let i, j;\n\n        pssh_array = new Uint8Array(pssh);\n\n        for (i = 0; i <= pssh_array.length - (kidLen + 2); i++) {\n            if (pssh_array[i] === 0x12 && pssh_array[i + 1] === 0x10) {\n                pos = i + 2;\n                for (j = pos; j < (pos + kidLen); j++) {\n                    if (pssh_array[j] !== 0xFF) {\n                        replace = false;\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n        if (replace) {\n            pssh_array.set(KID, pos);\n        }\n\n        return pssh_array.buffer;\n    }\n\n    function getInitData(cp) {\n        var pssh = null;\n        // Get pssh from protectionData or from manifest\n        if (protData && protData.pssh) {\n            pssh = BASE64.decodeArray(protData.pssh).buffer;\n        } else {\n            pssh = CommonEncryption.parseInitDataFromContentProtection(cp);\n        }\n\n        // Check if KID within pssh is empty, in that case set KID value according to 'cenc:default_KID' value\n        if (pssh) {\n            pssh = replaceKID(pssh, cp['cenc:default_KID']);\n        }\n\n        return pssh;\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default FactoryMaker.getSingletonFactory(KeySystemWidevine);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass DataChunk {\n    //Represents a data structure that keep all the necessary info about a single init/media segment\n    constructor() {\n        this.streamId = null;\n        this.mediaInfo = null;\n        this.segmentType = null;\n        this.quality = NaN;\n        this.index = NaN;\n        this.bytes = null;\n        this.start = NaN;\n        this.end = NaN;\n        this.duration = NaN;\n        this.representationId = null;\n    }\n}\n\nexport default DataChunk;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass FragmentRequest {\n    constructor() {\n        this.action = FragmentRequest.ACTION_DOWNLOAD;\n        this.startTime = NaN;\n        this.mediaType = null;\n        this.mediaInfo = null;\n        this.type = null;\n        this.duration = NaN;\n        this.timescale = NaN;\n        this.range = null;\n        this.url = null;\n        this.serviceLocation = null;\n        this.requestStartDate = null;\n        this.firstByteDate = null;\n        this.requestEndDate = null;\n        this.quality = NaN;\n        this.index = NaN;\n        this.availabilityStartTime = null;\n        this.availabilityEndTime = null;\n        this.wallStartTime = null;\n        this.bytesLoaded = NaN;\n        this.bytesTotal = NaN;\n        this.delayLoadingTime = NaN;\n        this.responseType = 'arraybuffer';\n        this.representationId = null;\n    }\n}\n\nFragmentRequest.ACTION_DOWNLOAD = 'download';\nFragmentRequest.ACTION_COMPLETE = 'complete';\n\nexport default FragmentRequest;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\n * by Metrics Reporting code.\n */\nclass HTTPRequest {\n    /**\n     * @class\n     */\n    constructor() {\n        /**\n         * Identifier of the TCP connection on which the HTTP request was sent.\n         * @public\n         */\n        this.tcpid = null;\n        /**\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\n         * The type of the request:\n         * - MPD\n         * - XLink expansion\n         * - Initialization Fragment\n         * - Index Fragment\n         * - Media Fragment\n         * - Bitstream Switching Fragment\n         * - other\n         * @public\n         */\n        this.type = null;\n        /**\n         * The original URL (before any redirects or failures)\n         * @public\n         */\n        this.url = null;\n        /**\n         * The actual URL requested, if different from above\n         * @public\n         */\n        this.actualurl = null;\n        /**\n         * The contents of the byte-range-spec part of the HTTP Range header.\n         * @public\n         */\n        this.range = null;\n        /**\n         * Real-Time | The real time at which the request was sent.\n         * @public\n         */\n        this.trequest = null;\n        /**\n         * Real-Time | The real time at which the first byte of the response was received.\n         * @public\n         */\n        this.tresponse = null;\n        /**\n         * The HTTP response code.\n         * @public\n         */\n        this.responsecode = null;\n        /**\n         * The duration of the throughput trace intervals (ms), for successful requests only.\n         * @public\n         */\n        this.interval = null;\n        /**\n         * Throughput traces, for successful requests only.\n         * @public\n         */\n        this.trace = [];\n\n        /**\n         * Type of stream (\"audio\" | \"video\" etc..)\n         * @public\n         */\n        this._stream = null;\n        /**\n         * Real-Time | The real time at which the request finished.\n         * @public\n         */\n        this._tfinish = null;\n        /**\n         * The duration of the media requests, if available, in milliseconds.\n         * @public\n         */\n        this._mediaduration = null;\n        /**\n         * all the response headers from request.\n         * @public\n         */\n        this._responseHeaders = null;\n        /**\n         * The selected service location for the request. string.\n         * @public\n         */\n        this._serviceLocation = null;\n    }\n}\n\n/**\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\n */\nclass HTTPRequestTrace {\n    /**\n    * @class\n    */\n    constructor() {\n        /**\n         * Real-Time | Measurement stream start.\n         * @public\n         */\n        this.s = null;\n        /**\n         * Measurement stream duration (ms).\n         * @public\n         */\n        this.d = null;\n        /**\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\n         * @public\n         */\n        this.b = [];\n    }\n}\n\nHTTPRequest.GET = 'GET';\nHTTPRequest.HEAD = 'HEAD';\nHTTPRequest.MPD_TYPE = 'MPD';\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\nHTTPRequest.OTHER_TYPE = 'other';\n\nexport { HTTPRequest, HTTPRequestTrace };\n"]}