!(function(t, n) {
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = n())
    : "function" == typeof define && define.amd ? define(n) : (t.embed = n())
})(this, function() {
  "use strict"
  function t(n, e) {
    var o = [].slice.call(arguments),
      r = !1
    "boolean" == typeof o[0] && (r = o.shift())
    for (var i = o[0], u = o.slice(1), s = u.length, p = 0; p < s; p++) {
      var c = u[p]
      for (var f in c) {
        var a = c[f]
        if (r && a && "object" == typeof a) {
          var d = Array.isArray(a) ? [] : {}
          i[f] = t(!0, i[f] || d, a)
        } else i[f] = a
      }
    }
    return i
  }
  function n(t) {
    return t.sort(function(t, n) {
      return t.index - n.index
    })
  }
  function e(t) {
    return n(t)
      .map(function(t) {
        return t.content
      })
      .join(" ")
  }
  function o(t) {
    return t.result + " " + e(t._embeds)
  }
  function r(t) {
    var n = t.input,
      e = t.target
    return p(n) || (e && p(e))
  }
  var i = t,
    u = (function(t, n) {
      return (n = { exports: {} }), t(n, n.exports), n.exports
    })(function(t) {
      t.exports = function(t, n, e) {
        return new Promise(function(o, r) {
          var i = t[Symbol.iterator](),
            u = 0,
            s = function(t) {
              var e = i.next()
              e.done
                ? o(t)
                : Promise.all([t, e.value])
                    .then(function(t) {
                      s(n(t[0], t[1], u++))
                    })
                    .catch(r)
            }
          s(e)
        })
      }
    }),
    s = function(t, n) {
      return u(
        t,
        function(t, n) {
          return n(t)
        },
        n
      )
    },
    p = function(t) {
      return (
        !(!t || "object" != typeof t) &&
        ("object" == typeof window && "object" == typeof window.Node
          ? t instanceof window.Node
          : "number" == typeof t.nodeType && "string" == typeof t.nodeName)
      )
    },
    c =
      "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
        ? function(t) {
            return typeof t
          }
        : function(t) {
            return t &&
            "function" == typeof Symbol &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
              ? "symbol"
              : typeof t
          },
    f =
      "object" === ("undefined" == typeof window ? "undefined" : c(window)) &&
      "object" ===
        ("undefined" == typeof document ? "undefined" : c(document)) &&
      9 === document.nodeType,
    a = function(t) {
      var n = {
          plugins: [],
          preset: null,
          fetch: f && (window.fetch || window.unfetch),
          inlineEmbed: !0,
          replaceText: !1,
          _embeds: [],
          _services: []
        },
        e = t.input,
        o = t.plugins
      void 0 === o && (o = [])
      var r = t.preset
      if (!e)
        throw new Error(
          "You need to pass input element or string in the options object."
        )
      var u = p(e) ? e.innerHTML : e
      this.options = i({}, n, t, {
        result: u,
        plugins: r ? o.concat(r) : o,
        inputString: u
      })
    }
  return (a.prototype.text = function() {
    var t = this.resetOptions(),
      n = t.plugins.map(function(t) {
        return t.transform
      })
    return s(n, t)
  }), (a.prototype.resetOptions = function() {
    return i({}, this.options, { _embeds: [] })
  }), (a.prototype.load = function() {
    var t = this
    this.options.plugins.forEach(function(n) {
      return n.onLoad && n.onLoad(t.options)
    })
  }), (a.prototype.render = function() {
    var t = this
    return new Promise(function(n, e) {
      function i() {
        return this.load(), n(a)
      }
      var u, s, c, f, a, d
      return (d =
        t.options), (u = d.input), (s = d.target), (c = d.inlineEmbed), r(
        t.options
      )
        ? p(u) && u.classList.contains("ejs-applied")
          ? ((a = t.options), i.call(t))
          : t.text().then(function(n) {
              try {
                return (a = n), (f = s || u), (f.innerHTML = c ? a.result : o(a)), f.classList.add("ejs-applied"), i.call(t)
              } catch (t) {
                return e(t)
              }
            }, e)
        : e(new Error("You haven't passed the input as an element."))
    })
  }), (a.prototype.destroy = function() {
    var t = this.options,
      n = t.inputString,
      e = t.input,
      o = t.target
    if (!r(this.options))
      throw new Error("You haven't passed the input as an element.")
    var i = o || e
    return (i.innerHTML = n), i.classList.remove("ejs-applied"), this.options
  }), a
})
//# sourceMappingURL=embed.min.js.map
