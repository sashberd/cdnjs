{"version":3,"sources":["vs/editor/common/worker/editorWorkerServer.js","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/assert.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/collections.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/events.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/htmlContent.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/idGenerator.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/network.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/paths.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/stopwatch.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/filters.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/glob.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/graph.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/lifecycle.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/mime.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/core/arrays.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/core/modeTransition.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/core/position.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/core/range.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/core/viewLineToken.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/editorCommon.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/indentationGuesser.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/lineToken.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/tokenIterator.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/abstractState.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/languageSelector.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/lineStream.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/monarch/monarchCommon.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/monarch/monarchCompile.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/monarch/monarchDefinition.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports/characterPair.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports/richEditBrackets.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports/electricCharacter.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/viewModel/prefixSumComputer.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/callbackList.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/event.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/cancellation.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/eventEmitter.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/timer.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/async.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/editStack.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/tokensBinaryEncoding.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/modelLine.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/languageFeatureRegistry.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports/onEnter.ts","vs/editor/common/worker/fake","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/base/common/severity.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/config/defaultConfig.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/textModel.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/nullMode.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/textModelWithTokensHelpers.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports/richEditSupport.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports/tokenizationSupport.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/monarch/monarchLexer.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/textModelWithTokens.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/mirrorModel.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/textModelWithMarkers.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/textModelWithTrackedRanges.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/textModelWithDecorations.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/editableTextModel.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/model/model.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/instantiation/common/descriptors.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/instantiation/common/instantiation.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/editorWorkerService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/modeService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/modelService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/resourceService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/resourceServiceImpl.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/worker/validationHelper.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/configuration/common/configuration.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/event/common/event.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/event/common/eventService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/extensions/common/extensions.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/files/common/files.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/instantiation/common/serviceCollection.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/instantiation/common/instantiationService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/markers/common/markers.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/platform.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/modesRegistry.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/languagesRegistry.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/extensions/common/extensionsRegistry.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/configuration/common/configurationRegistry.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/supports/suggestSupport.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/abstractMode.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/extensions/common/abstractExtensionService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/request/common/request.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/telemetry/common/telemetry.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/request/common/baseRequestService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/thread/common/thread.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/modeServiceImpl.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/services/modelServiceImpl.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/markers/common/markerService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/thread/common/threadService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/thread/common/abstractThreadService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/thread/common/workerThreadService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/workspace/common/workspace.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/languages.common.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/platform/workspace/common/baseWorkspaceContextService.ts","vs/editor/common/worker/file:/C:/Alex/src/vscode/src/vs/editor/common/worker/editorWorkerServer.ts"],"names":["define","require","exports","ok","value","message","Error","createStringDictionary","Object","create","createNumberDictionary","lookup","from","what","alternate","key","String","contains","lookupOrInsert","stringOrNumber","insert","into","data","hashFn","hasOwnProperty","call","values","result","push","forEach","callback","remove","groupBy","groupFn","element","prototype","__extends","this","d","b","__","constructor","p","Event","originalEvent","time","Date","getTime","source","PropertyChangeEvent","_super","oldValue","newValue","ViewerEvent","EventType","PROPERTY_CHANGED","SELECTION","FOCUS","BLUR","HIGHLIGHT","EXPAND","COLLAPSE","TOGGLE","CONTENTS_CHANGED","BEFORE_RUN","RUN","EDIT","SAVE","CANCEL","CHANGE","DISPOSE","htmlContentElementCodeEqual","a","language","htmlContentElementEqual","formattedText","text","className","style","customStyle","tagName","isText","role","markdown","code","htmlContentElementArrEquals","children","aLen","length","bLen","i","IdGenerator","prefix","_prefix","_lastId","nextId","defaultGenerator","Schemas","inMemory","http","https","file","platform_1","relative","to","normalize","fromParts","split","sep","toParts","shift","len","unshift","join","dirname","path","idx","lastIndexOf","substring","basename","substr","extname","toOSPath","isWindows","root","getRoot","slice","res","start","end","charCodeAt","_slash","_backslash","part","prev_start","prev_part","pos_1","replace","_A","_Z","_a","_z","_colon","pos","indexOf","isUNC","isNaN","isPosixAbsolute","makeAbsolute","isPathNormalized","isRelative","isEqualOrParent","candidate","candidateLen","lastCandidateChar","isLinux","toLowerCase","char","isValidBasename","name","test","INVALID_FILE_CHARS","lastIndex","WINDOWS_FORBIDDEN_NAMES","trim","isAbsolute","isAbsoluteRegex","nativeSep","arguments","last","next","hasPerformanceNow","globals","performance","now","StopWatch","highResolution","_highResolution","_startTime","_now","_stopTime","stop","elapsed","strings","map_1","or","filter","_i","word","wordToMatchAgainst","match","and","concat","_matchesPrefix","ignoreCase","matchesContiguousSubString","index","matchesSubString","_matchesSubString","j","isLower","isUpper","isNumber","isWhitespace","isAlphanumeric","head","tail","nextAnchor","camelCaseWord","c","_matchesCamelCase","nextUpperIndex","isCamelCaseWord","upper","lower","alpha","numeric","upperPercent","lowerPercent","alphaPercent","numericPercent","isCamelCasePattern","whitespace","matchesCamelCase","matchesWords","target","_matchesWords","nextWord","nextWordIndex","matchesFuzzy","enableSeparateSubstringMatching","regexp","fuzzyRegExpCache","get","RegExp","convertSimple2RegExpPattern","set","exec","fuzzySeparateFilter","fuzzyContiguousFilter","matchesStrictPrefix","matchesPrefix","SubstringMatching","LinkedMap","paths","starsToRegExp","starCount","NO_PATH_REGEX","PATH_REGEX","splitGlobAware","pattern","splitChar","segments","inBraces","inBrackets","curVal","parseRegExp","regEx","every","s","previousSegmentWasGlobStar_1","segment","braceVal","bracketVal","escapeRegExpCharacters","choices","braceRegExp","map","parsePattern","parsedPattern","CACHE","T1","trivia","Trivia","T2","T3","toRegExp","error","arg1","siblings","endsWith","base","some","matchExpression","expression","patterns","getOwnPropertyNames","_loop_1","when","rtrim","clause","clausePattern_1","sibling","state_1","types_1","collections_1","newNode","incoming","outgoing","Graph","_hashFn","_nodes","roots","ret","entry","isEmptyObject","traverse","inwards","startNode","_traverse","node","seen","_this","nodes","insertEdge","fromNode","lookupOrInsertNode","toNode","removeNode","defineProperty","keys","enumerable","configurable","toString","dispose","disposables","first","isArray","combinedDisposable","toDisposable","fns","fn","empty","freeze","Disposable","_toDispose","_register","t","Disposables","apply","add","arg","Array","arg_1","types","glob_1","registerTextMime","association","registeredAssociations","userConfigured","mime","extension","console","warn","filename","filepattern","firstline","clearTextMimes","onlyUserConfigured","guessMimeTypes","firstLine","MIME_UNKNOWN","configuredMime","guessMimeTypeByPath","MIME_TEXT","registeredMime","firstlineMime","guessMimeTypeByFirstline","associations","filenameMatch","patternMatch","extensionMatch","startsWithUTF8BOM","matches","isBinaryMime","mimes","mimeVals","MIME_BINARY","isUnspecific","suggestFilename","theMime","Arrays","findIndexInSegmentsArray","arr","desiredIndex","low","high","mid","Math","ceil","startIndex","arrays_1","ModeTransition","mode","modeTransitions","modeTransition","Position","lineNumber","column","equals","other","isBefore","isBeforeOrEqual","clone","lift","isIPosition","obj","asEmptyRange","position","startLineNumber","startColumn","endLineNumber","endColumn","startPosition","range","endPosition","position_1","Range","isEmpty","containsPosition","containsRange","plusRange","intersectRanges","equalsRange","getEndPosition","getStartPosition","cloneRange","setEndPosition","setStartPosition","collapseToStart","isIRange","otherRange","areIntersectingOrTouching","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","max","min","compareRangesUsingStarts","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","aEndColumn","bEndColumn","compareRangesUsingEnds","spansMultipleLines","ViewLineToken","type","equalsArray","ViewLineTokens","lineTokens","fauxIndentLength","textLength","_lineTokens","_fauxIndentLength","_textLength","getTokens","getFauxIndentLength","getTextLength","findIndexOfOffset","offset","cursorStyleToString","cursorStyle","TextEditorCursorStyle","Line","Block","Underline","SelectionDirection","WrappingIndent","InternalEditorScrollbarOptions","arrowSize","vertical","horizontal","useShadows","Boolean","verticalHasArrows","horizontalHasArrows","handleMouseWheel","horizontalScrollbarSize","horizontalSliderSize","verticalScrollbarSize","verticalSliderSize","mouseWheelScrollSensitivity","Number","EditorWrappingInfo","isViewportWrapping","wrappingColumn","wrappingIndent","wordWrapBreakBeforeCharacters","wordWrapBreakAfterCharacters","wordWrapBreakObtrusiveCharacters","InternalEditorViewOptions","theme","canUseTranslate3d","experimentalScreenReader","rulers","_toSortedIntegerArray","ariaLabel","lineNumbers","selectOnLineNumbers","glyphMargin","revealHorizontalRightPadding","roundedSelection","overviewRulerLanes","cursorBlinking","hideCursorInOverviewRuler","scrollBeyondLastLine","editorClassName","stopRenderingLineAfter","renderWhitespace","indentGuides","scrollbar","arrSource","el","r","parseInt","sort","_numberArraysEqual","createChangeEvent","newOpts","EditorContribOptions","selectionClipboard","hover","contextmenu","quickSuggestions","quickSuggestionsDelay","iconsInSuggestions","formatOnType","suggestOnTriggerCharacters","acceptSuggestionOnEnter","selectionHighlight","outlineMarkers","referenceInfos","folding","InternalEditorOptions","lineHeight","readOnly","wordSeparators","autoClosingBrackets","useTabStops","tabFocusMode","layoutInfo","fontInfo","viewInfo","wrappingInfo","contribInfo","OverviewRulerLane","EndOfLinePreference","DefaultEndOfLine","EndOfLineSequence","TrackedRangeStickiness","CursorChangeReason","VerticalRevealType","OverviewRulerPosition","width","height","top","right","EditorLayoutInfo","glyphMarginLeft","glyphMarginWidth","glyphMarginHeight","lineNumbersLeft","lineNumbersWidth","lineNumbersHeight","decorationsLeft","decorationsWidth","decorationsHeight","contentLeft","contentWidth","contentHeight","verticalScrollbarWidth","horizontalScrollbarHeight","overviewRuler","MouseTargetType","KEYBINDING_CONTEXT_EDITOR_TEXT_FOCUS","KEYBINDING_CONTEXT_EDITOR_FOCUS","KEYBINDING_CONTEXT_EDITOR_TAB_MOVES_FOCUS","KEYBINDING_CONTEXT_EDITOR_HAS_MULTIPLE_SELECTIONS","KEYBINDING_CONTEXT_EDITOR_HAS_NON_EMPTY_SELECTION","KEYBINDING_CONTEXT_EDITOR_LANGUAGE_ID","SHOW_ACCESSIBILITY_HELP_ACTION_ID","BareFontInfo","opts","fontFamily","fontSize","getId","FontInfo","typicalHalfwidthCharacterWidth","typicalFullwidthCharacterWidth","spaceWidth","maxDigitWidth","ViewEventNames","ModelFlushedEvent","LinesDeletedEvent","LinesInsertedEvent","LineChangedEvent","TokensChangedEvent","DecorationsChangedEvent","CursorPositionChangedEvent","CursorSelectionChangedEvent","RevealRangeEvent","LineMappingChangedEvent","ScrollRequestEvent","Viewport","left","CodeEditorStateFlag","EditorType","ICodeEditor","IDiffEditor","ClassName","EditorWarningDecoration","EditorErrorDecoration","Disposed","ConfigurationChanged","ModelDispose","ModelChanged","ModelTokensChanged","ModelModeChanged","ModelModeSupportChanged","ModelOptionsChanged","ModelRawContentChanged","ModelContentChanged2","ModelRawContentChangedFlush","ModelRawContentChangedLinesDeleted","ModelRawContentChangedLinesInserted","ModelRawContentChangedLineChanged","EditorTextBlur","EditorTextFocus","EditorFocus","EditorBlur","ModelDecorationsChanged","CursorPositionChanged","CursorSelectionChanged","CursorRevealRange","CursorScrollRequest","ViewFocusGained","ViewFocusLost","ViewFocusChanged","ViewScrollChanged","ViewZonesChanged","ViewLayoutChanged","ContextMenu","MouseDown","MouseUp","MouseMove","MouseLeave","KeyDown","KeyUp","EditorLayout","DiffUpdated","Handler","ExecuteCommand","ExecuteCommands","CursorLeft","CursorLeftSelect","CursorWordLeft","CursorWordStartLeft","CursorWordEndLeft","CursorWordLeftSelect","CursorWordStartLeftSelect","CursorWordEndLeftSelect","CursorRight","CursorRightSelect","CursorWordRight","CursorWordStartRight","CursorWordEndRight","CursorWordRightSelect","CursorWordStartRightSelect","CursorWordEndRightSelect","CursorUp","CursorUpSelect","CursorDown","CursorDownSelect","CursorPageUp","CursorPageUpSelect","CursorPageDown","CursorPageDownSelect","CursorHome","CursorHomeSelect","CursorEnd","CursorEndSelect","ExpandLineSelection","CursorTop","CursorTopSelect","CursorBottom","CursorBottomSelect","CursorColumnSelectLeft","CursorColumnSelectRight","CursorColumnSelectUp","CursorColumnSelectPageUp","CursorColumnSelectDown","CursorColumnSelectPageDown","AddCursorDown","AddCursorUp","CursorUndo","MoveTo","MoveToSelect","ColumnSelect","CreateCursor","LastCursorMoveToSelect","JumpToBracket","Type","ReplacePreviousChar","Paste","Tab","Indent","Outdent","DeleteLeft","DeleteRight","DeleteWordLeft","DeleteWordStartLeft","DeleteWordEndLeft","DeleteWordRight","DeleteWordStartRight","DeleteWordEndRight","DeleteAllLeft","DeleteAllRight","RemoveSecondaryCursors","CancelSelection","Cut","Undo","Redo","WordSelect","WordSelectDrag","LastCursorWordSelect","LineSelect","LineSelectDrag","LastCursorLineSelect","LastCursorLineSelectDrag","LineInsertBefore","LineInsertAfter","LineBreakInsert","SelectAll","ScrollLineUp","ScrollLineDown","ScrollPageUp","ScrollPageDown","ColorZone","colorId","OverviewRulerZone","forceHeight","color","darkColor","_color","_darkColor","_colorZones","getColor","useDarkColor","compareTo","setColorZones","colorZones","getColorZones","spacesDiff","aLength","bLength","aCharCode","bCharCode","aSpacesCnt","aTabsCount","__space","bSpacesCnt","bTabsCount","tabsDiff","abs","guessIndentation","lines","defaultTabSize","defaultInsertSpaces","linesIndentedWithTabsCount","linesIndentedWithSpacesCount","previousLineText","previousLineIndentation","ALLOWED_TAB_SIZE_GUESSES","MAX_ALLOWED_TAB_SIZE_GUESS","spacesDiffCount","currentLineText","currentLineHasContent","currentLineIndentation","currentLineSpacesCount","currentLineTabsCount","lenJ","charCode","__tab","currentSpacesDiff","deltaSpacesCount","insertSpaces","tabSize","tabSizeScore","possibleTabSize","possibleTabSizeScore","LineToken","TokenIterator","model","_model","_currentLineNumber","_currentTokenIndex","_readLineTokens","_next","_prev","columnIndex","tokenEndIndex","MAX_VALUE","_currentLineTokens","getTokenCount","tokenStartIndex","getTokenStartIndex","_current","getLineTokens","_advanceNext","getLineCount","_advancePrev","getTokenType","endIndex","getTokenEndIndex","getLineContent","token","hasNext","hasPrev","prev","_invalidate","errorFn","AbstractState","stateData","getMode","makeClone","initializeFrom","getStateData","setStateData","state","safeEquals","tokenize","stream","safeClone","selection","uri","score","selector","item","scheme","fsPath","LineStream","_source","sourceLength","_pos","whitespaceArr","stringToArray","separators","separatorsArr","tokenStart","tokenEnd","str","STRING_TO_ARRAY_CACHE","actualStringToArray","maxCharCode","eos","peek","next2","advance","n","oldPos","_advance2","advanceToEOS","resetPeekedToken","goBack","createPeeker","condition","_advanceIfStringCaseInsensitive","charAt","advanceIfStringCaseInsensitive","advanceIfStringCaseInsensitive2","_advanceIfString","advanceIfString","advanceIfString2","_advanceIfCharCode","advanceIfCharCode","advanceIfCharCode2","_advanceIfRegExp","lastMatch","advanceIfRegExp","advanceIfRegExp2","advanceLoop","isWhile","including","peeker","f","advanceWhile","advanceUntil","_advanceUntilString","advanceUntilString","advanceUntilString2","setTokenRules","peekToken","nextToken","peekWhitespace","_skipWhitespace","skipWhitespace","skipWhitespace2","fixCase","lexer","sanitize","log","msg","throwError","substituteMatches","id","re","stateMatches","full","sub","dollar","hash","attr","ofs","total","findRules","rules","tokenizer","stateExists","exist","stateNames","MonarchBracket","objects","monarchCommon","isArrayOf","elemType","bool","prop","def","onerr","undefined","string","compileRegExp","selectScrutinee","num","parts","createGuard","ruleName","tkey","val","scrut","oppat","op","pat","tester","words","elem","inWords","createKeywordMatcher","patx","patexp","scrutinee","compileAction","action","newAction","tokenSubst","bracket","Open","Close","switchTo","nextEmbedded","usesEmbedded","results","group","cases","defaultToken","didmatch","compile","json","addRules","newrules","rule","include","newrule","Rule","setRegex","lexerMin","setAction","rule1","regex","matchOnlyAtStart","matchOnlyAtLineStart","displayName","noThrow","maxStack","lineComment","blockCommentStart","blockCommentEnd","tokenPostfix","wordDefinition","lineComments","brackets","open","close","bracketIdx","desc","autoClosingPairs","autoClosingPairIdx","openClose","pair","bidx","notIn","standardBrackets","outdentTriggers","sregex","act","createRichEditSupport","wordPattern","comments","blockComment","__electricCharacterSupport","caseInsensitive","embeddedElectricCharacters","modeTransition_1","handleEvent","context","runner","modeIndex","nestedMode","modeStartIndex","firstTokenInModeIndex","nextCharacterAfterModeIndex","nextTokenAfterMode","firstTokenCharacterOffset","newCtx","FilteredLineContext","ignoreBracketsInToken","tokenType","IGNORE_IN_TOKENS","Token","LineTokens","tokens","actualStopOffset","endState","retokenize","actual","_actual","_firstTokenInModeIndex","_nextTokenAfterMode","_firstTokenCharacterOffset","_nextCharacterAfterModeIndex","actualLineContent","tokenIndex","getTokenText","SnippetsRegistry","registerDefaultSnippets","modeId","snippets","_defaultSnippets","registerSnippets","snippetsByMode","_snippets","getNonWhitespacePrefix","line","getSnippets","getWordAtPosition","currentWord","currentFullWord","suggestions","getModeId","snipppetsByMode","defaultSnippets","label","startsWith","overwriteBefore","supports_1","CharacterPairSupport","config","_modeId","_autoClosingPairs","_surroundingPairs","surroundingPairs","getAutoClosingPairs","shouldAutoClosePair","character","notInIndex","richEditSupport","characterPair","getSurroundingPairs","range_1","once","keyFn","computeFn","cache","input","createOrRegex","pieces","regexStr","createRegExp","toReversedString","reversedStr","RichEditBrackets","forwardRegex","getRegexForBracketPair","reversedRegex","getReversedRegexForBracketPair","getRegexForBrackets","getReversedRegexForBrackets","textIsBracket","textIsOpenBracket","maxBracketLength","BracketsUtils","_findPrevBracketInText","reversedBracketRegex","reversedText","m","matchOffset","matchLength","absoluteMatchOffset","findPrevBracketInToken","lineText","currentTokenStart","currentTokenEnd","currentTokenReversedText","findNextBracketInText","bracketRegex","findNextBracketInToken","currentTokenText","richEditBrackets_1","BracketElectricCharacterSupport","contribution","Brackets","docComment","getElectricCharacters","onElectricCharacter","electricCharacter","richEditBrackets","_richEditBrackets","_docComment","bracketPair","lastChar","array","_onElectricCharacterDocComment","_onElectricCharacterStandardBrackets","containsTokenTypes","fullTokenSpec","tokensToLookFor","firstNonWhitespaceIndex","isOpen","matchOpenBracket","lastTokenIndex","scope","appendText","PrefixSumIndexOfResult","remainder","PrefixSumComputer","prefixSum","prefixSumValidIndex","getCount","insertValue","insertIndex","floor","splice","insertValues","_zeroArray","count","changeValue","removeValues","cnt","getTotalValue","getAccumulatedValue","getIndexOf","accumulatedValue","midStop","midStart","errors_1","CallbackList","bucket","_callbacks","_contexts","foundCallbackWithDifferentContext","invoke","args","callbacks","contexts","e","onUnexpectedError","callbackList_1","fromEventEmitter","emitter","eventType","listener","thisArgs","addListener2","mapEvent","event","_disposable","None","Emitter","_options","_event","onFirstListenerAdd","_noop","_disposed","onLastListenerRemove","fire","EventDelayerState","EventBufferer","buffers","wrapEvent","buffer","bufferEvents","pop","flush","event_1","CancellationToken","isCancellationRequested","onCancellationRequested","Cancelled","shortcutEvent","handle","setTimeout","bind","clearTimeout","MutableToken","_isCancelled","cancel","_emitter","CancellationTokenSource","_token","Errors","safeInvokeNoArg","func","safeInvoke1Arg","EmitterEvent","_type","_data","getType","getData","EventEmitter","allowedEventTypes","_listeners","_bulkListeners","_collectedEvents","_deferredCnt","_allowedEventTypes","addListener","bound","_removeListener","addOneTimeListener","unbind","addOneTimeDisposableListener","addBulkListener","_removeBulkListener","addBulkListener2","addEmitter","eventEmitter","events","newEvents","_emitEvents","addEmitter2","listeners","_emitToSpecificTypeListeners","_emitToBulkListeners","bulkListeners","emit","emitterEvent","deferredEmit","_emitCollected","EmitQueueElement","OrderGuaranteeEventEmitter","_emitQueue","queueElement","Platform","errors","precision","topic","description","timeKeeper","getTimeKeeper","ENABLE_TIMER","msWriteProfilerMark","Topic","NullTimerEvent","timeTaken","TimerEvent","startTime","stopTime","sw","profilerName","_onEventStopped","TimeKeeper","cleaningIntervalId","collectedEvents","isEnabled","nullEvent","strTopic","EDITOR","LANGUAGES","WORKER","WORKBENCH","STARTUP","initAutoCleaning","addEvent","clearInterval","EVENT_ID","_EVENT_CACHE_LIMIT","setInterval","_MAX_TIMER_LENGTH","_CLEAN_UP_INTERVAL","getCollectedEvents","clearCollectedEvents","emitEvents","setInitialCollectedEvents","PARSE_TIME","platform","winjs_base_1","cancellation_1","lifecycle_1","isThenable","then","toThenable","TPromise","as","asWinJsPromise","resolve","reject","wireCancellationToken","promise","always","done","e1","err","progress","sequence","promiseFactory","thenHandler","reverse","didCall","nfcall","Promise","ninvoke","thisArg","Throttler","activePromise","queuedPromise","queuedPromiseFactory","queue","onComplete_1","SimpleThrottler","current","promiseTask","Delayer","defaultDelay","timeout","completionPromise","onSuccess","task","trigger","delay","cancelTimeout","isTriggered","ThrottledDelayer","throttler","PeriodThrottledDelayer","minimumPeriod","periodThrottler","PromiseSource","_value","_completeCallback","_errorCallback","complete","ShallowCancelThenPromise","outer","completeCallback","errorCallback","progressCallback","canceled","Limiter","maxDegreeOfParalellism","outstandingPromises","runningPromises","factory","consume","iLimitedTask","consumed","TimeoutTimer","cancelAndSet","setIfNotSet","IntervalTimer","interval","RunOnceScheduler","timeoutToken","timeoutHandler","onTimeout","isScheduled","setRunner","schedule","EditStack","currentOpenStackElement","past","future","pushStackElement","clear","pushEditOperation","beforeCursorState","editOperations","cursorStateComputer","beforeVersionId","getAlternativeVersionId","afterCursorState","afterVersionId","inverseEditOperation","operations","applyEdits","getVersionId","undo","pastStackElement","selections","recordedVersionId","redo","futureStackElement","viewLineToken_1","START_INDEX_MASK","TYPE_MASK","START_INDEX_OFFSET","TYPE_OFFSET","pow","DEFAULT_VIEW_TOKEN","INFLATED_TOKENS_EMPTY_TEXT","DEFLATED_TOKENS_EMPTY_TEXT","INFLATED_TOKENS_NON_EMPTY_TEXT","DEFLATED_TOKENS_NON_EMPTY_TEXT","TokensInflatorMap","_inflate","_deflate","","TokensBinaryEncoding","deflateArr","deflatedToken","deflated","inflateMap","deflateMap","prevStartIndex","getStartIndex","binaryEncodedToken","deflatedType","inflateArr","binaryEncodedTokens","sliceAndInflate","startOffset","endOffset","deltaStartIndex","originalToken","newStartIndex","originalStartIndex","tokensBinaryEncoding_1","toLineTokensFromInflated","toLineTokensFromDeflated","toModeTransitions","topLevelMode","MarkerMoveSemantics","NO_OP_TOKENS_ADJUSTER","adjust","finish","NO_OP_MARKERS_ADJUSTER","adjustDelta","adjustSet","ModelLine","_lineNumber","_text","_isInvalid","_state","_modeTransitions","_markers","setState","getState","getModeTransitions","setTokens","_setLineTokensFromDeflated","EmptyLineTokens","INSTANCE","DefaultLineTokens","_createTokensAdjuster","getBinaryEncodedTokens","tokensLength","tokensIndex","currentTokenStartIndex","toColumn","delta","minimumAllowedColumn","minimumAllowedIndex","newToken","prevTokenStartIndex","lineTextLength","_setText","getBinaryEncodedTokensMap","lastTokenStartIndex","_createMarkersAdjuster","changedMarkers","_compareMarkers","markers","markersLength","markersIndex","marker","adjustMarkerBeforeColumn","moveSemantics","ForceMove","ForceStay","stickToPreviousCharacter","newColumn","oldLineNumber","oldColumn","MarkerDefined","edits","deltaColumn","resultText","tokensAdjuster","markersAdjuster","edit","deletingCnt","insertingCnt","forceMoveMarkers","commonLength","splitColumn","myText","otherText","otherMarkers","myMarkers","otherLine","addMarkers","append","thisTextLength","otherLineTokens","otherTokens","deflatedStartIndex","myLineTokens","addMarker","removeMarker","_indexOfMarkerId","removeMarkers","deleteMarkers","getMarkers","updateLineNumber","newLineNumber","deleteLine","setMarkersColumn","setMarkersOldLineNumber","markerId","_tokens","inflate","languageSelector_1","LanguageFeatureRegistry","_clock","_entries","_onDidChange","register","provider","isBuiltin","_score","_time","_lastCandidate","has","all","isTooLargeForHavingAMode","_updateScores","ordered","_orderedForEach","orderedGroups","lastBucket","lastBucketScore","_compareByScoreAndTime","languageFeatureRegistry_1","mutableSupportToString","registerableSupport","MutableSupport","RichEditSupport","TokenizationSupport","DocumentHighlightKind","SymbolKind","kind","Method","Function","Constructor","Variable","Class","Interface","Namespace","Package","Module","Property","Enum","File","Key","Null","IndentAction","ReferenceProviderRegistry","RenameProviderRegistry","SuggestRegistry","SignatureHelpProviderRegistry","HoverProviderRegistry","DocumentSymbolProviderRegistry","DocumentHighlightProviderRegistry","DefinitionProviderRegistry","CodeLensProviderRegistry","CodeActionProviderRegistry","DocumentFormattingEditProviderRegistry","DocumentRangeFormattingEditProviderRegistry","OnTypeFormattingEditProviderRegistry","LinkProviderRegistry","modes_1","getRawEnterActionAtPosition","onEnter","getEnterActionAtPosition","indentation","getLeadingWhitespace","enterAction","indentAction","IndentOutdent","removeText","OnEnterSupport","_brackets","openRegExp","_createOpenBracketRegExp","closeRegExp","_createCloseBracketRegExp","_regExpRules","regExpRules","_indentationRules","indentationRules","getLineContext","_onEnter","beforeEnterText","afterEnterText","oneLineAboveText","_actualOnEnter","beforeText","afterText","_INDENT_OUTDENT","increaseIndentPattern","_INDENT","indentNextLinePattern","decreaseIndentPattern","_OUTDENT","_safeRegExp","nls","Severity","fromValue","equalsIgnoreCase","_error","_warning","_warn","Warning","_info","Info","Ignore","_displayStrings","compare","localize","USUAL_WORD_SEPARATORS","DEFAULT_INDENTATION","detectIndentation","DEFAULT_TRIM_AUTO_WHITESPACE","DEFAULT_WINDOWS_FONT_FAMILY","DEFAULT_MAC_FONT_FAMILY","DEFAULT_LINUX_FONT_FAMILY","GOLDEN_LINE_HEIGHT_RATIO","isMacintosh","ConfigClass","editor","lineNumbersMinChars","lineDecorationsWidth","fontLigatures","disableTranslate3d","automaticLayout","DefaultConfig","eventEmitter_1","editorCommon","modelLine_1","indentationGuesser_1","defaultConfig_1","prefixSumComputer_1","LIMIT_FIND_COUNT","LONG_LINE_BOUNDARY","TextModel","rawText","_shouldSimplifyMode","MODEL_SYNC_LIMIT","_shouldDenyMode","MODEL_TOKENIZATION_LIMIT","options","_constructLines","_setVersionId","_isDisposed","_isDisposing","isTooLargeForHavingARichMode","getOptions","updateOptions","somethingChanged","changed","trimAutoWhitespace","_lines","guessedIndentation","_normalizeIndentationFromWhitespace","spacesCnt","tabsCnt","normalizeIndentation","getOneIndent","_versionId","_alternativeVersionId","_ensureLineStarts","_lineStarts","lineStartValues","eolLength","_EOL","getOffsetAt","rawPosition","validatePosition","getPositionAt","out","lineLength","_increaseVersionId","newVersionId","_overwriteAlternativeVersionId","newAlternativeVersionId","isDisposed","_BOM","_createContentChangedFlushEvent","changeType","detail","versionId","isUndoing","isRedoing","_emitContentChanged2","rangeLength","eol","_resetValue","toRawText","BOM","EOL","getLinesContent","getValueLength","setValue","defaultEOL","setValueFromRawText","oldFullModelRange","getFullModelRange","oldModelValueLength","getValueLengthInRange","getLineMaxColumn","_emitModelContentChangedFlushEvent","getValue","preserveBOM","fullModelRange","fullModelValue","getValueInRange","getEmptiedValueInRange","rawRange","fillCharacter","TextDefined","validateRange","_repeatCharacter","lineEnding","_getEndOfLine","startLineIndex","endLineIndex","resultLines","isDominatedByLongLines","smallLineCharCount","longLineCharCount","getEOL","setEOL","newEOL","CRLF","getLineMinColumn","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","lastNonWhitespaceIndex","validateLineNumber","maxColumn","modifyPosition","lineCount","carriageReturnCnt","lastCarriageReturnIndex","UTF8_BOM_CHARACTER","lineFeedCnt","LF","resolvedOpts","rawLines","modelLines","findMatches","searchString","rawSearchScope","isRegex","matchCase","wholeWord","limitResultCount","createSafeRegExp","searchRange","_doFindMatches","findNextMatch","rawSearchStart","searchStart","_findMatchInLine","lineIndex","findPreviousMatch","_findLastMatchInLine","searchRegex","counter","_findMatchesInLine","deltaOffset","bestResult","DEFAULT_CREATION_OPTIONS","RawText","fromString","fromStringWithModelOptions","nullTokenize","stopAtOffset","NullState","stateDataClone","otherStateData","NullMode","DEFAULT_WORD_REGEXP","createWordRegExp","allowInWords","usualSeparators","ID","toSimplifiedMode","nullMode_1","WordHelper","_safeGetWordDefinition","ensureValidWordDefinition","global","flags","multiline","massageWordDefinitionOf","_getWordAtColumn","txt","modeEndIndex","_getWordAtText","textSource","_lineIsTokenized","_getLineModeTransitions","textOffset","k","startWord","endWord","characterPair_1","electricCharacter_1","onEnter_1","previous","rawConf","_conf","_mergeConf","_handleOnEnter","_handleComments","onEnterRules","conf","commentRule","lineCommentToken","blockStart","blockEnd","blockCommentStartToken","blockCommentEndToken","modes","lineStream_1","isFunction","something","customization","supportsNestedModes","shouldGenerateEmbeddedModels","_mode","_embeddedModesListeners","registerSupport","defaults","enterNestedMode","getNestedMode","getNestedModeInitialState","getLeavingNestedModeData","onReturningFromNestedMode","getInitialState","_nestedTokenize","_myTokenize","nestedModeState","prependTokens","prependModeTransitions","myStateBeforeNestedMode","leavingNestedModeData","stepOnceNestedState","tokenizationSupport","nestedModeBuffer","nestedModeLineTokens","bufferAfterNestedMode","myStateAfterNestedMode","stateAfterNestedMode","myState","tokenResult","beforeTokenizeStreamPos","lineStream","previousType","maxPos","nextState","dontMergeWithPrev","currentEmbeddedLevels","_getEmbeddedLevel","MAX_EMBEDDED_LEVELS","embeddedMode","addSupportChangedListener","emitting","restOfBuffer","missingModePromise","_validatedNestedMode","lastNestedModeState","abstractState_1","tokenizationSupport_1","findBracket","matched","bracketType","createTokenizationSupport","modeService","MonarchLexer","embeddedEntered","rawState","isRegisteredMode","getOrCreateMode","mstate","stack","groupActions","groupMatches","groupMatched","groupRule","otherm","noConsumeIsOk","stackLen0","groupLen0","callres","getModeIdForLanguageName","transform","totalLen","rest","async_1","stopwatch_1","timer","textModel_1","textModelWithTokensHelpers_1","tokenIterator_1","lineToken_1","ModeToModelBinder","modePromise","_modePromise","_externalModePromise","_externalModePromise_c","_externalModePromise_e","setMode","_warmUpTokens","getModePromise","FullModelRetokenizer","retokenizePromise","_retokenizePromise","isFulfilled","onRetokenizerFulfilled","getRange","LineContext","TextModelWithTokens","shouldAutoTokenize","modeOrPromise","_shouldAutoTokenize","_modeListener","_modeToModelBinder","_tokensInflatorMap","_invalidLineStartIndex","_lastState","_revalidateTokensTimeout","_scheduleRetokenizeNow","_retokenizers","is","promiseValue","_massageMode","_resetModeListener","_retokenizeNow","_resetTokenizationState","_clearTimers","whenModeIsReady","fulfilled","hasFullModel","isInvalid","minLineNumber","_beginBackgroundTokenization","_createRetokenizer","_resetMode","newMode","emitModelTokensChangedEvent","_onModeSupportChanged","_emitModelModeSupportChangedEvent","_initializeTokenizationState","initialState","friendlyMessage","MODE_TOKENIZATION_FAILED_MSG","inaccurateTokensAcceptable","_updateTokensUntilLine","_getInternalTokens","newModeOrPromise","actualNewMode","e2","oldMode","_emitModelModeChangedEvent","getModeAtPosition","_column","validPosition","getStateBeforeLine","getStateAfterLine","modeTransitionIndex","_invalidateLine","_toLineTokens","_toModeTransitions","_updateLineTokens","_revalidateTokensNow","maxLineNumber","toLineNumber","t1","elapsedTime","MAX_ALLOWED_TIME","fromLineNumber","tokenizedChars","currentCharsToTokenize","currentEstimatedTimeToTokenize","linesLength","stopLineTokenizationAfter","endStateIndex","nextInvalidLineIndex","_getWordDefinition","getWordUntilPosition","wordAtPosition","tokenIterator","iter","findMatchingBracketUp","_position","currentModeIndex","currentMode","currentModeBrackets","_findMatchingBracketUp","matchBracket","_matchBracket","currentTokenIndex","prevTokenIndex","prevTokenType","prevTokenStart","prevMode","prevModeBrackets","foundBracket","foundBracketText","_matchFoundBracket","_findMatchingBracketDown","currentModeStart","currentModeId","currentTokenType","hitText","nextModeStart","startTokenIndex","findPrevBracket","_toFoundBracket","findNextBracket","textModelWithTokens_1","createTestMirrorModelFromString","associatedResource","MirrorModel","AbstractMirrorModel","_associatedResource","getEmbeddedAtPosition","getAllEmbedded","destroy","getRangeFromOffsetAndLength","getOffsetAndLengthFromRange","getPositionFromOffset","getOffsetFromPosition","getLineStart","getAllWordsWithRange","toTextRange","info","wordenize","getAllWords","getAllUniqueWords","skipWordOnce","foundSkipWord","uniqueWords","content","wordsRegexp","MirrorModelEmbedded","actualModel","includeRanges","url","_getMirrorValueWithinRanges","_actualModel","resultingText","prevLineAdded","prevColumnAdded","includeRange","lastLineNumber","lastColumn","actualModelOptions","setIncludedRanges","newIncludedRanges","prevVersionId","EmbeddedModeRange","ranges","resourceService","_resourceService","_embeddedModels","_updateEmbeddedModels","modeAtPosition","embeddedModeId","embeddedModels","embeddedModel","_getModesRanges","encounteredModesRanges","getOrCreateEmbeddedModeRange","currentStartLineNumber","currentStartColumn","modeRange","newModesRanges","oldNestedModesIds","oldNestedModeId","newNestedModesIds","newNestedModeId","embeddedModelUrl","fragment","onEvents","contentChanged","contentChangedEvent","_onLinesFlushed","_onLinesDeleted","_onLinesInserted","_onLineChanged","shouldFlushMarkers","fromLineIndex","toLineIndex","firstLineState","splitLines","newLengths","idGenerator_1","LineMarker","_INSTANCE_COUNT","TextModelWithMarkers","_markerIdGenerator","_markerIdToMarker","_addMarker","_addMarkers","newMarkers","addMarkersPerLine","newMarker","_changeMarker","newPos","_changeMarkerStickiness","newStickToPreviousCharacter","_getMarker","_getMarkersCount","_getLineMarkers","_removeMarker","_removeMarkers","ids","removeMarkersPerLine","_getMarkersInMap","markersMap","textModelWithMarkers_1","TrackedRangeModelRetokenizer","trackedRangeId","addTrackedRange","AlwaysGrowsWhenTypingAtEdges","getTrackedRange","isValidTrackedRange","removeTrackedRange","TrackedRange","startMarkedId","endMarkerId","startMarkerId","TextModelWithTrackedRanges","_rangeIdGenerator","_ranges","_markerIdToRangeId","_multiLineTrackedRanges","_setRangeIsMultiLine","rangeId","rangeIsMultiLine","rangeWasMultiLine","_shouldStartMarkerSticksToPreviousCharacter","stickiness","GrowsOnlyWhenTypingBefore","_shouldEndMarkerSticksToPreviousCharacter","NeverGrowsWhenTypingAtEdges","_getTrackedRangesCount","textRange","startMarkerSticksToPreviousCharacter","endMarkerSticksToPreviousCharacter","_addTrackedRanges","textRanges","stickinessArr","markerIds","changeTrackedRange","newTextRange","changeTrackedRangeStickiness","newStickiness","removeTrackedRanges","_newEditorRange","startMarker","endMarker","_getMultiLineTrackedRanges","filterStartLineNumber","filterEndLineNumber","getLinesTrackedRanges","lineMarkers","lineMarker","resultMap","_onChangedMarkers","changedRange","changedRanges","htmlContent_1","textModelWithTrackedRanges_1","cleanClassName","_normalizeOptions","ModelDecorationOptions","_normalizeOverviewRulerOptions","legacyShowInOverviewRuler","ModelDecorationOverviewRulerOptions","DeferredEventsBuilder","oldDecorationRange","oldDecorationOptions","newOrChangedDecorations","removedDecorations","addNewDecoration","addRemovedDecoration","ownerId","addMovedDecoration","oldRange","addUpdatedDecoration","oldOptions","TextModelWithDecorations","_decorationIdGenerator","decorations","rangeIdToDecorationId","_currentDeferredEvents","changeDecorations","_withDeferredEvents","deferredEventsBuilder","changeAccessor","addDecoration","_addDecorationImpl","changeDecoration","newRange","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","removeDecoration","_removeDecorationImpl","deltaDecorations","oldDecorations","newDecorations","_deltaDecorationsImpl","_normalizeDeltaDecorations","removeAllDecorationsWithOwnerId","toRemove","decorationId","decoration","_removeDecorationsImpl","getDecorationOptions","getDecorationRange","getLineDecorations","filterOutValidation","getLinesDecorations","_getDecorationsInRange","lineRange","lineRanges","getDecorationsInRange","validatedRange","getAllDecorations","createDeferredEvents","_handleCollectedEvents","_onChangedRanges","_handleCollectedDecorationsEvents","eventBuilder","decorationData","addedOrChangedDecorations","decorationIds","_getDecorationData","isForValidation","oldRanges","emitModelDecorationsChangedEvent","deltaDecoration","ModelDeltaDecoration","ModelInternalDecoration","_addDecorationsImpl","rangeIds","_resolveOldDecorations","oldDecorationsIds","oldDecorationsIndex","oldDecorationsLength","newDecorationsIndex","newDecorationsLength","decorationsToAdd","decorationsToRemove","oldDecoration","newDecoration","comparison","newIds","hoverMessage","htmlMessage","isWholeLine","showInOverviewRuler","glyphMarginClassName","linesDecorationsClassName","inlineClassName","_overviewRulerEquals","Center","editStack_1","textModelWithDecorations_1","EditableTextModel","_commandManager","_isUndoing","_isRedoing","_hasEditableRange","_editableRangeId","_trimAutoWhitespaceLines","onDidChangeRawContent","onDidChangeContent","pushEditOperations","incomingEdits","editsAreNearCursors","sel","foundEditNearSel","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","identifier","isAutoWhitespaceEdit","_reduceOperations","_toSingleEditOperation","firstEditRange","lastEditRange","entireEditRange","lastEndLineNumber","lastEndColumn","operation","sortIndex","_sortOpsAscending","_sortOpsDescending","rawOperations","rangeEnd","nextRangeStart","editableRange","getEditableRange","editableRangeStart","editableRangeEnd","operationRange","reverseRanges","_getInverseEditRanges","reverseOperations","newTrimAutoWhitespaceCandidates","reverseRange","currentLineContent","oldContent","_applyEdits","prevContent","lineContent","prevOpEndLineNumber","prevOpEndColumn","prevOp","resultRange","lastLine","contentChangedEvents","contentChanged2Events","lineEditsQueue","queueLineEdit","lineEdit","flushLineEdits","currentLineNumber","currentLineNumberStart","_createLineChangedEvent","minTouchedLineNumber","maxTouchedLineNumber","totalLinesCountDelta","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","editLineNumber","spliceStartLineNumber","spliceStartColumn","endLineRemains","spliceCnt","markersOnDeletedLines","deleteLineIndex","_createLinesDeletedEvent","spliceLineNumber","spliceColumn","leftoverLine","newLinesContent","newLinesLengths","_createLinesInsertedEvent","versionBumps","finalVersionId","_assertLineNumbersOK","foundMarkersCnt","totalMarkersCnt","setEditableRange","hasEditableRange","uri_1","editorCommon_1","editableTextModel_1","MODEL_ID","aliveModels","Model","parse","_attachedEditorCount","onDidChangeModeSupport","onDidChangeDecorations","onDidChangeOptions","onWillDispose","onDidChangeMode","onBeforeAttached","onBeforeDetached","isAttachedToEditor","AbstractDescriptor","_staticArguments","appendStaticArguments","more","staticArguments","nth","_validate","illegalArgument","SyncDescriptor","_ctor","moreStaticArguments","allArgs","createSyncDescriptor","ctor","AsyncDescriptor","_moduleName","_ctorName","moduleName","ctorName","_createAsyncDescriptor","createAsyncDescriptor0","createAsyncDescriptor1","createAsyncDescriptor2","createAsyncDescriptor3","createAsyncDescriptor4","createAsyncDescriptor5","createAsyncDescriptor6","createAsyncDescriptor7","storeServiceDependency","optional","_util","DI_TARGET","DI_DEPENDENCIES","createDecorator","serviceId","serviceIdentifier","getServiceDependencies","IInstantiationService","instantiation_1","ID_EDITOR_WORKER_SERVICE","IEditorWorkerService","IModeService","IModelService","ResourceEvents","ADDED","REMOVED","CHANGED","IResourceService","resourceService_1","ResourceService","unbinds","addListener2_","_anonymousModelId","ch","originalEvents","addedElement","removedElement","ValidationModel","changeCallback","_changeCallback","_isDirty","_onModelChanged","markAsClean","markAsDirty","isDirty","getMirrorModel","containsChanged","ValidationHelper","_callback","_filter","resource","_validationDelay","_models","_isDueToConfigurationChange","_onResourceAdded","_onResourceRemoved","_invokeCallback","_addElement","modelUrl","triggerDueToConfigurationChange","validationModel","_onChanged","stringUrl","_isEnabled","dirtyModels","cleanModels","isDueToConfigurationChange","toValidate","enable","getConfigurationValue","settingPath","defaultValue","accessSetting","IConfigurationService","IEventService","EventService","IExtensionService","IFileService","FileChangeType","FILE_CHANGES","FileChangesEvent","changes","_changes","containsAny","resources","change","DELETED","getAdded","getOfType","gotAdded","hasType","getDeleted","gotDeleted","getUpdated","UPDATED","gotUpdated","FileOperationResult","MAX_FILE_SIZE","AutoSaveConfiguration","OFF","AFTER_DELAY","ON_FOCUS_CHANGE","SUPPORTED_ENCODINGS","utf8","labelLong","labelShort","order","alias","utf8bom","encodeOnly","utf16le","utf16be","windows1252","iso88591","iso88593","iso885915","macroman","cp437","windows1256","iso88596","windows1257","iso88594","iso885914","windows1250","iso88592","windows1251","cp866","iso88595","koi8r","koi8u","iso885913","windows1253","iso88597","windows1255","iso88598","iso885910","iso885916","windows1254","iso88599","windows1258","gbk","gb18030","cp950","big5hkscs","shiftjis","eucjp","euckr","windows874","iso885911","koi8-ru","koi8-t","GB2312","ServiceCollection","entries","_c","entries_1","instanceOrDescriptor","binarySearch","_entryCompare","old","_searchEntry","_dummy","_b","assert","graph_1","descriptors_1","serviceCollection_1","InstantiationService","services","strict","_services","_strict","createChild","thing","invokeFunction","signature","accessor","isOptional","_getOrCreateServiceInstance","illegalState","createInstance","param","_createInstanceAsync","_createInstance","descriptor","canceledError","_module","staticArgs","serviceDependencies","serviceArgs","dependency","service","firstServiceArgPos","argArray","instance","_createAndCacheServiceInstance","throwCycleError","graph","dependencies","dependencies_1","instanceOrDesc","roots_1","IMarkerService","MarkerType","Types","Assert","RegistryImpl","isString","isObject","knows","Registry","BaseRegistry","toBeInstantiated","instances","setInstantiationService","instantiationService","instantiate","_getInstances","_setInstances","Extensions","ModesRegistry","EditorModesRegistry","_onDidAddCompatModes","onDidAddCompatModes","_onDidAddLanguages","onDidAddLanguages","_compatModes","_languages","registerCompatModes","registerCompatMode","getCompatModes","registerLanguage","registerLanguages","getLanguages","extensions","aliases","mimetypes","modesRegistry_1","LanguagesRegistry","useModesRegistry","_onDidAddModes","onDidAddModes","knownModeIds","mime2LanguageId","name2LanguageId","id2Name","id2Extensions","compatModes","lowerName2Id","id2ConfigurationFiles","_registerCompatModes","_registerLanguages","defs","addedModes","_registerLanguage","filenames","moduleId","_setLanguageName","languageId","languageName","force","prevName","lang","primaryMime","filenamePatterns","_d","_e","filenamePattern","firstLineRegexStr","firstLineRegex","regExpLeadsToEndlessLoop","containsAliases","bestName","configuration","mimetypeOrModeId","getRegisteredModes","getRegisteredLanguageNames","getLanguageName","getModeIdForLanguageNameLowercase","languageNameLower","getConfigurationFiles","getMimeForMode","theModeId","_mime","extractModeIds","commaSeparatedMimetypesOrCommaSeparatedIdsOrName","mimeTypeOrIdOrName","getModeIdsFromLanguageName","getModeIdsFromFilenameOrFirstLine","mimeTypes","getCompatMode","getExtensions","normalizeId","JSONContribution","JSONContributionRegistry","schemasById","addRegistryChangedListener","registerSchema","unresolvedSchemaContent","getSchemaContributions","schemas","jsonContributionRegistry","title","$schema","definitions","schemaArray","minItems","items","$ref","positiveInteger","minimum","positiveIntegerDefault0","allOf","default","simpleTypes","enum","stringArray","uniqueItems","properties","format","multipleOf","exclusiveMinimum","maximum","exclusiveMaximum","maxLength","minLength","additionalItems","anyOf","maxItems","maxProperties","minProperties","required","additionalProperties","patternProperties","oneOf","not","severity_1","jsonContributionRegistry_1","isValidExtensionDescription","extensionFolderPath","extensionDescription","notices","publisher","version","engines","vscode","extensionDependencies","_isStringArray","activationEvents","main","normalizedAbsolutePath","ExtensionMessageCollector","messageHandler","_messageHandler","_msg","schemaRegistry","ExtensionPoint","registry","_registry","_handler","setHandler","handler","_handle","registerPointListener","descriptions","users","contributes","collector","schemaId","schema","author","categories","galleryBanner","scripts","vscode:prepublish","ExtensionsRegistryImpl","_extensionsMap","_extensionsArr","_activationMap","_pointListeners","_extensionPoints","_oneTimeActivationEventListeners","point","extensionPoint","_triggerPointListener","_filterWithExtPoint","getAllExtensionDescriptions","registerExtensionPoint","jsonSchema","handleExtensionPoints","extensionPointName","registerExtensions","extensionDescriptions","activationEvent","listenerEntry","getExtensionDescriptionsForActivationEvent","getExtensionDescription","extensionId","registerOneTimeActivationEventListener","triggerActivationEventListeners","PRExtensions","ExtensionsRegistry","extensionsRegistry_1","Configuration","contributionRegistry","ConfigurationRegistry","configurationContributors","configurationSchema","_onDidRegisterConfiguration","registerConfiguration","registerJSONConfiguration","getConfigurations","configurationRegistry","configurationExtPoint","body","clonedConfiguration","filters_1","configurationRegistry_1","nls_1","filterSuggestions","accept","incomplete","TextualSuggestSupport","editorWorkerService","configurationService","_editorWorkerService","_configurationService","provideCompletionItems","getConfiguration","wordBasedSuggestions","textualSuggest","editor.wordBasedSuggestions","__decorate","decorators","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","configuration_1","suggestSupport_1","editorWorkerService_1","_createModeSupportChangedEvent","supportEnum","ModeWorkerManager","workerModuleId","workerClassName","superWorkerModuleId","_descriptor","_workerDescriptor","_superWorkerModuleId","_instantiationService","_workerPiecePromise","worker","_getOrCreateWorker","superWorkerCodePromise","_loadModule","AbstractMode","_eventEmitter","_simplifiedMode","SimplifiedMode","supportStr","supportImpl","sourceMode","_sourceMode","_id","_assignSupports","isDigit","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","_f","_B","_C","_D","_E","_F","FrankensteinMode","extensions_1","ActivatedExtension","activationFailed","AbstractExtensionService","isReadyByDefault","_onReady","_onReadyC","v","_activatingExtensions","_activatedExtensions","_triggerOnReady","onReady","getExtensionsStatus","isActivated","activateByEvent","activateExtensions","_activateExtensions","activateById","_handleActivateRequest","currentExtension","greenExtensions","redExtensions","depIds","currentExtensionGetsGreenLight","depId","depDesc","_showMessage","_createFailedExtension","dep","recursionLevel","greenMap","red","green","_activateExtension","_","_actualActivateExtension","x","IRequestService","timer_1","anonymize","ITelemetryService","NullTelemetryService","timedPublicLog","publicLog","eventName","isOptedIn","getTelemetryInfo","instanceId","sessionId","machineId","Timer","Async","request_1","telemetry_1","BaseRequestService","contextService","telemetryService","workspaceUri","workspace","getWorkspace","_serviceMap","_telemetryService","computeOrigin","_origin","urlPath","makeCrossOriginRequest","makeRequest","isXhrRequestCORS","coPromise","xhrOptions","xhrOptionsPromise","additionalHeaders","headers","mixin","customRequestInitializer","xhrRequest","xhr","status","instantiation","IThreadService","IRemotableCtorMap","IRemotableCtorAffinityMap","Remotable","PROP_NAME","MainContext","_ensureUnique","ExtHostContext","WorkerContext","whichWorker","affinity","ThreadAffinity","thread_1","abstractMode_1","monarchCompile_1","monarchDefinition_1","monarchLexer_1","richEditSupport_1","languagesRegistry_1","modeService_1","isUndefinedOrStringArray","isValidLanguageExtensionPoint","languagesExtPoint","ModeServiceImpl","threadService","extensionService","_onDidCreateMode","onDidCreateMode","_threadService","_extensionService","_activationPromises","_instantiatedModes","_config","getConfigurationForMode","configureMode","mimetype","configureModeById","previousOptions","newOptions","configSupport","configure","configureAllModes","modeIdentifier","isCompatMode","compatModeData","commaSeparatedMimetypesOrCommaSeparatedIds","modeIds","isInstantiated","isPlainText","getModeIdByLanguageName","getModeIdByFilenameOrFirstLine","_getOrCreateMode","getOrCreateModeByLanguageName","getOrCreateModeByFilenameOrFirstLine","cc","ee","pp","_createMode","modeDescriptor","_createModeDescriptor","compatModeAsyncDescriptor","compatMode","_registerModeSupport","support","registerModeSupport","disposable","doRegisterMonarchDefinition","registerTokenizationSupport","registerRichEditSupport","registerMonarchDefinition","modelService","registerTokenizationSupport2","TokenizationSupport2Adapter","TokenizationState2Adapter","_stateData","offsetDelta","actualResult","tokens_1","scopes","MainThreadModeServiceImpl","_hasInitialized","allValidLanguages","ext","onDidUpdateConfiguration","onConfigurationChange","_onReadyPromise","files","_getModeServiceWorkerHelper","getRemotable","ModeServiceWorkerHelper","initData","languages","_initialize","_acceptCompatModes","_acceptLanguages","instantiateMode","_modeService","All","mirrorModel_1","model_1","modelService_1","ModelData","eventsHandler","isSyncedToWorkers","_markerDecorations","_modelEventsListener","getModelId","acceptMarkerDecorations","ModelMarkerHandler","setMarkers","modelData","newModelDecorations","_createDecorationRange","_createDecorationOption","rawMarker","minColumn","severity","Right","ModelServiceImpl","markerService","messageService","_modelCreationOptions","_markerService","_workerHelper","ModelServiceWorkerHelper","_messageService","_hasShownMigrationMessage","_onModelAdded","_onModelRemoved","_onModelModeChanged","_markerServiceSubscription","onMarkerChanged","_handleMarkerChange","readConfig","shouldShowMigrationMessage","parsedTabSize","newDefaultEOL","_setModelOptions","show","_configurationServiceSubscription","getCreationOptions","modelId","changedResources","read","take","_shouldSyncModelToWorkers","_createModelData","_onModelEvents","createModel","_beginWorkerSync","destroyModel","getModels","getModel","$_acceptNewModel","_getBoundModelData","_stopWorkerSync","$_acceptDidDisposeModel","_onModelDisposing","wasSyncedToWorkers","shouldSyncToWorkers","oldModeId","$_acceptDidChangeModelMode","eventsForWorkers","$_acceptModelEvents","mirrorModel","newModeId","arrays","network","collections","markers_1","owner","valueOf","_selectorPattern","raw","MarkerService","_stats","_emptyStats","_onMarkerChanged","getStatistics","changeOne","_doChangeOne","isFalsyOrEmpty","resources_1","oldMarkers","hasOldMarkers","getsNewMarkers","oldStats","_computeStats","newStats","_isStatRelevant","_updateStatsMinus","_updateStatsPlus","changeAll","_forEach","newStats_1","_updateStatsMarker","_fromEntry","took","_sanitize","warnings","infos","unknwons","toUpdate","toAdd","toSubtract","SecondaryMarkerService","_proxy","MainProcessMarkerService","registerRemotableInstance","thread","findMember","proto","findThreadService","THREAD_SERVICE_PROPERTY_NAME","OneWorkerFn","conditionOrAffinity","methodName","that_1","OneWorker","AllWorkersAttr","AllWorkers","OneWorkerAttr","threadService_1","createProxyFromCtor","remote","$__IS_REMOTE_OBJ","createMethodProxy","proxyId","myArgs","callOnRemote","AbstractThreadService","isInMainThread","_boundObjects","_pendingObjects","_localObjMap","_proxyObjMap","params","_doCreateInstance","instanceOrPromise","objInstantiated_1","asyncCtor","initPromise","_finishInstance","creationDone","rpcId","actor","method","_getOrCreateProxyInstance","remoteCom","_registerLocalInstance","_getOrCreateLocalInstance","_registerAndInstantiateMainProcessActor","_registerAndInstantiateExtHostActor","_registerAndInstantiateWorkerActor","_registerMainProcessActor","_registerExtHostActor","_registerWorkerActor","abstractThreadService","WorkerThreadService","_remoteCom","setManyHandler","_handleRequest","memberName","wrapError","dispatch","payload","IWorkspaceContextService","workspace_1","BaseWorkspaceContextService","isInsideWorkspace","toWorkspaceRelativePath","toResource","workspaceRelativePath","eventService_1","abstractExtensionService_1","instantiationService_1","markerService_1","baseRequestService_1","workerThreadService_1","baseWorkspaceContextService_1","modeServiceImpl_1","modelServiceImpl_1","resourceServiceImpl_1","WorkerExtensionService","EditorWorkerServer","initialize","mainThread","getRemoteCom","requestService","request"],"mappings":"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","file":"vs/editor/common/worker/editorWorkerServer.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\ndefine(\"vs/base/common/assert\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.\r\n     */\r\n    function ok(value, message) {\r\n        if (!value || value === null) {\r\n            throw new Error(message ? 'Assertion failed (' + message + ')' : 'Assertion Failed');\r\n        }\r\n    }\r\n    exports.ok = ok;\r\n});\r\n\ndefine(\"vs/base/common/collections\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    function createStringDictionary() {\r\n        return Object.create(null);\r\n    }\r\n    exports.createStringDictionary = createStringDictionary;\r\n    function createNumberDictionary() {\r\n        return Object.create(null);\r\n    }\r\n    exports.createNumberDictionary = createNumberDictionary;\r\n    function lookup(from, what, alternate) {\r\n        if (alternate === void 0) { alternate = null; }\r\n        var key = String(what);\r\n        if (contains(from, key)) {\r\n            return from[key];\r\n        }\r\n        return alternate;\r\n    }\r\n    exports.lookup = lookup;\r\n    function lookupOrInsert(from, stringOrNumber, alternate) {\r\n        var key = String(stringOrNumber);\r\n        if (contains(from, key)) {\r\n            return from[key];\r\n        }\r\n        else {\r\n            if (typeof alternate === 'function') {\r\n                alternate = alternate();\r\n            }\r\n            from[key] = alternate;\r\n            return alternate;\r\n        }\r\n    }\r\n    exports.lookupOrInsert = lookupOrInsert;\r\n    function insert(into, data, hashFn) {\r\n        into[hashFn(data)] = data;\r\n    }\r\n    exports.insert = insert;\r\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n    function contains(from, what) {\r\n        return hasOwnProperty.call(from, what);\r\n    }\r\n    exports.contains = contains;\r\n    function values(from) {\r\n        var result = [];\r\n        for (var key in from) {\r\n            if (hasOwnProperty.call(from, key)) {\r\n                result.push(from[key]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    exports.values = values;\r\n    function forEach(from, callback) {\r\n        for (var key in from) {\r\n            if (hasOwnProperty.call(from, key)) {\r\n                var result = callback({ key: key, value: from[key] }, function () {\r\n                    delete from[key];\r\n                });\r\n                if (result === false) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    exports.forEach = forEach;\r\n    function remove(from, key) {\r\n        if (!hasOwnProperty.call(from, key)) {\r\n            return false;\r\n        }\r\n        delete from[key];\r\n        return true;\r\n    }\r\n    exports.remove = remove;\r\n    /**\r\n     * Groups the collection into a dictionary based on the provided\r\n     * group function.\r\n     */\r\n    function groupBy(data, groupFn) {\r\n        var result = createStringDictionary();\r\n        data.forEach(function (element) { return lookupOrInsert(result, groupFn(element), []).push(element); });\r\n        return result;\r\n    }\r\n    exports.groupBy = groupBy;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/base/common/events\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Event = (function () {\r\n        function Event(originalEvent) {\r\n            this.time = (new Date()).getTime();\r\n            this.originalEvent = originalEvent;\r\n            this.source = null;\r\n        }\r\n        return Event;\r\n    }());\r\n    exports.Event = Event;\r\n    var PropertyChangeEvent = (function (_super) {\r\n        __extends(PropertyChangeEvent, _super);\r\n        function PropertyChangeEvent(key, oldValue, newValue, originalEvent) {\r\n            _super.call(this, originalEvent);\r\n            this.key = key;\r\n            this.oldValue = oldValue;\r\n            this.newValue = newValue;\r\n        }\r\n        return PropertyChangeEvent;\r\n    }(Event));\r\n    exports.PropertyChangeEvent = PropertyChangeEvent;\r\n    var ViewerEvent = (function (_super) {\r\n        __extends(ViewerEvent, _super);\r\n        function ViewerEvent(element, originalEvent) {\r\n            _super.call(this, originalEvent);\r\n            this.element = element;\r\n        }\r\n        return ViewerEvent;\r\n    }(Event));\r\n    exports.ViewerEvent = ViewerEvent;\r\n    exports.EventType = {\r\n        PROPERTY_CHANGED: 'propertyChanged',\r\n        SELECTION: 'selection',\r\n        FOCUS: 'focus',\r\n        BLUR: 'blur',\r\n        HIGHLIGHT: 'highlight',\r\n        EXPAND: 'expand',\r\n        COLLAPSE: 'collapse',\r\n        TOGGLE: 'toggle',\r\n        CONTENTS_CHANGED: 'contentsChanged',\r\n        BEFORE_RUN: 'beforeRun',\r\n        RUN: 'run',\r\n        EDIT: 'edit',\r\n        SAVE: 'save',\r\n        CANCEL: 'cancel',\r\n        CHANGE: 'change',\r\n        DISPOSE: 'dispose',\r\n    };\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/base/common/htmlContent\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    function htmlContentElementCodeEqual(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        if (!a || !b) {\r\n            return false;\r\n        }\r\n        return (a.language === b.language\r\n            && a.value === b.value);\r\n    }\r\n    function htmlContentElementEqual(a, b) {\r\n        return (a.formattedText === b.formattedText\r\n            && a.text === b.text\r\n            && a.className === b.className\r\n            && a.style === b.style\r\n            && a.customStyle === b.customStyle\r\n            && a.tagName === b.tagName\r\n            && a.isText === b.isText\r\n            && a.role === b.role\r\n            && a.markdown === b.markdown\r\n            && htmlContentElementCodeEqual(a.code, b.code)\r\n            && htmlContentElementArrEquals(a.children, b.children));\r\n    }\r\n    function htmlContentElementArrEquals(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        if (!a || !b) {\r\n            return false;\r\n        }\r\n        var aLen = a.length, bLen = b.length;\r\n        if (aLen !== bLen) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < aLen; i++) {\r\n            if (!htmlContentElementEqual(a[i], b[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    exports.htmlContentElementArrEquals = htmlContentElementArrEquals;\r\n});\r\n\ndefine(\"vs/base/common/idGenerator\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var IdGenerator = (function () {\r\n        function IdGenerator(prefix) {\r\n            this._prefix = prefix;\r\n            this._lastId = 0;\r\n        }\r\n        IdGenerator.prototype.nextId = function () {\r\n            return this._prefix + (++this._lastId);\r\n        };\r\n        return IdGenerator;\r\n    }());\r\n    exports.IdGenerator = IdGenerator;\r\n    exports.defaultGenerator = new IdGenerator('id#');\r\n});\r\n\ndefine(\"vs/base/common/network\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Schemas;\r\n    (function (Schemas) {\r\n        /**\r\n         * A schema that is used for models that exist in memory\r\n         * only and that have no correspondence on a server or such.\r\n         */\r\n        Schemas.inMemory = 'inmemory';\r\n        Schemas.http = 'http';\r\n        Schemas.https = 'https';\r\n        Schemas.file = 'file';\r\n    })(Schemas = exports.Schemas || (exports.Schemas = {}));\r\n});\r\n\ndefine(\"vs/base/common/paths\", [\"require\", \"exports\", 'vs/base/common/platform'], function (require, exports, platform_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * The forward slash path separator.\r\n     */\r\n    exports.sep = '/';\r\n    /**\r\n     * The native path separator depending on the OS.\r\n     */\r\n    exports.nativeSep = platform_1.isWindows ? '\\\\' : '/';\r\n    function relative(from, to) {\r\n        from = normalize(from);\r\n        to = normalize(to);\r\n        var fromParts = from.split(exports.sep), toParts = to.split(exports.sep);\r\n        while (fromParts.length > 0 && toParts.length > 0) {\r\n            if (fromParts[0] === toParts[0]) {\r\n                fromParts.shift();\r\n                toParts.shift();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (var i = 0, len = fromParts.length; i < len; i++) {\r\n            toParts.unshift('..');\r\n        }\r\n        return toParts.join(exports.sep);\r\n    }\r\n    exports.relative = relative;\r\n    /**\r\n     * @returns the directory name of a path.\r\n     */\r\n    function dirname(path) {\r\n        var idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\r\n        if (idx === 0) {\r\n            return '.';\r\n        }\r\n        else if (~idx === 0) {\r\n            return path[0];\r\n        }\r\n        else {\r\n            return path.substring(0, ~idx);\r\n        }\r\n    }\r\n    exports.dirname = dirname;\r\n    /**\r\n     * @returns the base name of a path.\r\n     */\r\n    function basename(path) {\r\n        var idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\r\n        if (idx === 0) {\r\n            return path;\r\n        }\r\n        else if (~idx === path.length - 1) {\r\n            return basename(path.substring(0, path.length - 1));\r\n        }\r\n        else {\r\n            return path.substr(~idx + 1);\r\n        }\r\n    }\r\n    exports.basename = basename;\r\n    /**\r\n     * @returns {{.far}} from boo.far or the empty string.\r\n     */\r\n    function extname(path) {\r\n        path = basename(path);\r\n        var idx = ~path.lastIndexOf('.');\r\n        return idx ? path.substring(~idx) : '';\r\n    }\r\n    exports.extname = extname;\r\n    function normalize(path, toOSPath) {\r\n        if (path === null || path === void 0) {\r\n            return path;\r\n        }\r\n        var len = path.length;\r\n        if (len === 0) {\r\n            return '.';\r\n        }\r\n        var sep = platform_1.isWindows && toOSPath ? '\\\\' : '/';\r\n        var root = getRoot(path, sep);\r\n        // operate on the 'path-portion' only\r\n        path = path.slice(root.length);\r\n        len -= root.length;\r\n        var res = '';\r\n        var start = 0;\r\n        for (var end = 0; end <= len; end++) {\r\n            // either at the end or at a path-separator character\r\n            if (end === len || path.charCodeAt(end) === _slash || path.charCodeAt(end) === _backslash) {\r\n                var part = path.slice(start, end);\r\n                start = end + 1;\r\n                if (part === '.' && (root || res || end < len - 1)) {\r\n                    // skip current (if there is already something or if there is more to come)\r\n                    continue;\r\n                }\r\n                if (part === '..') {\r\n                    // skip current and remove parent (if there is already something)\r\n                    var prev_start = res.lastIndexOf(sep);\r\n                    var prev_part = res.slice(prev_start + 1);\r\n                    if ((root || prev_part.length > 0) && prev_part !== '..') {\r\n                        res = prev_start === -1 ? '' : res.slice(0, prev_start);\r\n                        continue;\r\n                    }\r\n                }\r\n                if (res !== '' && res[res.length - 1] !== sep) {\r\n                    res += sep;\r\n                }\r\n                res += part;\r\n            }\r\n        }\r\n        return root + res;\r\n    }\r\n    exports.normalize = normalize;\r\n    /**\r\n     * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\r\n     * `getRoot('files:///files/path') === files:///`,\r\n     * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\r\n     */\r\n    function getRoot(path, sep) {\r\n        if (sep === void 0) { sep = '/'; }\r\n        if (!path) {\r\n            return '';\r\n        }\r\n        var len = path.length;\r\n        var code = path.charCodeAt(0);\r\n        if (code === _slash || code === _backslash) {\r\n            code = path.charCodeAt(1);\r\n            if (code === _slash || code === _backslash) {\r\n                // UNC candidate \\\\localhost\\shares\\ddd\r\n                //               ^^^^^^^^^^^^^^^^^^^\r\n                code = path.charCodeAt(2);\r\n                if (code !== _slash && code !== _backslash) {\r\n                    var pos_1 = 3;\r\n                    var start = pos_1;\r\n                    for (; pos_1 < len; pos_1++) {\r\n                        code = path.charCodeAt(pos_1);\r\n                        if (code === _slash || code === _backslash) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    code = path.charCodeAt(pos_1 + 1);\r\n                    if (start !== pos_1 && code !== _slash && code !== _backslash) {\r\n                        pos_1 += 1;\r\n                        for (; pos_1 < len; pos_1++) {\r\n                            code = path.charCodeAt(pos_1);\r\n                            if (code === _slash || code === _backslash) {\r\n                                return path.slice(0, pos_1 + 1) // consume this separator\r\n                                    .replace(/[\\\\/]/g, sep);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // /user/far\r\n            // ^\r\n            return sep;\r\n        }\r\n        else if ((code >= _A && code <= _Z) || (code >= _a && code <= _z)) {\r\n            // check for windows drive letter c:\\ or c:\r\n            if (path.charCodeAt(1) === _colon) {\r\n                code = path.charCodeAt(2);\r\n                if (code === _slash || code === _backslash) {\r\n                    // C:\\fff\r\n                    // ^^^\r\n                    return path.slice(0, 2) + sep;\r\n                }\r\n                else {\r\n                    // C:\r\n                    // ^^\r\n                    return path.slice(0, 2);\r\n                }\r\n            }\r\n        }\r\n        // check for URI\r\n        // scheme://authority/path\r\n        // ^^^^^^^^^^^^^^^^^^^\r\n        var pos = path.indexOf('://');\r\n        if (pos !== -1) {\r\n            pos += 3; // 3 -> \"://\".length\r\n            for (; pos < len; pos++) {\r\n                code = path.charCodeAt(pos);\r\n                if (code === _slash || code === _backslash) {\r\n                    return path.slice(0, pos + 1); // consume this separator\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    exports.getRoot = getRoot;\r\n    exports.join = function () {\r\n        var value = '';\r\n        for (var i = 0; i < arguments.length; i++) {\r\n            var part = arguments[i];\r\n            if (i > 0) {\r\n                // add the separater between two parts unless\r\n                // there already is one\r\n                var last = value.charCodeAt(value.length - 1);\r\n                if (last !== _slash && last !== _backslash) {\r\n                    var next = part.charCodeAt(0);\r\n                    if (next !== _slash && next !== _backslash) {\r\n                        value += exports.sep;\r\n                    }\r\n                }\r\n            }\r\n            value += part;\r\n        }\r\n        return normalize(value);\r\n    };\r\n    /**\r\n     * Check if the path follows this pattern: `\\\\hostname\\sharename`.\r\n     *\r\n     * @see https://msdn.microsoft.com/en-us/library/gg465305.aspx\r\n     * @return A boolean indication if the path is a UNC path, on none-windows\r\n     * always false.\r\n     */\r\n    function isUNC(path) {\r\n        if (!platform_1.isWindows) {\r\n            // UNC is a windows concept\r\n            return false;\r\n        }\r\n        if (!path || path.length < 5) {\r\n            // at least \\\\a\\b\r\n            return false;\r\n        }\r\n        var code = path.charCodeAt(0);\r\n        if (code !== _backslash) {\r\n            return false;\r\n        }\r\n        code = path.charCodeAt(1);\r\n        if (code !== _backslash) {\r\n            return false;\r\n        }\r\n        var pos = 2;\r\n        var start = pos;\r\n        for (; pos < path.length; pos++) {\r\n            code = path.charCodeAt(pos);\r\n            if (code === _backslash) {\r\n                break;\r\n            }\r\n        }\r\n        if (start === pos) {\r\n            return false;\r\n        }\r\n        code = path.charCodeAt(pos + 1);\r\n        if (isNaN(code) || code === _backslash) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    exports.isUNC = isUNC;\r\n    function isPosixAbsolute(path) {\r\n        return path && path[0] === '/';\r\n    }\r\n    function makeAbsolute(path, isPathNormalized) {\r\n        return isPosixAbsolute(!isPathNormalized ? normalize(path) : path) ? path : exports.sep + path;\r\n    }\r\n    exports.makeAbsolute = makeAbsolute;\r\n    function isRelative(path) {\r\n        return path && path.length > 1 && path[0] === '.';\r\n    }\r\n    exports.isRelative = isRelative;\r\n    var _slash = '/'.charCodeAt(0);\r\n    var _backslash = '\\\\'.charCodeAt(0);\r\n    var _colon = ':'.charCodeAt(0);\r\n    var _a = 'a'.charCodeAt(0);\r\n    var _A = 'A'.charCodeAt(0);\r\n    var _z = 'z'.charCodeAt(0);\r\n    var _Z = 'Z'.charCodeAt(0);\r\n    function isEqualOrParent(path, candidate) {\r\n        if (path === candidate) {\r\n            return true;\r\n        }\r\n        path = normalize(path);\r\n        candidate = normalize(candidate);\r\n        var candidateLen = candidate.length;\r\n        var lastCandidateChar = candidate.charCodeAt(candidateLen - 1);\r\n        if (lastCandidateChar === _slash) {\r\n            candidate = candidate.substring(0, candidateLen - 1);\r\n            candidateLen -= 1;\r\n        }\r\n        if (path === candidate) {\r\n            return true;\r\n        }\r\n        if (!platform_1.isLinux) {\r\n            // case insensitive\r\n            path = path.toLowerCase();\r\n            candidate = candidate.toLowerCase();\r\n        }\r\n        if (path === candidate) {\r\n            return true;\r\n        }\r\n        if (path.indexOf(candidate) !== 0) {\r\n            return false;\r\n        }\r\n        var char = path.charCodeAt(candidateLen);\r\n        return char === _slash;\r\n    }\r\n    exports.isEqualOrParent = isEqualOrParent;\r\n    // Reference: https://en.wikipedia.org/wiki/Filename\r\n    var INVALID_FILE_CHARS = platform_1.isWindows ? /[\\\\/:\\*\\?\"<>\\|]/g : /[\\\\/]/g;\r\n    var WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])$/i;\r\n    function isValidBasename(name) {\r\n        if (!name || name.length === 0 || /^\\s+$/.test(name)) {\r\n            return false; // require a name that is not just whitespace\r\n        }\r\n        INVALID_FILE_CHARS.lastIndex = 0; // the holy grail of software development\r\n        if (INVALID_FILE_CHARS.test(name)) {\r\n            return false; // check for certain invalid file characters\r\n        }\r\n        if (platform_1.isWindows && WINDOWS_FORBIDDEN_NAMES.test(name)) {\r\n            return false; // check for certain invalid file names\r\n        }\r\n        if (name === '.' || name === '..') {\r\n            return false; // check for reserved values\r\n        }\r\n        if (platform_1.isWindows && name[name.length - 1] === '.') {\r\n            return false; // Windows: file cannot end with a \".\"\r\n        }\r\n        if (platform_1.isWindows && name.length !== name.trim().length) {\r\n            return false; // Windows: file cannot end with a whitespace\r\n        }\r\n        return true;\r\n    }\r\n    exports.isValidBasename = isValidBasename;\r\n    exports.isAbsoluteRegex = /^((\\/|[a-zA-Z]:\\\\)[^\\(\\)<>\\\\'\\\"\\[\\]]+)/;\r\n    /**\r\n     * If you have access to node, it is recommended to use node's path.isAbsolute().\r\n     * This is a simple regex based approach.\r\n     */\r\n    function isAbsolute(path) {\r\n        return exports.isAbsoluteRegex.test(path);\r\n    }\r\n    exports.isAbsolute = isAbsolute;\r\n});\r\n\ndefine(\"vs/base/common/stopwatch\", [\"require\", \"exports\", 'vs/base/common/platform'], function (require, exports, platform_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var hasPerformanceNow = (platform_1.globals.performance && typeof platform_1.globals.performance.now === 'function');\r\n    var StopWatch = (function () {\r\n        function StopWatch(highResolution) {\r\n            this._highResolution = hasPerformanceNow && highResolution;\r\n            this._startTime = this._now();\r\n            this._stopTime = -1;\r\n        }\r\n        StopWatch.create = function (highResolution) {\r\n            if (highResolution === void 0) { highResolution = true; }\r\n            return new StopWatch(highResolution);\r\n        };\r\n        StopWatch.prototype.stop = function () {\r\n            this._stopTime = this._now();\r\n        };\r\n        StopWatch.prototype.elapsed = function () {\r\n            if (this._stopTime !== -1) {\r\n                return this._stopTime - this._startTime;\r\n            }\r\n            return this._now() - this._startTime;\r\n        };\r\n        StopWatch.prototype._now = function () {\r\n            return this._highResolution ? platform_1.globals.performance.now() : new Date().getTime();\r\n        };\r\n        return StopWatch;\r\n    }());\r\n    exports.StopWatch = StopWatch;\r\n});\r\n\ndefine(\"vs/base/common/filters\", [\"require\", \"exports\", 'vs/base/common/strings', 'vs/base/common/map'], function (require, exports, strings, map_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // Combined filters\r\n    /**\r\n     * @returns A filter which combines the provided set\r\n     * of filters with an or. The *first* filters that\r\n     * matches defined the return value of the returned\r\n     * filter.\r\n     */\r\n    function or() {\r\n        var filter = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            filter[_i - 0] = arguments[_i];\r\n        }\r\n        return function (word, wordToMatchAgainst) {\r\n            for (var i = 0, len = filter.length; i < len; i++) {\r\n                var match = filter[i](word, wordToMatchAgainst);\r\n                if (match) {\r\n                    return match;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n    }\r\n    exports.or = or;\r\n    /**\r\n     * @returns A filter which combines the provided set\r\n     * of filters with an and. The combines matches are\r\n     * returned if *all* filters match.\r\n     */\r\n    function and() {\r\n        var filter = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            filter[_i - 0] = arguments[_i];\r\n        }\r\n        return function (word, wordToMatchAgainst) {\r\n            var result = [];\r\n            for (var i = 0, len = filter.length; i < len; i++) {\r\n                var match = filter[i](word, wordToMatchAgainst);\r\n                if (!match) {\r\n                    return null;\r\n                }\r\n                result = result.concat(match);\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n    exports.and = and;\r\n    // Prefix\r\n    exports.matchesStrictPrefix = function (word, wordToMatchAgainst) { return _matchesPrefix(false, word, wordToMatchAgainst); };\r\n    exports.matchesPrefix = function (word, wordToMatchAgainst) { return _matchesPrefix(true, word, wordToMatchAgainst); };\r\n    function _matchesPrefix(ignoreCase, word, wordToMatchAgainst) {\r\n        if (!wordToMatchAgainst || wordToMatchAgainst.length === 0 || wordToMatchAgainst.length < word.length) {\r\n            return null;\r\n        }\r\n        if (ignoreCase) {\r\n            word = word.toLowerCase();\r\n            wordToMatchAgainst = wordToMatchAgainst.toLowerCase();\r\n        }\r\n        for (var i = 0; i < word.length; i++) {\r\n            if (word[i] !== wordToMatchAgainst[i]) {\r\n                return null;\r\n            }\r\n        }\r\n        return word.length > 0 ? [{ start: 0, end: word.length }] : [];\r\n    }\r\n    // Contiguous Substring\r\n    function matchesContiguousSubString(word, wordToMatchAgainst) {\r\n        var index = wordToMatchAgainst.toLowerCase().indexOf(word.toLowerCase());\r\n        if (index === -1) {\r\n            return null;\r\n        }\r\n        return [{ start: index, end: index + word.length }];\r\n    }\r\n    exports.matchesContiguousSubString = matchesContiguousSubString;\r\n    // Substring\r\n    function matchesSubString(word, wordToMatchAgainst) {\r\n        return _matchesSubString(word.toLowerCase(), wordToMatchAgainst.toLowerCase(), 0, 0);\r\n    }\r\n    exports.matchesSubString = matchesSubString;\r\n    function _matchesSubString(word, wordToMatchAgainst, i, j) {\r\n        if (i === word.length) {\r\n            return [];\r\n        }\r\n        else if (j === wordToMatchAgainst.length) {\r\n            return null;\r\n        }\r\n        else {\r\n            if (word[i] === wordToMatchAgainst[j]) {\r\n                var result = null;\r\n                if (result = _matchesSubString(word, wordToMatchAgainst, i + 1, j + 1)) {\r\n                    return join({ start: j, end: j + 1 }, result);\r\n                }\r\n            }\r\n            return _matchesSubString(word, wordToMatchAgainst, i, j + 1);\r\n        }\r\n    }\r\n    // CamelCase\r\n    function isLower(code) {\r\n        return 97 <= code && code <= 122;\r\n    }\r\n    function isUpper(code) {\r\n        return 65 <= code && code <= 90;\r\n    }\r\n    function isNumber(code) {\r\n        return 48 <= code && code <= 57;\r\n    }\r\n    function isWhitespace(code) {\r\n        return [32, 9, 10, 13].indexOf(code) > -1;\r\n    }\r\n    function isAlphanumeric(code) {\r\n        return isLower(code) || isUpper(code) || isNumber(code);\r\n    }\r\n    function join(head, tail) {\r\n        if (tail.length === 0) {\r\n            tail = [head];\r\n        }\r\n        else if (head.end === tail[0].start) {\r\n            tail[0].start = head.start;\r\n        }\r\n        else {\r\n            tail.unshift(head);\r\n        }\r\n        return tail;\r\n    }\r\n    function nextAnchor(camelCaseWord, start) {\r\n        for (var i = start; i < camelCaseWord.length; i++) {\r\n            var c = camelCaseWord.charCodeAt(i);\r\n            if (isUpper(c) || isNumber(c) || (i > 0 && !isAlphanumeric(camelCaseWord.charCodeAt(i - 1)))) {\r\n                return i;\r\n            }\r\n        }\r\n        return camelCaseWord.length;\r\n    }\r\n    function _matchesCamelCase(word, camelCaseWord, i, j) {\r\n        if (i === word.length) {\r\n            return [];\r\n        }\r\n        else if (j === camelCaseWord.length) {\r\n            return null;\r\n        }\r\n        else if (word[i] !== camelCaseWord[j].toLowerCase()) {\r\n            return null;\r\n        }\r\n        else {\r\n            var result = null;\r\n            var nextUpperIndex = j + 1;\r\n            result = _matchesCamelCase(word, camelCaseWord, i + 1, j + 1);\r\n            while (!result && (nextUpperIndex = nextAnchor(camelCaseWord, nextUpperIndex)) < camelCaseWord.length) {\r\n                result = _matchesCamelCase(word, camelCaseWord, i + 1, nextUpperIndex);\r\n                nextUpperIndex++;\r\n            }\r\n            return result === null ? null : join({ start: j, end: j + 1 }, result);\r\n        }\r\n    }\r\n    // Heuristic to avoid computing camel case matcher for words that don't\r\n    // look like camelCaseWords.\r\n    function isCamelCaseWord(word) {\r\n        if (word.length > 60) {\r\n            return false;\r\n        }\r\n        var upper = 0, lower = 0, alpha = 0, numeric = 0, code = 0;\r\n        for (var i = 0; i < word.length; i++) {\r\n            code = word.charCodeAt(i);\r\n            if (isUpper(code)) {\r\n                upper++;\r\n            }\r\n            if (isLower(code)) {\r\n                lower++;\r\n            }\r\n            if (isAlphanumeric(code)) {\r\n                alpha++;\r\n            }\r\n            if (isNumber(code)) {\r\n                numeric++;\r\n            }\r\n        }\r\n        var upperPercent = upper / word.length;\r\n        var lowerPercent = lower / word.length;\r\n        var alphaPercent = alpha / word.length;\r\n        var numericPercent = numeric / word.length;\r\n        return lowerPercent > 0.2 && upperPercent < 0.8 && alphaPercent > 0.6 && numericPercent < 0.2;\r\n    }\r\n    // Heuristic to avoid computing camel case matcher for words that don't\r\n    // look like camel case patterns.\r\n    function isCamelCasePattern(word) {\r\n        var upper = 0, lower = 0, code = 0, whitespace = 0;\r\n        for (var i = 0; i < word.length; i++) {\r\n            code = word.charCodeAt(i);\r\n            if (isUpper(code)) {\r\n                upper++;\r\n            }\r\n            if (isLower(code)) {\r\n                lower++;\r\n            }\r\n            if (isWhitespace(code)) {\r\n                whitespace++;\r\n            }\r\n        }\r\n        if ((upper === 0 || lower === 0) && whitespace === 0) {\r\n            return word.length <= 30;\r\n        }\r\n        else {\r\n            return upper <= 5;\r\n        }\r\n    }\r\n    function matchesCamelCase(word, camelCaseWord) {\r\n        if (!camelCaseWord || camelCaseWord.length === 0) {\r\n            return null;\r\n        }\r\n        if (!isCamelCasePattern(word)) {\r\n            return null;\r\n        }\r\n        if (!isCamelCaseWord(camelCaseWord)) {\r\n            return null;\r\n        }\r\n        var result = null;\r\n        var i = 0;\r\n        while (i < camelCaseWord.length && (result = _matchesCamelCase(word.toLowerCase(), camelCaseWord, 0, i)) === null) {\r\n            i = nextAnchor(camelCaseWord, i + 1);\r\n        }\r\n        return result;\r\n    }\r\n    exports.matchesCamelCase = matchesCamelCase;\r\n    // Matches beginning of words supporting non-ASCII languages\r\n    // E.g. \"gp\" or \"g p\" will match \"Git: Pull\"\r\n    // Useful in cases where the target is words (e.g. command labels)\r\n    function matchesWords(word, target) {\r\n        if (!target || target.length === 0) {\r\n            return null;\r\n        }\r\n        var result = null;\r\n        var i = 0;\r\n        while (i < target.length && (result = _matchesWords(word.toLowerCase(), target, 0, i)) === null) {\r\n            i = nextWord(target, i + 1);\r\n        }\r\n        return result;\r\n    }\r\n    exports.matchesWords = matchesWords;\r\n    function _matchesWords(word, target, i, j) {\r\n        if (i === word.length) {\r\n            return [];\r\n        }\r\n        else if (j === target.length) {\r\n            return null;\r\n        }\r\n        else if (word[i] !== target[j].toLowerCase()) {\r\n            return null;\r\n        }\r\n        else {\r\n            var result = null;\r\n            var nextWordIndex = j + 1;\r\n            result = _matchesWords(word, target, i + 1, j + 1);\r\n            while (!result && (nextWordIndex = nextWord(target, nextWordIndex)) < target.length) {\r\n                result = _matchesWords(word, target, i + 1, nextWordIndex);\r\n                nextWordIndex++;\r\n            }\r\n            return result === null ? null : join({ start: j, end: j + 1 }, result);\r\n        }\r\n    }\r\n    function nextWord(word, start) {\r\n        for (var i = start; i < word.length; i++) {\r\n            var c = word.charCodeAt(i);\r\n            if (isWhitespace(c) || (i > 0 && isWhitespace(word.charCodeAt(i - 1)))) {\r\n                return i;\r\n            }\r\n        }\r\n        return word.length;\r\n    }\r\n    // Fuzzy\r\n    (function (SubstringMatching) {\r\n        SubstringMatching[SubstringMatching[\"Contiguous\"] = 0] = \"Contiguous\";\r\n        SubstringMatching[SubstringMatching[\"Separate\"] = 1] = \"Separate\";\r\n    })(exports.SubstringMatching || (exports.SubstringMatching = {}));\r\n    var SubstringMatching = exports.SubstringMatching;\r\n    exports.fuzzyContiguousFilter = or(exports.matchesPrefix, matchesCamelCase, matchesContiguousSubString);\r\n    var fuzzySeparateFilter = or(exports.matchesPrefix, matchesCamelCase, matchesSubString);\r\n    var fuzzyRegExpCache = new map_1.LinkedMap(10000); // bounded to 10000 elements\r\n    function matchesFuzzy(word, wordToMatchAgainst, enableSeparateSubstringMatching) {\r\n        if (enableSeparateSubstringMatching === void 0) { enableSeparateSubstringMatching = false; }\r\n        if (typeof word !== 'string' || typeof wordToMatchAgainst !== 'string') {\r\n            return null; // return early for invalid input\r\n        }\r\n        // Form RegExp for wildcard matches\r\n        var regexp = fuzzyRegExpCache.get(word);\r\n        if (!regexp) {\r\n            regexp = new RegExp(strings.convertSimple2RegExpPattern(word), 'i');\r\n            fuzzyRegExpCache.set(word, regexp);\r\n        }\r\n        // RegExp Filter\r\n        var match = regexp.exec(wordToMatchAgainst);\r\n        if (match) {\r\n            return [{ start: match.index, end: match.index + match[0].length }];\r\n        }\r\n        // Default Filter\r\n        return enableSeparateSubstringMatching ? fuzzySeparateFilter(word, wordToMatchAgainst) : exports.fuzzyContiguousFilter(word, wordToMatchAgainst);\r\n    }\r\n    exports.matchesFuzzy = matchesFuzzy;\r\n});\r\n\ndefine(\"vs/base/common/glob\", [\"require\", \"exports\", 'vs/base/common/strings', 'vs/base/common/paths', 'vs/base/common/map'], function (require, exports, strings, paths, map_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var PATH_REGEX = '[/\\\\\\\\]'; // any slash or backslash\r\n    var NO_PATH_REGEX = '[^/\\\\\\\\]'; // any non-slash and non-backslash\r\n    function starsToRegExp(starCount) {\r\n        switch (starCount) {\r\n            case 0:\r\n                return '';\r\n            case 1:\r\n                return NO_PATH_REGEX + \"*?\"; // 1 star matches any number of characters except path separator (/ and \\) - non greedy (?)\r\n            default:\r\n                // Matches:  (Path Sep OR Path Val followed by Path Sep OR Path Sep followed by Path Val) 0-many times\r\n                // Group is non capturing because we don't need to capture at all (?:...)\r\n                // Overall we use non-greedy matching because it could be that we match too much\r\n                return \"(?:\" + PATH_REGEX + \"|\" + NO_PATH_REGEX + \"+\" + PATH_REGEX + \"|\" + PATH_REGEX + NO_PATH_REGEX + \"+)*?\";\r\n        }\r\n    }\r\n    function splitGlobAware(pattern, splitChar) {\r\n        if (!pattern) {\r\n            return [];\r\n        }\r\n        var segments = [];\r\n        var inBraces = false;\r\n        var inBrackets = false;\r\n        var char;\r\n        var curVal = '';\r\n        for (var i = 0; i < pattern.length; i++) {\r\n            char = pattern[i];\r\n            switch (char) {\r\n                case splitChar:\r\n                    if (!inBraces && !inBrackets) {\r\n                        segments.push(curVal);\r\n                        curVal = '';\r\n                        continue;\r\n                    }\r\n                    break;\r\n                case '{':\r\n                    inBraces = true;\r\n                    break;\r\n                case '}':\r\n                    inBraces = false;\r\n                    break;\r\n                case '[':\r\n                    inBrackets = true;\r\n                    break;\r\n                case ']':\r\n                    inBrackets = false;\r\n                    break;\r\n            }\r\n            curVal += char;\r\n        }\r\n        // Tail\r\n        if (curVal) {\r\n            segments.push(curVal);\r\n        }\r\n        return segments;\r\n    }\r\n    exports.splitGlobAware = splitGlobAware;\r\n    function parseRegExp(pattern) {\r\n        if (!pattern) {\r\n            return '';\r\n        }\r\n        var regEx = '';\r\n        // Split up into segments for each slash found\r\n        var segments = splitGlobAware(pattern, '/');\r\n        // Special case where we only have globstars\r\n        if (segments.every(function (s) { return s === '**'; })) {\r\n            regEx = '.*';\r\n        }\r\n        else {\r\n            var previousSegmentWasGlobStar_1 = false;\r\n            segments.forEach(function (segment, index) {\r\n                // Globstar is special\r\n                if (segment === '**') {\r\n                    // if we have more than one globstar after another, just ignore it\r\n                    if (!previousSegmentWasGlobStar_1) {\r\n                        regEx += starsToRegExp(2);\r\n                        previousSegmentWasGlobStar_1 = true;\r\n                    }\r\n                    return;\r\n                }\r\n                // States\r\n                var inBraces = false;\r\n                var braceVal = '';\r\n                var inBrackets = false;\r\n                var bracketVal = '';\r\n                var char;\r\n                for (var i = 0; i < segment.length; i++) {\r\n                    char = segment[i];\r\n                    // Support brace expansion\r\n                    if (char !== '}' && inBraces) {\r\n                        braceVal += char;\r\n                        continue;\r\n                    }\r\n                    // Support brackets\r\n                    if (char !== ']' && inBrackets) {\r\n                        var res = void 0;\r\n                        switch (char) {\r\n                            case '-':\r\n                                res = char;\r\n                                break;\r\n                            case '^':\r\n                                res = char;\r\n                                break;\r\n                            default:\r\n                                res = strings.escapeRegExpCharacters(char);\r\n                        }\r\n                        bracketVal += res;\r\n                        continue;\r\n                    }\r\n                    switch (char) {\r\n                        case '{':\r\n                            inBraces = true;\r\n                            continue;\r\n                        case '[':\r\n                            inBrackets = true;\r\n                            continue;\r\n                        case '}':\r\n                            var choices = splitGlobAware(braceVal, ',');\r\n                            // Converts {foo,bar} => [foo|bar]\r\n                            var braceRegExp = \"(?:\" + choices.map(function (c) { return parseRegExp(c); }).join('|') + \")\";\r\n                            regEx += braceRegExp;\r\n                            inBraces = false;\r\n                            braceVal = '';\r\n                            break;\r\n                        case ']':\r\n                            regEx += ('[' + bracketVal + ']');\r\n                            inBrackets = false;\r\n                            bracketVal = '';\r\n                            break;\r\n                        case '?':\r\n                            regEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \\)\r\n                            continue;\r\n                        case '*':\r\n                            regEx += starsToRegExp(1);\r\n                            continue;\r\n                        default:\r\n                            regEx += strings.escapeRegExpCharacters(char);\r\n                    }\r\n                }\r\n                // Tail: Add the slash we had split on if there is more to come and the next one is not a globstar\r\n                if (index < segments.length - 1 && segments[index + 1] !== '**') {\r\n                    regEx += PATH_REGEX;\r\n                }\r\n                // reset state\r\n                previousSegmentWasGlobStar_1 = false;\r\n            });\r\n        }\r\n        return regEx;\r\n    }\r\n    // regexes to check for trival glob patterns that just check for String#endsWith\r\n    var T1 = /^\\*\\*\\/\\*\\.[\\w\\.-]+$/; // **/*.something\r\n    var T2 = /^\\*\\*\\/[\\w\\.-]+$/; // **/something\r\n    var T3 = /^{\\*\\*\\/\\*\\.[\\w\\.-]+(,\\*\\*\\/\\*\\.[\\w\\.-]+)*}$/; // {**/*.something,**/*.else}\r\n    var Trivia;\r\n    (function (Trivia) {\r\n        Trivia[Trivia[\"T1\"] = 0] = \"T1\";\r\n        Trivia[Trivia[\"T2\"] = 1] = \"T2\";\r\n        Trivia[Trivia[\"T3\"] = 2] = \"T3\"; // {**/*.something,**/*.else}\r\n    })(Trivia || (Trivia = {}));\r\n    var CACHE = new map_1.LinkedMap(10000); // bounded to 10000 elements\r\n    function parsePattern(pattern) {\r\n        if (!pattern) {\r\n            return null;\r\n        }\r\n        // Whitespace trimming\r\n        pattern = pattern.trim();\r\n        // Check cache\r\n        var parsedPattern = CACHE.get(pattern);\r\n        if (parsedPattern) {\r\n            if (parsedPattern.regexp) {\r\n                parsedPattern.regexp.lastIndex = 0; // reset RegExp to its initial state to reuse it!\r\n            }\r\n            return parsedPattern;\r\n        }\r\n        parsedPattern = Object.create(null);\r\n        // Check for Trivias\r\n        if (T1.test(pattern)) {\r\n            parsedPattern.trivia = Trivia.T1;\r\n        }\r\n        else if (T2.test(pattern)) {\r\n            parsedPattern.trivia = Trivia.T2;\r\n        }\r\n        else if (T3.test(pattern)) {\r\n            parsedPattern.trivia = Trivia.T3;\r\n        }\r\n        else {\r\n            parsedPattern.regexp = toRegExp(\"^\" + parseRegExp(pattern) + \"$\");\r\n        }\r\n        // Cache\r\n        CACHE.set(pattern, parsedPattern);\r\n        return parsedPattern;\r\n    }\r\n    function toRegExp(regEx) {\r\n        try {\r\n            return new RegExp(regEx);\r\n        }\r\n        catch (error) {\r\n            return /.^/; // create a regex that matches nothing if we cannot parse the pattern\r\n        }\r\n    }\r\n    function match(arg1, path, siblings) {\r\n        if (!arg1 || !path) {\r\n            return false;\r\n        }\r\n        // Glob with String\r\n        if (typeof arg1 === 'string') {\r\n            var parsedPattern = parsePattern(arg1);\r\n            if (!parsedPattern) {\r\n                return false;\r\n            }\r\n            // common pattern: **/*.txt just need endsWith check\r\n            if (parsedPattern.trivia === Trivia.T1) {\r\n                return strings.endsWith(path, arg1.substr(4)); // '**/*'.length === 4\r\n            }\r\n            // common pattern: **/some.txt just need basename check\r\n            if (parsedPattern.trivia === Trivia.T2) {\r\n                var base = arg1.substr(3); // '**/'.length === 3\r\n                return path === base || strings.endsWith(path, \"/\" + base) || strings.endsWith(path, \"\\\\\" + base);\r\n            }\r\n            // repetition of common patterns (see above) {**/*.txt,**/*.png}\r\n            if (parsedPattern.trivia === Trivia.T3) {\r\n                return arg1.slice(1, -1).split(',').some(function (pattern) { return match(pattern, path); });\r\n            }\r\n            return parsedPattern.regexp.test(path);\r\n        }\r\n        // Glob with Expression\r\n        return matchExpression(arg1, path, siblings);\r\n    }\r\n    exports.match = match;\r\n    function matchExpression(expression, path, siblings) {\r\n        var patterns = Object.getOwnPropertyNames(expression);\r\n        var basename;\r\n        var _loop_1 = function(i) {\r\n            var pattern = patterns[i];\r\n            var value = expression[pattern];\r\n            if (value === false) {\r\n                return \"continue\"; // pattern is disabled\r\n            }\r\n            // Pattern matches path\r\n            if (match(pattern, path)) {\r\n                // Expression Pattern is <boolean>\r\n                if (typeof value === 'boolean') {\r\n                    return { value: pattern };\r\n                }\r\n                // Expression Pattern is <SiblingClause>\r\n                if (value && typeof value.when === 'string') {\r\n                    if (!siblings || !siblings.length) {\r\n                        return \"continue\"; // pattern is malformed or we don't have siblings\r\n                    }\r\n                    if (!basename) {\r\n                        basename = strings.rtrim(paths.basename(path), paths.extname(path));\r\n                    }\r\n                    var clause = value;\r\n                    var clausePattern_1 = clause.when.replace('$(basename)', basename);\r\n                    if (siblings.some(function (sibling) { return sibling === clausePattern_1; })) {\r\n                        return { value: pattern };\r\n                    }\r\n                    else {\r\n                        return \"continue\"; // pattern does not match in the end because the when clause is not satisfied\r\n                    }\r\n                }\r\n                // Expression is Anything\r\n                return { value: pattern };\r\n            }\r\n        };\r\n        for (var i = 0; i < patterns.length; i++) {\r\n            var state_1 = _loop_1(i);\r\n            if (typeof state_1 === \"object\") return state_1.value;\r\n            if (state_1 === \"continue\") continue;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n\ndefine(\"vs/base/common/graph\", [\"require\", \"exports\", 'vs/base/common/types', 'vs/base/common/collections'], function (require, exports, types_1, collections_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    function newNode(data) {\r\n        return {\r\n            data: data,\r\n            incoming: Object.create(null),\r\n            outgoing: Object.create(null)\r\n        };\r\n    }\r\n    var Graph = (function () {\r\n        function Graph(_hashFn) {\r\n            this._hashFn = _hashFn;\r\n            this._nodes = Object.create(null);\r\n            // empty\r\n        }\r\n        Graph.prototype.roots = function () {\r\n            var ret = [];\r\n            collections_1.forEach(this._nodes, function (entry) {\r\n                if (types_1.isEmptyObject(entry.value.outgoing)) {\r\n                    ret.push(entry.value);\r\n                }\r\n            });\r\n            return ret;\r\n        };\r\n        Graph.prototype.traverse = function (start, inwards, callback) {\r\n            var startNode = this.lookup(start);\r\n            if (!startNode) {\r\n                return;\r\n            }\r\n            this._traverse(startNode, inwards, Object.create(null), callback);\r\n        };\r\n        Graph.prototype._traverse = function (node, inwards, seen, callback) {\r\n            var _this = this;\r\n            var key = this._hashFn(node.data);\r\n            if (collections_1.contains(seen, key)) {\r\n                return;\r\n            }\r\n            seen[key] = true;\r\n            callback(node.data);\r\n            var nodes = inwards ? node.outgoing : node.incoming;\r\n            collections_1.forEach(nodes, function (entry) { return _this._traverse(entry.value, inwards, seen, callback); });\r\n        };\r\n        Graph.prototype.insertEdge = function (from, to) {\r\n            var fromNode = this.lookupOrInsertNode(from), toNode = this.lookupOrInsertNode(to);\r\n            fromNode.outgoing[this._hashFn(to)] = toNode;\r\n            toNode.incoming[this._hashFn(from)] = fromNode;\r\n        };\r\n        Graph.prototype.removeNode = function (data) {\r\n            var key = this._hashFn(data);\r\n            delete this._nodes[key];\r\n            collections_1.forEach(this._nodes, function (entry) {\r\n                delete entry.value.outgoing[key];\r\n                delete entry.value.incoming[key];\r\n            });\r\n        };\r\n        Graph.prototype.lookupOrInsertNode = function (data) {\r\n            var key = this._hashFn(data), node = collections_1.lookup(this._nodes, key);\r\n            if (!node) {\r\n                node = newNode(data);\r\n                this._nodes[key] = node;\r\n            }\r\n            return node;\r\n        };\r\n        Graph.prototype.lookup = function (data) {\r\n            return collections_1.lookup(this._nodes, this._hashFn(data));\r\n        };\r\n        Object.defineProperty(Graph.prototype, \"length\", {\r\n            get: function () {\r\n                return Object.keys(this._nodes).length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Graph.prototype.toString = function () {\r\n            var data = [];\r\n            collections_1.forEach(this._nodes, function (entry) {\r\n                data.push(entry.key + \", (incoming)[\" + Object.keys(entry.value.incoming).join(', ') + \"], (outgoing)[\" + Object.keys(entry.value.outgoing).join(',') + \"]\");\r\n            });\r\n            return data.join('\\n');\r\n        };\r\n        return Graph;\r\n    }());\r\n    exports.Graph = Graph;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/base/common/lifecycle\", [\"require\", \"exports\", './types'], function (require, exports, types_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.empty = Object.freeze({\r\n        dispose: function () { }\r\n    });\r\n    function dispose() {\r\n        var disposables = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            disposables[_i - 0] = arguments[_i];\r\n        }\r\n        var first = disposables[0];\r\n        if (types_1.isArray(first)) {\r\n            disposables = first;\r\n        }\r\n        disposables.forEach(function (d) { return d && d.dispose(); });\r\n        return [];\r\n    }\r\n    exports.dispose = dispose;\r\n    function combinedDisposable(disposables) {\r\n        return { dispose: function () { return dispose(disposables); } };\r\n    }\r\n    exports.combinedDisposable = combinedDisposable;\r\n    function toDisposable() {\r\n        var fns = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            fns[_i - 0] = arguments[_i];\r\n        }\r\n        return combinedDisposable(fns.map(function (fn) { return ({ dispose: fn }); }));\r\n    }\r\n    exports.toDisposable = toDisposable;\r\n    var Disposable = (function () {\r\n        function Disposable() {\r\n            this._toDispose = [];\r\n        }\r\n        Disposable.prototype.dispose = function () {\r\n            this._toDispose = dispose(this._toDispose);\r\n        };\r\n        Disposable.prototype._register = function (t) {\r\n            this._toDispose.push(t);\r\n            return t;\r\n        };\r\n        return Disposable;\r\n    }());\r\n    exports.Disposable = Disposable;\r\n    var Disposables = (function (_super) {\r\n        __extends(Disposables, _super);\r\n        function Disposables() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        Disposables.prototype.add = function (arg) {\r\n            if (!Array.isArray(arg)) {\r\n                return this._register(arg);\r\n            }\r\n            else {\r\n                for (var _i = 0, arg_1 = arg; _i < arg_1.length; _i++) {\r\n                    var element = arg_1[_i];\r\n                    return this._register(element);\r\n                }\r\n            }\r\n        };\r\n        return Disposables;\r\n    }(Disposable));\r\n    exports.Disposables = Disposables;\r\n});\r\n\ndefine(\"vs/base/common/mime\", [\"require\", \"exports\", 'vs/base/common/paths', 'vs/base/common/types', 'vs/base/common/strings', 'vs/base/common/glob'], function (require, exports, paths, types, strings, glob_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.MIME_TEXT = 'text/plain';\r\n    exports.MIME_BINARY = 'application/octet-stream';\r\n    exports.MIME_UNKNOWN = 'application/unknown';\r\n    var registeredAssociations = [];\r\n    /**\r\n     * Associate a text mime to the registry.\r\n     */\r\n    function registerTextMime(association) {\r\n        // Register\r\n        registeredAssociations.push(association);\r\n        // Check for conflicts unless this is a user configured association\r\n        if (!association.userConfigured) {\r\n            registeredAssociations.forEach(function (a) {\r\n                if (a.mime === association.mime || a.userConfigured) {\r\n                    return; // same mime or userConfigured is ok\r\n                }\r\n                if (association.extension && a.extension === association.extension) {\r\n                    console.warn(\"Overwriting extension <<\" + association.extension + \">> to now point to mime <<\" + association.mime + \">>\");\r\n                }\r\n                if (association.filename && a.filename === association.filename) {\r\n                    console.warn(\"Overwriting filename <<\" + association.filename + \">> to now point to mime <<\" + association.mime + \">>\");\r\n                }\r\n                if (association.filepattern && a.filepattern === association.filepattern) {\r\n                    console.warn(\"Overwriting filepattern <<\" + association.filepattern + \">> to now point to mime <<\" + association.mime + \">>\");\r\n                }\r\n                if (association.firstline && a.firstline === association.firstline) {\r\n                    console.warn(\"Overwriting firstline <<\" + association.firstline + \">> to now point to mime <<\" + association.mime + \">>\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n    exports.registerTextMime = registerTextMime;\r\n    /**\r\n     * Clear text mimes from the registry.\r\n     */\r\n    function clearTextMimes(onlyUserConfigured) {\r\n        if (!onlyUserConfigured) {\r\n            registeredAssociations = [];\r\n        }\r\n        else {\r\n            registeredAssociations = registeredAssociations.filter(function (a) { return !a.userConfigured; });\r\n        }\r\n    }\r\n    exports.clearTextMimes = clearTextMimes;\r\n    /**\r\n     * Given a file, return the best matching mime type for it\r\n     */\r\n    function guessMimeTypes(path, firstLine) {\r\n        if (!path) {\r\n            return [exports.MIME_UNKNOWN];\r\n        }\r\n        path = path.toLowerCase();\r\n        // 1.) User configured mappings have highest priority\r\n        var configuredMime = guessMimeTypeByPath(path, registeredAssociations.filter(function (a) { return a.userConfigured; }));\r\n        if (configuredMime) {\r\n            return [configuredMime, exports.MIME_TEXT];\r\n        }\r\n        // 2.) Registered mappings have middle priority\r\n        var registeredMime = guessMimeTypeByPath(path, registeredAssociations.filter(function (a) { return !a.userConfigured; }));\r\n        if (registeredMime) {\r\n            return [registeredMime, exports.MIME_TEXT];\r\n        }\r\n        // 3.) Firstline has lowest priority\r\n        if (firstLine) {\r\n            var firstlineMime = guessMimeTypeByFirstline(firstLine);\r\n            if (firstlineMime) {\r\n                return [firstlineMime, exports.MIME_TEXT];\r\n            }\r\n        }\r\n        return [exports.MIME_UNKNOWN];\r\n    }\r\n    exports.guessMimeTypes = guessMimeTypes;\r\n    function guessMimeTypeByPath(path, associations) {\r\n        var filename = paths.basename(path);\r\n        var filenameMatch;\r\n        var patternMatch;\r\n        var extensionMatch;\r\n        for (var i = 0; i < associations.length; i++) {\r\n            var association = associations[i];\r\n            // First exact name match\r\n            if (association.filename && filename === association.filename.toLowerCase()) {\r\n                filenameMatch = association;\r\n                break; // take it!\r\n            }\r\n            // Longest pattern match\r\n            if (association.filepattern) {\r\n                var target = association.filepattern.indexOf(paths.sep) >= 0 ? path : filename; // match on full path if pattern contains path separator\r\n                if (glob_1.match(association.filepattern.toLowerCase(), target)) {\r\n                    if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\r\n                        patternMatch = association;\r\n                    }\r\n                }\r\n            }\r\n            // Longest extension match\r\n            if (association.extension) {\r\n                if (strings.endsWith(filename, association.extension.toLowerCase())) {\r\n                    if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\r\n                        extensionMatch = association;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 1.) Exact name match has second highest prio\r\n        if (filenameMatch) {\r\n            return filenameMatch.mime;\r\n        }\r\n        // 2.) Match on pattern\r\n        if (patternMatch) {\r\n            return patternMatch.mime;\r\n        }\r\n        // 3.) Match on extension comes next\r\n        if (extensionMatch) {\r\n            return extensionMatch.mime;\r\n        }\r\n        return null;\r\n    }\r\n    function guessMimeTypeByFirstline(firstLine) {\r\n        if (strings.startsWithUTF8BOM(firstLine)) {\r\n            firstLine = firstLine.substr(1);\r\n        }\r\n        if (firstLine.length > 0) {\r\n            for (var i = 0; i < registeredAssociations.length; ++i) {\r\n                var association = registeredAssociations[i];\r\n                if (!association.firstline) {\r\n                    continue;\r\n                }\r\n                // Make sure the entire line matches, not just a subpart.\r\n                var matches = firstLine.match(association.firstline);\r\n                if (matches && matches.length > 0 && matches[0].length === firstLine.length) {\r\n                    return association.mime;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isBinaryMime(mimes) {\r\n        if (!mimes) {\r\n            return false;\r\n        }\r\n        var mimeVals;\r\n        if (types.isArray(mimes)) {\r\n            mimeVals = mimes;\r\n        }\r\n        else {\r\n            mimeVals = mimes.split(',').map(function (mime) { return mime.trim(); });\r\n        }\r\n        return mimeVals.indexOf(exports.MIME_BINARY) >= 0;\r\n    }\r\n    exports.isBinaryMime = isBinaryMime;\r\n    function isUnspecific(mime) {\r\n        if (!mime) {\r\n            return true;\r\n        }\r\n        if (typeof mime === 'string') {\r\n            return mime === exports.MIME_BINARY || mime === exports.MIME_TEXT || mime === exports.MIME_UNKNOWN;\r\n        }\r\n        return mime.length === 1 && isUnspecific(mime[0]);\r\n    }\r\n    exports.isUnspecific = isUnspecific;\r\n    function suggestFilename(theMime, prefix) {\r\n        for (var i = 0; i < registeredAssociations.length; i++) {\r\n            var association = registeredAssociations[i];\r\n            if (association.userConfigured) {\r\n                continue; // only support registered ones\r\n            }\r\n            if (association.mime === theMime && association.extension) {\r\n                return prefix + association.extension;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    exports.suggestFilename = suggestFilename;\r\n});\r\n\ndefine(\"vs/editor/common/core/arrays\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Arrays;\r\n    (function (Arrays) {\r\n        /**\r\n         * Given a sorted array of natural number segments, find the segment containing a natural number.\r\n         *    For example, the segments [0, 5), [5, 9), [9, infinity) will be represented in the following manner:\r\n         *       [{ startIndex: 0 }, { startIndex: 5 }, { startIndex: 9 }]\r\n         *    Searching for 0, 1, 2, 3 or 4 will return 0.\r\n         *    Searching for 5, 6, 7 or 8 will return 1.\r\n         *    Searching for 9, 10, 11, ... will return 2.\r\n         * @param arr A sorted array representing natural number segments\r\n         * @param desiredIndex The search\r\n         * @return The index of the containing segment in the array.\r\n         */\r\n        function findIndexInSegmentsArray(arr, desiredIndex) {\r\n            var low = 0;\r\n            var high = arr.length - 1;\r\n            if (high <= 0) {\r\n                return 0;\r\n            }\r\n            while (low < high) {\r\n                var mid = low + Math.ceil((high - low) / 2);\r\n                if (arr[mid].startIndex > desiredIndex) {\r\n                    high = mid - 1;\r\n                }\r\n                else {\r\n                    low = mid;\r\n                }\r\n            }\r\n            return low;\r\n        }\r\n        Arrays.findIndexInSegmentsArray = findIndexInSegmentsArray;\r\n    })(Arrays = exports.Arrays || (exports.Arrays = {}));\r\n});\r\n\ndefine(\"vs/editor/common/core/modeTransition\", [\"require\", \"exports\", 'vs/editor/common/core/arrays'], function (require, exports, arrays_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var ModeTransition = (function () {\r\n        function ModeTransition(startIndex, mode) {\r\n            this.startIndex = startIndex | 0;\r\n            this.mode = mode;\r\n        }\r\n        ModeTransition.findIndexInSegmentsArray = function (arr, desiredIndex) {\r\n            return arrays_1.Arrays.findIndexInSegmentsArray(arr, desiredIndex);\r\n        };\r\n        ModeTransition.create = function (modeTransitions) {\r\n            var result = [];\r\n            for (var i = 0, len = modeTransitions.length; i < len; i++) {\r\n                var modeTransition = modeTransitions[i];\r\n                result.push(new ModeTransition(modeTransition.startIndex, modeTransition.mode));\r\n            }\r\n            return result;\r\n        };\r\n        return ModeTransition;\r\n    }());\r\n    exports.ModeTransition = ModeTransition;\r\n});\r\n\ndefine(\"vs/editor/common/core/position\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * A position in the editor.\r\n     */\r\n    var Position = (function () {\r\n        function Position(lineNumber, column) {\r\n            this.lineNumber = lineNumber;\r\n            this.column = column;\r\n        }\r\n        /**\r\n         * Test if this position equals other position\r\n         */\r\n        Position.prototype.equals = function (other) {\r\n            return Position.equals(this, other);\r\n        };\r\n        Position.equals = function (a, b) {\r\n            if (!a && !b) {\r\n                return true;\r\n            }\r\n            return (!!a &&\r\n                !!b &&\r\n                a.lineNumber === b.lineNumber &&\r\n                a.column === b.column);\r\n        };\r\n        /**\r\n         * Test if this position is before other position. If the two positions are equal, the result will be false.\r\n         */\r\n        Position.prototype.isBefore = function (other) {\r\n            return Position.isBefore(this, other);\r\n        };\r\n        Position.isBefore = function (a, b) {\r\n            if (a.lineNumber < b.lineNumber) {\r\n                return true;\r\n            }\r\n            if (b.lineNumber < a.lineNumber) {\r\n                return false;\r\n            }\r\n            return a.column < b.column;\r\n        };\r\n        /**\r\n         * Test if this position is before other position. If the two positions are equal, the result will be true.\r\n         */\r\n        Position.prototype.isBeforeOrEqual = function (other) {\r\n            return Position.isBeforeOrEqual(this, other);\r\n        };\r\n        Position.isBeforeOrEqual = function (a, b) {\r\n            if (a.lineNumber < b.lineNumber) {\r\n                return true;\r\n            }\r\n            if (b.lineNumber < a.lineNumber) {\r\n                return false;\r\n            }\r\n            return a.column <= b.column;\r\n        };\r\n        /**\r\n         * Clone this position.\r\n         */\r\n        Position.prototype.clone = function () {\r\n            return new Position(this.lineNumber, this.column);\r\n        };\r\n        Position.prototype.toString = function () {\r\n            return '(' + this.lineNumber + ',' + this.column + ')';\r\n        };\r\n        // ---\r\n        Position.lift = function (pos) {\r\n            return new Position(pos.lineNumber, pos.column);\r\n        };\r\n        Position.isIPosition = function (obj) {\r\n            return (obj\r\n                && (typeof obj.lineNumber === 'number')\r\n                && (typeof obj.column === 'number'));\r\n        };\r\n        Position.asEmptyRange = function (position) {\r\n            return {\r\n                startLineNumber: position.lineNumber,\r\n                startColumn: position.column,\r\n                endLineNumber: position.lineNumber,\r\n                endColumn: position.column\r\n            };\r\n        };\r\n        Position.startPosition = function (range) {\r\n            return {\r\n                lineNumber: range.startLineNumber,\r\n                column: range.startColumn\r\n            };\r\n        };\r\n        Position.endPosition = function (range) {\r\n            return {\r\n                lineNumber: range.endLineNumber,\r\n                column: range.endColumn\r\n            };\r\n        };\r\n        return Position;\r\n    }());\r\n    exports.Position = Position;\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/common/core/range\", [\"require\", \"exports\", 'vs/editor/common/core/position'], function (require, exports, position_1) {\r\n    'use strict';\r\n    /**\r\n     * A range in the editor.\r\n     */\r\n    var Range = (function () {\r\n        function Range(startLineNumber, startColumn, endLineNumber, endColumn) {\r\n            if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\r\n                this.startLineNumber = endLineNumber;\r\n                this.startColumn = endColumn;\r\n                this.endLineNumber = startLineNumber;\r\n                this.endColumn = startColumn;\r\n            }\r\n            else {\r\n                this.startLineNumber = startLineNumber;\r\n                this.startColumn = startColumn;\r\n                this.endLineNumber = endLineNumber;\r\n                this.endColumn = endColumn;\r\n            }\r\n        }\r\n        /**\r\n         * Test if this range is empty.\r\n         */\r\n        Range.prototype.isEmpty = function () {\r\n            return Range.isEmpty(this);\r\n        };\r\n        /**\r\n         * Test if position is in this range. If the position is at the edges, will return true.\r\n         */\r\n        Range.prototype.containsPosition = function (position) {\r\n            return Range.containsPosition(this, position);\r\n        };\r\n        /**\r\n         * Test if range is in this range. If the range is equal to this range, will return true.\r\n         */\r\n        Range.prototype.containsRange = function (range) {\r\n            return Range.containsRange(this, range);\r\n        };\r\n        /**\r\n         * A reunion of the two ranges. The smallest position will be used as the start point, and the largest one as the end point.\r\n         */\r\n        Range.prototype.plusRange = function (range) {\r\n            return Range.plusRange(this, range);\r\n        };\r\n        /**\r\n         * A intersection of the two ranges.\r\n         */\r\n        Range.prototype.intersectRanges = function (range) {\r\n            return Range.intersectRanges(this, range);\r\n        };\r\n        /**\r\n         * Test if this range equals other.\r\n         */\r\n        Range.prototype.equalsRange = function (other) {\r\n            return Range.equalsRange(this, other);\r\n        };\r\n        /**\r\n         * Return the end position (which will be after or equal to the start position)\r\n         */\r\n        Range.prototype.getEndPosition = function () {\r\n            return new position_1.Position(this.endLineNumber, this.endColumn);\r\n        };\r\n        /**\r\n         * Return the start position (which will be before or equal to the end position)\r\n         */\r\n        Range.prototype.getStartPosition = function () {\r\n            return new position_1.Position(this.startLineNumber, this.startColumn);\r\n        };\r\n        /**\r\n         * Clone this range.\r\n         */\r\n        Range.prototype.cloneRange = function () {\r\n            return new Range(this.startLineNumber, this.startColumn, this.endLineNumber, this.endColumn);\r\n        };\r\n        /**\r\n         * Transform to a user presentable string representation.\r\n         */\r\n        Range.prototype.toString = function () {\r\n            return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\r\n        };\r\n        /**\r\n         * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n         */\r\n        Range.prototype.setEndPosition = function (endLineNumber, endColumn) {\r\n            return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n        };\r\n        /**\r\n         * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n         */\r\n        Range.prototype.setStartPosition = function (startLineNumber, startColumn) {\r\n            return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n        };\r\n        Range.prototype.collapseToStart = function () {\r\n            return new Range(this.startLineNumber, this.startColumn, this.startLineNumber, this.startColumn);\r\n        };\r\n        // ---\r\n        Range.lift = function (range) {\r\n            if (!range) {\r\n                return null;\r\n            }\r\n            return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n        };\r\n        Range.isIRange = function (obj) {\r\n            return (obj\r\n                && (typeof obj.startLineNumber === 'number')\r\n                && (typeof obj.startColumn === 'number')\r\n                && (typeof obj.endLineNumber === 'number')\r\n                && (typeof obj.endColumn === 'number'));\r\n        };\r\n        Range.isEmpty = function (range) {\r\n            return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\r\n        };\r\n        Range.containsPosition = function (range, position) {\r\n            if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n                return false;\r\n            }\r\n            if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\r\n                return false;\r\n            }\r\n            if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        Range.containsRange = function (range, otherRange) {\r\n            if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n                return false;\r\n            }\r\n            if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n                return false;\r\n            }\r\n            if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\r\n                return false;\r\n            }\r\n            if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        Range.areIntersectingOrTouching = function (a, b) {\r\n            // Check if `a` is before `b`\r\n            if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\r\n                return false;\r\n            }\r\n            // Check if `b` is before `a`\r\n            if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\r\n                return false;\r\n            }\r\n            // These ranges must intersect\r\n            return true;\r\n        };\r\n        Range.intersectRanges = function (a, b) {\r\n            var resultStartLineNumber = a.startLineNumber, resultStartColumn = a.startColumn, resultEndLineNumber = a.endLineNumber, resultEndColumn = a.endColumn, otherStartLineNumber = b.startLineNumber, otherStartColumn = b.startColumn, otherEndLineNumber = b.endLineNumber, otherEndColumn = b.endColumn;\r\n            if (resultStartLineNumber < otherStartLineNumber) {\r\n                resultStartLineNumber = otherStartLineNumber;\r\n                resultStartColumn = otherStartColumn;\r\n            }\r\n            else if (resultStartLineNumber === otherStartLineNumber) {\r\n                resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\r\n            }\r\n            if (resultEndLineNumber > otherEndLineNumber) {\r\n                resultEndLineNumber = otherEndLineNumber;\r\n                resultEndColumn = otherEndColumn;\r\n            }\r\n            else if (resultEndLineNumber === otherEndLineNumber) {\r\n                resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\r\n            }\r\n            // Check if selection is now empty\r\n            if (resultStartLineNumber > resultEndLineNumber) {\r\n                return null;\r\n            }\r\n            if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\r\n                return null;\r\n            }\r\n            return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\r\n        };\r\n        Range.plusRange = function (a, b) {\r\n            var startLineNumber, startColumn, endLineNumber, endColumn;\r\n            if (b.startLineNumber < a.startLineNumber) {\r\n                startLineNumber = b.startLineNumber;\r\n                startColumn = b.startColumn;\r\n            }\r\n            else if (b.startLineNumber === a.startLineNumber) {\r\n                startLineNumber = b.startLineNumber;\r\n                startColumn = Math.min(b.startColumn, a.startColumn);\r\n            }\r\n            else {\r\n                startLineNumber = a.startLineNumber;\r\n                startColumn = a.startColumn;\r\n            }\r\n            if (b.endLineNumber > a.endLineNumber) {\r\n                endLineNumber = b.endLineNumber;\r\n                endColumn = b.endColumn;\r\n            }\r\n            else if (b.endLineNumber === a.endLineNumber) {\r\n                endLineNumber = b.endLineNumber;\r\n                endColumn = Math.max(b.endColumn, a.endColumn);\r\n            }\r\n            else {\r\n                endLineNumber = a.endLineNumber;\r\n                endColumn = a.endColumn;\r\n            }\r\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n        };\r\n        Range.equalsRange = function (a, b) {\r\n            return (!!a &&\r\n                !!b &&\r\n                a.startLineNumber === b.startLineNumber &&\r\n                a.startColumn === b.startColumn &&\r\n                a.endLineNumber === b.endLineNumber &&\r\n                a.endColumn === b.endColumn);\r\n        };\r\n        /**\r\n         * A function that compares ranges, useful for sorting ranges\r\n         * It will first compare ranges on the startPosition and then on the endPosition\r\n         */\r\n        Range.compareRangesUsingStarts = function (a, b) {\r\n            var aStartLineNumber = a.startLineNumber | 0;\r\n            var bStartLineNumber = b.startLineNumber | 0;\r\n            var aStartColumn = a.startColumn | 0;\r\n            var bStartColumn = b.startColumn | 0;\r\n            var aEndLineNumber = a.endLineNumber | 0;\r\n            var bEndLineNumber = b.endLineNumber | 0;\r\n            var aEndColumn = a.endColumn | 0;\r\n            var bEndColumn = b.endColumn | 0;\r\n            if (aStartLineNumber === bStartLineNumber) {\r\n                if (aStartColumn === bStartColumn) {\r\n                    if (aEndLineNumber === bEndLineNumber) {\r\n                        return aEndColumn - bEndColumn;\r\n                    }\r\n                    return aEndLineNumber - bEndLineNumber;\r\n                }\r\n                return aStartColumn - bStartColumn;\r\n            }\r\n            return aStartLineNumber - bStartLineNumber;\r\n        };\r\n        /**\r\n         * A function that compares ranges, useful for sorting ranges\r\n         * It will first compare ranges on the endPosition and then on the startPosition\r\n         */\r\n        Range.compareRangesUsingEnds = function (a, b) {\r\n            if (a.endLineNumber === b.endLineNumber) {\r\n                if (a.endColumn === b.endColumn) {\r\n                    if (a.startLineNumber === b.startLineNumber) {\r\n                        return a.startColumn - b.startColumn;\r\n                    }\r\n                    return a.startLineNumber - b.startLineNumber;\r\n                }\r\n                return a.endColumn - b.endColumn;\r\n            }\r\n            return a.endLineNumber - b.endLineNumber;\r\n        };\r\n        Range.spansMultipleLines = function (range) {\r\n            return range.endLineNumber > range.startLineNumber;\r\n        };\r\n        Range.collapseToStart = function (range) {\r\n            return {\r\n                startLineNumber: range.startLineNumber,\r\n                startColumn: range.startColumn,\r\n                endLineNumber: range.startLineNumber,\r\n                endColumn: range.startColumn\r\n            };\r\n        };\r\n        return Range;\r\n    }());\r\n    exports.Range = Range;\r\n});\r\n\ndefine(\"vs/editor/common/core/viewLineToken\", [\"require\", \"exports\", 'vs/editor/common/core/arrays'], function (require, exports, arrays_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * A token on a line.\r\n     */\r\n    var ViewLineToken = (function () {\r\n        function ViewLineToken(startIndex, type) {\r\n            this.startIndex = startIndex | 0; // @perf\r\n            this.type = type.replace(/[^a-z0-9\\-]/gi, ' ');\r\n        }\r\n        ViewLineToken.prototype.equals = function (other) {\r\n            return (this.startIndex === other.startIndex\r\n                && this.type === other.type);\r\n        };\r\n        ViewLineToken.findIndexInSegmentsArray = function (arr, desiredIndex) {\r\n            return arrays_1.Arrays.findIndexInSegmentsArray(arr, desiredIndex);\r\n        };\r\n        ViewLineToken.equalsArray = function (a, b) {\r\n            var aLen = a.length;\r\n            var bLen = b.length;\r\n            if (aLen !== bLen) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < aLen; i++) {\r\n                if (!a[i].equals(b[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        return ViewLineToken;\r\n    }());\r\n    exports.ViewLineToken = ViewLineToken;\r\n    var ViewLineTokens = (function () {\r\n        function ViewLineTokens(lineTokens, fauxIndentLength, textLength) {\r\n            this._lineTokens = lineTokens;\r\n            this._fauxIndentLength = fauxIndentLength | 0;\r\n            this._textLength = textLength | 0;\r\n        }\r\n        ViewLineTokens.prototype.getTokens = function () {\r\n            return this._lineTokens;\r\n        };\r\n        ViewLineTokens.prototype.getFauxIndentLength = function () {\r\n            return this._fauxIndentLength;\r\n        };\r\n        ViewLineTokens.prototype.getTextLength = function () {\r\n            return this._textLength;\r\n        };\r\n        ViewLineTokens.prototype.equals = function (other) {\r\n            return (this._fauxIndentLength === other._fauxIndentLength\r\n                && this._textLength === other._textLength\r\n                && ViewLineToken.equalsArray(this._lineTokens, other._lineTokens));\r\n        };\r\n        ViewLineTokens.prototype.findIndexOfOffset = function (offset) {\r\n            return ViewLineToken.findIndexInSegmentsArray(this._lineTokens, offset);\r\n        };\r\n        return ViewLineTokens;\r\n    }());\r\n    exports.ViewLineTokens = ViewLineTokens;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/editorCommon\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * The direction of a selection.\r\n     */\r\n    (function (SelectionDirection) {\r\n        /**\r\n         * The selection starts above where it ends.\r\n         */\r\n        SelectionDirection[SelectionDirection[\"LTR\"] = 0] = \"LTR\";\r\n        /**\r\n         * The selection starts below where it ends.\r\n         */\r\n        SelectionDirection[SelectionDirection[\"RTL\"] = 1] = \"RTL\";\r\n    })(exports.SelectionDirection || (exports.SelectionDirection = {}));\r\n    var SelectionDirection = exports.SelectionDirection;\r\n    (function (WrappingIndent) {\r\n        WrappingIndent[WrappingIndent[\"None\"] = 0] = \"None\";\r\n        WrappingIndent[WrappingIndent[\"Same\"] = 1] = \"Same\";\r\n        WrappingIndent[WrappingIndent[\"Indent\"] = 2] = \"Indent\";\r\n    })(exports.WrappingIndent || (exports.WrappingIndent = {}));\r\n    var WrappingIndent = exports.WrappingIndent;\r\n    var InternalEditorScrollbarOptions = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function InternalEditorScrollbarOptions(source) {\r\n            this.arrowSize = source.arrowSize | 0;\r\n            this.vertical = source.vertical | 0;\r\n            this.horizontal = source.horizontal | 0;\r\n            this.useShadows = Boolean(source.useShadows);\r\n            this.verticalHasArrows = Boolean(source.verticalHasArrows);\r\n            this.horizontalHasArrows = Boolean(source.horizontalHasArrows);\r\n            this.handleMouseWheel = Boolean(source.handleMouseWheel);\r\n            this.horizontalScrollbarSize = source.horizontalScrollbarSize | 0;\r\n            this.horizontalSliderSize = source.horizontalSliderSize | 0;\r\n            this.verticalScrollbarSize = source.verticalScrollbarSize | 0;\r\n            this.verticalSliderSize = source.verticalSliderSize | 0;\r\n            this.mouseWheelScrollSensitivity = Number(source.mouseWheelScrollSensitivity);\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorScrollbarOptions.prototype.equals = function (other) {\r\n            return (this.arrowSize === other.arrowSize\r\n                && this.vertical === other.vertical\r\n                && this.horizontal === other.horizontal\r\n                && this.useShadows === other.useShadows\r\n                && this.verticalHasArrows === other.verticalHasArrows\r\n                && this.horizontalHasArrows === other.horizontalHasArrows\r\n                && this.handleMouseWheel === other.handleMouseWheel\r\n                && this.horizontalScrollbarSize === other.horizontalScrollbarSize\r\n                && this.horizontalSliderSize === other.horizontalSliderSize\r\n                && this.verticalScrollbarSize === other.verticalScrollbarSize\r\n                && this.verticalSliderSize === other.verticalSliderSize\r\n                && this.mouseWheelScrollSensitivity === other.mouseWheelScrollSensitivity);\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorScrollbarOptions.prototype.clone = function () {\r\n            return new InternalEditorScrollbarOptions(this);\r\n        };\r\n        return InternalEditorScrollbarOptions;\r\n    }());\r\n    exports.InternalEditorScrollbarOptions = InternalEditorScrollbarOptions;\r\n    var EditorWrappingInfo = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function EditorWrappingInfo(source) {\r\n            this.isViewportWrapping = Boolean(source.isViewportWrapping);\r\n            this.wrappingColumn = source.wrappingColumn | 0;\r\n            this.wrappingIndent = source.wrappingIndent | 0;\r\n            this.wordWrapBreakBeforeCharacters = String(source.wordWrapBreakBeforeCharacters);\r\n            this.wordWrapBreakAfterCharacters = String(source.wordWrapBreakAfterCharacters);\r\n            this.wordWrapBreakObtrusiveCharacters = String(source.wordWrapBreakObtrusiveCharacters);\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        EditorWrappingInfo.prototype.equals = function (other) {\r\n            return (this.isViewportWrapping === other.isViewportWrapping\r\n                && this.wrappingColumn === other.wrappingColumn\r\n                && this.wrappingIndent === other.wrappingIndent\r\n                && this.wordWrapBreakBeforeCharacters === other.wordWrapBreakBeforeCharacters\r\n                && this.wordWrapBreakAfterCharacters === other.wordWrapBreakAfterCharacters\r\n                && this.wordWrapBreakObtrusiveCharacters === other.wordWrapBreakObtrusiveCharacters);\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        EditorWrappingInfo.prototype.clone = function () {\r\n            return new EditorWrappingInfo(this);\r\n        };\r\n        return EditorWrappingInfo;\r\n    }());\r\n    exports.EditorWrappingInfo = EditorWrappingInfo;\r\n    var InternalEditorViewOptions = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function InternalEditorViewOptions(source) {\r\n            this.theme = String(source.theme);\r\n            this.canUseTranslate3d = Boolean(source.canUseTranslate3d);\r\n            this.experimentalScreenReader = Boolean(source.experimentalScreenReader);\r\n            this.rulers = InternalEditorViewOptions._toSortedIntegerArray(source.rulers);\r\n            this.ariaLabel = String(source.ariaLabel);\r\n            this.lineNumbers = source.lineNumbers;\r\n            this.selectOnLineNumbers = Boolean(source.selectOnLineNumbers);\r\n            this.glyphMargin = Boolean(source.glyphMargin);\r\n            this.revealHorizontalRightPadding = source.revealHorizontalRightPadding | 0;\r\n            this.roundedSelection = Boolean(source.roundedSelection);\r\n            this.overviewRulerLanes = source.overviewRulerLanes | 0;\r\n            this.cursorBlinking = String(source.cursorBlinking);\r\n            this.cursorStyle = source.cursorStyle | 0;\r\n            this.hideCursorInOverviewRuler = Boolean(source.hideCursorInOverviewRuler);\r\n            this.scrollBeyondLastLine = Boolean(source.scrollBeyondLastLine);\r\n            this.editorClassName = String(source.editorClassName);\r\n            this.stopRenderingLineAfter = source.stopRenderingLineAfter | 0;\r\n            this.renderWhitespace = Boolean(source.renderWhitespace);\r\n            this.indentGuides = Boolean(source.indentGuides);\r\n            this.scrollbar = source.scrollbar.clone();\r\n        }\r\n        InternalEditorViewOptions._toSortedIntegerArray = function (source) {\r\n            if (!Array.isArray(source)) {\r\n                return [];\r\n            }\r\n            var arrSource = source;\r\n            var result = arrSource.map(function (el) {\r\n                var r = parseInt(el, 10);\r\n                if (isNaN(r)) {\r\n                    return 0;\r\n                }\r\n                return r;\r\n            });\r\n            result.sort();\r\n            return result;\r\n        };\r\n        InternalEditorViewOptions._numberArraysEqual = function (a, b) {\r\n            if (a.length !== b.length) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < a.length; i++) {\r\n                if (a[i] !== b[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorViewOptions.prototype.equals = function (other) {\r\n            return (this.theme === other.theme\r\n                && this.canUseTranslate3d === other.canUseTranslate3d\r\n                && this.experimentalScreenReader === other.experimentalScreenReader\r\n                && InternalEditorViewOptions._numberArraysEqual(this.rulers, other.rulers)\r\n                && this.ariaLabel === other.ariaLabel\r\n                && this.lineNumbers === other.lineNumbers\r\n                && this.selectOnLineNumbers === other.selectOnLineNumbers\r\n                && this.glyphMargin === other.glyphMargin\r\n                && this.revealHorizontalRightPadding === other.revealHorizontalRightPadding\r\n                && this.roundedSelection === other.roundedSelection\r\n                && this.overviewRulerLanes === other.overviewRulerLanes\r\n                && this.cursorBlinking === other.cursorBlinking\r\n                && this.cursorStyle === other.cursorStyle\r\n                && this.hideCursorInOverviewRuler === other.hideCursorInOverviewRuler\r\n                && this.scrollBeyondLastLine === other.scrollBeyondLastLine\r\n                && this.editorClassName === other.editorClassName\r\n                && this.stopRenderingLineAfter === other.stopRenderingLineAfter\r\n                && this.renderWhitespace === other.renderWhitespace\r\n                && this.indentGuides === other.indentGuides\r\n                && this.scrollbar.equals(other.scrollbar));\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorViewOptions.prototype.createChangeEvent = function (newOpts) {\r\n            return {\r\n                theme: this.theme !== newOpts.theme,\r\n                canUseTranslate3d: this.canUseTranslate3d !== newOpts.canUseTranslate3d,\r\n                experimentalScreenReader: this.experimentalScreenReader !== newOpts.experimentalScreenReader,\r\n                rulers: (!InternalEditorViewOptions._numberArraysEqual(this.rulers, newOpts.rulers)),\r\n                ariaLabel: this.ariaLabel !== newOpts.ariaLabel,\r\n                lineNumbers: this.lineNumbers !== newOpts.lineNumbers,\r\n                selectOnLineNumbers: this.selectOnLineNumbers !== newOpts.selectOnLineNumbers,\r\n                glyphMargin: this.glyphMargin !== newOpts.glyphMargin,\r\n                revealHorizontalRightPadding: this.revealHorizontalRightPadding !== newOpts.revealHorizontalRightPadding,\r\n                roundedSelection: this.roundedSelection !== newOpts.roundedSelection,\r\n                overviewRulerLanes: this.overviewRulerLanes !== newOpts.overviewRulerLanes,\r\n                cursorBlinking: this.cursorBlinking !== newOpts.cursorBlinking,\r\n                cursorStyle: this.cursorStyle !== newOpts.cursorStyle,\r\n                hideCursorInOverviewRuler: this.hideCursorInOverviewRuler !== newOpts.hideCursorInOverviewRuler,\r\n                scrollBeyondLastLine: this.scrollBeyondLastLine !== newOpts.scrollBeyondLastLine,\r\n                editorClassName: this.editorClassName !== newOpts.editorClassName,\r\n                stopRenderingLineAfter: this.stopRenderingLineAfter !== newOpts.stopRenderingLineAfter,\r\n                renderWhitespace: this.renderWhitespace !== newOpts.renderWhitespace,\r\n                indentGuides: this.indentGuides !== newOpts.indentGuides,\r\n                scrollbar: (!this.scrollbar.equals(newOpts.scrollbar)),\r\n            };\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorViewOptions.prototype.clone = function () {\r\n            return new InternalEditorViewOptions(this);\r\n        };\r\n        return InternalEditorViewOptions;\r\n    }());\r\n    exports.InternalEditorViewOptions = InternalEditorViewOptions;\r\n    var EditorContribOptions = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function EditorContribOptions(source) {\r\n            this.selectionClipboard = Boolean(source.selectionClipboard);\r\n            this.hover = Boolean(source.hover);\r\n            this.contextmenu = Boolean(source.contextmenu);\r\n            this.quickSuggestions = Boolean(source.quickSuggestions);\r\n            this.quickSuggestionsDelay = source.quickSuggestionsDelay | 0;\r\n            this.iconsInSuggestions = Boolean(source.iconsInSuggestions);\r\n            this.formatOnType = Boolean(source.formatOnType);\r\n            this.suggestOnTriggerCharacters = Boolean(source.suggestOnTriggerCharacters);\r\n            this.acceptSuggestionOnEnter = Boolean(source.acceptSuggestionOnEnter);\r\n            this.selectionHighlight = Boolean(source.selectionHighlight);\r\n            this.outlineMarkers = Boolean(source.outlineMarkers);\r\n            this.referenceInfos = Boolean(source.referenceInfos);\r\n            this.folding = Boolean(source.folding);\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        EditorContribOptions.prototype.equals = function (other) {\r\n            return (this.selectionClipboard === other.selectionClipboard\r\n                && this.hover === other.hover\r\n                && this.contextmenu === other.contextmenu\r\n                && this.quickSuggestions === other.quickSuggestions\r\n                && this.quickSuggestionsDelay === other.quickSuggestionsDelay\r\n                && this.iconsInSuggestions === other.iconsInSuggestions\r\n                && this.formatOnType === other.formatOnType\r\n                && this.suggestOnTriggerCharacters === other.suggestOnTriggerCharacters\r\n                && this.acceptSuggestionOnEnter === other.acceptSuggestionOnEnter\r\n                && this.selectionHighlight === other.selectionHighlight\r\n                && this.outlineMarkers === other.outlineMarkers\r\n                && this.referenceInfos === other.referenceInfos\r\n                && this.folding === other.folding);\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        EditorContribOptions.prototype.clone = function () {\r\n            return new EditorContribOptions(this);\r\n        };\r\n        return EditorContribOptions;\r\n    }());\r\n    exports.EditorContribOptions = EditorContribOptions;\r\n    /**\r\n     * Internal configuration options (transformed or computed) for the editor.\r\n     */\r\n    var InternalEditorOptions = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function InternalEditorOptions(source) {\r\n            this.lineHeight = source.lineHeight | 0;\r\n            this.readOnly = Boolean(source.readOnly);\r\n            this.wordSeparators = String(source.wordSeparators);\r\n            this.autoClosingBrackets = Boolean(source.autoClosingBrackets);\r\n            this.useTabStops = Boolean(source.useTabStops);\r\n            this.tabFocusMode = Boolean(source.tabFocusMode);\r\n            this.layoutInfo = source.layoutInfo.clone();\r\n            this.fontInfo = source.fontInfo.clone();\r\n            this.viewInfo = source.viewInfo.clone();\r\n            this.wrappingInfo = source.wrappingInfo.clone();\r\n            this.contribInfo = source.contribInfo.clone();\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorOptions.prototype.equals = function (other) {\r\n            return (this.lineHeight === other.lineHeight\r\n                && this.readOnly === other.readOnly\r\n                && this.wordSeparators === other.wordSeparators\r\n                && this.autoClosingBrackets === other.autoClosingBrackets\r\n                && this.useTabStops === other.useTabStops\r\n                && this.tabFocusMode === other.tabFocusMode\r\n                && this.layoutInfo.equals(other.layoutInfo)\r\n                && this.fontInfo.equals(other.fontInfo)\r\n                && this.viewInfo.equals(other.viewInfo)\r\n                && this.wrappingInfo.equals(other.wrappingInfo)\r\n                && this.contribInfo.equals(other.contribInfo));\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorOptions.prototype.createChangeEvent = function (newOpts) {\r\n            return {\r\n                lineHeight: (this.lineHeight !== newOpts.lineHeight),\r\n                readOnly: (this.readOnly !== newOpts.readOnly),\r\n                wordSeparators: (this.wordSeparators !== newOpts.wordSeparators),\r\n                autoClosingBrackets: (this.autoClosingBrackets !== newOpts.autoClosingBrackets),\r\n                useTabStops: (this.useTabStops !== newOpts.useTabStops),\r\n                tabFocusMode: (this.tabFocusMode !== newOpts.tabFocusMode),\r\n                layoutInfo: (!this.layoutInfo.equals(newOpts.layoutInfo)),\r\n                fontInfo: (!this.fontInfo.equals(newOpts.fontInfo)),\r\n                viewInfo: this.viewInfo.createChangeEvent(newOpts.viewInfo),\r\n                wrappingInfo: (!this.wrappingInfo.equals(newOpts.wrappingInfo)),\r\n                contribInfo: (!this.contribInfo.equals(newOpts.contribInfo)),\r\n            };\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        InternalEditorOptions.prototype.clone = function () {\r\n            return new InternalEditorOptions(this);\r\n        };\r\n        return InternalEditorOptions;\r\n    }());\r\n    exports.InternalEditorOptions = InternalEditorOptions;\r\n    /**\r\n     * Vertical Lane in the overview ruler of the editor.\r\n     */\r\n    (function (OverviewRulerLane) {\r\n        OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\r\n        OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\r\n        OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\r\n        OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\r\n    })(exports.OverviewRulerLane || (exports.OverviewRulerLane = {}));\r\n    var OverviewRulerLane = exports.OverviewRulerLane;\r\n    /**\r\n     * End of line character preference.\r\n     */\r\n    (function (EndOfLinePreference) {\r\n        /**\r\n         * Use the end of line character identified in the text buffer.\r\n         */\r\n        EndOfLinePreference[EndOfLinePreference[\"TextDefined\"] = 0] = \"TextDefined\";\r\n        /**\r\n         * Use line feed (\\n) as the end of line character.\r\n         */\r\n        EndOfLinePreference[EndOfLinePreference[\"LF\"] = 1] = \"LF\";\r\n        /**\r\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\r\n         */\r\n        EndOfLinePreference[EndOfLinePreference[\"CRLF\"] = 2] = \"CRLF\";\r\n    })(exports.EndOfLinePreference || (exports.EndOfLinePreference = {}));\r\n    var EndOfLinePreference = exports.EndOfLinePreference;\r\n    /**\r\n     * The default end of line to use when instantiating models.\r\n     */\r\n    (function (DefaultEndOfLine) {\r\n        /**\r\n         * Use line feed (\\n) as the end of line character.\r\n         */\r\n        DefaultEndOfLine[DefaultEndOfLine[\"LF\"] = 1] = \"LF\";\r\n        /**\r\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\r\n         */\r\n        DefaultEndOfLine[DefaultEndOfLine[\"CRLF\"] = 2] = \"CRLF\";\r\n    })(exports.DefaultEndOfLine || (exports.DefaultEndOfLine = {}));\r\n    var DefaultEndOfLine = exports.DefaultEndOfLine;\r\n    /**\r\n     * End of line character preference.\r\n     */\r\n    (function (EndOfLineSequence) {\r\n        /**\r\n         * Use line feed (\\n) as the end of line character.\r\n         */\r\n        EndOfLineSequence[EndOfLineSequence[\"LF\"] = 0] = \"LF\";\r\n        /**\r\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\r\n         */\r\n        EndOfLineSequence[EndOfLineSequence[\"CRLF\"] = 1] = \"CRLF\";\r\n    })(exports.EndOfLineSequence || (exports.EndOfLineSequence = {}));\r\n    var EndOfLineSequence = exports.EndOfLineSequence;\r\n    (function (TrackedRangeStickiness) {\r\n        TrackedRangeStickiness[TrackedRangeStickiness[\"AlwaysGrowsWhenTypingAtEdges\"] = 0] = \"AlwaysGrowsWhenTypingAtEdges\";\r\n        TrackedRangeStickiness[TrackedRangeStickiness[\"NeverGrowsWhenTypingAtEdges\"] = 1] = \"NeverGrowsWhenTypingAtEdges\";\r\n        TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingBefore\"] = 2] = \"GrowsOnlyWhenTypingBefore\";\r\n        TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingAfter\"] = 3] = \"GrowsOnlyWhenTypingAfter\";\r\n    })(exports.TrackedRangeStickiness || (exports.TrackedRangeStickiness = {}));\r\n    var TrackedRangeStickiness = exports.TrackedRangeStickiness;\r\n    (function (CursorChangeReason) {\r\n        CursorChangeReason[CursorChangeReason[\"NotSet\"] = 0] = \"NotSet\";\r\n        CursorChangeReason[CursorChangeReason[\"ContentFlush\"] = 1] = \"ContentFlush\";\r\n        CursorChangeReason[CursorChangeReason[\"RecoverFromMarkers\"] = 2] = \"RecoverFromMarkers\";\r\n        CursorChangeReason[CursorChangeReason[\"Explicit\"] = 3] = \"Explicit\";\r\n        CursorChangeReason[CursorChangeReason[\"Paste\"] = 4] = \"Paste\";\r\n        CursorChangeReason[CursorChangeReason[\"Undo\"] = 5] = \"Undo\";\r\n        CursorChangeReason[CursorChangeReason[\"Redo\"] = 6] = \"Redo\";\r\n    })(exports.CursorChangeReason || (exports.CursorChangeReason = {}));\r\n    var CursorChangeReason = exports.CursorChangeReason;\r\n    /**\r\n     * @internal\r\n     */\r\n    (function (VerticalRevealType) {\r\n        VerticalRevealType[VerticalRevealType[\"Simple\"] = 0] = \"Simple\";\r\n        VerticalRevealType[VerticalRevealType[\"Center\"] = 1] = \"Center\";\r\n        VerticalRevealType[VerticalRevealType[\"CenterIfOutsideViewport\"] = 2] = \"CenterIfOutsideViewport\";\r\n    })(exports.VerticalRevealType || (exports.VerticalRevealType = {}));\r\n    var VerticalRevealType = exports.VerticalRevealType;\r\n    /**\r\n     * A description for the overview ruler position.\r\n     */\r\n    var OverviewRulerPosition = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function OverviewRulerPosition(source) {\r\n            this.width = source.width | 0;\r\n            this.height = source.height | 0;\r\n            this.top = source.top | 0;\r\n            this.right = source.right | 0;\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        OverviewRulerPosition.prototype.equals = function (other) {\r\n            return (this.width === other.width\r\n                && this.height === other.height\r\n                && this.top === other.top\r\n                && this.right === other.right);\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        OverviewRulerPosition.prototype.clone = function () {\r\n            return new OverviewRulerPosition(this);\r\n        };\r\n        return OverviewRulerPosition;\r\n    }());\r\n    exports.OverviewRulerPosition = OverviewRulerPosition;\r\n    /**\r\n     * The internal layout details of the editor.\r\n     */\r\n    var EditorLayoutInfo = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function EditorLayoutInfo(source) {\r\n            this.width = source.width | 0;\r\n            this.height = source.height | 0;\r\n            this.glyphMarginLeft = source.glyphMarginLeft | 0;\r\n            this.glyphMarginWidth = source.glyphMarginWidth | 0;\r\n            this.glyphMarginHeight = source.glyphMarginHeight | 0;\r\n            this.lineNumbersLeft = source.lineNumbersLeft | 0;\r\n            this.lineNumbersWidth = source.lineNumbersWidth | 0;\r\n            this.lineNumbersHeight = source.lineNumbersHeight | 0;\r\n            this.decorationsLeft = source.decorationsLeft | 0;\r\n            this.decorationsWidth = source.decorationsWidth | 0;\r\n            this.decorationsHeight = source.decorationsHeight | 0;\r\n            this.contentLeft = source.contentLeft | 0;\r\n            this.contentWidth = source.contentWidth | 0;\r\n            this.contentHeight = source.contentHeight | 0;\r\n            this.verticalScrollbarWidth = source.verticalScrollbarWidth | 0;\r\n            this.horizontalScrollbarHeight = source.horizontalScrollbarHeight | 0;\r\n            this.overviewRuler = source.overviewRuler.clone();\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        EditorLayoutInfo.prototype.equals = function (other) {\r\n            return (this.width === other.width\r\n                && this.height === other.height\r\n                && this.glyphMarginLeft === other.glyphMarginLeft\r\n                && this.glyphMarginWidth === other.glyphMarginWidth\r\n                && this.glyphMarginHeight === other.glyphMarginHeight\r\n                && this.lineNumbersLeft === other.lineNumbersLeft\r\n                && this.lineNumbersWidth === other.lineNumbersWidth\r\n                && this.lineNumbersHeight === other.lineNumbersHeight\r\n                && this.decorationsLeft === other.decorationsLeft\r\n                && this.decorationsWidth === other.decorationsWidth\r\n                && this.decorationsHeight === other.decorationsHeight\r\n                && this.contentLeft === other.contentLeft\r\n                && this.contentWidth === other.contentWidth\r\n                && this.contentHeight === other.contentHeight\r\n                && this.verticalScrollbarWidth === other.verticalScrollbarWidth\r\n                && this.horizontalScrollbarHeight === other.horizontalScrollbarHeight\r\n                && this.overviewRuler.equals(other.overviewRuler));\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        EditorLayoutInfo.prototype.clone = function () {\r\n            return new EditorLayoutInfo(this);\r\n        };\r\n        return EditorLayoutInfo;\r\n    }());\r\n    exports.EditorLayoutInfo = EditorLayoutInfo;\r\n    /**\r\n     * Type of hit element with the mouse in the editor.\r\n     */\r\n    (function (MouseTargetType) {\r\n        /**\r\n         * Mouse is on top of an unknown element.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\r\n        /**\r\n         * Mouse is on top of the textarea used for input.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"TEXTAREA\"] = 1] = \"TEXTAREA\";\r\n        /**\r\n         * Mouse is on top of the glyph margin\r\n         */\r\n        MouseTargetType[MouseTargetType[\"GUTTER_GLYPH_MARGIN\"] = 2] = \"GUTTER_GLYPH_MARGIN\";\r\n        /**\r\n         * Mouse is on top of the line numbers\r\n         */\r\n        MouseTargetType[MouseTargetType[\"GUTTER_LINE_NUMBERS\"] = 3] = \"GUTTER_LINE_NUMBERS\";\r\n        /**\r\n         * Mouse is on top of the line decorations\r\n         */\r\n        MouseTargetType[MouseTargetType[\"GUTTER_LINE_DECORATIONS\"] = 4] = \"GUTTER_LINE_DECORATIONS\";\r\n        /**\r\n         * Mouse is on top of the whitespace left in the gutter by a view zone.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"GUTTER_VIEW_ZONE\"] = 5] = \"GUTTER_VIEW_ZONE\";\r\n        /**\r\n         * Mouse is on top of text in the content.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"CONTENT_TEXT\"] = 6] = \"CONTENT_TEXT\";\r\n        /**\r\n         * Mouse is on top of empty space in the content (e.g. after line text or below last line)\r\n         */\r\n        MouseTargetType[MouseTargetType[\"CONTENT_EMPTY\"] = 7] = \"CONTENT_EMPTY\";\r\n        /**\r\n         * Mouse is on top of a view zone in the content.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"CONTENT_VIEW_ZONE\"] = 8] = \"CONTENT_VIEW_ZONE\";\r\n        /**\r\n         * Mouse is on top of a content widget.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"CONTENT_WIDGET\"] = 9] = \"CONTENT_WIDGET\";\r\n        /**\r\n         * Mouse is on top of the decorations overview ruler.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"OVERVIEW_RULER\"] = 10] = \"OVERVIEW_RULER\";\r\n        /**\r\n         * Mouse is on top of a scrollbar.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"SCROLLBAR\"] = 11] = \"SCROLLBAR\";\r\n        /**\r\n         * Mouse is on top of an overlay widget.\r\n         */\r\n        MouseTargetType[MouseTargetType[\"OVERLAY_WIDGET\"] = 12] = \"OVERLAY_WIDGET\";\r\n    })(exports.MouseTargetType || (exports.MouseTargetType = {}));\r\n    var MouseTargetType = exports.MouseTargetType;\r\n    exports.KEYBINDING_CONTEXT_EDITOR_TEXT_FOCUS = 'editorTextFocus';\r\n    exports.KEYBINDING_CONTEXT_EDITOR_FOCUS = 'editorFocus';\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.KEYBINDING_CONTEXT_EDITOR_TAB_MOVES_FOCUS = 'editorTabMovesFocus';\r\n    exports.KEYBINDING_CONTEXT_EDITOR_HAS_MULTIPLE_SELECTIONS = 'editorHasMultipleSelections';\r\n    exports.KEYBINDING_CONTEXT_EDITOR_HAS_NON_EMPTY_SELECTION = 'editorHasSelection';\r\n    exports.KEYBINDING_CONTEXT_EDITOR_LANGUAGE_ID = 'editorLangId';\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.SHOW_ACCESSIBILITY_HELP_ACTION_ID = 'editor.action.showAccessibilityHelp';\r\n    var BareFontInfo = (function () {\r\n        /**\r\n         * @internal\r\n         */\r\n        function BareFontInfo(opts) {\r\n            this.fontFamily = String(opts.fontFamily);\r\n            this.fontSize = opts.fontSize | 0;\r\n            this.lineHeight = opts.lineHeight | 0;\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        BareFontInfo.prototype.getId = function () {\r\n            return this.fontFamily + '-' + this.fontSize + '-' + this.lineHeight;\r\n        };\r\n        return BareFontInfo;\r\n    }());\r\n    exports.BareFontInfo = BareFontInfo;\r\n    var FontInfo = (function (_super) {\r\n        __extends(FontInfo, _super);\r\n        /**\r\n         * @internal\r\n         */\r\n        function FontInfo(opts) {\r\n            _super.call(this, opts);\r\n            this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\r\n            this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\r\n            this.spaceWidth = opts.spaceWidth;\r\n            this.maxDigitWidth = opts.maxDigitWidth;\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        FontInfo.prototype.equals = function (other) {\r\n            return (this.fontFamily === other.fontFamily\r\n                && this.fontSize === other.fontSize\r\n                && this.lineHeight === other.lineHeight\r\n                && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\r\n                && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\r\n                && this.spaceWidth === other.spaceWidth\r\n                && this.maxDigitWidth === other.maxDigitWidth);\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        FontInfo.prototype.clone = function () {\r\n            return new FontInfo(this);\r\n        };\r\n        return FontInfo;\r\n    }(BareFontInfo));\r\n    exports.FontInfo = FontInfo;\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.ViewEventNames = {\r\n        ModelFlushedEvent: 'modelFlushedEvent',\r\n        LinesDeletedEvent: 'linesDeletedEvent',\r\n        LinesInsertedEvent: 'linesInsertedEvent',\r\n        LineChangedEvent: 'lineChangedEvent',\r\n        TokensChangedEvent: 'tokensChangedEvent',\r\n        DecorationsChangedEvent: 'decorationsChangedEvent',\r\n        CursorPositionChangedEvent: 'cursorPositionChangedEvent',\r\n        CursorSelectionChangedEvent: 'cursorSelectionChangedEvent',\r\n        RevealRangeEvent: 'revealRangeEvent',\r\n        LineMappingChangedEvent: 'lineMappingChangedEvent',\r\n        ScrollRequestEvent: 'scrollRequestEvent'\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    var Viewport = (function () {\r\n        function Viewport(top, left, width, height) {\r\n            this.top = top | 0;\r\n            this.left = left | 0;\r\n            this.width = width | 0;\r\n            this.height = height | 0;\r\n        }\r\n        return Viewport;\r\n    }());\r\n    exports.Viewport = Viewport;\r\n    /**\r\n     * @internal\r\n     */\r\n    (function (CodeEditorStateFlag) {\r\n        CodeEditorStateFlag[CodeEditorStateFlag[\"Value\"] = 0] = \"Value\";\r\n        CodeEditorStateFlag[CodeEditorStateFlag[\"Selection\"] = 1] = \"Selection\";\r\n        CodeEditorStateFlag[CodeEditorStateFlag[\"Position\"] = 2] = \"Position\";\r\n        CodeEditorStateFlag[CodeEditorStateFlag[\"Scroll\"] = 3] = \"Scroll\";\r\n    })(exports.CodeEditorStateFlag || (exports.CodeEditorStateFlag = {}));\r\n    var CodeEditorStateFlag = exports.CodeEditorStateFlag;\r\n    exports.EditorType = {\r\n        ICodeEditor: 'vs.editor.ICodeEditor',\r\n        IDiffEditor: 'vs.editor.IDiffEditor'\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.ClassName = {\r\n        EditorWarningDecoration: 'greensquiggly',\r\n        EditorErrorDecoration: 'redsquiggly'\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.EventType = {\r\n        Disposed: 'disposed',\r\n        ConfigurationChanged: 'configurationChanged',\r\n        ModelDispose: 'modelDispose',\r\n        ModelChanged: 'modelChanged',\r\n        ModelTokensChanged: 'modelTokensChanged',\r\n        ModelModeChanged: 'modelsModeChanged',\r\n        ModelModeSupportChanged: 'modelsModeSupportChanged',\r\n        ModelOptionsChanged: 'modelOptionsChanged',\r\n        ModelRawContentChanged: 'contentChanged',\r\n        ModelContentChanged2: 'contentChanged2',\r\n        ModelRawContentChangedFlush: 'flush',\r\n        ModelRawContentChangedLinesDeleted: 'linesDeleted',\r\n        ModelRawContentChangedLinesInserted: 'linesInserted',\r\n        ModelRawContentChangedLineChanged: 'lineChanged',\r\n        EditorTextBlur: 'blur',\r\n        EditorTextFocus: 'focus',\r\n        EditorFocus: 'widgetFocus',\r\n        EditorBlur: 'widgetBlur',\r\n        ModelDecorationsChanged: 'decorationsChanged',\r\n        CursorPositionChanged: 'positionChanged',\r\n        CursorSelectionChanged: 'selectionChanged',\r\n        CursorRevealRange: 'revealRange',\r\n        CursorScrollRequest: 'scrollRequest',\r\n        ViewFocusGained: 'focusGained',\r\n        ViewFocusLost: 'focusLost',\r\n        ViewFocusChanged: 'focusChanged',\r\n        ViewScrollChanged: 'scrollChanged',\r\n        ViewZonesChanged: 'zonesChanged',\r\n        ViewLayoutChanged: 'viewLayoutChanged',\r\n        ContextMenu: 'contextMenu',\r\n        MouseDown: 'mousedown',\r\n        MouseUp: 'mouseup',\r\n        MouseMove: 'mousemove',\r\n        MouseLeave: 'mouseleave',\r\n        KeyDown: 'keydown',\r\n        KeyUp: 'keyup',\r\n        EditorLayout: 'editorLayout',\r\n        DiffUpdated: 'diffUpdated'\r\n    };\r\n    exports.Handler = {\r\n        ExecuteCommand: 'executeCommand',\r\n        ExecuteCommands: 'executeCommands',\r\n        CursorLeft: 'cursorLeft',\r\n        CursorLeftSelect: 'cursorLeftSelect',\r\n        CursorWordLeft: 'cursorWordLeft',\r\n        CursorWordStartLeft: 'cursorWordStartLeft',\r\n        CursorWordEndLeft: 'cursorWordEndLeft',\r\n        CursorWordLeftSelect: 'cursorWordLeftSelect',\r\n        CursorWordStartLeftSelect: 'cursorWordStartLeftSelect',\r\n        CursorWordEndLeftSelect: 'cursorWordEndLeftSelect',\r\n        CursorRight: 'cursorRight',\r\n        CursorRightSelect: 'cursorRightSelect',\r\n        CursorWordRight: 'cursorWordRight',\r\n        CursorWordStartRight: 'cursorWordStartRight',\r\n        CursorWordEndRight: 'cursorWordEndRight',\r\n        CursorWordRightSelect: 'cursorWordRightSelect',\r\n        CursorWordStartRightSelect: 'cursorWordStartRightSelect',\r\n        CursorWordEndRightSelect: 'cursorWordEndRightSelect',\r\n        CursorUp: 'cursorUp',\r\n        CursorUpSelect: 'cursorUpSelect',\r\n        CursorDown: 'cursorDown',\r\n        CursorDownSelect: 'cursorDownSelect',\r\n        CursorPageUp: 'cursorPageUp',\r\n        CursorPageUpSelect: 'cursorPageUpSelect',\r\n        CursorPageDown: 'cursorPageDown',\r\n        CursorPageDownSelect: 'cursorPageDownSelect',\r\n        CursorHome: 'cursorHome',\r\n        CursorHomeSelect: 'cursorHomeSelect',\r\n        CursorEnd: 'cursorEnd',\r\n        CursorEndSelect: 'cursorEndSelect',\r\n        ExpandLineSelection: 'expandLineSelection',\r\n        CursorTop: 'cursorTop',\r\n        CursorTopSelect: 'cursorTopSelect',\r\n        CursorBottom: 'cursorBottom',\r\n        CursorBottomSelect: 'cursorBottomSelect',\r\n        CursorColumnSelectLeft: 'cursorColumnSelectLeft',\r\n        CursorColumnSelectRight: 'cursorColumnSelectRight',\r\n        CursorColumnSelectUp: 'cursorColumnSelectUp',\r\n        CursorColumnSelectPageUp: 'cursorColumnSelectPageUp',\r\n        CursorColumnSelectDown: 'cursorColumnSelectDown',\r\n        CursorColumnSelectPageDown: 'cursorColumnSelectPageDown',\r\n        AddCursorDown: 'addCursorDown',\r\n        AddCursorUp: 'addCursorUp',\r\n        CursorUndo: 'cursorUndo',\r\n        MoveTo: 'moveTo',\r\n        MoveToSelect: 'moveToSelect',\r\n        ColumnSelect: 'columnSelect',\r\n        CreateCursor: 'createCursor',\r\n        LastCursorMoveToSelect: 'lastCursorMoveToSelect',\r\n        JumpToBracket: 'jumpToBracket',\r\n        Type: 'type',\r\n        ReplacePreviousChar: 'replacePreviousChar',\r\n        Paste: 'paste',\r\n        Tab: 'tab',\r\n        Indent: 'indent',\r\n        Outdent: 'outdent',\r\n        DeleteLeft: 'deleteLeft',\r\n        DeleteRight: 'deleteRight',\r\n        DeleteWordLeft: 'deleteWordLeft',\r\n        DeleteWordStartLeft: 'deleteWordStartLeft',\r\n        DeleteWordEndLeft: 'deleteWordEndLeft',\r\n        DeleteWordRight: 'deleteWordRight',\r\n        DeleteWordStartRight: 'deleteWordStartRight',\r\n        DeleteWordEndRight: 'deleteWordEndRight',\r\n        DeleteAllLeft: 'deleteAllLeft',\r\n        DeleteAllRight: 'deleteAllRight',\r\n        RemoveSecondaryCursors: 'removeSecondaryCursors',\r\n        CancelSelection: 'cancelSelection',\r\n        Cut: 'cut',\r\n        Undo: 'undo',\r\n        Redo: 'redo',\r\n        WordSelect: 'wordSelect',\r\n        WordSelectDrag: 'wordSelectDrag',\r\n        LastCursorWordSelect: 'lastCursorWordSelect',\r\n        LineSelect: 'lineSelect',\r\n        LineSelectDrag: 'lineSelectDrag',\r\n        LastCursorLineSelect: 'lastCursorLineSelect',\r\n        LastCursorLineSelectDrag: 'lastCursorLineSelectDrag',\r\n        LineInsertBefore: 'lineInsertBefore',\r\n        LineInsertAfter: 'lineInsertAfter',\r\n        LineBreakInsert: 'lineBreakInsert',\r\n        SelectAll: 'selectAll',\r\n        ScrollLineUp: 'scrollLineUp',\r\n        ScrollLineDown: 'scrollLineDown',\r\n        ScrollPageUp: 'scrollPageUp',\r\n        ScrollPageDown: 'scrollPageDown'\r\n    };\r\n    (function (TextEditorCursorStyle) {\r\n        TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\r\n        TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\r\n        TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\r\n    })(exports.TextEditorCursorStyle || (exports.TextEditorCursorStyle = {}));\r\n    var TextEditorCursorStyle = exports.TextEditorCursorStyle;\r\n    /**\r\n     * @internal\r\n     */\r\n    function cursorStyleToString(cursorStyle) {\r\n        if (cursorStyle === TextEditorCursorStyle.Line) {\r\n            return 'line';\r\n        }\r\n        else if (cursorStyle === TextEditorCursorStyle.Block) {\r\n            return 'block';\r\n        }\r\n        else if (cursorStyle === TextEditorCursorStyle.Underline) {\r\n            return 'underline';\r\n        }\r\n        else {\r\n            throw new Error('cursorStyleToString: Unknown cursorStyle');\r\n        }\r\n    }\r\n    exports.cursorStyleToString = cursorStyleToString;\r\n    /**\r\n     * @internal\r\n     */\r\n    var ColorZone = (function () {\r\n        function ColorZone(from, to, colorId, position) {\r\n            this.from = from | 0;\r\n            this.to = to | 0;\r\n            this.colorId = colorId | 0;\r\n            this.position = position | 0;\r\n        }\r\n        return ColorZone;\r\n    }());\r\n    exports.ColorZone = ColorZone;\r\n    /**\r\n     * A zone in the overview ruler\r\n     * @internal\r\n     */\r\n    var OverviewRulerZone = (function () {\r\n        function OverviewRulerZone(startLineNumber, endLineNumber, position, forceHeight, color, darkColor) {\r\n            this.startLineNumber = startLineNumber;\r\n            this.endLineNumber = endLineNumber;\r\n            this.position = position;\r\n            this.forceHeight = forceHeight;\r\n            this._color = color;\r\n            this._darkColor = darkColor;\r\n            this._colorZones = null;\r\n        }\r\n        OverviewRulerZone.prototype.getColor = function (useDarkColor) {\r\n            if (useDarkColor) {\r\n                return this._darkColor;\r\n            }\r\n            return this._color;\r\n        };\r\n        OverviewRulerZone.prototype.equals = function (other) {\r\n            return (this.startLineNumber === other.startLineNumber\r\n                && this.endLineNumber === other.endLineNumber\r\n                && this.position === other.position\r\n                && this.forceHeight === other.forceHeight\r\n                && this._color === other._color\r\n                && this._darkColor === other._darkColor);\r\n        };\r\n        OverviewRulerZone.prototype.compareTo = function (other) {\r\n            if (this.startLineNumber === other.startLineNumber) {\r\n                if (this.endLineNumber === other.endLineNumber) {\r\n                    if (this.forceHeight === other.forceHeight) {\r\n                        if (this.position === other.position) {\r\n                            if (this._darkColor === other._darkColor) {\r\n                                if (this._color === other._color) {\r\n                                    return 0;\r\n                                }\r\n                                return this._color < other._color ? -1 : 1;\r\n                            }\r\n                            return this._darkColor < other._darkColor ? -1 : 1;\r\n                        }\r\n                        return this.position - other.position;\r\n                    }\r\n                    return this.forceHeight - other.forceHeight;\r\n                }\r\n                return this.endLineNumber - other.endLineNumber;\r\n            }\r\n            return this.startLineNumber - other.startLineNumber;\r\n        };\r\n        OverviewRulerZone.prototype.setColorZones = function (colorZones) {\r\n            this._colorZones = colorZones;\r\n        };\r\n        OverviewRulerZone.prototype.getColorZones = function () {\r\n            return this._colorZones;\r\n        };\r\n        return OverviewRulerZone;\r\n    }());\r\n    exports.OverviewRulerZone = OverviewRulerZone;\r\n});\r\n\ndefine(\"vs/editor/common/model/indentationGuesser\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var __space = ' '.charCodeAt(0);\r\n    var __tab = '\\t'.charCodeAt(0);\r\n    /**\r\n     * Compute the diff in spaces between two line's indentation.\r\n     */\r\n    function spacesDiff(a, aLength, b, bLength) {\r\n        // This can go both ways (e.g.):\r\n        //  - a: \"\\t\"\r\n        //  - b: \"\\t    \"\r\n        //  => This should count 1 tab and 4 spaces\r\n        var i;\r\n        for (i = 0; i < aLength && i < bLength; i++) {\r\n            var aCharCode = a.charCodeAt(i);\r\n            var bCharCode = b.charCodeAt(i);\r\n            if (aCharCode !== bCharCode) {\r\n                break;\r\n            }\r\n        }\r\n        var aSpacesCnt = 0, aTabsCount = 0;\r\n        for (var j = i; j < aLength; j++) {\r\n            var aCharCode = a.charCodeAt(j);\r\n            if (aCharCode === __space) {\r\n                aSpacesCnt++;\r\n            }\r\n            else {\r\n                aTabsCount++;\r\n            }\r\n        }\r\n        var bSpacesCnt = 0, bTabsCount = 0;\r\n        for (var j = i; j < bLength; j++) {\r\n            var bCharCode = b.charCodeAt(j);\r\n            if (bCharCode === __space) {\r\n                bSpacesCnt++;\r\n            }\r\n            else {\r\n                bTabsCount++;\r\n            }\r\n        }\r\n        if (aSpacesCnt > 0 && aTabsCount > 0) {\r\n            return 0;\r\n        }\r\n        if (bSpacesCnt > 0 && bTabsCount > 0) {\r\n            return 0;\r\n        }\r\n        var tabsDiff = Math.abs(aTabsCount - bTabsCount);\r\n        var spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\r\n        if (tabsDiff === 0) {\r\n            return spacesDiff;\r\n        }\r\n        if (spacesDiff % tabsDiff === 0) {\r\n            return spacesDiff / tabsDiff;\r\n        }\r\n        return 0;\r\n    }\r\n    function guessIndentation(lines, defaultTabSize, defaultInsertSpaces) {\r\n        var linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\r\n        var linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\r\n        var previousLineText = ''; // content of latest line that contained non-whitespace chars\r\n        var previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\r\n        var ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8]; // limit guesses for `tabSize` to 2, 4, 6 or 8.\r\n        var MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(2,4,6,8) = 8\r\n        var spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\r\n        for (var i = 0, len = lines.length; i < len; i++) {\r\n            var currentLineText = lines[i];\r\n            var currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\r\n            var currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\r\n            var currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\r\n            var currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\r\n            for (var j = 0, lenJ = currentLineText.length; j < lenJ; j++) {\r\n                var charCode = currentLineText.charCodeAt(j);\r\n                if (charCode === __tab) {\r\n                    currentLineTabsCount++;\r\n                }\r\n                else if (charCode === __space) {\r\n                    currentLineSpacesCount++;\r\n                }\r\n                else {\r\n                    // Hit non whitespace character on this line\r\n                    currentLineHasContent = true;\r\n                    currentLineIndentation = j;\r\n                    break;\r\n                }\r\n            }\r\n            // Ignore empty or only whitespace lines\r\n            if (!currentLineHasContent) {\r\n                continue;\r\n            }\r\n            if (currentLineTabsCount > 0) {\r\n                linesIndentedWithTabsCount++;\r\n            }\r\n            else if (currentLineSpacesCount > 1) {\r\n                linesIndentedWithSpacesCount++;\r\n            }\r\n            var currentSpacesDiff = spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation);\r\n            if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\r\n                spacesDiffCount[currentSpacesDiff]++;\r\n            }\r\n            previousLineText = currentLineText;\r\n            previousLineIndentation = currentLineIndentation;\r\n        }\r\n        // Take into account the last line as well\r\n        var deltaSpacesCount = spacesDiff(previousLineText, previousLineIndentation, '', 0);\r\n        if (deltaSpacesCount <= MAX_ALLOWED_TAB_SIZE_GUESS) {\r\n            spacesDiffCount[deltaSpacesCount]++;\r\n        }\r\n        var insertSpaces = defaultInsertSpaces;\r\n        if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\r\n            insertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\r\n        }\r\n        var tabSize = defaultTabSize;\r\n        var tabSizeScore = (insertSpaces ? 0 : 0.1 * lines.length);\r\n        // console.log(\"score threshold: \" + tabSizeScore);\r\n        ALLOWED_TAB_SIZE_GUESSES.forEach(function (possibleTabSize) {\r\n            var possibleTabSizeScore = spacesDiffCount[possibleTabSize];\r\n            if (possibleTabSizeScore > tabSizeScore) {\r\n                tabSizeScore = possibleTabSizeScore;\r\n                tabSize = possibleTabSize;\r\n            }\r\n        });\r\n        // console.log('--------------------------');\r\n        // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\r\n        // console.log('spacesDiffCount: ' + spacesDiffCount);\r\n        // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\r\n        return {\r\n            insertSpaces: insertSpaces,\r\n            tabSize: tabSize\r\n        };\r\n    }\r\n    exports.guessIndentation = guessIndentation;\r\n});\r\n\ndefine(\"vs/editor/common/model/lineToken\", [\"require\", \"exports\", 'vs/editor/common/core/arrays'], function (require, exports, arrays_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * A token on a line.\r\n     */\r\n    var LineToken = (function () {\r\n        function LineToken(startIndex, type) {\r\n            this.startIndex = startIndex | 0; // @perf\r\n            this.type = type;\r\n        }\r\n        LineToken.prototype.equals = function (other) {\r\n            return (this.startIndex === other.startIndex\r\n                && this.type === other.type);\r\n        };\r\n        LineToken.findIndexInSegmentsArray = function (arr, desiredIndex) {\r\n            return arrays_1.Arrays.findIndexInSegmentsArray(arr, desiredIndex);\r\n        };\r\n        LineToken.equalsArray = function (a, b) {\r\n            var aLen = a.length;\r\n            var bLen = b.length;\r\n            if (aLen !== bLen) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < aLen; i++) {\r\n                if (!a[i].equals(b[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        return LineToken;\r\n    }());\r\n    exports.LineToken = LineToken;\r\n});\r\n\ndefine(\"vs/editor/common/model/tokenIterator\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var TokenIterator = (function () {\r\n        function TokenIterator(model, position) {\r\n            this._model = model;\r\n            this._currentLineNumber = position.lineNumber;\r\n            this._currentTokenIndex = 0;\r\n            this._readLineTokens(this._currentLineNumber);\r\n            this._next = null;\r\n            this._prev = null;\r\n            // start with a position to next/prev run\r\n            var columnIndex = position.column - 1, tokenEndIndex = Number.MAX_VALUE;\r\n            for (var i = this._currentLineTokens.getTokenCount() - 1; i >= 0; i--) {\r\n                var tokenStartIndex = this._currentLineTokens.getTokenStartIndex(i);\r\n                if (tokenStartIndex <= columnIndex && columnIndex <= tokenEndIndex) {\r\n                    this._currentTokenIndex = i;\r\n                    this._next = this._current();\r\n                    this._prev = this._current();\r\n                    break;\r\n                }\r\n                tokenEndIndex = tokenStartIndex;\r\n            }\r\n        }\r\n        TokenIterator.prototype._readLineTokens = function (lineNumber) {\r\n            this._currentLineTokens = this._model.getLineTokens(lineNumber, false);\r\n        };\r\n        TokenIterator.prototype._advanceNext = function () {\r\n            this._prev = this._next;\r\n            this._next = null;\r\n            if (this._currentTokenIndex + 1 < this._currentLineTokens.getTokenCount()) {\r\n                // There are still tokens on current line\r\n                this._currentTokenIndex++;\r\n                this._next = this._current();\r\n            }\r\n            else {\r\n                // find the next line with tokens\r\n                while (this._currentLineNumber + 1 <= this._model.getLineCount()) {\r\n                    this._currentLineNumber++;\r\n                    this._readLineTokens(this._currentLineNumber);\r\n                    if (this._currentLineTokens.getTokenCount() > 0) {\r\n                        this._currentTokenIndex = 0;\r\n                        this._next = this._current();\r\n                        break;\r\n                    }\r\n                }\r\n                if (this._next === null) {\r\n                    // prepare of a previous run\r\n                    this._readLineTokens(this._currentLineNumber);\r\n                    this._currentTokenIndex = this._currentLineTokens.getTokenCount();\r\n                    this._advancePrev();\r\n                    this._next = null;\r\n                }\r\n            }\r\n        };\r\n        TokenIterator.prototype._advancePrev = function () {\r\n            this._next = this._prev;\r\n            this._prev = null;\r\n            if (this._currentTokenIndex > 0) {\r\n                // There are still tokens on current line\r\n                this._currentTokenIndex--;\r\n                this._prev = this._current();\r\n            }\r\n            else {\r\n                // find previous line with tokens\r\n                while (this._currentLineNumber > 1) {\r\n                    this._currentLineNumber--;\r\n                    this._readLineTokens(this._currentLineNumber);\r\n                    if (this._currentLineTokens.getTokenCount() > 0) {\r\n                        this._currentTokenIndex = this._currentLineTokens.getTokenCount() - 1;\r\n                        this._prev = this._current();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        TokenIterator.prototype._current = function () {\r\n            var startIndex = this._currentLineTokens.getTokenStartIndex(this._currentTokenIndex);\r\n            var type = this._currentLineTokens.getTokenType(this._currentTokenIndex);\r\n            var endIndex = this._currentLineTokens.getTokenEndIndex(this._currentTokenIndex, this._model.getLineContent(this._currentLineNumber).length);\r\n            return {\r\n                token: {\r\n                    startIndex: startIndex,\r\n                    type: type\r\n                },\r\n                lineNumber: this._currentLineNumber,\r\n                startColumn: startIndex + 1,\r\n                endColumn: endIndex + 1\r\n            };\r\n        };\r\n        TokenIterator.prototype.hasNext = function () {\r\n            return this._next !== null;\r\n        };\r\n        TokenIterator.prototype.next = function () {\r\n            var result = this._next;\r\n            this._advanceNext();\r\n            return result;\r\n        };\r\n        TokenIterator.prototype.hasPrev = function () {\r\n            return this._prev !== null;\r\n        };\r\n        TokenIterator.prototype.prev = function () {\r\n            var result = this._prev;\r\n            this._advancePrev();\r\n            return result;\r\n        };\r\n        TokenIterator.prototype._invalidate = function () {\r\n            // replace all public functions with errors\r\n            var errorFn = function () {\r\n                throw new Error('iteration isn\\'t valid anymore');\r\n            };\r\n            this.hasNext = errorFn;\r\n            this.next = errorFn;\r\n            this.hasPrev = errorFn;\r\n            this.prev = errorFn;\r\n        };\r\n        return TokenIterator;\r\n    }());\r\n    exports.TokenIterator = TokenIterator;\r\n});\r\n\ndefine(\"vs/editor/common/modes/abstractState\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var AbstractState = (function () {\r\n        function AbstractState(mode, stateData) {\r\n            if (stateData === void 0) { stateData = null; }\r\n            this.mode = mode;\r\n            this.stateData = stateData;\r\n        }\r\n        AbstractState.prototype.getMode = function () {\r\n            return this.mode;\r\n        };\r\n        AbstractState.prototype.clone = function () {\r\n            var result = this.makeClone();\r\n            result.initializeFrom(this);\r\n            return result;\r\n        };\r\n        AbstractState.prototype.makeClone = function () {\r\n            throw new Error('Abstract Method');\r\n        };\r\n        AbstractState.prototype.initializeFrom = function (other) {\r\n            this.stateData = other.stateData !== null ? other.stateData.clone() : null;\r\n        };\r\n        AbstractState.prototype.getStateData = function () {\r\n            return this.stateData;\r\n        };\r\n        AbstractState.prototype.setStateData = function (state) {\r\n            this.stateData = state;\r\n        };\r\n        AbstractState.prototype.equals = function (other) {\r\n            if (other === null || this.mode !== other.getMode()) {\r\n                return false;\r\n            }\r\n            if (other instanceof AbstractState) {\r\n                return AbstractState.safeEquals(this.stateData, other.stateData);\r\n            }\r\n            return false;\r\n        };\r\n        AbstractState.prototype.tokenize = function (stream) {\r\n            throw new Error('Abstract Method');\r\n        };\r\n        AbstractState.safeEquals = function (a, b) {\r\n            if (a === null && b === null) {\r\n                return true;\r\n            }\r\n            if (a === null || b === null) {\r\n                return false;\r\n            }\r\n            return a.equals(b);\r\n        };\r\n        AbstractState.safeClone = function (state) {\r\n            if (state) {\r\n                return state.clone();\r\n            }\r\n            return null;\r\n        };\r\n        return AbstractState;\r\n    }());\r\n    exports.AbstractState = AbstractState;\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/common/modes/languageSelector\", [\"require\", \"exports\", 'vs/base/common/glob'], function (require, exports, glob_1) {\r\n    'use strict';\r\n    function matches(selection, uri, language) {\r\n        return score(selection, uri, language) > 0;\r\n    }\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = matches;\r\n    function score(selector, uri, language) {\r\n        if (Array.isArray(selector)) {\r\n            // for each\r\n            var values = selector.map(function (item) { return score(item, uri, language); });\r\n            return Math.max.apply(Math, values);\r\n        }\r\n        else if (typeof selector === 'string') {\r\n            // compare language id\r\n            if (selector === language) {\r\n                return 10;\r\n            }\r\n            else if (selector === '*') {\r\n                return 5;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        else if (selector) {\r\n            var filter = selector;\r\n            var value = 0;\r\n            // language id\r\n            if (filter.language) {\r\n                if (filter.language === language) {\r\n                    value += 10;\r\n                }\r\n                else if (filter.language === '*') {\r\n                    value += 5;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n            // scheme\r\n            if (filter.scheme) {\r\n                if (filter.scheme === uri.scheme) {\r\n                    value += 10;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n            // match fsPath with pattern\r\n            if (filter.pattern) {\r\n                if (filter.pattern === uri.fsPath) {\r\n                    value += 10;\r\n                }\r\n                else if (glob_1.match(filter.pattern, uri.fsPath)) {\r\n                    value += 5;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n    }\r\n    exports.score = score;\r\n});\r\n\ndefine(\"vs/editor/common/modes/lineStream\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var LineStream = (function () {\r\n        function LineStream(source) {\r\n            this._source = source;\r\n            this.sourceLength = source.length;\r\n            this._pos = 0;\r\n            this.whitespace = '\\t \\u00a0';\r\n            this.whitespaceArr = this.stringToArray(this.whitespace);\r\n            this.separators = '';\r\n            this.separatorsArr = this.stringToArray(this.separators);\r\n            this.tokenStart = -1;\r\n            this.tokenEnd = -1;\r\n        }\r\n        LineStream.prototype.stringToArray = function (str) {\r\n            if (!LineStream.STRING_TO_ARRAY_CACHE.hasOwnProperty(str)) {\r\n                LineStream.STRING_TO_ARRAY_CACHE[str] = this.actualStringToArray(str);\r\n            }\r\n            return LineStream.STRING_TO_ARRAY_CACHE[str];\r\n        };\r\n        LineStream.prototype.actualStringToArray = function (str) {\r\n            var maxCharCode = 0;\r\n            for (var i = 0; i < str.length; i++) {\r\n                maxCharCode = Math.max(maxCharCode, str.charCodeAt(i));\r\n            }\r\n            var r = [];\r\n            for (var i = 0; i <= maxCharCode; i++) {\r\n                r[i] = false;\r\n            }\r\n            for (var i = 0; i < str.length; i++) {\r\n                r[str.charCodeAt(i)] = true;\r\n            }\r\n            return r;\r\n        };\r\n        LineStream.prototype.pos = function () {\r\n            return this._pos;\r\n        };\r\n        LineStream.prototype.eos = function () {\r\n            return this._pos >= this.sourceLength;\r\n        };\r\n        LineStream.prototype.peek = function () {\r\n            // Check EOS\r\n            if (this._pos >= this.sourceLength) {\r\n                throw new Error('Stream is at the end');\r\n            }\r\n            return this._source[this._pos];\r\n        };\r\n        LineStream.prototype.next = function () {\r\n            // Check EOS\r\n            if (this._pos >= this.sourceLength) {\r\n                throw new Error('Stream is at the end');\r\n            }\r\n            // Reset peeked token\r\n            this.tokenStart = -1;\r\n            this.tokenEnd = -1;\r\n            return this._source[this._pos++];\r\n        };\r\n        LineStream.prototype.next2 = function () {\r\n            // Check EOS\r\n            if (this._pos >= this.sourceLength) {\r\n                throw new Error('Stream is at the end');\r\n            }\r\n            // Reset peeked token\r\n            this.tokenStart = -1;\r\n            this.tokenEnd = -1;\r\n            this._pos++;\r\n        };\r\n        LineStream.prototype.advance = function (n) {\r\n            if (n === 0) {\r\n                return '';\r\n            }\r\n            var oldPos = this._pos;\r\n            this._pos += n;\r\n            // Reset peeked token\r\n            this.tokenStart = -1;\r\n            this.tokenEnd = -1;\r\n            return this._source.substring(oldPos, this._pos);\r\n        };\r\n        LineStream.prototype._advance2 = function (n) {\r\n            if (n === 0) {\r\n                return n;\r\n            }\r\n            this._pos += n;\r\n            // Reset peeked token\r\n            this.tokenStart = -1;\r\n            this.tokenEnd = -1;\r\n            return n;\r\n        };\r\n        LineStream.prototype.advanceToEOS = function () {\r\n            var oldPos = this._pos;\r\n            this._pos = this.sourceLength;\r\n            this.resetPeekedToken();\r\n            return this._source.substring(oldPos, this._pos);\r\n        };\r\n        LineStream.prototype.goBack = function (n) {\r\n            this._pos -= n;\r\n            this.resetPeekedToken();\r\n        };\r\n        LineStream.prototype.createPeeker = function (condition) {\r\n            var _this = this;\r\n            if (condition instanceof RegExp) {\r\n                return function () {\r\n                    var result = condition.exec(_this._source.substr(_this._pos));\r\n                    if (result === null) {\r\n                        return 0;\r\n                    }\r\n                    else if (result.index !== 0) {\r\n                        throw new Error('Regular expression must begin with the character \"^\"');\r\n                    }\r\n                    return result[0].length;\r\n                };\r\n            }\r\n            else if ((condition instanceof String || (typeof condition) === 'string') && condition) {\r\n                return function () {\r\n                    var len = condition.length, match = _this._pos + len <= _this.sourceLength;\r\n                    for (var i = 0; match && i < len; i++) {\r\n                        match = _this._source.charCodeAt(_this._pos + i) === condition.charCodeAt(i);\r\n                    }\r\n                    return match ? len : 0;\r\n                };\r\n            }\r\n            throw new Error('Condition must be either a regular expression, function or a non-empty string');\r\n        };\r\n        // --- BEGIN `_advanceIfStringCaseInsensitive`\r\n        LineStream.prototype._advanceIfStringCaseInsensitive = function (condition) {\r\n            var oldPos = this._pos, source = this._source, len = condition.length, i;\r\n            if (len < 1 || oldPos + len > this.sourceLength) {\r\n                return 0;\r\n            }\r\n            for (i = 0; i < len; i++) {\r\n                if (source.charAt(oldPos + i).toLowerCase() !== condition.charAt(i).toLowerCase()) {\r\n                    return 0;\r\n                }\r\n            }\r\n            return len;\r\n        };\r\n        LineStream.prototype.advanceIfStringCaseInsensitive = function (condition) {\r\n            return this.advance(this._advanceIfStringCaseInsensitive(condition));\r\n        };\r\n        LineStream.prototype.advanceIfStringCaseInsensitive2 = function (condition) {\r\n            return this._advance2(this._advanceIfStringCaseInsensitive(condition));\r\n        };\r\n        // --- END\r\n        // --- BEGIN `advanceIfString`\r\n        LineStream.prototype._advanceIfString = function (condition) {\r\n            var oldPos = this._pos, source = this._source, len = condition.length, i;\r\n            if (len < 1 || oldPos + len > this.sourceLength) {\r\n                return 0;\r\n            }\r\n            for (i = 0; i < len; i++) {\r\n                if (source.charCodeAt(oldPos + i) !== condition.charCodeAt(i)) {\r\n                    return 0;\r\n                }\r\n            }\r\n            return len;\r\n        };\r\n        LineStream.prototype.advanceIfString = function (condition) {\r\n            return this.advance(this._advanceIfString(condition));\r\n        };\r\n        LineStream.prototype.advanceIfString2 = function (condition) {\r\n            return this._advance2(this._advanceIfString(condition));\r\n        };\r\n        // --- END\r\n        // --- BEGIN `advanceIfString`\r\n        LineStream.prototype._advanceIfCharCode = function (charCode) {\r\n            if (this._pos < this.sourceLength && this._source.charCodeAt(this._pos) === charCode) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        };\r\n        LineStream.prototype.advanceIfCharCode = function (charCode) {\r\n            return this.advance(this._advanceIfCharCode(charCode));\r\n        };\r\n        LineStream.prototype.advanceIfCharCode2 = function (charCode) {\r\n            return this._advance2(this._advanceIfCharCode(charCode));\r\n        };\r\n        // --- END\r\n        // --- BEGIN `advanceIfRegExp`\r\n        LineStream.prototype._advanceIfRegExp = function (condition) {\r\n            if (this._pos >= this.sourceLength) {\r\n                return 0;\r\n            }\r\n            if (!condition.test(this._source.substr(this._pos))) {\r\n                return 0;\r\n            }\r\n            return RegExp.lastMatch.length;\r\n        };\r\n        LineStream.prototype.advanceIfRegExp = function (condition) {\r\n            return this.advance(this._advanceIfRegExp(condition));\r\n        };\r\n        LineStream.prototype.advanceIfRegExp2 = function (condition) {\r\n            return this._advance2(this._advanceIfRegExp(condition));\r\n        };\r\n        // --- END\r\n        LineStream.prototype.advanceLoop = function (condition, isWhile, including) {\r\n            if (this.eos()) {\r\n                return '';\r\n            }\r\n            var peeker = this.createPeeker(condition);\r\n            var oldPos = this._pos;\r\n            var n = 0;\r\n            var f = null;\r\n            if (isWhile) {\r\n                f = function (n) {\r\n                    return n > 0;\r\n                };\r\n            }\r\n            else {\r\n                f = function (n) {\r\n                    return n === 0;\r\n                };\r\n            }\r\n            while (!this.eos() && f(n = peeker())) {\r\n                if (n > 0) {\r\n                    this.advance(n);\r\n                }\r\n                else {\r\n                    this.next();\r\n                }\r\n            }\r\n            if (including && !this.eos()) {\r\n                this.advance(n);\r\n            }\r\n            return this._source.substring(oldPos, this._pos);\r\n        };\r\n        LineStream.prototype.advanceWhile = function (condition) {\r\n            return this.advanceLoop(condition, true, false);\r\n        };\r\n        LineStream.prototype.advanceUntil = function (condition, including) {\r\n            return this.advanceLoop(condition, false, including);\r\n        };\r\n        // --- BEGIN `advanceUntilString`\r\n        LineStream.prototype._advanceUntilString = function (condition, including) {\r\n            if (this.eos() || condition.length === 0) {\r\n                return 0;\r\n            }\r\n            var oldPos = this._pos;\r\n            var index = this._source.indexOf(condition, oldPos);\r\n            if (index === -1) {\r\n                // String was not found => advanced to `eos`\r\n                return (this.sourceLength - oldPos);\r\n            }\r\n            if (including) {\r\n                // String was found => advance to include `condition`\r\n                return (index + condition.length - oldPos);\r\n            }\r\n            // String was found => advance right before `condition`\r\n            return (index - oldPos);\r\n        };\r\n        LineStream.prototype.advanceUntilString = function (condition, including) {\r\n            return this.advance(this._advanceUntilString(condition, including));\r\n        };\r\n        LineStream.prototype.advanceUntilString2 = function (condition, including) {\r\n            return this._advance2(this._advanceUntilString(condition, including));\r\n        };\r\n        // --- END\r\n        LineStream.prototype.resetPeekedToken = function () {\r\n            this.tokenStart = -1;\r\n            this.tokenEnd = -1;\r\n        };\r\n        LineStream.prototype.setTokenRules = function (separators, whitespace) {\r\n            if (this.separators !== separators || this.whitespace !== whitespace) {\r\n                this.separators = separators;\r\n                this.separatorsArr = this.stringToArray(this.separators);\r\n                this.whitespace = whitespace;\r\n                this.whitespaceArr = this.stringToArray(this.whitespace);\r\n                this.resetPeekedToken();\r\n            }\r\n        };\r\n        // --- tokens\r\n        LineStream.prototype.peekToken = function () {\r\n            if (this.tokenStart !== -1) {\r\n                return this._source.substring(this.tokenStart, this.tokenEnd);\r\n            }\r\n            var source = this._source, sourceLength = this.sourceLength, whitespaceArr = this.whitespaceArr, separatorsArr = this.separatorsArr, tokenStart = this._pos;\r\n            // Check EOS\r\n            if (tokenStart >= sourceLength) {\r\n                throw new Error('Stream is at the end');\r\n            }\r\n            // Skip whitespace\r\n            while (whitespaceArr[source.charCodeAt(tokenStart)] && tokenStart < sourceLength) {\r\n                tokenStart++;\r\n            }\r\n            var tokenEnd = tokenStart;\r\n            // If a separator is hit, it is a token\r\n            if (separatorsArr[source.charCodeAt(tokenEnd)] && tokenEnd < sourceLength) {\r\n                tokenEnd++;\r\n            }\r\n            else {\r\n                // Advance until a separator or a whitespace is hit\r\n                while (!separatorsArr[source.charCodeAt(tokenEnd)] && !whitespaceArr[source.charCodeAt(tokenEnd)] && tokenEnd < sourceLength) {\r\n                    tokenEnd++;\r\n                }\r\n            }\r\n            // Cache peeked token\r\n            this.tokenStart = tokenStart;\r\n            this.tokenEnd = tokenEnd;\r\n            return source.substring(tokenStart, tokenEnd);\r\n        };\r\n        LineStream.prototype.nextToken = function () {\r\n            // Check EOS\r\n            if (this._pos >= this.sourceLength) {\r\n                throw new Error('Stream is at the end');\r\n            }\r\n            // Peek token if necessary\r\n            var result;\r\n            if (this.tokenStart === -1) {\r\n                result = this.peekToken();\r\n            }\r\n            else {\r\n                result = this._source.substring(this.tokenStart, this.tokenEnd);\r\n            }\r\n            // Advance to tokenEnd\r\n            this._pos = this.tokenEnd;\r\n            // Reset peeked token\r\n            this.tokenStart = -1;\r\n            this.tokenEnd = -1;\r\n            return result;\r\n        };\r\n        // -- whitespace\r\n        LineStream.prototype.peekWhitespace = function () {\r\n            var source = this._source, sourceLength = this.sourceLength, whitespaceArr = this.whitespaceArr, peek = this._pos;\r\n            while (whitespaceArr[source.charCodeAt(peek)] && peek < sourceLength) {\r\n                peek++;\r\n            }\r\n            return source.substring(this._pos, peek);\r\n        };\r\n        // --- BEGIN `advanceIfRegExp`\r\n        LineStream.prototype._skipWhitespace = function () {\r\n            var source = this._source, sourceLength = this.sourceLength, whitespaceArr = this.whitespaceArr, oldPos = this._pos, peek = this._pos;\r\n            while (whitespaceArr[source.charCodeAt(peek)] && peek < sourceLength) {\r\n                peek++;\r\n            }\r\n            return (peek - oldPos);\r\n        };\r\n        LineStream.prototype.skipWhitespace = function () {\r\n            return this.advance(this._skipWhitespace());\r\n        };\r\n        LineStream.prototype.skipWhitespace2 = function () {\r\n            return this._advance2(this._skipWhitespace());\r\n        };\r\n        LineStream.STRING_TO_ARRAY_CACHE = {};\r\n        return LineStream;\r\n    }());\r\n    exports.LineStream = LineStream;\r\n});\r\n\ndefine(\"vs/editor/common/modes/monarch/monarchCommon\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /*\r\n     * This module exports common types and functionality shared between\r\n     * the Monarch compiler that compiles JSON to ILexer, and the Monarch\r\n     * Tokenizer (that highlights at runtime)\r\n     */\r\n    /*\r\n     * Type definitions to be used internally to Monarch.\r\n     * Inside monarch we use fully typed definitions and compiled versions of the more abstract JSON descriptions.\r\n     */\r\n    (function (MonarchBracket) {\r\n        MonarchBracket[MonarchBracket[\"None\"] = 0] = \"None\";\r\n        MonarchBracket[MonarchBracket[\"Open\"] = 1] = \"Open\";\r\n        MonarchBracket[MonarchBracket[\"Close\"] = -1] = \"Close\";\r\n    })(exports.MonarchBracket || (exports.MonarchBracket = {}));\r\n    var MonarchBracket = exports.MonarchBracket;\r\n    // Small helper functions\r\n    /**\r\n     * Is a string null, undefined, or empty?\r\n     */\r\n    function empty(s) {\r\n        return (s ? false : true);\r\n    }\r\n    exports.empty = empty;\r\n    /**\r\n     * Puts a string to lower case if 'ignoreCase' is set.\r\n     */\r\n    function fixCase(lexer, str) {\r\n        return (lexer.ignoreCase && str ? str.toLowerCase() : str);\r\n    }\r\n    exports.fixCase = fixCase;\r\n    /**\r\n     * Ensures there are no bad characters in a CSS token class.\r\n     */\r\n    function sanitize(s) {\r\n        return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\r\n    }\r\n    exports.sanitize = sanitize;\r\n    // Logging\r\n    /**\r\n     * Logs a message.\r\n     */\r\n    function log(lexer, msg) {\r\n        console.log(lexer.name + \": \" + msg);\r\n    }\r\n    exports.log = log;\r\n    // Throwing errors\r\n    /**\r\n     * Throws error. May actually just log the error and continue.\r\n     */\r\n    function throwError(lexer, msg) {\r\n        throw new Error(lexer.name + \": \" + msg);\r\n    }\r\n    exports.throwError = throwError;\r\n    // Helper functions for rule finding and substitution\r\n    /**\r\n     * substituteMatches is used on lexer strings and can substitutes predefined patterns:\r\n     * \t\t$$  => $\r\n     * \t\t$#  => id\r\n     * \t\t$n  => matched entry n\r\n     * \t\t@attr => contents of lexer[attr]\r\n     *\r\n     * See documentation for more info\r\n     */\r\n    function substituteMatches(lexer, str, id, matches, state) {\r\n        var re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\r\n        var stateMatches = null;\r\n        return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\r\n            if (!empty(dollar)) {\r\n                return '$'; // $$\r\n            }\r\n            if (!empty(hash)) {\r\n                return fixCase(lexer, id); // default $#\r\n            }\r\n            if (!empty(n) && n < matches.length) {\r\n                return fixCase(lexer, matches[n]); // $n\r\n            }\r\n            if (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\r\n                return lexer[attr]; //@attribute\r\n            }\r\n            if (stateMatches === null) {\r\n                stateMatches = state.split('.');\r\n                stateMatches.unshift(state);\r\n            }\r\n            if (!empty(s) && s < stateMatches.length) {\r\n                return fixCase(lexer, stateMatches[s]); //$Sn\r\n            }\r\n            return '';\r\n        });\r\n    }\r\n    exports.substituteMatches = substituteMatches;\r\n    /**\r\n     * Find the tokenizer rules for a specific state (i.e. next action)\r\n     */\r\n    function findRules(lexer, state) {\r\n        while (state && state.length > 0) {\r\n            var rules = lexer.tokenizer[state];\r\n            if (rules) {\r\n                return rules;\r\n            }\r\n            var idx = state.lastIndexOf('.');\r\n            if (idx < 0) {\r\n                state = null; // no further parent\r\n            }\r\n            else {\r\n                state = state.substr(0, idx);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    exports.findRules = findRules;\r\n    /**\r\n     * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\r\n     * This is used during compilation where we may know the defined states\r\n     * but not yet whether the corresponding rules are correct.\r\n     */\r\n    function stateExists(lexer, state) {\r\n        while (state && state.length > 0) {\r\n            var exist = lexer.stateNames[state];\r\n            if (exist) {\r\n                return true;\r\n            }\r\n            var idx = state.lastIndexOf('.');\r\n            if (idx < 0) {\r\n                state = null; // no further parent\r\n            }\r\n            else {\r\n                state = state.substr(0, idx);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    exports.stateExists = stateExists;\r\n});\r\n\ndefine(\"vs/editor/common/modes/monarch/monarchCompile\", [\"require\", \"exports\", 'vs/base/common/objects', 'vs/editor/common/modes/monarch/monarchCommon'], function (require, exports, objects, monarchCommon) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /*\r\n     * Type helpers\r\n     *\r\n     * Note: this is just for sanity checks on the JSON description which is\r\n     * helpful for the programmer. No checks are done anymore once the lexer is\r\n     * already 'compiled and checked'.\r\n     *\r\n     */\r\n    function isArrayOf(elemType, obj) {\r\n        if (!obj) {\r\n            return false;\r\n        }\r\n        if (!(Array.isArray(obj))) {\r\n            return false;\r\n        }\r\n        var idx;\r\n        for (idx in obj) {\r\n            if (obj.hasOwnProperty(idx)) {\r\n                if (!(elemType(obj[idx]))) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function bool(prop, def, onerr) {\r\n        if (typeof (prop) === 'boolean') {\r\n            return prop;\r\n        }\r\n        if (onerr && (prop || def === undefined)) {\r\n            onerr(); // type is wrong, or there is no default\r\n        }\r\n        return (def === undefined ? null : def);\r\n    }\r\n    function string(prop, def, onerr) {\r\n        if (typeof (prop) === 'string') {\r\n            return prop;\r\n        }\r\n        if (onerr && (prop || def === undefined)) {\r\n            onerr(); // type is wrong, or there is no default\r\n        }\r\n        return (def === undefined ? null : def);\r\n    }\r\n    // Lexer helpers\r\n    /**\r\n     * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set.\r\n     * Also replaces @\\w+ or sequences with the content of the specified attribute\r\n     */\r\n    function compileRegExp(lexer, str) {\r\n        if (typeof (str) !== 'string') {\r\n            return null;\r\n        }\r\n        var n = 0;\r\n        while (str.indexOf('@') >= 0 && n < 5) {\r\n            n++;\r\n            str = str.replace(/@(\\w+)/g, function (s, attr) {\r\n                var sub = '';\r\n                if (typeof (lexer[attr]) === 'string') {\r\n                    sub = lexer[attr];\r\n                }\r\n                else if (lexer[attr] && lexer[attr] instanceof RegExp) {\r\n                    sub = lexer[attr].source;\r\n                }\r\n                else {\r\n                    if (lexer[attr] === undefined) {\r\n                        monarchCommon.throwError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\r\n                    }\r\n                    else {\r\n                        monarchCommon.throwError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\r\n                    }\r\n                }\r\n                return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\r\n            });\r\n        }\r\n        return new RegExp(str, (lexer.ignoreCase ? 'i' : ''));\r\n    }\r\n    /**\r\n     * Compiles guard functions for case matches.\r\n     * This compiles 'cases' attributes into efficient match functions.\r\n     *\r\n     */\r\n    function selectScrutinee(id, matches, state, num) {\r\n        if (num < 0) {\r\n            return id;\r\n        }\r\n        if (num < matches.length) {\r\n            return matches[num];\r\n        }\r\n        if (num >= 100) {\r\n            num = num - 100;\r\n            var parts = state.split('.');\r\n            parts.unshift(state);\r\n            if (num < parts.length) {\r\n                return parts[num];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function createGuard(lexer, ruleName, tkey, val) {\r\n        // get the scrutinee and pattern\r\n        var scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\r\n        var oppat = tkey;\r\n        var matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\r\n        if (matches) {\r\n            if (matches[3]) {\r\n                scrut = parseInt(matches[3]);\r\n                if (matches[2]) {\r\n                    scrut = scrut + 100; // if [sS] present\r\n                }\r\n            }\r\n            oppat = matches[4];\r\n        }\r\n        // get operator\r\n        var op = '~';\r\n        var pat = oppat;\r\n        if (!oppat || oppat.length === 0) {\r\n            op = '!=';\r\n            pat = '';\r\n        }\r\n        else if (/^\\w*$/.test(pat)) {\r\n            op = '==';\r\n        }\r\n        else {\r\n            matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\r\n            if (matches) {\r\n                op = matches[1];\r\n                pat = matches[2];\r\n            }\r\n        }\r\n        // set the tester function\r\n        var tester;\r\n        // special case a regexp that matches just words\r\n        if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\r\n            var inWords = objects.createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\r\n            tester = function (s) { return (op === '~' ? inWords(s) : !inWords(s)); };\r\n        }\r\n        else if (op === '@' || op === '!@') {\r\n            var words = lexer[pat];\r\n            if (!words) {\r\n                monarchCommon.throwError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\r\n            }\r\n            if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\r\n                monarchCommon.throwError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\r\n            }\r\n            var inWords = objects.createKeywordMatcher(words, lexer.ignoreCase);\r\n            tester = function (s) { return (op === '@' ? inWords(s) : !inWords(s)); };\r\n        }\r\n        else if (op === '~' || op === '!~') {\r\n            if (pat.indexOf('$') < 0) {\r\n                // precompile regular expression\r\n                var re = compileRegExp(lexer, '^' + pat + '$');\r\n                tester = function (s) { return (op === '~' ? re.test(s) : !re.test(s)); };\r\n            }\r\n            else {\r\n                tester = function (s, id, matches, state) {\r\n                    var re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\r\n                    return re.test(s);\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            if (pat.indexOf('$') < 0) {\r\n                var patx = monarchCommon.fixCase(lexer, pat);\r\n                tester = function (s) { return (op === '==' ? s === patx : s !== patx); };\r\n            }\r\n            else {\r\n                var patx = monarchCommon.fixCase(lexer, pat);\r\n                tester = function (s, id, matches, state, eos) {\r\n                    var patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\r\n                    return (op === '==' ? s === patexp : s !== patexp);\r\n                };\r\n            }\r\n        }\r\n        // return the branch object\r\n        if (scrut === -1) {\r\n            return {\r\n                name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                    return tester(id, id, matches, state, eos);\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                    var scrutinee = selectScrutinee(id, matches, state, scrut);\r\n                    return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\r\n                }\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Compiles an action: i.e. optimize regular expressions and case matches\r\n     * and do many sanity checks.\r\n     *\r\n     * This is called only during compilation but if the lexer definition\r\n     * contains user functions as actions (which is usually not allowed), then this\r\n     * may be called during lexing. It is important therefore to compile common cases efficiently\r\n     */\r\n    function compileAction(lexer, ruleName, action) {\r\n        if (!action) {\r\n            return { token: '' };\r\n        }\r\n        else if (typeof (action) === 'string') {\r\n            return action; // { token: action };\r\n        }\r\n        else if (action.token || action.token === '') {\r\n            if (typeof (action.token) !== 'string') {\r\n                monarchCommon.throwError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\r\n                return { token: '' };\r\n            }\r\n            else {\r\n                // only copy specific typed fields (only happens once during compile Lexer)\r\n                var newAction = { token: action.token };\r\n                if (action.token.indexOf('$') >= 0) {\r\n                    newAction.tokenSubst = true;\r\n                }\r\n                if (typeof (action.bracket) === 'string') {\r\n                    if (action.bracket === '@open') {\r\n                        newAction.bracket = monarchCommon.MonarchBracket.Open;\r\n                    }\r\n                    else if (action.bracket === '@close') {\r\n                        newAction.bracket = monarchCommon.MonarchBracket.Close;\r\n                    }\r\n                    else {\r\n                        monarchCommon.throwError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\r\n                    }\r\n                }\r\n                if (action.next) {\r\n                    if (typeof (action.next) !== 'string') {\r\n                        monarchCommon.throwError(lexer, 'the next state must be a string value in rule: ' + ruleName);\r\n                    }\r\n                    else {\r\n                        var next = action.next;\r\n                        if (!/^(@pop|@push|@popall)$/.test(next)) {\r\n                            if (next[0] === '@') {\r\n                                next = next.substr(1); // peel off starting @ sign\r\n                            }\r\n                            if (next.indexOf('$') < 0) {\r\n                                if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\r\n                                    monarchCommon.throwError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\r\n                                }\r\n                            }\r\n                        }\r\n                        newAction.next = next;\r\n                    }\r\n                }\r\n                if (typeof (action.goBack) === 'number') {\r\n                    newAction.goBack = action.goBack;\r\n                }\r\n                if (typeof (action.switchTo) === 'string') {\r\n                    newAction.switchTo = action.switchTo;\r\n                }\r\n                if (typeof (action.log) === 'string') {\r\n                    newAction.log = action.log;\r\n                }\r\n                if (typeof (action.nextEmbedded) === 'string') {\r\n                    newAction.nextEmbedded = action.nextEmbedded;\r\n                    lexer.usesEmbedded = true;\r\n                }\r\n                return newAction;\r\n            }\r\n        }\r\n        else if (Array.isArray(action)) {\r\n            var results = [];\r\n            var idx;\r\n            for (idx in action) {\r\n                if (action.hasOwnProperty(idx)) {\r\n                    results[idx] = compileAction(lexer, ruleName, action[idx]);\r\n                }\r\n            }\r\n            return { group: results };\r\n        }\r\n        else if (action.cases) {\r\n            // build an array of test cases\r\n            var cases = [];\r\n            // for each case, push a test function and result value\r\n            var tkey;\r\n            for (tkey in action.cases) {\r\n                if (action.cases.hasOwnProperty(tkey)) {\r\n                    var val = compileAction(lexer, ruleName, action.cases[tkey]);\r\n                    // what kind of case\r\n                    if (tkey === '@default' || tkey === '@' || tkey === '') {\r\n                        cases.push({ test: null, value: val, name: tkey });\r\n                    }\r\n                    else if (tkey === '@eos') {\r\n                        cases.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\r\n                    }\r\n                    else {\r\n                        cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\r\n                    }\r\n                }\r\n            }\r\n            // create a matching function\r\n            var def = lexer.defaultToken;\r\n            return {\r\n                test: function (id, matches, state, eos) {\r\n                    var idx;\r\n                    for (idx in cases) {\r\n                        if (cases.hasOwnProperty(idx)) {\r\n                            var didmatch = (!cases[idx].test || cases[idx].test(id, matches, state, eos));\r\n                            if (didmatch) {\r\n                                return cases[idx].value;\r\n                            }\r\n                        }\r\n                    }\r\n                    return def;\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            monarchCommon.throwError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\r\n            return '';\r\n        }\r\n    }\r\n    /**\r\n     * Helper class for creating matching rules\r\n     */\r\n    var Rule = (function () {\r\n        function Rule(name) {\r\n            this.regex = new RegExp('');\r\n            this.action = { token: '' };\r\n            this.matchOnlyAtLineStart = false;\r\n            this.name = '';\r\n            this.name = name;\r\n        }\r\n        Rule.prototype.setRegex = function (lexer, re) {\r\n            var sregex;\r\n            if (typeof (re) === 'string') {\r\n                sregex = re;\r\n            }\r\n            else if (re instanceof RegExp) {\r\n                sregex = re.source;\r\n            }\r\n            else {\r\n                monarchCommon.throwError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\r\n            }\r\n            this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\r\n            this.name = this.name + ': ' + sregex;\r\n            this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\r\n        };\r\n        Rule.prototype.setAction = function (lexer, act) {\r\n            this.action = compileAction(lexer, this.name, act);\r\n        };\r\n        return Rule;\r\n    }());\r\n    /**\r\n     * Compiles a json description function into json where all regular expressions,\r\n     * case matches etc, are compiled and all include rules are expanded.\r\n     * We also compile the bracket definitions, supply defaults, and do many sanity checks.\r\n     * If the 'jsonStrict' parameter is 'false', we allow at certain locations\r\n     * regular expression objects and functions that get called during lexing.\r\n     * (Currently we have no samples that need this so perhaps we should always have\r\n     * jsonStrict to true).\r\n     */\r\n    function compile(json) {\r\n        if (!json || typeof (json) !== 'object') {\r\n            throw new Error('Monarch: expecting a language definition object');\r\n        }\r\n        // Get names\r\n        if (typeof (json.name) !== 'string') {\r\n            throw new Error('Monarch: a language definition must include a string \\'name\\' attribute');\r\n        }\r\n        // Create our lexer\r\n        var lexer = {};\r\n        lexer.name = json.name;\r\n        lexer.displayName = string(json.displayName, lexer.name);\r\n        lexer.noThrow = false; // raise exceptions during compilation\r\n        lexer.maxStack = 100;\r\n        // Set standard fields: be defensive about types\r\n        lexer.start = string(json.start);\r\n        lexer.ignoreCase = bool(json.ignoreCase, false);\r\n        lexer.lineComment = string(json.lineComment, '//');\r\n        lexer.blockCommentStart = string(json.blockCommentStart, '/*');\r\n        lexer.blockCommentEnd = string(json.blockCommentEnd, '*/');\r\n        lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.name);\r\n        lexer.defaultToken = string(json.defaultToken, 'source', function () { monarchCommon.throwError(lexer, 'the \\'defaultToken\\' must be a string'); });\r\n        lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\r\n        lexer.wordDefinition = json.wordDefinition || undefined;\r\n        // COMPAT: with earlier monarch versions\r\n        if (!lexer.lineComment && json.lineComments) {\r\n            if (typeof (json.lineComments) === 'string') {\r\n                lexer.lineComment = json.lineComments;\r\n            }\r\n            else if (typeof (json.lineComments[0]) === 'string') {\r\n                lexer.lineComment = json.lineComments[0];\r\n            }\r\n        }\r\n        // For calling compileAction later on\r\n        var lexerMin = json;\r\n        lexerMin.name = lexer.name;\r\n        lexerMin.displayName = lexer.displayName;\r\n        lexerMin.ignoreCase = lexer.ignoreCase;\r\n        lexerMin.noThrow = lexer.noThrow;\r\n        lexerMin.usesEmbedded = lexer.usesEmbedded;\r\n        lexerMin.stateNames = json.tokenizer;\r\n        lexerMin.defaultToken = lexer.defaultToken;\r\n        // Compile an array of rules into newrules where RegExp objects are created.\r\n        function addRules(state, newrules, rules) {\r\n            var idx;\r\n            for (idx in rules) {\r\n                if (rules.hasOwnProperty(idx)) {\r\n                    var rule = rules[idx];\r\n                    var include = rule.include;\r\n                    if (include) {\r\n                        if (typeof (include) !== 'string') {\r\n                            monarchCommon.throwError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\r\n                        }\r\n                        if (include[0] === '@') {\r\n                            include = include.substr(1); // peel off starting @\r\n                        }\r\n                        if (!json.tokenizer[include]) {\r\n                            monarchCommon.throwError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\r\n                        }\r\n                        addRules(state + '.' + include, newrules, json.tokenizer[include]);\r\n                    }\r\n                    else {\r\n                        var newrule = new Rule(state);\r\n                        // Set up new rule attributes\r\n                        if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\r\n                            newrule.setRegex(lexerMin, rule[0]);\r\n                            if (rule.length >= 3) {\r\n                                if (typeof (rule[1]) === 'string') {\r\n                                    newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\r\n                                }\r\n                                else if (typeof (rule[1]) === 'object') {\r\n                                    var rule1 = rule[1];\r\n                                    rule1.next = rule[2];\r\n                                    newrule.setAction(lexerMin, rule1);\r\n                                }\r\n                                else {\r\n                                    monarchCommon.throwError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\r\n                                }\r\n                            }\r\n                            else {\r\n                                newrule.setAction(lexerMin, rule[1]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (!rule.regex) {\r\n                                monarchCommon.throwError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\r\n                            }\r\n                            if (rule.name) {\r\n                                newrule.name = string(rule.name);\r\n                            }\r\n                            if (rule.matchOnlyAtStart) {\r\n                                newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart);\r\n                            }\r\n                            newrule.setRegex(lexerMin, rule.regex);\r\n                            newrule.setAction(lexerMin, rule.action);\r\n                        }\r\n                        newrules.push(newrule);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // compile the tokenizer rules\r\n        if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\r\n            monarchCommon.throwError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\r\n        }\r\n        lexer.tokenizer = [];\r\n        var key;\r\n        for (key in json.tokenizer) {\r\n            if (json.tokenizer.hasOwnProperty(key)) {\r\n                if (!lexer.start) {\r\n                    lexer.start = key;\r\n                }\r\n                var rules = json.tokenizer[key];\r\n                lexer.tokenizer[key] = new Array();\r\n                addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\r\n            }\r\n        }\r\n        lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\r\n        // Set simple brackets\r\n        if (json.brackets) {\r\n            if (!(Array.isArray(json.brackets))) {\r\n                monarchCommon.throwError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\r\n            }\r\n        }\r\n        else {\r\n            json.brackets = [\r\n                { open: '{', close: '}', token: 'delimiter.curly' },\r\n                { open: '[', close: ']', token: 'delimiter.square' },\r\n                { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n                { open: '<', close: '>', token: 'delimiter.angle' }];\r\n        }\r\n        var brackets = [];\r\n        for (var bracketIdx in json.brackets) {\r\n            if (json.brackets.hasOwnProperty(bracketIdx)) {\r\n                var desc = json.brackets[bracketIdx];\r\n                if (desc && Array.isArray(desc) && desc.length === 3) {\r\n                    desc = { token: desc[2], open: desc[0], close: desc[1] };\r\n                }\r\n                if (desc.open === desc.close) {\r\n                    monarchCommon.throwError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\r\n                        '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\r\n                }\r\n                if (typeof (desc.open) === 'string' && typeof (desc.token) === 'string') {\r\n                    brackets.push({\r\n                        token: string(desc.token) + lexer.tokenPostfix,\r\n                        open: monarchCommon.fixCase(lexer, string(desc.open)),\r\n                        close: monarchCommon.fixCase(lexer, string(desc.close))\r\n                    });\r\n                }\r\n                else {\r\n                    monarchCommon.throwError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\r\n                }\r\n            }\r\n        }\r\n        lexer.brackets = brackets;\r\n        // Set default auto closing pairs\r\n        var autoClosingPairs;\r\n        if (json.autoClosingPairs) {\r\n            if (!(Array.isArray(json.autoClosingPairs))) {\r\n                monarchCommon.throwError(lexer, 'the \\'autoClosingPairs\\' attribute must be an array of string pairs (as arrays)');\r\n            }\r\n            autoClosingPairs = json.autoClosingPairs.slice(0);\r\n        }\r\n        else {\r\n            autoClosingPairs = [['\"', '\"'], ['\\'', '\\''], ['@brackets']];\r\n        }\r\n        // set auto closing pairs\r\n        lexer.autoClosingPairs = [];\r\n        if (autoClosingPairs) {\r\n            for (var autoClosingPairIdx in autoClosingPairs) {\r\n                if (autoClosingPairs.hasOwnProperty(autoClosingPairIdx)) {\r\n                    var pair = autoClosingPairs[autoClosingPairIdx];\r\n                    var openClose;\r\n                    if (pair === '@brackets' || pair[0] === '@brackets') {\r\n                        var bidx;\r\n                        for (bidx in brackets) {\r\n                            if (brackets.hasOwnProperty(bidx)) {\r\n                                if (brackets[bidx].open && brackets[bidx].open.length === 1 &&\r\n                                    brackets[bidx].close && brackets[bidx].close.length === 1) {\r\n                                    openClose = { open: brackets[bidx].open, close: brackets[bidx].close, notIn: ['string', 'comment'] };\r\n                                    lexer.autoClosingPairs.push(openClose);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (Array.isArray(pair) && pair.length === 2 &&\r\n                        typeof (pair[0]) === 'string' && pair[0].length === 1 &&\r\n                        typeof (pair[1]) === 'string' && pair[1].length === 1) {\r\n                        openClose = { open: monarchCommon.fixCase(lexer, pair[0]), close: monarchCommon.fixCase(lexer, pair[1]), notIn: ['string', 'comment'] };\r\n                        lexer.autoClosingPairs.push(openClose);\r\n                    }\r\n                    else if (typeof (pair.open) === 'string' && pair.open.length === 1 &&\r\n                        typeof (pair.close) === 'string' && pair.close.length === 1) {\r\n                        openClose = { open: monarchCommon.fixCase(lexer, pair.open[0]), close: monarchCommon.fixCase(lexer, pair.close[0]), notIn: ['string', 'comment'] };\r\n                        lexer.autoClosingPairs.push(openClose);\r\n                    }\r\n                    else {\r\n                        monarchCommon.throwError(lexer, 'every element in an \\'autoClosingPairs\\' array must be a pair of 1 character strings, or a \\'@brackets\\' directive');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Set enhanced brackets\r\n        // var enhancedBrackets : IRegexBracketPair[] = [];\r\n        // if (json.enhancedBrackets) {\r\n        // \tif (!(Array.isArray(<any>json.enhancedBrackets))) {\r\n        // \t\tmonarchCommon.throwError(lexer, 'the \\'enhancedBrackets\\' attribute must be defined as an array');\r\n        // \t}\r\n        // \tfor (var bracketIdx in json.enhancedBrackets) {\r\n        // \t\tif (json.enhancedBrackets.hasOwnProperty(bracketIdx)) {\r\n        // \t\t\tvar desc = <any> json.enhancedBrackets[bracketIdx];\r\n        // \t\t\tif (desc.hasOwnProperty('openTrigger') && typeof (desc.openTrigger) !== 'string') {\r\n        // \t\t\t\tmonarchCommon.throwError(lexer, 'openTrigger in the \\'enhancedBrackets\\' array must be a string');\r\n        // \t\t\t}\r\n        // \t\t\tif (desc.hasOwnProperty('open') && !(desc.open instanceof RegExp)) {\r\n        // \t\t\t\tmonarchCommon.throwError(lexer, 'open in the \\'enhancedBrackets\\' array must be a regex');\r\n        // \t\t\t}\r\n        // \t\t\tif (desc.hasOwnProperty('closeComplete') && typeof (desc.closeComplete) !== 'string') {\r\n        // \t\t\t\tmonarchCommon.throwError(lexer, 'closeComplete in the \\'enhancedBrackets\\' array must be a string');\r\n        // \t\t\t}\r\n        // \t\t\tif (desc.hasOwnProperty('matchCase') && typeof (desc.matchCase) !== 'boolean') {\r\n        // \t\t\t\tmonarchCommon.throwError(lexer, 'matchCase in the \\'enhancedBrackets\\' array must be a boolean');\r\n        // \t\t\t}\r\n        // \t\t\tif (desc.hasOwnProperty('closeTrigger') && typeof (desc.closeTrigger) !== 'string') {\r\n        // \t\t\t\tmonarchCommon.throwError(lexer, 'closeTrigger in the \\'enhancedBrackets\\' array must be a string');\r\n        // \t\t\t}\r\n        // \t\t\tif (desc.hasOwnProperty('close') && !(desc.close instanceof RegExp)) {\r\n        // \t\t\t\tmonarchCommon.throwError(lexer, 'close in the \\'enhancedBrackets\\' array must be a regex');\r\n        // \t\t\t}\r\n        // \t\t\tif (desc.hasOwnProperty('tokenType')) {\r\n        // \t\t\t\tif (typeof (desc.tokenType) !== 'string') {\r\n        // \t\t\t\t\tmonarchCommon.throwError(lexer, 'tokenType in the \\'enhancedBrackets\\' array must be a string');\r\n        // \t\t\t\t}\r\n        // \t\t\t\telse {\r\n        // \t\t\t\t\tdesc.tokenType += lexer.tokenPostfix;\r\n        // \t\t\t\t}\r\n        // \t\t\t}\r\n        // \t\t\tenhancedBrackets.push(desc);\r\n        // \t\t}\r\n        // \t}\r\n        // }\r\n        // lexer.enhancedBrackets = enhancedBrackets;\r\n        var standardBrackets = [];\r\n        for (var i = 0; i < brackets.length; ++i) {\r\n            standardBrackets.push([brackets[i].open, brackets[i].close]);\r\n        }\r\n        lexer.standardBrackets = standardBrackets;\r\n        lexer.outdentTriggers = string(json.outdentTriggers, '');\r\n        // Disable throw so the syntax highlighter goes, no matter what\r\n        lexer.noThrow = true;\r\n        return lexer;\r\n    }\r\n    exports.compile = compile;\r\n});\r\n\ndefine(\"vs/editor/common/modes/monarch/monarchDefinition\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    function createRichEditSupport(lexer) {\r\n        return {\r\n            wordPattern: lexer.wordDefinition,\r\n            comments: {\r\n                lineComment: lexer.lineComment,\r\n                blockComment: [lexer.blockCommentStart, lexer.blockCommentEnd]\r\n            },\r\n            brackets: lexer.standardBrackets,\r\n            autoClosingPairs: lexer.autoClosingPairs,\r\n            __electricCharacterSupport: {\r\n                // regexBrackets: lexer.enhancedBrackets,\r\n                caseInsensitive: lexer.ignoreCase,\r\n                embeddedElectricCharacters: lexer.outdentTriggers.split('')\r\n            }\r\n        };\r\n    }\r\n    exports.createRichEditSupport = createRichEditSupport;\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports\", [\"require\", \"exports\", 'vs/base/common/strings', 'vs/base/common/objects', 'vs/editor/common/core/modeTransition'], function (require, exports, strings, objects, modeTransition_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Token = (function () {\r\n        function Token(startIndex, type) {\r\n            this.startIndex = startIndex;\r\n            this.type = type;\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return '(' + this.startIndex + ', ' + this.type + ')';\r\n        };\r\n        return Token;\r\n    }());\r\n    exports.Token = Token;\r\n    var LineTokens = (function () {\r\n        function LineTokens(tokens, modeTransitions, actualStopOffset, endState) {\r\n            this.tokens = tokens;\r\n            this.modeTransitions = modeTransitions;\r\n            this.actualStopOffset = actualStopOffset;\r\n            this.endState = endState;\r\n            this.retokenize = null;\r\n        }\r\n        return LineTokens;\r\n    }());\r\n    exports.LineTokens = LineTokens;\r\n    function handleEvent(context, offset, runner) {\r\n        var modeTransitions = context.modeTransitions;\r\n        if (modeTransitions.length === 1) {\r\n            return runner(modeTransitions[0].mode, context, offset);\r\n        }\r\n        var modeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, offset);\r\n        var nestedMode = modeTransitions[modeIndex].mode;\r\n        var modeStartIndex = modeTransitions[modeIndex].startIndex;\r\n        var firstTokenInModeIndex = context.findIndexOfOffset(modeStartIndex);\r\n        var nextCharacterAfterModeIndex = -1;\r\n        var nextTokenAfterMode = -1;\r\n        if (modeIndex + 1 < modeTransitions.length) {\r\n            nextTokenAfterMode = context.findIndexOfOffset(modeTransitions[modeIndex + 1].startIndex);\r\n            nextCharacterAfterModeIndex = context.getTokenStartIndex(nextTokenAfterMode);\r\n        }\r\n        else {\r\n            nextTokenAfterMode = context.getTokenCount();\r\n            nextCharacterAfterModeIndex = context.getLineContent().length;\r\n        }\r\n        var firstTokenCharacterOffset = context.getTokenStartIndex(firstTokenInModeIndex);\r\n        var newCtx = new FilteredLineContext(context, nestedMode, firstTokenInModeIndex, nextTokenAfterMode, firstTokenCharacterOffset, nextCharacterAfterModeIndex);\r\n        return runner(nestedMode, newCtx, offset - firstTokenCharacterOffset);\r\n    }\r\n    exports.handleEvent = handleEvent;\r\n    var FilteredLineContext = (function () {\r\n        function FilteredLineContext(actual, mode, firstTokenInModeIndex, nextTokenAfterMode, firstTokenCharacterOffset, nextCharacterAfterModeIndex) {\r\n            this.modeTransitions = [new modeTransition_1.ModeTransition(0, mode)];\r\n            this._actual = actual;\r\n            this._firstTokenInModeIndex = firstTokenInModeIndex;\r\n            this._nextTokenAfterMode = nextTokenAfterMode;\r\n            this._firstTokenCharacterOffset = firstTokenCharacterOffset;\r\n            this._nextCharacterAfterModeIndex = nextCharacterAfterModeIndex;\r\n        }\r\n        FilteredLineContext.prototype.getLineContent = function () {\r\n            var actualLineContent = this._actual.getLineContent();\r\n            return actualLineContent.substring(this._firstTokenCharacterOffset, this._nextCharacterAfterModeIndex);\r\n        };\r\n        FilteredLineContext.prototype.getTokenCount = function () {\r\n            return this._nextTokenAfterMode - this._firstTokenInModeIndex;\r\n        };\r\n        FilteredLineContext.prototype.findIndexOfOffset = function (offset) {\r\n            return this._actual.findIndexOfOffset(offset + this._firstTokenCharacterOffset) - this._firstTokenInModeIndex;\r\n        };\r\n        FilteredLineContext.prototype.getTokenStartIndex = function (tokenIndex) {\r\n            return this._actual.getTokenStartIndex(tokenIndex + this._firstTokenInModeIndex) - this._firstTokenCharacterOffset;\r\n        };\r\n        FilteredLineContext.prototype.getTokenEndIndex = function (tokenIndex) {\r\n            return this._actual.getTokenEndIndex(tokenIndex + this._firstTokenInModeIndex) - this._firstTokenCharacterOffset;\r\n        };\r\n        FilteredLineContext.prototype.getTokenType = function (tokenIndex) {\r\n            return this._actual.getTokenType(tokenIndex + this._firstTokenInModeIndex);\r\n        };\r\n        FilteredLineContext.prototype.getTokenText = function (tokenIndex) {\r\n            return this._actual.getTokenText(tokenIndex + this._firstTokenInModeIndex);\r\n        };\r\n        return FilteredLineContext;\r\n    }());\r\n    exports.FilteredLineContext = FilteredLineContext;\r\n    var IGNORE_IN_TOKENS = /\\b(comment|string|regex)\\b/;\r\n    function ignoreBracketsInToken(tokenType) {\r\n        return IGNORE_IN_TOKENS.test(tokenType);\r\n    }\r\n    exports.ignoreBracketsInToken = ignoreBracketsInToken;\r\n    // TODO@Martin: find a better home for this code:\r\n    // TODO@Martin: modify suggestSupport to return a boolean if snippets should be presented or not\r\n    //       and turn this into a real registry\r\n    var SnippetsRegistry = (function () {\r\n        function SnippetsRegistry() {\r\n        }\r\n        SnippetsRegistry.registerDefaultSnippets = function (modeId, snippets) {\r\n            this._defaultSnippets[modeId] = (this._defaultSnippets[modeId] || []).concat(snippets);\r\n        };\r\n        SnippetsRegistry.registerSnippets = function (modeId, path, snippets) {\r\n            var snippetsByMode = this._snippets[modeId];\r\n            if (!snippetsByMode) {\r\n                this._snippets[modeId] = snippetsByMode = {};\r\n            }\r\n            snippetsByMode[path] = snippets;\r\n        };\r\n        // the previous\r\n        SnippetsRegistry.getNonWhitespacePrefix = function (model, position) {\r\n            var line = model.getLineContent(position.lineNumber);\r\n            var match = line.match(/[^\\s]+$/);\r\n            if (match) {\r\n                return match[0];\r\n            }\r\n            return '';\r\n        };\r\n        SnippetsRegistry.getSnippets = function (model, position) {\r\n            var word = model.getWordAtPosition(position);\r\n            var currentWord = word ? word.word.substring(0, position.column - word.startColumn).toLowerCase() : '';\r\n            var currentFullWord = SnippetsRegistry.getNonWhitespacePrefix(model, position).toLowerCase();\r\n            var result = {\r\n                currentWord: currentWord,\r\n                suggestions: []\r\n            };\r\n            var modeId = model.getModeId();\r\n            var snippets = [];\r\n            var snipppetsByMode = this._snippets[modeId];\r\n            if (snipppetsByMode) {\r\n                for (var s in snipppetsByMode) {\r\n                    snippets = snippets.concat(snipppetsByMode[s]);\r\n                }\r\n            }\r\n            var defaultSnippets = this._defaultSnippets[modeId];\r\n            if (defaultSnippets) {\r\n                snippets = snippets.concat(defaultSnippets);\r\n            }\r\n            // to avoid that snippets are too prominent in the intellisense proposals:\r\n            // enforce that current word is matched or the position is after a whitespace\r\n            snippets.forEach(function (p) {\r\n                if (currentWord.length === 0 && currentFullWord.length === 0) {\r\n                }\r\n                else {\r\n                    var label = p.label.toLowerCase();\r\n                    // force that the current word or full word matches with the snippet prefix\r\n                    if (currentWord.length > 0 && strings.startsWith(label, currentWord)) {\r\n                    }\r\n                    else if (currentFullWord.length > currentWord.length && strings.startsWith(label, currentFullWord)) {\r\n                        p = objects.clone(p);\r\n                        p.overwriteBefore = currentFullWord.length;\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                }\r\n                result.suggestions.push(p);\r\n            });\r\n            // if (result.suggestions.length > 0) {\r\n            // \tif (word) {\r\n            // \t\t// Push also the current word as first suggestion, to avoid unexpected snippet acceptance on Enter.\r\n            // \t\tresult.suggestions = result.suggestions.slice(0);\r\n            // \t\tresult.suggestions.unshift({\r\n            // \t\t\tcodeSnippet: word.word,\r\n            // \t\t\tlabel: word.word,\r\n            // \t\t\ttype: 'text'\r\n            // \t\t});\r\n            // \t}\r\n            // \tresult.incomplete = true;\r\n            // }\r\n            return result;\r\n        };\r\n        SnippetsRegistry._defaultSnippets = Object.create(null);\r\n        SnippetsRegistry._snippets = Object.create(null);\r\n        return SnippetsRegistry;\r\n    }());\r\n    exports.SnippetsRegistry = SnippetsRegistry;\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports/characterPair\", [\"require\", \"exports\", 'vs/editor/common/modes/supports'], function (require, exports, supports_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var CharacterPairSupport = (function () {\r\n        function CharacterPairSupport(modeId, config) {\r\n            this._modeId = modeId;\r\n            this._autoClosingPairs = config.autoClosingPairs;\r\n            if (!this._autoClosingPairs) {\r\n                this._autoClosingPairs = config.brackets ? config.brackets.map(function (b) { return ({ open: b[0], close: b[1] }); }) : [];\r\n            }\r\n            this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\r\n        }\r\n        CharacterPairSupport.prototype.getAutoClosingPairs = function () {\r\n            return this._autoClosingPairs;\r\n        };\r\n        CharacterPairSupport.prototype.shouldAutoClosePair = function (character, context, offset) {\r\n            var _this = this;\r\n            return supports_1.handleEvent(context, offset, function (nestedMode, context, offset) {\r\n                if (_this._modeId === nestedMode.getId()) {\r\n                    // Always complete on empty line\r\n                    if (context.getTokenCount() === 0) {\r\n                        return true;\r\n                    }\r\n                    var tokenIndex = context.findIndexOfOffset(offset - 1);\r\n                    var tokenType = context.getTokenType(tokenIndex);\r\n                    for (var i = 0; i < _this._autoClosingPairs.length; ++i) {\r\n                        if (_this._autoClosingPairs[i].open === character) {\r\n                            if (_this._autoClosingPairs[i].notIn) {\r\n                                for (var notInIndex = 0; notInIndex < _this._autoClosingPairs[i].notIn.length; ++notInIndex) {\r\n                                    if (tokenType.indexOf(_this._autoClosingPairs[i].notIn[notInIndex]) > -1) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                else if (nestedMode.richEditSupport && nestedMode.richEditSupport.characterPair) {\r\n                    return nestedMode.richEditSupport.characterPair.shouldAutoClosePair(character, context, offset);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            });\r\n        };\r\n        CharacterPairSupport.prototype.getSurroundingPairs = function () {\r\n            return this._surroundingPairs;\r\n        };\r\n        return CharacterPairSupport;\r\n    }());\r\n    exports.CharacterPairSupport = CharacterPairSupport;\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports/richEditBrackets\", [\"require\", \"exports\", 'vs/base/common/strings', 'vs/editor/common/core/range'], function (require, exports, strings, range_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var RichEditBrackets = (function () {\r\n        function RichEditBrackets(modeId, brackets) {\r\n            var _this = this;\r\n            this.brackets = brackets.map(function (b) {\r\n                return {\r\n                    modeId: modeId,\r\n                    open: b[0],\r\n                    close: b[1],\r\n                    forwardRegex: getRegexForBracketPair({ open: b[0], close: b[1] }),\r\n                    reversedRegex: getReversedRegexForBracketPair({ open: b[0], close: b[1] })\r\n                };\r\n            });\r\n            this.forwardRegex = getRegexForBrackets(this.brackets);\r\n            this.reversedRegex = getReversedRegexForBrackets(this.brackets);\r\n            this.textIsBracket = {};\r\n            this.textIsOpenBracket = {};\r\n            this.maxBracketLength = 0;\r\n            this.brackets.forEach(function (b) {\r\n                _this.textIsBracket[b.open] = b;\r\n                _this.textIsBracket[b.close] = b;\r\n                _this.textIsOpenBracket[b.open] = true;\r\n                _this.textIsOpenBracket[b.close] = false;\r\n                _this.maxBracketLength = Math.max(_this.maxBracketLength, b.open.length);\r\n                _this.maxBracketLength = Math.max(_this.maxBracketLength, b.close.length);\r\n            });\r\n        }\r\n        return RichEditBrackets;\r\n    }());\r\n    exports.RichEditBrackets = RichEditBrackets;\r\n    function once(keyFn, computeFn) {\r\n        var cache = {};\r\n        return function (input) {\r\n            var key = keyFn(input);\r\n            if (!cache.hasOwnProperty(key)) {\r\n                cache[key] = computeFn(input);\r\n            }\r\n            return cache[key];\r\n        };\r\n    }\r\n    var getRegexForBracketPair = once(function (input) { return (input.open + \";\" + input.close); }, function (input) {\r\n        return createOrRegex([input.open, input.close]);\r\n    });\r\n    var getReversedRegexForBracketPair = once(function (input) { return (input.open + \";\" + input.close); }, function (input) {\r\n        return createOrRegex([toReversedString(input.open), toReversedString(input.close)]);\r\n    });\r\n    var getRegexForBrackets = once(function (input) { return input.map(function (b) { return (b.open + \";\" + b.close); }).join(';'); }, function (input) {\r\n        var pieces = [];\r\n        input.forEach(function (b) {\r\n            pieces.push(b.open);\r\n            pieces.push(b.close);\r\n        });\r\n        return createOrRegex(pieces);\r\n    });\r\n    var getReversedRegexForBrackets = once(function (input) { return input.map(function (b) { return (b.open + \";\" + b.close); }).join(';'); }, function (input) {\r\n        var pieces = [];\r\n        input.forEach(function (b) {\r\n            pieces.push(toReversedString(b.open));\r\n            pieces.push(toReversedString(b.close));\r\n        });\r\n        return createOrRegex(pieces);\r\n    });\r\n    function createOrRegex(pieces) {\r\n        var regexStr = \"(\" + pieces.map(strings.escapeRegExpCharacters).join(')|(') + \")\";\r\n        return strings.createRegExp(regexStr, true, false, false, false);\r\n    }\r\n    function toReversedString(str) {\r\n        var reversedStr = '';\r\n        for (var i = str.length - 1; i >= 0; i--) {\r\n            reversedStr += str.charAt(i);\r\n        }\r\n        return reversedStr;\r\n    }\r\n    var BracketsUtils = (function () {\r\n        function BracketsUtils() {\r\n        }\r\n        BracketsUtils._findPrevBracketInText = function (reversedBracketRegex, lineNumber, reversedText, offset) {\r\n            var m = reversedText.match(reversedBracketRegex);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            var matchOffset = reversedText.length - m.index;\r\n            var matchLength = m[0].length;\r\n            var absoluteMatchOffset = offset + matchOffset;\r\n            return new range_1.Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\r\n        };\r\n        BracketsUtils.findPrevBracketInToken = function (reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd) {\r\n            // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\r\n            var currentTokenReversedText = '';\r\n            for (var index = currentTokenEnd - 1; index >= currentTokenStart; index--) {\r\n                currentTokenReversedText += lineText.charAt(index);\r\n            }\r\n            return this._findPrevBracketInText(reversedBracketRegex, lineNumber, currentTokenReversedText, currentTokenStart);\r\n        };\r\n        BracketsUtils.findNextBracketInText = function (bracketRegex, lineNumber, text, offset) {\r\n            var m = text.match(bracketRegex);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            var matchOffset = m.index;\r\n            var matchLength = m[0].length;\r\n            var absoluteMatchOffset = offset + matchOffset;\r\n            return new range_1.Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\r\n        };\r\n        BracketsUtils.findNextBracketInToken = function (bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd) {\r\n            var currentTokenText = lineText.substring(currentTokenStart, currentTokenEnd);\r\n            return this.findNextBracketInText(bracketRegex, lineNumber, currentTokenText, currentTokenStart);\r\n        };\r\n        return BracketsUtils;\r\n    }());\r\n    exports.BracketsUtils = BracketsUtils;\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports/electricCharacter\", [\"require\", \"exports\", 'vs/base/common/strings', 'vs/editor/common/modes/supports', 'vs/editor/common/modes/supports/richEditBrackets'], function (require, exports, strings, supports_1, richEditBrackets_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var BracketElectricCharacterSupport = (function () {\r\n        function BracketElectricCharacterSupport(modeId, brackets, contribution) {\r\n            this._modeId = modeId;\r\n            this.contribution = contribution || {};\r\n            this.brackets = new Brackets(modeId, brackets, this.contribution.docComment, this.contribution.caseInsensitive);\r\n        }\r\n        BracketElectricCharacterSupport.prototype.getElectricCharacters = function () {\r\n            if (Array.isArray(this.contribution.embeddedElectricCharacters)) {\r\n                return this.contribution.embeddedElectricCharacters.concat(this.brackets.getElectricCharacters());\r\n            }\r\n            return this.brackets.getElectricCharacters();\r\n        };\r\n        BracketElectricCharacterSupport.prototype.onElectricCharacter = function (context, offset) {\r\n            var _this = this;\r\n            return supports_1.handleEvent(context, offset, function (nestedMode, context, offset) {\r\n                if (_this._modeId === nestedMode.getId()) {\r\n                    return _this.brackets.onElectricCharacter(context, offset);\r\n                }\r\n                else if (nestedMode.richEditSupport && nestedMode.richEditSupport.electricCharacter) {\r\n                    return nestedMode.richEditSupport.electricCharacter.onElectricCharacter(context, offset);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            });\r\n        };\r\n        return BracketElectricCharacterSupport;\r\n    }());\r\n    exports.BracketElectricCharacterSupport = BracketElectricCharacterSupport;\r\n    var Brackets = (function () {\r\n        function Brackets(modeId, richEditBrackets, docComment, caseInsensitive) {\r\n            if (docComment === void 0) { docComment = null; }\r\n            if (caseInsensitive === void 0) { caseInsensitive = false; }\r\n            this._modeId = modeId;\r\n            this._richEditBrackets = richEditBrackets;\r\n            this._docComment = docComment ? docComment : null;\r\n        }\r\n        Brackets.prototype.getElectricCharacters = function () {\r\n            var result = [];\r\n            if (this._richEditBrackets) {\r\n                for (var i = 0, len = this._richEditBrackets.brackets.length; i < len; i++) {\r\n                    var bracketPair = this._richEditBrackets.brackets[i];\r\n                    var lastChar = bracketPair.close.charAt(bracketPair.close.length - 1);\r\n                    result.push(lastChar);\r\n                }\r\n            }\r\n            // Doc comments\r\n            if (this._docComment) {\r\n                result.push(this._docComment.open.charAt(this._docComment.open.length - 1));\r\n            }\r\n            // Filter duplicate entries\r\n            result = result.filter(function (item, pos, array) {\r\n                return array.indexOf(item) === pos;\r\n            });\r\n            return result;\r\n        };\r\n        Brackets.prototype.onElectricCharacter = function (context, offset) {\r\n            if (context.getTokenCount() === 0) {\r\n                return null;\r\n            }\r\n            return (this._onElectricCharacterDocComment(context, offset) ||\r\n                this._onElectricCharacterStandardBrackets(context, offset));\r\n        };\r\n        Brackets.prototype.containsTokenTypes = function (fullTokenSpec, tokensToLookFor) {\r\n            var array = tokensToLookFor.split('.');\r\n            for (var i = 0; i < array.length; ++i) {\r\n                if (fullTokenSpec.indexOf(array[i]) < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        Brackets.prototype._onElectricCharacterStandardBrackets = function (context, offset) {\r\n            if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\r\n                return null;\r\n            }\r\n            var reversedBracketRegex = this._richEditBrackets.reversedRegex;\r\n            var lineText = context.getLineContent();\r\n            var tokenIndex = context.findIndexOfOffset(offset);\r\n            var tokenStart = context.getTokenStartIndex(tokenIndex);\r\n            var tokenEnd = offset + 1;\r\n            var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(context.getLineContent());\r\n            if (firstNonWhitespaceIndex !== -1 && firstNonWhitespaceIndex < tokenStart) {\r\n                return null;\r\n            }\r\n            if (!supports_1.ignoreBracketsInToken(context.getTokenType(tokenIndex))) {\r\n                var r = richEditBrackets_1.BracketsUtils.findPrevBracketInToken(reversedBracketRegex, 1, lineText, tokenStart, tokenEnd);\r\n                if (r) {\r\n                    var text = lineText.substring(r.startColumn - 1, r.endColumn - 1);\r\n                    var isOpen = this._richEditBrackets.textIsOpenBracket[text];\r\n                    if (!isOpen) {\r\n                        return {\r\n                            matchOpenBracket: text\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        Brackets.prototype._onElectricCharacterDocComment = function (context, offset) {\r\n            // We only auto-close, so do nothing if there is no closing part.\r\n            if (!this._docComment || !this._docComment.close) {\r\n                return null;\r\n            }\r\n            var line = context.getLineContent();\r\n            var char = line[offset];\r\n            // See if the right electric character was pressed\r\n            if (char !== this._docComment.open.charAt(this._docComment.open.length - 1)) {\r\n                return null;\r\n            }\r\n            // If this line already contains the closing tag, do nothing.\r\n            if (line.indexOf(this._docComment.close, offset) >= 0) {\r\n                return null;\r\n            }\r\n            // If we're not in a documentation comment, do nothing.\r\n            var lastTokenIndex = context.findIndexOfOffset(offset);\r\n            if (!this.containsTokenTypes(context.getTokenType(lastTokenIndex), this._docComment.scope)) {\r\n                return null;\r\n            }\r\n            if (line.substring(context.getTokenStartIndex(lastTokenIndex), offset + 1 /* include electric char*/) !== this._docComment.open) {\r\n                return null;\r\n            }\r\n            return { appendText: this._docComment.close };\r\n        };\r\n        return Brackets;\r\n    }());\r\n    exports.Brackets = Brackets;\r\n});\r\n\ndefine(\"vs/editor/common/viewModel/prefixSumComputer\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var PrefixSumIndexOfResult = (function () {\r\n        function PrefixSumIndexOfResult(index, remainder) {\r\n            this.index = index;\r\n            this.remainder = remainder;\r\n        }\r\n        return PrefixSumIndexOfResult;\r\n    }());\r\n    exports.PrefixSumIndexOfResult = PrefixSumIndexOfResult;\r\n    var PrefixSumComputer = (function () {\r\n        function PrefixSumComputer(values) {\r\n            this.values = values;\r\n            this.prefixSum = [];\r\n            for (var i = 0, len = this.values.length; i < len; i++) {\r\n                this.prefixSum[i] = 0;\r\n            }\r\n            this.prefixSumValidIndex = -1;\r\n        }\r\n        PrefixSumComputer.prototype.getCount = function () {\r\n            return this.values.length;\r\n        };\r\n        PrefixSumComputer.prototype.insertValue = function (insertIndex, value) {\r\n            insertIndex = Math.floor(insertIndex); //@perf\r\n            value = Math.floor(value); //@perf\r\n            this.values.splice(insertIndex, 0, value);\r\n            this.prefixSum.splice(insertIndex, 0, 0);\r\n            if (insertIndex - 1 < this.prefixSumValidIndex) {\r\n                this.prefixSumValidIndex = insertIndex - 1;\r\n            }\r\n        };\r\n        PrefixSumComputer.prototype.insertValues = function (insertIndex, values) {\r\n            insertIndex = Math.floor(insertIndex); //@perf\r\n            if (values.length === 0) {\r\n                return;\r\n            }\r\n            this.values = this.values.slice(0, insertIndex).concat(values).concat(this.values.slice(insertIndex));\r\n            this.prefixSum = this.prefixSum.slice(0, insertIndex).concat(PrefixSumComputer._zeroArray(values.length)).concat(this.prefixSum.slice(insertIndex));\r\n            if (insertIndex - 1 < this.prefixSumValidIndex) {\r\n                this.prefixSumValidIndex = insertIndex - 1;\r\n            }\r\n        };\r\n        PrefixSumComputer._zeroArray = function (count) {\r\n            count = Math.floor(count); //@perf\r\n            var r = [];\r\n            for (var i = 0; i < count; i++) {\r\n                r[i] = 0;\r\n            }\r\n            return r;\r\n        };\r\n        PrefixSumComputer.prototype.changeValue = function (index, value) {\r\n            index = Math.floor(index); //@perf\r\n            value = Math.floor(value); //@perf\r\n            if (this.values[index] === value) {\r\n                return;\r\n            }\r\n            this.values[index] = value;\r\n            if (index - 1 < this.prefixSumValidIndex) {\r\n                this.prefixSumValidIndex = index - 1;\r\n            }\r\n        };\r\n        PrefixSumComputer.prototype.removeValues = function (startIndex, cnt) {\r\n            startIndex = Math.floor(startIndex); //@perf\r\n            cnt = Math.floor(cnt); //@perf\r\n            this.values.splice(startIndex, cnt);\r\n            this.prefixSum.splice(startIndex, cnt);\r\n            if (startIndex - 1 < this.prefixSumValidIndex) {\r\n                this.prefixSumValidIndex = startIndex - 1;\r\n            }\r\n        };\r\n        PrefixSumComputer.prototype.getTotalValue = function () {\r\n            if (this.values.length === 0) {\r\n                return 0;\r\n            }\r\n            return this.getAccumulatedValue(this.values.length - 1);\r\n        };\r\n        PrefixSumComputer.prototype.getAccumulatedValue = function (index) {\r\n            index = Math.floor(index); //@perf\r\n            if (index < 0) {\r\n                return 0;\r\n            }\r\n            if (index <= this.prefixSumValidIndex) {\r\n                return this.prefixSum[index];\r\n            }\r\n            var startIndex = this.prefixSumValidIndex + 1;\r\n            if (startIndex === 0) {\r\n                this.prefixSum[0] = this.values[0];\r\n                startIndex++;\r\n            }\r\n            if (index >= this.values.length) {\r\n                index = this.values.length - 1;\r\n            }\r\n            for (var i = startIndex; i <= index; i++) {\r\n                this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\r\n            }\r\n            this.prefixSumValidIndex = Math.max(this.prefixSumValidIndex, index);\r\n            return this.prefixSum[index];\r\n        };\r\n        PrefixSumComputer.prototype.getIndexOf = function (accumulatedValue) {\r\n            accumulatedValue = Math.floor(accumulatedValue); //@perf\r\n            var low = 0;\r\n            var high = this.values.length - 1;\r\n            var mid;\r\n            var midStop;\r\n            var midStart;\r\n            while (low <= high) {\r\n                mid = low + ((high - low) / 2) | 0;\r\n                midStop = this.getAccumulatedValue(mid);\r\n                midStart = midStop - this.values[mid];\r\n                if (accumulatedValue < midStart) {\r\n                    high = mid - 1;\r\n                }\r\n                else if (accumulatedValue >= midStop) {\r\n                    low = mid + 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\r\n        };\r\n        return PrefixSumComputer;\r\n    }());\r\n    exports.PrefixSumComputer = PrefixSumComputer;\r\n});\r\n\ndefine(\"vs/base/common/callbackList\", [\"require\", \"exports\", 'vs/base/common/errors'], function (require, exports, errors_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var CallbackList = (function () {\r\n        function CallbackList() {\r\n        }\r\n        CallbackList.prototype.add = function (callback, context, bucket) {\r\n            var _this = this;\r\n            if (context === void 0) { context = null; }\r\n            if (!this._callbacks) {\r\n                this._callbacks = [];\r\n                this._contexts = [];\r\n            }\r\n            this._callbacks.push(callback);\r\n            this._contexts.push(context);\r\n            if (Array.isArray(bucket)) {\r\n                bucket.push({ dispose: function () { return _this.remove(callback, context); } });\r\n            }\r\n        };\r\n        CallbackList.prototype.remove = function (callback, context) {\r\n            if (context === void 0) { context = null; }\r\n            if (!this._callbacks) {\r\n                return;\r\n            }\r\n            var foundCallbackWithDifferentContext = false;\r\n            for (var i = 0, len = this._callbacks.length; i < len; i++) {\r\n                if (this._callbacks[i] === callback) {\r\n                    if (this._contexts[i] === context) {\r\n                        // callback & context match => remove it\r\n                        this._callbacks.splice(i, 1);\r\n                        this._contexts.splice(i, 1);\r\n                        return;\r\n                    }\r\n                    else {\r\n                        foundCallbackWithDifferentContext = true;\r\n                    }\r\n                }\r\n            }\r\n            if (foundCallbackWithDifferentContext) {\r\n                throw new Error('When adding a listener with a context, you should remove it with the same context');\r\n            }\r\n        };\r\n        CallbackList.prototype.invoke = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i - 0] = arguments[_i];\r\n            }\r\n            if (!this._callbacks) {\r\n                return;\r\n            }\r\n            var ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\r\n            for (var i = 0, len = callbacks.length; i < len; i++) {\r\n                try {\r\n                    ret.push(callbacks[i].apply(contexts[i], args));\r\n                }\r\n                catch (e) {\r\n                    errors_1.onUnexpectedError(e);\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n        CallbackList.prototype.isEmpty = function () {\r\n            return !this._callbacks || this._callbacks.length === 0;\r\n        };\r\n        CallbackList.prototype.dispose = function () {\r\n            this._callbacks = undefined;\r\n            this._contexts = undefined;\r\n        };\r\n        return CallbackList;\r\n    }());\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = CallbackList;\r\n});\r\n\ndefine(\"vs/base/common/event\", [\"require\", \"exports\", 'vs/base/common/callbackList'], function (require, exports, callbackList_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Event;\r\n    (function (Event) {\r\n        var _disposable = { dispose: function () { } };\r\n        Event.None = function () { return _disposable; };\r\n    })(Event || (Event = {}));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Event;\r\n    /**\r\n     * The Emitter can be used to expose an Event to the public\r\n     * to fire it from the insides.\r\n     * Sample:\r\n        class Document {\r\n    \r\n            private _onDidChange = new Emitter<(value:string)=>any>();\r\n    \r\n            public onDidChange = this._onDidChange.event;\r\n    \r\n            // getter-style\r\n            // get onDidChange(): Event<(value:string)=>any> {\r\n            // \treturn this._onDidChange.event;\r\n            // }\r\n    \r\n            private _doIt() {\r\n                //...\r\n                this._onDidChange.fire(value);\r\n            }\r\n        }\r\n     */\r\n    var Emitter = (function () {\r\n        function Emitter(_options) {\r\n            this._options = _options;\r\n        }\r\n        Object.defineProperty(Emitter.prototype, \"event\", {\r\n            /**\r\n             * For the public to allow to subscribe\r\n             * to events from this Emitter\r\n             */\r\n            get: function () {\r\n                var _this = this;\r\n                if (!this._event) {\r\n                    this._event = function (listener, thisArgs, disposables) {\r\n                        if (!_this._callbacks) {\r\n                            _this._callbacks = new callbackList_1.default();\r\n                        }\r\n                        if (_this._options && _this._options.onFirstListenerAdd && _this._callbacks.isEmpty()) {\r\n                            _this._options.onFirstListenerAdd(_this);\r\n                        }\r\n                        _this._callbacks.add(listener, thisArgs);\r\n                        var result;\r\n                        result = {\r\n                            dispose: function () {\r\n                                result.dispose = Emitter._noop;\r\n                                if (!_this._disposed) {\r\n                                    _this._callbacks.remove(listener, thisArgs);\r\n                                    if (_this._options && _this._options.onLastListenerRemove && _this._callbacks.isEmpty()) {\r\n                                        _this._options.onLastListenerRemove(_this);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        if (Array.isArray(disposables)) {\r\n                            disposables.push(result);\r\n                        }\r\n                        return result;\r\n                    };\r\n                }\r\n                return this._event;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * To be kept private to fire an event to\r\n         * subscribers\r\n         */\r\n        Emitter.prototype.fire = function (event) {\r\n            if (this._callbacks) {\r\n                this._callbacks.invoke.call(this._callbacks, event);\r\n            }\r\n        };\r\n        Emitter.prototype.dispose = function () {\r\n            if (this._callbacks) {\r\n                this._callbacks.dispose();\r\n                this._callbacks = undefined;\r\n                this._disposed = true;\r\n            }\r\n        };\r\n        Emitter._noop = function () { };\r\n        return Emitter;\r\n    }());\r\n    exports.Emitter = Emitter;\r\n    /**\r\n     * Creates an Event which is backed-up by the event emitter. This allows\r\n     * to use the existing eventing pattern and is likely using less memory.\r\n     * Sample:\r\n     *\r\n     * \tclass Document {\r\n     *\r\n     *\t\tprivate _eventbus = new EventEmitter();\r\n     *\r\n     *\t\tpublic onDidChange = fromEventEmitter(this._eventbus, 'changed');\r\n     *\r\n     *\t\t// getter-style\r\n     *\t\t// get onDidChange(): Event<(value:string)=>any> {\r\n     *\t\t// \tcache fromEventEmitter result and return\r\n     *\t\t// }\r\n     *\r\n     *\t\tprivate _doIt() {\r\n     *\t\t\t// ...\r\n     *\t\t\tthis._eventbus.emit('changed', value)\r\n     *\t\t}\r\n     *\t}\r\n     */\r\n    function fromEventEmitter(emitter, eventType) {\r\n        return function (listener, thisArgs, disposables) {\r\n            var result = emitter.addListener2(eventType, function () {\r\n                listener.apply(thisArgs, arguments);\r\n            });\r\n            if (Array.isArray(disposables)) {\r\n                disposables.push(result);\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n    exports.fromEventEmitter = fromEventEmitter;\r\n    function mapEvent(event, map) {\r\n        return function (listener, thisArgs, disposables) {\r\n            return event(function (i) { return listener(map(i)); }, thisArgs, disposables);\r\n        };\r\n    }\r\n    exports.mapEvent = mapEvent;\r\n    var EventDelayerState;\r\n    (function (EventDelayerState) {\r\n        EventDelayerState[EventDelayerState[\"Idle\"] = 0] = \"Idle\";\r\n        EventDelayerState[EventDelayerState[\"Running\"] = 1] = \"Running\";\r\n    })(EventDelayerState || (EventDelayerState = {}));\r\n    /**\r\n     * The EventDelayer is useful in situations in which you want\r\n     * to delay firing your events during some code.\r\n     * You can wrap that code and be sure that the event will not\r\n     * be fired during that wrap.\r\n     *\r\n     * ```\r\n     * const emitter: Emitter;\r\n     * const delayer = new EventDelayer();\r\n     * const delayedEvent = delayer.delay(emitter.event);\r\n     *\r\n     * delayedEvent(console.log);\r\n     *\r\n     * delayer.wrap(() => {\r\n     *   emitter.fire(); // event will not be fired yet\r\n     * });\r\n     *\r\n     * // event will only be fired at this point\r\n     * ```\r\n     */\r\n    var EventBufferer = (function () {\r\n        function EventBufferer() {\r\n            this.buffers = [];\r\n        }\r\n        EventBufferer.prototype.wrapEvent = function (event) {\r\n            var _this = this;\r\n            return function (listener, thisArgs, disposables) {\r\n                return event(function (i) {\r\n                    var buffer = _this.buffers[_this.buffers.length - 1];\r\n                    if (buffer) {\r\n                        buffer.push(function () { return listener.call(thisArgs, i); });\r\n                    }\r\n                    else {\r\n                        listener.call(thisArgs, i);\r\n                    }\r\n                }, void 0, disposables);\r\n            };\r\n        };\r\n        EventBufferer.prototype.bufferEvents = function (fn) {\r\n            var buffer = [];\r\n            this.buffers.push(buffer);\r\n            fn();\r\n            this.buffers.pop();\r\n            buffer.forEach(function (flush) { return flush(); });\r\n        };\r\n        return EventBufferer;\r\n    }());\r\n    exports.EventBufferer = EventBufferer;\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/base/common/cancellation\", [\"require\", \"exports\", 'vs/base/common/event'], function (require, exports, event_1) {\r\n    'use strict';\r\n    var CancellationToken;\r\n    (function (CancellationToken) {\r\n        CancellationToken.None = Object.freeze({\r\n            isCancellationRequested: false,\r\n            onCancellationRequested: event_1.default.None\r\n        });\r\n        CancellationToken.Cancelled = Object.freeze({\r\n            isCancellationRequested: true,\r\n            onCancellationRequested: event_1.default.None\r\n        });\r\n    })(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));\r\n    var shortcutEvent = Object.freeze(function (callback, context) {\r\n        var handle = setTimeout(callback.bind(context), 0);\r\n        return { dispose: function () { clearTimeout(handle); } };\r\n    });\r\n    var MutableToken = (function () {\r\n        function MutableToken() {\r\n            this._isCancelled = false;\r\n        }\r\n        MutableToken.prototype.cancel = function () {\r\n            if (!this._isCancelled) {\r\n                this._isCancelled = true;\r\n                if (this._emitter) {\r\n                    this._emitter.fire(undefined);\r\n                    this._emitter = undefined;\r\n                }\r\n            }\r\n        };\r\n        Object.defineProperty(MutableToken.prototype, \"isCancellationRequested\", {\r\n            get: function () {\r\n                return this._isCancelled;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(MutableToken.prototype, \"onCancellationRequested\", {\r\n            get: function () {\r\n                if (this._isCancelled) {\r\n                    return shortcutEvent;\r\n                }\r\n                if (!this._emitter) {\r\n                    this._emitter = new event_1.Emitter();\r\n                }\r\n                return this._emitter.event;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        return MutableToken;\r\n    }());\r\n    var CancellationTokenSource = (function () {\r\n        function CancellationTokenSource() {\r\n        }\r\n        Object.defineProperty(CancellationTokenSource.prototype, \"token\", {\r\n            get: function () {\r\n                if (!this._token) {\r\n                    // be lazy and create the token only when\r\n                    // actually needed\r\n                    this._token = new MutableToken();\r\n                }\r\n                return this._token;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        CancellationTokenSource.prototype.cancel = function () {\r\n            if (!this._token) {\r\n                // save an object by returning the default\r\n                // cancelled token when cancellation happens\r\n                // before someone asks for the token\r\n                this._token = CancellationToken.Cancelled;\r\n            }\r\n            else {\r\n                this._token.cancel();\r\n            }\r\n        };\r\n        CancellationTokenSource.prototype.dispose = function () {\r\n            this.cancel();\r\n        };\r\n        return CancellationTokenSource;\r\n    }());\r\n    exports.CancellationTokenSource = CancellationTokenSource;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/base/common/eventEmitter\", [\"require\", \"exports\", 'vs/base/common/errors'], function (require, exports, Errors) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var EmitterEvent = (function () {\r\n        function EmitterEvent(eventType, data) {\r\n            if (eventType === void 0) { eventType = null; }\r\n            if (data === void 0) { data = null; }\r\n            this._type = eventType;\r\n            this._data = data;\r\n        }\r\n        EmitterEvent.prototype.getType = function () {\r\n            return this._type;\r\n        };\r\n        EmitterEvent.prototype.getData = function () {\r\n            return this._data;\r\n        };\r\n        return EmitterEvent;\r\n    }());\r\n    exports.EmitterEvent = EmitterEvent;\r\n    var EventEmitter = (function () {\r\n        function EventEmitter(allowedEventTypes) {\r\n            if (allowedEventTypes === void 0) { allowedEventTypes = null; }\r\n            this._listeners = {};\r\n            this._bulkListeners = [];\r\n            this._collectedEvents = [];\r\n            this._deferredCnt = 0;\r\n            if (allowedEventTypes) {\r\n                this._allowedEventTypes = {};\r\n                for (var i = 0; i < allowedEventTypes.length; i++) {\r\n                    this._allowedEventTypes[allowedEventTypes[i]] = true;\r\n                }\r\n            }\r\n            else {\r\n                this._allowedEventTypes = null;\r\n            }\r\n        }\r\n        EventEmitter.prototype.dispose = function () {\r\n            this._listeners = {};\r\n            this._bulkListeners = [];\r\n            this._collectedEvents = [];\r\n            this._deferredCnt = 0;\r\n            this._allowedEventTypes = null;\r\n        };\r\n        EventEmitter.prototype.addListener = function (eventType, listener) {\r\n            if (eventType === '*') {\r\n                throw new Error('Use addBulkListener(listener) to register your listener!');\r\n            }\r\n            if (this._allowedEventTypes && !this._allowedEventTypes.hasOwnProperty(eventType)) {\r\n                throw new Error('This object will never emit this event type!');\r\n            }\r\n            if (this._listeners.hasOwnProperty(eventType)) {\r\n                this._listeners[eventType].push(listener);\r\n            }\r\n            else {\r\n                this._listeners[eventType] = [listener];\r\n            }\r\n            var bound = this;\r\n            return {\r\n                dispose: function () {\r\n                    if (!bound) {\r\n                        // Already called\r\n                        return;\r\n                    }\r\n                    bound._removeListener(eventType, listener);\r\n                    // Prevent leakers from holding on to the event emitter\r\n                    bound = null;\r\n                    listener = null;\r\n                }\r\n            };\r\n        };\r\n        EventEmitter.prototype.addListener2 = function (eventType, listener) {\r\n            return this.addListener(eventType, listener);\r\n        };\r\n        EventEmitter.prototype.addOneTimeListener = function (eventType, listener) {\r\n            var unbind = this.addListener(eventType, function (value) {\r\n                unbind.dispose();\r\n                listener(value);\r\n            });\r\n            return unbind;\r\n        };\r\n        EventEmitter.prototype.addOneTimeDisposableListener = function (eventType, listener) {\r\n            return this.addOneTimeListener(eventType, listener);\r\n        };\r\n        EventEmitter.prototype.addBulkListener = function (listener) {\r\n            var _this = this;\r\n            this._bulkListeners.push(listener);\r\n            return {\r\n                dispose: function () {\r\n                    _this._removeBulkListener(listener);\r\n                }\r\n            };\r\n        };\r\n        EventEmitter.prototype.addBulkListener2 = function (listener) {\r\n            return this.addBulkListener(listener);\r\n        };\r\n        EventEmitter.prototype.addEmitter = function (eventEmitter) {\r\n            var _this = this;\r\n            return eventEmitter.addBulkListener2(function (events) {\r\n                var newEvents = events;\r\n                if (_this._deferredCnt === 0) {\r\n                    _this._emitEvents(newEvents);\r\n                }\r\n                else {\r\n                    // Collect for later\r\n                    _this._collectedEvents.push.apply(_this._collectedEvents, newEvents);\r\n                }\r\n            });\r\n        };\r\n        EventEmitter.prototype.addEmitter2 = function (eventEmitter) {\r\n            return this.addEmitter(eventEmitter);\r\n        };\r\n        EventEmitter.prototype._removeListener = function (eventType, listener) {\r\n            if (this._listeners.hasOwnProperty(eventType)) {\r\n                var listeners = this._listeners[eventType];\r\n                for (var i = 0, len = listeners.length; i < len; i++) {\r\n                    if (listeners[i] === listener) {\r\n                        listeners.splice(i, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        EventEmitter.prototype._removeBulkListener = function (listener) {\r\n            for (var i = 0, len = this._bulkListeners.length; i < len; i++) {\r\n                if (this._bulkListeners[i] === listener) {\r\n                    this._bulkListeners.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        EventEmitter.prototype._emitToSpecificTypeListeners = function (eventType, data) {\r\n            if (this._listeners.hasOwnProperty(eventType)) {\r\n                var listeners = this._listeners[eventType].slice(0);\r\n                for (var i = 0, len = listeners.length; i < len; i++) {\r\n                    safeInvoke1Arg(listeners[i], data);\r\n                }\r\n            }\r\n        };\r\n        EventEmitter.prototype._emitToBulkListeners = function (events) {\r\n            var bulkListeners = this._bulkListeners.slice(0);\r\n            for (var i = 0, len = bulkListeners.length; i < len; i++) {\r\n                safeInvoke1Arg(bulkListeners[i], events);\r\n            }\r\n        };\r\n        EventEmitter.prototype._emitEvents = function (events) {\r\n            if (this._bulkListeners.length > 0) {\r\n                this._emitToBulkListeners(events);\r\n            }\r\n            for (var i = 0, len = events.length; i < len; i++) {\r\n                var e = events[i];\r\n                this._emitToSpecificTypeListeners(e.getType(), e.getData());\r\n            }\r\n        };\r\n        EventEmitter.prototype.emit = function (eventType, data) {\r\n            if (data === void 0) { data = {}; }\r\n            if (this._allowedEventTypes && !this._allowedEventTypes.hasOwnProperty(eventType)) {\r\n                throw new Error('Cannot emit this event type because it wasn\\'t white-listed!');\r\n            }\r\n            // Early return if no listeners would get this\r\n            if (!this._listeners.hasOwnProperty(eventType) && this._bulkListeners.length === 0) {\r\n                return;\r\n            }\r\n            var emitterEvent = new EmitterEvent(eventType, data);\r\n            if (this._deferredCnt === 0) {\r\n                this._emitEvents([emitterEvent]);\r\n            }\r\n            else {\r\n                // Collect for later\r\n                this._collectedEvents.push(emitterEvent);\r\n            }\r\n        };\r\n        EventEmitter.prototype.deferredEmit = function (callback) {\r\n            this._deferredCnt = this._deferredCnt + 1;\r\n            var result = safeInvokeNoArg(callback);\r\n            this._deferredCnt = this._deferredCnt - 1;\r\n            if (this._deferredCnt === 0) {\r\n                this._emitCollected();\r\n            }\r\n            return result;\r\n        };\r\n        EventEmitter.prototype._emitCollected = function () {\r\n            // Flush collected events\r\n            var events = this._collectedEvents;\r\n            this._collectedEvents = [];\r\n            if (events.length > 0) {\r\n                this._emitEvents(events);\r\n            }\r\n        };\r\n        return EventEmitter;\r\n    }());\r\n    exports.EventEmitter = EventEmitter;\r\n    var EmitQueueElement = (function () {\r\n        function EmitQueueElement(target, arg) {\r\n            this.target = target;\r\n            this.arg = arg;\r\n        }\r\n        return EmitQueueElement;\r\n    }());\r\n    /**\r\n     * Same as EventEmitter, but guarantees events are delivered in order to each listener\r\n     */\r\n    var OrderGuaranteeEventEmitter = (function (_super) {\r\n        __extends(OrderGuaranteeEventEmitter, _super);\r\n        function OrderGuaranteeEventEmitter(allowedEventTypes) {\r\n            if (allowedEventTypes === void 0) { allowedEventTypes = null; }\r\n            _super.call(this, allowedEventTypes);\r\n            this._emitQueue = [];\r\n        }\r\n        OrderGuaranteeEventEmitter.prototype._emitToSpecificTypeListeners = function (eventType, data) {\r\n            if (this._listeners.hasOwnProperty(eventType)) {\r\n                var listeners = this._listeners[eventType];\r\n                for (var i = 0, len = listeners.length; i < len; i++) {\r\n                    this._emitQueue.push(new EmitQueueElement(listeners[i], data));\r\n                }\r\n            }\r\n        };\r\n        OrderGuaranteeEventEmitter.prototype._emitToBulkListeners = function (events) {\r\n            var bulkListeners = this._bulkListeners;\r\n            for (var i = 0, len = bulkListeners.length; i < len; i++) {\r\n                this._emitQueue.push(new EmitQueueElement(bulkListeners[i], events));\r\n            }\r\n        };\r\n        OrderGuaranteeEventEmitter.prototype._emitEvents = function (events) {\r\n            _super.prototype._emitEvents.call(this, events);\r\n            while (this._emitQueue.length > 0) {\r\n                var queueElement = this._emitQueue.shift();\r\n                safeInvoke1Arg(queueElement.target, queueElement.arg);\r\n            }\r\n        };\r\n        return OrderGuaranteeEventEmitter;\r\n    }(EventEmitter));\r\n    exports.OrderGuaranteeEventEmitter = OrderGuaranteeEventEmitter;\r\n    function safeInvokeNoArg(func) {\r\n        try {\r\n            return func();\r\n        }\r\n        catch (e) {\r\n            Errors.onUnexpectedError(e);\r\n        }\r\n    }\r\n    function safeInvoke1Arg(func, arg1) {\r\n        try {\r\n            return func(arg1);\r\n        }\r\n        catch (e) {\r\n            Errors.onUnexpectedError(e);\r\n        }\r\n    }\r\n});\r\n\ndefine(\"vs/base/common/timer\", [\"require\", \"exports\", 'vs/base/common/platform', 'vs/base/common/errors', 'vs/base/common/stopwatch'], function (require, exports, Platform, errors, precision) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.ENABLE_TIMER = false;\r\n    var msWriteProfilerMark = Platform.globals['msWriteProfilerMark'];\r\n    (function (Topic) {\r\n        Topic[Topic[\"EDITOR\"] = 0] = \"EDITOR\";\r\n        Topic[Topic[\"LANGUAGES\"] = 1] = \"LANGUAGES\";\r\n        Topic[Topic[\"WORKER\"] = 2] = \"WORKER\";\r\n        Topic[Topic[\"WORKBENCH\"] = 3] = \"WORKBENCH\";\r\n        Topic[Topic[\"STARTUP\"] = 4] = \"STARTUP\";\r\n    })(exports.Topic || (exports.Topic = {}));\r\n    var Topic = exports.Topic;\r\n    var NullTimerEvent = (function () {\r\n        function NullTimerEvent() {\r\n        }\r\n        NullTimerEvent.prototype.stop = function () {\r\n            return;\r\n        };\r\n        NullTimerEvent.prototype.timeTaken = function () {\r\n            return -1;\r\n        };\r\n        return NullTimerEvent;\r\n    }());\r\n    var TimerEvent = (function () {\r\n        function TimerEvent(timeKeeper, name, topic, startTime, description) {\r\n            this.timeKeeper = timeKeeper;\r\n            this.name = name;\r\n            this.description = description;\r\n            this.topic = topic;\r\n            this.stopTime = null;\r\n            if (startTime) {\r\n                this.startTime = startTime;\r\n                return;\r\n            }\r\n            this.startTime = new Date();\r\n            this.sw = precision.StopWatch.create();\r\n            if (msWriteProfilerMark) {\r\n                var profilerName = ['Monaco', this.topic, this.name, 'start'];\r\n                msWriteProfilerMark(profilerName.join('|'));\r\n            }\r\n        }\r\n        TimerEvent.prototype.stop = function (stopTime) {\r\n            // already stopped\r\n            if (this.stopTime !== null) {\r\n                return;\r\n            }\r\n            if (stopTime) {\r\n                this.stopTime = stopTime;\r\n                this.sw = null;\r\n                this.timeKeeper._onEventStopped(this);\r\n                return;\r\n            }\r\n            this.stopTime = new Date();\r\n            if (this.sw) {\r\n                this.sw.stop();\r\n            }\r\n            this.timeKeeper._onEventStopped(this);\r\n            if (msWriteProfilerMark) {\r\n                var profilerName = ['Monaco', this.topic, this.name, 'stop'];\r\n                msWriteProfilerMark(profilerName.join('|'));\r\n            }\r\n        };\r\n        TimerEvent.prototype.timeTaken = function () {\r\n            if (this.sw) {\r\n                return this.sw.elapsed();\r\n            }\r\n            if (this.stopTime) {\r\n                return this.stopTime.getTime() - this.startTime.getTime();\r\n            }\r\n            return -1;\r\n        };\r\n        return TimerEvent;\r\n    }());\r\n    var TimeKeeper /*extends EventEmitter.EventEmitter*/ = (function () {\r\n        function TimeKeeper /*extends EventEmitter.EventEmitter*/() {\r\n            this.cleaningIntervalId = -1;\r\n            this.collectedEvents = [];\r\n            this.listeners = [];\r\n        }\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.isEnabled = function () {\r\n            return exports.ENABLE_TIMER;\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.start = function (topic, name, start, description) {\r\n            if (!this.isEnabled()) {\r\n                return exports.nullEvent;\r\n            }\r\n            var strTopic;\r\n            if (typeof topic === 'string') {\r\n                strTopic = topic;\r\n            }\r\n            else if (topic === Topic.EDITOR) {\r\n                strTopic = 'Editor';\r\n            }\r\n            else if (topic === Topic.LANGUAGES) {\r\n                strTopic = 'Languages';\r\n            }\r\n            else if (topic === Topic.WORKER) {\r\n                strTopic = 'Worker';\r\n            }\r\n            else if (topic === Topic.WORKBENCH) {\r\n                strTopic = 'Workbench';\r\n            }\r\n            else if (topic === Topic.STARTUP) {\r\n                strTopic = 'Startup';\r\n            }\r\n            this.initAutoCleaning();\r\n            var event = new TimerEvent(this, name, strTopic, start, description);\r\n            this.addEvent(event);\r\n            return event;\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.dispose = function () {\r\n            if (this.cleaningIntervalId !== -1) {\r\n                Platform.clearInterval(this.cleaningIntervalId);\r\n                this.cleaningIntervalId = -1;\r\n            }\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.addListener = function (listener) {\r\n            var _this = this;\r\n            this.listeners.push(listener);\r\n            return {\r\n                dispose: function () {\r\n                    for (var i = 0; i < _this.listeners.length; i++) {\r\n                        if (_this.listeners[i] === listener) {\r\n                            _this.listeners.splice(i, 1);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.addEvent = function (event) {\r\n            event.id = TimeKeeper.EVENT_ID;\r\n            TimeKeeper.EVENT_ID++;\r\n            this.collectedEvents.push(event);\r\n            // expire items from the front of the cache\r\n            if (this.collectedEvents.length > TimeKeeper._EVENT_CACHE_LIMIT) {\r\n                this.collectedEvents.shift();\r\n            }\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.initAutoCleaning = function () {\r\n            var _this = this;\r\n            if (this.cleaningIntervalId === -1) {\r\n                this.cleaningIntervalId = Platform.setInterval(function () {\r\n                    var now = Date.now();\r\n                    _this.collectedEvents.forEach(function (event) {\r\n                        if (!event.stopTime && (now - event.startTime.getTime()) >= TimeKeeper._MAX_TIMER_LENGTH) {\r\n                            event.stop();\r\n                        }\r\n                    });\r\n                }, TimeKeeper._CLEAN_UP_INTERVAL);\r\n            }\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.getCollectedEvents = function () {\r\n            return this.collectedEvents.slice(0);\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.clearCollectedEvents = function () {\r\n            this.collectedEvents = [];\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype._onEventStopped = function (event) {\r\n            var emitEvents = [event];\r\n            var listeners = this.listeners.slice(0);\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                try {\r\n                    listeners[i](emitEvents);\r\n                }\r\n                catch (e) {\r\n                    errors.onUnexpectedError(e);\r\n                }\r\n            }\r\n        };\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.prototype.setInitialCollectedEvents = function (events, startTime) {\r\n            var _this = this;\r\n            if (!this.isEnabled()) {\r\n                return;\r\n            }\r\n            if (startTime) {\r\n                TimeKeeper.PARSE_TIME = startTime;\r\n            }\r\n            events.forEach(function (event) {\r\n                var e = new TimerEvent(_this, event.name, event.topic, event.startTime, event.description);\r\n                e.stop(event.stopTime);\r\n                _this.addEvent(e);\r\n            });\r\n        };\r\n        /**\r\n         * After being started for 1 minute, all timers are automatically stopped.\r\n         */\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/._MAX_TIMER_LENGTH = 60000; // 1 minute\r\n        /**\r\n         * Every 2 minutes, a sweep of current started timers is done.\r\n         */\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/._CLEAN_UP_INTERVAL = 120000; // 2 minutes\r\n        /**\r\n         * Collect at most 1000 events.\r\n         */\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/._EVENT_CACHE_LIMIT = 1000;\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.EVENT_ID = 1;\r\n        TimeKeeper /*extends EventEmitter.EventEmitter*/.PARSE_TIME = new Date();\r\n        return TimeKeeper /*extends EventEmitter.EventEmitter*/;\r\n    }());\r\n    exports.TimeKeeper /*extends EventEmitter.EventEmitter*/ = TimeKeeper /*extends EventEmitter.EventEmitter*/;\r\n    var timeKeeper = new TimeKeeper();\r\n    exports.nullEvent = new NullTimerEvent();\r\n    function start(topic, name, start, description) {\r\n        return timeKeeper.start(topic, name, start, description);\r\n    }\r\n    exports.start = start;\r\n    function getTimeKeeper() {\r\n        return timeKeeper;\r\n    }\r\n    exports.getTimeKeeper = getTimeKeeper;\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/base/common/async\", [\"require\", \"exports\", 'vs/base/common/errors', 'vs/base/common/platform', 'vs/base/common/winjs.base', 'vs/base/common/cancellation', 'vs/base/common/lifecycle'], function (require, exports, errors, platform, winjs_base_1, cancellation_1, lifecycle_1) {\r\n    'use strict';\r\n    function isThenable(obj) {\r\n        return obj && typeof obj.then === 'function';\r\n    }\r\n    function toThenable(arg) {\r\n        if (isThenable(arg)) {\r\n            return arg;\r\n        }\r\n        else {\r\n            return winjs_base_1.TPromise.as(arg);\r\n        }\r\n    }\r\n    exports.toThenable = toThenable;\r\n    function asWinJsPromise(callback) {\r\n        var source = new cancellation_1.CancellationTokenSource();\r\n        return new winjs_base_1.TPromise(function (resolve, reject) {\r\n            var item = callback(source.token);\r\n            if (isThenable(item)) {\r\n                item.then(resolve, reject);\r\n            }\r\n            else {\r\n                resolve(item);\r\n            }\r\n        }, function () {\r\n            source.cancel();\r\n        });\r\n    }\r\n    exports.asWinJsPromise = asWinJsPromise;\r\n    /**\r\n     * Hook a cancellation token to a WinJS Promise\r\n     */\r\n    function wireCancellationToken(token, promise) {\r\n        token.onCancellationRequested(function () { return promise.cancel(); });\r\n        return promise;\r\n    }\r\n    exports.wireCancellationToken = wireCancellationToken;\r\n    /**\r\n     * A helper to prevent accumulation of sequential async tasks.\r\n     *\r\n     * Imagine a mail man with the sole task of delivering letters. As soon as\r\n     * a letter submitted for delivery, he drives to the destination, delivers it\r\n     * and returns to his base. Imagine that during the trip, N more letters were submitted.\r\n     * When the mail man returns, he picks those N letters and delivers them all in a\r\n     * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\r\n     *\r\n     * The throttler implements this via the queue() method, by providing it a task\r\n     * factory. Following the example:\r\n     *\r\n     * \t\tvar throttler = new Throttler();\r\n     * \t\tvar letters = [];\r\n     *\r\n     * \t\tfunction deliver() {\r\n     * \t\t\tconst lettersToDeliver = letters;\r\n     * \t\t\tletters = [];\r\n     * \t\t\treturn makeTheTrip(lettersToDeliver);\r\n     * \t\t}\r\n     *\r\n     * \t\tfunction onLetterReceived(l) {\r\n     * \t\t\tletters.push(l);\r\n     * \t\t\tthrottler.queue(deliver);\r\n     * \t\t}\r\n     */\r\n    var Throttler = (function () {\r\n        function Throttler() {\r\n            this.activePromise = null;\r\n            this.queuedPromise = null;\r\n            this.queuedPromiseFactory = null;\r\n        }\r\n        Throttler.prototype.queue = function (promiseFactory) {\r\n            var _this = this;\r\n            if (this.activePromise) {\r\n                this.queuedPromiseFactory = promiseFactory;\r\n                if (!this.queuedPromise) {\r\n                    var onComplete_1 = function () {\r\n                        _this.queuedPromise = null;\r\n                        var result = _this.queue(_this.queuedPromiseFactory);\r\n                        _this.queuedPromiseFactory = null;\r\n                        return result;\r\n                    };\r\n                    this.queuedPromise = new winjs_base_1.Promise(function (c, e, p) {\r\n                        _this.activePromise.then(onComplete_1, onComplete_1, p).done(c);\r\n                    }, function () {\r\n                        _this.activePromise.cancel();\r\n                    });\r\n                }\r\n                return new winjs_base_1.Promise(function (c, e, p) {\r\n                    _this.queuedPromise.then(c, e, p);\r\n                }, function () {\r\n                    // no-op\r\n                });\r\n            }\r\n            this.activePromise = promiseFactory();\r\n            return new winjs_base_1.Promise(function (c, e, p) {\r\n                _this.activePromise.done(function (result) {\r\n                    _this.activePromise = null;\r\n                    c(result);\r\n                }, function (err) {\r\n                    _this.activePromise = null;\r\n                    e(err);\r\n                }, p);\r\n            }, function () {\r\n                _this.activePromise.cancel();\r\n            });\r\n        };\r\n        return Throttler;\r\n    }());\r\n    exports.Throttler = Throttler;\r\n    // TODO@Joao: can the previous throttler be replaced with this?\r\n    var SimpleThrottler = (function () {\r\n        function SimpleThrottler() {\r\n            this.current = winjs_base_1.TPromise.as(null);\r\n        }\r\n        SimpleThrottler.prototype.queue = function (promiseTask) {\r\n            return this.current = this.current.then(function () { return promiseTask(); });\r\n        };\r\n        return SimpleThrottler;\r\n    }());\r\n    exports.SimpleThrottler = SimpleThrottler;\r\n    /**\r\n     * A helper to delay execution of a task that is being requested often.\r\n     *\r\n     * Following the throttler, now imagine the mail man wants to optimize the number of\r\n     * trips proactively. The trip itself can be long, so the he decides not to make the trip\r\n     * as soon as a letter is submitted. Instead he waits a while, in case more\r\n     * letters are submitted. After said waiting period, if no letters were submitted, he\r\n     * decides to make the trip. Imagine that N more letters were submitted after the first\r\n     * one, all within a short period of time between each other. Even though N+1\r\n     * submissions occurred, only 1 delivery was made.\r\n     *\r\n     * The delayer offers this behavior via the trigger() method, into which both the task\r\n     * to be executed and the waiting period (delay) must be passed in as arguments. Following\r\n     * the example:\r\n     *\r\n     * \t\tvar delayer = new Delayer(WAITING_PERIOD);\r\n     * \t\tvar letters = [];\r\n     *\r\n     * \t\tfunction letterReceived(l) {\r\n     * \t\t\tletters.push(l);\r\n     * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\r\n     * \t\t}\r\n     */\r\n    var Delayer = (function () {\r\n        function Delayer(defaultDelay) {\r\n            this.defaultDelay = defaultDelay;\r\n            this.timeout = null;\r\n            this.completionPromise = null;\r\n            this.onSuccess = null;\r\n            this.task = null;\r\n        }\r\n        Delayer.prototype.trigger = function (task, delay) {\r\n            var _this = this;\r\n            if (delay === void 0) { delay = this.defaultDelay; }\r\n            this.task = task;\r\n            this.cancelTimeout();\r\n            if (!this.completionPromise) {\r\n                this.completionPromise = new winjs_base_1.Promise(function (c) {\r\n                    _this.onSuccess = c;\r\n                }, function () {\r\n                    // no-op\r\n                }).then(function () {\r\n                    _this.completionPromise = null;\r\n                    _this.onSuccess = null;\r\n                    var task = _this.task;\r\n                    _this.task = null;\r\n                    return task();\r\n                });\r\n            }\r\n            this.timeout = setTimeout(function () {\r\n                _this.timeout = null;\r\n                _this.onSuccess(null);\r\n            }, delay);\r\n            return this.completionPromise;\r\n        };\r\n        Delayer.prototype.isTriggered = function () {\r\n            return this.timeout !== null;\r\n        };\r\n        Delayer.prototype.cancel = function () {\r\n            this.cancelTimeout();\r\n            if (this.completionPromise) {\r\n                this.completionPromise.cancel();\r\n                this.completionPromise = null;\r\n            }\r\n        };\r\n        Delayer.prototype.cancelTimeout = function () {\r\n            if (this.timeout !== null) {\r\n                clearTimeout(this.timeout);\r\n                this.timeout = null;\r\n            }\r\n        };\r\n        return Delayer;\r\n    }());\r\n    exports.Delayer = Delayer;\r\n    /**\r\n     * A helper to delay execution of a task that is being requested often, while\r\n     * preventing accumulation of consecutive executions, while the task runs.\r\n     *\r\n     * Simply combine the two mail man strategies from the Throttler and Delayer\r\n     * helpers, for an analogy.\r\n     */\r\n    var ThrottledDelayer = (function (_super) {\r\n        __extends(ThrottledDelayer, _super);\r\n        function ThrottledDelayer(defaultDelay) {\r\n            _super.call(this, defaultDelay);\r\n            this.throttler = new Throttler();\r\n        }\r\n        ThrottledDelayer.prototype.trigger = function (promiseFactory, delay) {\r\n            var _this = this;\r\n            return _super.prototype.trigger.call(this, function () { return _this.throttler.queue(promiseFactory); }, delay);\r\n        };\r\n        return ThrottledDelayer;\r\n    }(Delayer));\r\n    exports.ThrottledDelayer = ThrottledDelayer;\r\n    /**\r\n     * Similar to the ThrottledDelayer, except it also guarantees that the promise\r\n     * factory doesn't get called more often than every `minimumPeriod` milliseconds.\r\n     */\r\n    var PeriodThrottledDelayer = (function (_super) {\r\n        __extends(PeriodThrottledDelayer, _super);\r\n        function PeriodThrottledDelayer(defaultDelay, minimumPeriod) {\r\n            if (minimumPeriod === void 0) { minimumPeriod = 0; }\r\n            _super.call(this, defaultDelay);\r\n            this.minimumPeriod = minimumPeriod;\r\n            this.periodThrottler = new Throttler();\r\n        }\r\n        PeriodThrottledDelayer.prototype.trigger = function (promiseFactory, delay) {\r\n            var _this = this;\r\n            return _super.prototype.trigger.call(this, function () {\r\n                return _this.periodThrottler.queue(function () {\r\n                    return winjs_base_1.Promise.join([\r\n                        winjs_base_1.TPromise.timeout(_this.minimumPeriod),\r\n                        promiseFactory()\r\n                    ]).then(function (r) { return r[1]; });\r\n                });\r\n            }, delay);\r\n        };\r\n        return PeriodThrottledDelayer;\r\n    }(ThrottledDelayer));\r\n    exports.PeriodThrottledDelayer = PeriodThrottledDelayer;\r\n    var PromiseSource = (function () {\r\n        function PromiseSource() {\r\n            var _this = this;\r\n            this._value = new winjs_base_1.TPromise(function (c, e) {\r\n                _this._completeCallback = c;\r\n                _this._errorCallback = e;\r\n            });\r\n        }\r\n        Object.defineProperty(PromiseSource.prototype, \"value\", {\r\n            get: function () {\r\n                return this._value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        PromiseSource.prototype.complete = function (value) {\r\n            this._completeCallback(value);\r\n        };\r\n        PromiseSource.prototype.error = function (err) {\r\n            this._errorCallback(err);\r\n        };\r\n        return PromiseSource;\r\n    }());\r\n    exports.PromiseSource = PromiseSource;\r\n    var ShallowCancelThenPromise = (function (_super) {\r\n        __extends(ShallowCancelThenPromise, _super);\r\n        function ShallowCancelThenPromise(outer) {\r\n            var completeCallback, errorCallback, progressCallback;\r\n            _super.call(this, function (c, e, p) {\r\n                completeCallback = c;\r\n                errorCallback = e;\r\n                progressCallback = p;\r\n            }, function () {\r\n                // cancel this promise but not the\r\n                // outer promise\r\n                errorCallback(errors.canceled());\r\n            });\r\n            outer.then(completeCallback, errorCallback, progressCallback);\r\n        }\r\n        return ShallowCancelThenPromise;\r\n    }(winjs_base_1.TPromise));\r\n    exports.ShallowCancelThenPromise = ShallowCancelThenPromise;\r\n    /**\r\n     * Returns a new promise that joins the provided promise. Upon completion of\r\n     * the provided promise the provided function will always be called. This\r\n     * method is comparable to a try-finally code block.\r\n     * @param promise a promise\r\n     * @param f a function that will be call in the success and error case.\r\n     */\r\n    function always(promise, f) {\r\n        return new winjs_base_1.TPromise(function (c, e, p) {\r\n            promise.done(function (result) {\r\n                try {\r\n                    f(result);\r\n                }\r\n                catch (e1) {\r\n                    errors.onUnexpectedError(e1);\r\n                }\r\n                c(result);\r\n            }, function (err) {\r\n                try {\r\n                    f(err);\r\n                }\r\n                catch (e1) {\r\n                    errors.onUnexpectedError(e1);\r\n                }\r\n                e(err);\r\n            }, function (progress) {\r\n                p(progress);\r\n            });\r\n        }, function () {\r\n            promise.cancel();\r\n        });\r\n    }\r\n    exports.always = always;\r\n    /**\r\n     * Runs the provided list of promise factories in sequential order. The returned\r\n     * promise will complete to an array of results from each promise.\r\n     */\r\n    function sequence(promiseFactory) {\r\n        var results = [];\r\n        // reverse since we start with last element using pop()\r\n        promiseFactory = promiseFactory.reverse();\r\n        function next() {\r\n            if (promiseFactory.length) {\r\n                return promiseFactory.pop()();\r\n            }\r\n            return null;\r\n        }\r\n        function thenHandler(result) {\r\n            if (result) {\r\n                results.push(result);\r\n            }\r\n            var n = next();\r\n            if (n) {\r\n                return n.then(thenHandler);\r\n            }\r\n            return winjs_base_1.TPromise.as(results);\r\n        }\r\n        return winjs_base_1.TPromise.as(null).then(thenHandler);\r\n    }\r\n    exports.sequence = sequence;\r\n    function once(fn) {\r\n        var _this = this;\r\n        var didCall = false;\r\n        var result;\r\n        return function () {\r\n            if (didCall) {\r\n                return result;\r\n            }\r\n            didCall = true;\r\n            result = fn.apply(_this, arguments);\r\n            return result;\r\n        };\r\n    }\r\n    exports.once = once;\r\n    /**\r\n     * A helper to queue N promises and run them all with a max degree of parallelism. The helper\r\n     * ensures that at any time no more than M promises are running at the same time.\r\n     */\r\n    var Limiter = (function () {\r\n        function Limiter(maxDegreeOfParalellism) {\r\n            this.maxDegreeOfParalellism = maxDegreeOfParalellism;\r\n            this.outstandingPromises = [];\r\n            this.runningPromises = 0;\r\n        }\r\n        Limiter.prototype.queue = function (promiseFactory) {\r\n            var _this = this;\r\n            return new winjs_base_1.TPromise(function (c, e, p) {\r\n                _this.outstandingPromises.push({\r\n                    factory: promiseFactory,\r\n                    c: c,\r\n                    e: e,\r\n                    p: p\r\n                });\r\n                _this.consume();\r\n            });\r\n        };\r\n        Limiter.prototype.consume = function () {\r\n            var _this = this;\r\n            while (this.outstandingPromises.length && this.runningPromises < this.maxDegreeOfParalellism) {\r\n                var iLimitedTask = this.outstandingPromises.shift();\r\n                this.runningPromises++;\r\n                var promise = iLimitedTask.factory();\r\n                promise.done(iLimitedTask.c, iLimitedTask.e, iLimitedTask.p);\r\n                promise.done(function () { return _this.consumed(); }, function () { return _this.consumed(); });\r\n            }\r\n        };\r\n        Limiter.prototype.consumed = function () {\r\n            this.runningPromises--;\r\n            this.consume();\r\n        };\r\n        return Limiter;\r\n    }());\r\n    exports.Limiter = Limiter;\r\n    var TimeoutTimer = (function (_super) {\r\n        __extends(TimeoutTimer, _super);\r\n        function TimeoutTimer() {\r\n            _super.call(this);\r\n            this._token = -1;\r\n        }\r\n        TimeoutTimer.prototype.dispose = function () {\r\n            this.cancel();\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        TimeoutTimer.prototype.cancel = function () {\r\n            if (this._token !== -1) {\r\n                platform.clearTimeout(this._token);\r\n                this._token = -1;\r\n            }\r\n        };\r\n        TimeoutTimer.prototype.cancelAndSet = function (runner, timeout) {\r\n            var _this = this;\r\n            this.cancel();\r\n            this._token = platform.setTimeout(function () {\r\n                _this._token = -1;\r\n                runner();\r\n            }, timeout);\r\n        };\r\n        TimeoutTimer.prototype.setIfNotSet = function (runner, timeout) {\r\n            var _this = this;\r\n            if (this._token !== -1) {\r\n                // timer is already set\r\n                return;\r\n            }\r\n            this._token = platform.setTimeout(function () {\r\n                _this._token = -1;\r\n                runner();\r\n            }, timeout);\r\n        };\r\n        return TimeoutTimer;\r\n    }(lifecycle_1.Disposable));\r\n    exports.TimeoutTimer = TimeoutTimer;\r\n    var IntervalTimer = (function (_super) {\r\n        __extends(IntervalTimer, _super);\r\n        function IntervalTimer() {\r\n            _super.call(this);\r\n            this._token = -1;\r\n        }\r\n        IntervalTimer.prototype.dispose = function () {\r\n            this.cancel();\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        IntervalTimer.prototype.cancel = function () {\r\n            if (this._token !== -1) {\r\n                platform.clearInterval(this._token);\r\n                this._token = -1;\r\n            }\r\n        };\r\n        IntervalTimer.prototype.cancelAndSet = function (runner, interval) {\r\n            this.cancel();\r\n            this._token = platform.setInterval(function () {\r\n                runner();\r\n            }, interval);\r\n        };\r\n        return IntervalTimer;\r\n    }(lifecycle_1.Disposable));\r\n    exports.IntervalTimer = IntervalTimer;\r\n    var RunOnceScheduler = (function () {\r\n        function RunOnceScheduler(runner, timeout) {\r\n            this.timeoutToken = -1;\r\n            this.runner = runner;\r\n            this.timeout = timeout;\r\n            this.timeoutHandler = this.onTimeout.bind(this);\r\n        }\r\n        /**\r\n         * Dispose RunOnceScheduler\r\n         */\r\n        RunOnceScheduler.prototype.dispose = function () {\r\n            this.cancel();\r\n            this.runner = null;\r\n        };\r\n        /**\r\n         * Cancel current scheduled runner (if any).\r\n         */\r\n        RunOnceScheduler.prototype.cancel = function () {\r\n            if (this.isScheduled()) {\r\n                platform.clearTimeout(this.timeoutToken);\r\n                this.timeoutToken = -1;\r\n            }\r\n        };\r\n        /**\r\n         * Replace runner. If there is a runner already scheduled, the new runner will be called.\r\n         */\r\n        RunOnceScheduler.prototype.setRunner = function (runner) {\r\n            this.runner = runner;\r\n        };\r\n        /**\r\n         * Cancel previous runner (if any) & schedule a new runner.\r\n         */\r\n        RunOnceScheduler.prototype.schedule = function (delay) {\r\n            if (delay === void 0) { delay = this.timeout; }\r\n            this.cancel();\r\n            this.timeoutToken = platform.setTimeout(this.timeoutHandler, this.timeout);\r\n        };\r\n        /**\r\n         * Returns true if scheduled.\r\n         */\r\n        RunOnceScheduler.prototype.isScheduled = function () {\r\n            return this.timeoutToken !== -1;\r\n        };\r\n        RunOnceScheduler.prototype.onTimeout = function () {\r\n            this.timeoutToken = -1;\r\n            if (this.runner) {\r\n                this.runner();\r\n            }\r\n        };\r\n        return RunOnceScheduler;\r\n    }());\r\n    exports.RunOnceScheduler = RunOnceScheduler;\r\n    function nfcall(fn) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        return new winjs_base_1.Promise(function (c, e) { return fn.apply(void 0, args.concat([function (err, result) { return err ? e(err) : c(result); }])); });\r\n    }\r\n    exports.nfcall = nfcall;\r\n    function ninvoke(thisArg, fn) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        return new winjs_base_1.Promise(function (c, e) { return fn.call.apply(fn, [thisArg].concat(args, [function (err, result) { return err ? e(err) : c(result); }])); });\r\n    }\r\n    exports.ninvoke = ninvoke;\r\n});\r\n\ndefine(\"vs/editor/common/model/editStack\", [\"require\", \"exports\", 'vs/base/common/errors'], function (require, exports, errors_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var EditStack = (function () {\r\n        function EditStack(model) {\r\n            this.model = model;\r\n            this.currentOpenStackElement = null;\r\n            this.past = [];\r\n            this.future = [];\r\n        }\r\n        EditStack.prototype.pushStackElement = function () {\r\n            if (this.currentOpenStackElement !== null) {\r\n                this.past.push(this.currentOpenStackElement);\r\n                this.currentOpenStackElement = null;\r\n            }\r\n        };\r\n        EditStack.prototype.clear = function () {\r\n            this.currentOpenStackElement = null;\r\n            this.past = [];\r\n            this.future = [];\r\n        };\r\n        EditStack.prototype.pushEditOperation = function (beforeCursorState, editOperations, cursorStateComputer) {\r\n            // No support for parallel universes :(\r\n            this.future = [];\r\n            if (!this.currentOpenStackElement) {\r\n                this.currentOpenStackElement = {\r\n                    beforeVersionId: this.model.getAlternativeVersionId(),\r\n                    beforeCursorState: beforeCursorState,\r\n                    editOperations: [],\r\n                    afterCursorState: null,\r\n                    afterVersionId: -1\r\n                };\r\n            }\r\n            var inverseEditOperation = {\r\n                operations: this.model.applyEdits(editOperations)\r\n            };\r\n            this.currentOpenStackElement.editOperations.push(inverseEditOperation);\r\n            try {\r\n                this.currentOpenStackElement.afterCursorState = cursorStateComputer ? cursorStateComputer(inverseEditOperation.operations) : null;\r\n            }\r\n            catch (e) {\r\n                errors_1.onUnexpectedError(e);\r\n                this.currentOpenStackElement.afterCursorState = null;\r\n            }\r\n            this.currentOpenStackElement.afterVersionId = this.model.getVersionId();\r\n            return this.currentOpenStackElement.afterCursorState;\r\n        };\r\n        EditStack.prototype.undo = function () {\r\n            this.pushStackElement();\r\n            if (this.past.length > 0) {\r\n                var pastStackElement = this.past.pop();\r\n                try {\r\n                    // Apply all operations in reverse order\r\n                    for (var i = pastStackElement.editOperations.length - 1; i >= 0; i--) {\r\n                        pastStackElement.editOperations[i] = {\r\n                            operations: this.model.applyEdits(pastStackElement.editOperations[i].operations)\r\n                        };\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    this.clear();\r\n                    return null;\r\n                }\r\n                this.future.push(pastStackElement);\r\n                return {\r\n                    selections: pastStackElement.beforeCursorState,\r\n                    recordedVersionId: pastStackElement.beforeVersionId\r\n                };\r\n            }\r\n            return null;\r\n        };\r\n        EditStack.prototype.redo = function () {\r\n            if (this.future.length > 0) {\r\n                if (this.currentOpenStackElement) {\r\n                    throw new Error('How is this possible?');\r\n                }\r\n                var futureStackElement = this.future.pop();\r\n                try {\r\n                    // Apply all operations\r\n                    for (var i = 0; i < futureStackElement.editOperations.length; i++) {\r\n                        futureStackElement.editOperations[i] = {\r\n                            operations: this.model.applyEdits(futureStackElement.editOperations[i].operations)\r\n                        };\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    this.clear();\r\n                    return null;\r\n                }\r\n                this.past.push(futureStackElement);\r\n                return {\r\n                    selections: futureStackElement.afterCursorState,\r\n                    recordedVersionId: futureStackElement.afterVersionId\r\n                };\r\n            }\r\n            return null;\r\n        };\r\n        return EditStack;\r\n    }());\r\n    exports.EditStack = EditStack;\r\n});\r\n\ndefine(\"vs/editor/common/model/tokensBinaryEncoding\", [\"require\", \"exports\", 'vs/base/common/errors', 'vs/base/common/strings', 'vs/editor/common/core/viewLineToken'], function (require, exports, errors_1, strings, viewLineToken_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var START_INDEX_MASK = 0xffffffff;\r\n    var TYPE_MASK = 0xffff;\r\n    var START_INDEX_OFFSET = 1;\r\n    var TYPE_OFFSET = Math.pow(2, 32);\r\n    var DEFAULT_VIEW_TOKEN = new viewLineToken_1.ViewLineToken(0, '');\r\n    var INFLATED_TOKENS_EMPTY_TEXT = [];\r\n    var DEFLATED_TOKENS_EMPTY_TEXT = [];\r\n    var INFLATED_TOKENS_NON_EMPTY_TEXT = [DEFAULT_VIEW_TOKEN];\r\n    var DEFLATED_TOKENS_NON_EMPTY_TEXT = [0];\r\n    var TokensInflatorMap = (function () {\r\n        function TokensInflatorMap() {\r\n            this._inflate = [''];\r\n            this._deflate = { '': 0 };\r\n        }\r\n        return TokensInflatorMap;\r\n    }());\r\n    exports.TokensInflatorMap = TokensInflatorMap;\r\n    var TokensBinaryEncoding = (function () {\r\n        function TokensBinaryEncoding() {\r\n        }\r\n        TokensBinaryEncoding.deflateArr = function (map, tokens) {\r\n            if (tokens.length === 0) {\r\n                return DEFLATED_TOKENS_EMPTY_TEXT;\r\n            }\r\n            if (tokens.length === 1 && tokens[0].startIndex === 0 && !tokens[0].type) {\r\n                return DEFLATED_TOKENS_NON_EMPTY_TEXT;\r\n            }\r\n            var i, len, deflatedToken, deflated, token, inflateMap = map._inflate, deflateMap = map._deflate, prevStartIndex = -1, result = new Array(tokens.length);\r\n            for (i = 0, len = tokens.length; i < len; i++) {\r\n                token = tokens[i];\r\n                if (token.startIndex <= prevStartIndex) {\r\n                    token.startIndex = prevStartIndex + 1;\r\n                    errors_1.onUnexpectedError({\r\n                        message: 'Invalid tokens detected',\r\n                        tokens: tokens\r\n                    });\r\n                }\r\n                if (deflateMap.hasOwnProperty(token.type)) {\r\n                    deflatedToken = deflateMap[token.type];\r\n                }\r\n                else {\r\n                    deflatedToken = inflateMap.length;\r\n                    deflateMap[token.type] = deflatedToken;\r\n                    inflateMap.push(token.type);\r\n                }\r\n                // http://stackoverflow.com/a/2803010\r\n                // All numbers in JavaScript are actually IEEE-754 compliant floating-point doubles.\r\n                // These have a 53-bit mantissa which should mean that any integer value with a magnitude\r\n                // of approximately 9 quadrillion or less -- more specifically, 9,007,199,254,740,991 --\r\n                // will be represented accurately.\r\n                // http://stackoverflow.com/a/6729252\r\n                // Bitwise operations cast numbers to 32bit representation in JS\r\n                // 32 bits for startIndex => up to 2^32 = 4,294,967,296\r\n                // 16 bits for token => up to 2^16 = 65,536\r\n                // [token][startIndex]\r\n                deflated = deflatedToken * TYPE_OFFSET + token.startIndex * START_INDEX_OFFSET;\r\n                result[i] = deflated;\r\n                prevStartIndex = token.startIndex;\r\n            }\r\n            return result;\r\n        };\r\n        TokensBinaryEncoding.getStartIndex = function (binaryEncodedToken) {\r\n            return (binaryEncodedToken / START_INDEX_OFFSET) & START_INDEX_MASK;\r\n        };\r\n        TokensBinaryEncoding.getType = function (map, binaryEncodedToken) {\r\n            var deflatedType = (binaryEncodedToken / TYPE_OFFSET) & TYPE_MASK;\r\n            if (deflatedType === 0) {\r\n                return strings.empty;\r\n            }\r\n            return map._inflate[deflatedType];\r\n        };\r\n        TokensBinaryEncoding.inflateArr = function (map, binaryEncodedTokens) {\r\n            if (binaryEncodedTokens.length === 0) {\r\n                return INFLATED_TOKENS_EMPTY_TEXT;\r\n            }\r\n            if (binaryEncodedTokens.length === 1 && binaryEncodedTokens[0] === 0) {\r\n                return INFLATED_TOKENS_NON_EMPTY_TEXT;\r\n            }\r\n            var result = [];\r\n            var inflateMap = map._inflate;\r\n            for (var i = 0, len = binaryEncodedTokens.length; i < len; i++) {\r\n                var deflated = binaryEncodedTokens[i];\r\n                var startIndex = (deflated / START_INDEX_OFFSET) & START_INDEX_MASK;\r\n                var deflatedType = (deflated / TYPE_OFFSET) & TYPE_MASK;\r\n                result.push(new viewLineToken_1.ViewLineToken(startIndex, inflateMap[deflatedType]));\r\n            }\r\n            return result;\r\n        };\r\n        TokensBinaryEncoding.findIndexOfOffset = function (binaryEncodedTokens, offset) {\r\n            return this.findIndexInSegmentsArray(binaryEncodedTokens, offset);\r\n        };\r\n        TokensBinaryEncoding.sliceAndInflate = function (map, binaryEncodedTokens, startOffset, endOffset, deltaStartIndex) {\r\n            if (binaryEncodedTokens.length === 0) {\r\n                return INFLATED_TOKENS_EMPTY_TEXT;\r\n            }\r\n            if (binaryEncodedTokens.length === 1 && binaryEncodedTokens[0] === 0) {\r\n                return INFLATED_TOKENS_NON_EMPTY_TEXT;\r\n            }\r\n            var startIndex = this.findIndexInSegmentsArray(binaryEncodedTokens, startOffset);\r\n            var result = [];\r\n            var inflateMap = map._inflate;\r\n            var originalToken = binaryEncodedTokens[startIndex];\r\n            var deflatedType = (originalToken / TYPE_OFFSET) & TYPE_MASK;\r\n            var newStartIndex = 0;\r\n            result.push(new viewLineToken_1.ViewLineToken(newStartIndex, inflateMap[deflatedType]));\r\n            for (var i = startIndex + 1, len = binaryEncodedTokens.length; i < len; i++) {\r\n                originalToken = binaryEncodedTokens[i];\r\n                var originalStartIndex = (originalToken / START_INDEX_OFFSET) & START_INDEX_MASK;\r\n                if (originalStartIndex >= endOffset) {\r\n                    break;\r\n                }\r\n                deflatedType = (originalToken / TYPE_OFFSET) & TYPE_MASK;\r\n                newStartIndex = originalStartIndex - startOffset + deltaStartIndex;\r\n                result.push(new viewLineToken_1.ViewLineToken(newStartIndex, inflateMap[deflatedType]));\r\n            }\r\n            return result;\r\n        };\r\n        TokensBinaryEncoding.findIndexInSegmentsArray = function (arr, desiredIndex) {\r\n            var low = 0, high = arr.length - 1, mid, value;\r\n            while (low < high) {\r\n                mid = low + Math.ceil((high - low) / 2);\r\n                value = arr[mid] & 0xffffffff;\r\n                if (value > desiredIndex) {\r\n                    high = mid - 1;\r\n                }\r\n                else {\r\n                    low = mid;\r\n                }\r\n            }\r\n            return low;\r\n        };\r\n        TokensBinaryEncoding.START_INDEX_MASK = START_INDEX_MASK;\r\n        TokensBinaryEncoding.TYPE_MASK = TYPE_MASK;\r\n        TokensBinaryEncoding.START_INDEX_OFFSET = START_INDEX_OFFSET;\r\n        TokensBinaryEncoding.TYPE_OFFSET = TYPE_OFFSET;\r\n        return TokensBinaryEncoding;\r\n    }());\r\n    exports.TokensBinaryEncoding = TokensBinaryEncoding;\r\n});\r\n\ndefine(\"vs/editor/common/model/modelLine\", [\"require\", \"exports\", 'vs/base/common/strings', 'vs/editor/common/model/tokensBinaryEncoding', 'vs/editor/common/core/modeTransition', 'vs/editor/common/core/viewLineToken'], function (require, exports, strings, tokensBinaryEncoding_1, modeTransition_1, viewLineToken_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var START_INDEX_MASK = tokensBinaryEncoding_1.TokensBinaryEncoding.START_INDEX_MASK;\r\n    var TYPE_MASK = tokensBinaryEncoding_1.TokensBinaryEncoding.TYPE_MASK;\r\n    var START_INDEX_OFFSET = tokensBinaryEncoding_1.TokensBinaryEncoding.START_INDEX_OFFSET;\r\n    var TYPE_OFFSET = tokensBinaryEncoding_1.TokensBinaryEncoding.TYPE_OFFSET;\r\n    var NO_OP_TOKENS_ADJUSTER = {\r\n        adjust: function () { },\r\n        finish: function () { }\r\n    };\r\n    var NO_OP_MARKERS_ADJUSTER = {\r\n        adjustDelta: function () { },\r\n        adjustSet: function () { },\r\n        finish: function () { }\r\n    };\r\n    var MarkerMoveSemantics;\r\n    (function (MarkerMoveSemantics) {\r\n        MarkerMoveSemantics[MarkerMoveSemantics[\"MarkerDefined\"] = 0] = \"MarkerDefined\";\r\n        MarkerMoveSemantics[MarkerMoveSemantics[\"ForceMove\"] = 1] = \"ForceMove\";\r\n        MarkerMoveSemantics[MarkerMoveSemantics[\"ForceStay\"] = 2] = \"ForceStay\";\r\n    })(MarkerMoveSemantics || (MarkerMoveSemantics = {}));\r\n    var ModelLine = (function () {\r\n        function ModelLine(lineNumber, text) {\r\n            this._lineNumber = lineNumber | 0;\r\n            this._text = text;\r\n            this._isInvalid = false;\r\n            this._state = null;\r\n            this._modeTransitions = null;\r\n            this._lineTokens = null;\r\n            this._markers = null;\r\n        }\r\n        Object.defineProperty(ModelLine.prototype, \"lineNumber\", {\r\n            get: function () { return this._lineNumber; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ModelLine.prototype, \"text\", {\r\n            get: function () { return this._text; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ModelLine.prototype, \"isInvalid\", {\r\n            get: function () { return this._isInvalid; },\r\n            set: function (value) { this._isInvalid = value; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        // --- BEGIN STATE\r\n        ModelLine.prototype.setState = function (state) {\r\n            this._state = state;\r\n        };\r\n        ModelLine.prototype.getState = function () {\r\n            return this._state || null;\r\n        };\r\n        // --- END STATE\r\n        // --- BEGIN MODE TRANSITIONS\r\n        ModelLine.prototype.getModeTransitions = function (topLevelMode) {\r\n            if (this._modeTransitions) {\r\n                return this._modeTransitions;\r\n            }\r\n            else {\r\n                return [new modeTransition_1.ModeTransition(0, topLevelMode)];\r\n            }\r\n        };\r\n        // --- END MODE TRANSITIONS\r\n        // --- BEGIN TOKENS\r\n        ModelLine.prototype.setTokens = function (map, tokens, topLevelMode, modeTransitions) {\r\n            this._lineTokens = toLineTokensFromInflated(map, tokens, this._text.length);\r\n            this._modeTransitions = toModeTransitions(topLevelMode, modeTransitions);\r\n        };\r\n        ModelLine.prototype._setLineTokensFromDeflated = function (map, tokens) {\r\n            this._lineTokens = toLineTokensFromDeflated(map, tokens, this._text.length);\r\n        };\r\n        ModelLine.prototype.getTokens = function () {\r\n            if (this._lineTokens) {\r\n                return this._lineTokens;\r\n            }\r\n            if (this._text.length === 0) {\r\n                return EmptyLineTokens.INSTANCE;\r\n            }\r\n            return DefaultLineTokens.INSTANCE;\r\n        };\r\n        // --- END TOKENS\r\n        ModelLine.prototype._createTokensAdjuster = function () {\r\n            if (!this._lineTokens) {\r\n                // This line does not have real tokens, so there is nothing to adjust\r\n                return NO_OP_TOKENS_ADJUSTER;\r\n            }\r\n            var lineTokens = this._lineTokens;\r\n            var tokens = lineTokens.getBinaryEncodedTokens();\r\n            var tokensLength = tokens.length;\r\n            var tokensIndex = 0;\r\n            var currentTokenStartIndex = 0;\r\n            var adjust = function (toColumn, delta, minimumAllowedColumn) {\r\n                // console.log('before call: tokensIndex: ' + tokensIndex + ': ' + String(this.getTokens()));\r\n                // console.log('adjustTokens: ' + toColumn + ' with delta: ' + delta + ' and [' + minimumAllowedColumn + ']');\r\n                // console.log('currentTokenStartIndex: ' + currentTokenStartIndex);\r\n                var minimumAllowedIndex = minimumAllowedColumn - 1;\r\n                while (currentTokenStartIndex < toColumn && tokensIndex < tokensLength) {\r\n                    if (currentTokenStartIndex > 0 && delta !== 0) {\r\n                        // adjust token's `startIndex` by `delta`\r\n                        var deflatedType = (tokens[tokensIndex] / TYPE_OFFSET) & TYPE_MASK;\r\n                        var newStartIndex = Math.max(minimumAllowedIndex, currentTokenStartIndex + delta);\r\n                        var newToken = deflatedType * TYPE_OFFSET + newStartIndex * START_INDEX_OFFSET;\r\n                        if (delta < 0) {\r\n                            // pop all previous tokens that have become `collapsed`\r\n                            while (tokensIndex > 0) {\r\n                                var prevTokenStartIndex = (tokens[tokensIndex - 1] / START_INDEX_OFFSET) & START_INDEX_MASK;\r\n                                if (prevTokenStartIndex >= newStartIndex) {\r\n                                    // Token at `tokensIndex` - 1 is now `collapsed` => pop it\r\n                                    tokens.splice(tokensIndex - 1, 1);\r\n                                    tokensLength--;\r\n                                    tokensIndex--;\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        tokens[tokensIndex] = newToken;\r\n                    }\r\n                    tokensIndex++;\r\n                    if (tokensIndex < tokensLength) {\r\n                        currentTokenStartIndex = (tokens[tokensIndex] / START_INDEX_OFFSET) & START_INDEX_MASK;\r\n                    }\r\n                }\r\n                // console.log('after call: tokensIndex: ' + tokensIndex + ': ' + String(this.getTokens()));\r\n            };\r\n            var finish = function (delta, lineTextLength) {\r\n                adjust(Number.MAX_VALUE, delta, 1);\r\n            };\r\n            return {\r\n                adjust: adjust,\r\n                finish: finish\r\n            };\r\n        };\r\n        ModelLine.prototype._setText = function (text) {\r\n            this._text = text;\r\n            if (this._lineTokens) {\r\n                var map = this._lineTokens.getBinaryEncodedTokensMap(), tokens = this._lineTokens.getBinaryEncodedTokens(), lineTextLength = this._text.length;\r\n                // Remove overflowing tokens\r\n                while (tokens.length > 0) {\r\n                    var lastTokenStartIndex = (tokens[tokens.length - 1] / START_INDEX_OFFSET) & START_INDEX_MASK;\r\n                    if (lastTokenStartIndex < lineTextLength) {\r\n                        // Valid token\r\n                        break;\r\n                    }\r\n                    // This token now overflows the text => remove it\r\n                    tokens.pop();\r\n                }\r\n                this._setLineTokensFromDeflated(map, tokens);\r\n            }\r\n        };\r\n        // private _printMarkers(): string {\r\n        // \tif (!this._markers) {\r\n        // \t\treturn '[]';\r\n        // \t}\r\n        // \tif (this._markers.length === 0) {\r\n        // \t\treturn '[]';\r\n        // \t}\r\n        // \tvar markers = this._markers;\r\n        // \tvar printMarker = (m:ILineMarker) => {\r\n        // \t\tif (m.stickToPreviousCharacter) {\r\n        // \t\t\treturn '|' + m.column;\r\n        // \t\t}\r\n        // \t\treturn m.column + '|';\r\n        // \t};\r\n        // \treturn '[' + markers.map(printMarker).join(', ') + ']';\r\n        // }\r\n        ModelLine.prototype._createMarkersAdjuster = function (changedMarkers) {\r\n            var _this = this;\r\n            if (!this._markers) {\r\n                return NO_OP_MARKERS_ADJUSTER;\r\n            }\r\n            if (this._markers.length === 0) {\r\n                return NO_OP_MARKERS_ADJUSTER;\r\n            }\r\n            this._markers.sort(ModelLine._compareMarkers);\r\n            var markers = this._markers;\r\n            var markersLength = markers.length;\r\n            var markersIndex = 0;\r\n            var marker = markers[markersIndex];\r\n            // console.log('------------- INITIAL MARKERS: ' + this._printMarkers());\r\n            var adjustMarkerBeforeColumn = function (toColumn, moveSemantics) {\r\n                if (marker.column < toColumn) {\r\n                    return true;\r\n                }\r\n                if (marker.column > toColumn) {\r\n                    return false;\r\n                }\r\n                if (moveSemantics === MarkerMoveSemantics.ForceMove) {\r\n                    return false;\r\n                }\r\n                if (moveSemantics === MarkerMoveSemantics.ForceStay) {\r\n                    return true;\r\n                }\r\n                return marker.stickToPreviousCharacter;\r\n            };\r\n            var adjustDelta = function (toColumn, delta, minimumAllowedColumn, moveSemantics) {\r\n                // console.log('------------------------------');\r\n                // console.log('adjustDelta called: toColumn: ' + toColumn + ', delta: ' + delta + ', minimumAllowedColumn: ' + minimumAllowedColumn + ', moveSemantics: ' + MarkerMoveSemantics[moveSemantics]);\r\n                // console.log('BEFORE::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\r\n                while (markersIndex < markersLength && adjustMarkerBeforeColumn(toColumn, moveSemantics)) {\r\n                    if (delta !== 0) {\r\n                        var newColumn = Math.max(minimumAllowedColumn, marker.column + delta);\r\n                        if (marker.column !== newColumn) {\r\n                            changedMarkers[marker.id] = true;\r\n                            marker.oldLineNumber = marker.oldLineNumber || _this._lineNumber;\r\n                            marker.oldColumn = marker.oldColumn || marker.column;\r\n                            marker.column = newColumn;\r\n                        }\r\n                    }\r\n                    markersIndex++;\r\n                    if (markersIndex < markersLength) {\r\n                        marker = markers[markersIndex];\r\n                    }\r\n                }\r\n                // console.log('AFTER::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\r\n            };\r\n            var adjustSet = function (toColumn, newColumn, moveSemantics) {\r\n                // console.log('------------------------------');\r\n                // console.log('adjustSet called: toColumn: ' + toColumn + ', newColumn: ' + newColumn + ', moveSemantics: ' + MarkerMoveSemantics[moveSemantics]);\r\n                // console.log('BEFORE::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\r\n                while (markersIndex < markersLength && adjustMarkerBeforeColumn(toColumn, moveSemantics)) {\r\n                    if (marker.column !== newColumn) {\r\n                        changedMarkers[marker.id] = true;\r\n                        marker.oldLineNumber = marker.oldLineNumber || _this._lineNumber;\r\n                        marker.oldColumn = marker.oldColumn || marker.column;\r\n                        marker.column = newColumn;\r\n                    }\r\n                    markersIndex++;\r\n                    if (markersIndex < markersLength) {\r\n                        marker = markers[markersIndex];\r\n                    }\r\n                }\r\n                // console.log('AFTER::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\r\n            };\r\n            var finish = function (delta, lineTextLength) {\r\n                adjustDelta(Number.MAX_VALUE, delta, 1, MarkerMoveSemantics.MarkerDefined);\r\n                // console.log('------------- FINAL MARKERS: ' + this._printMarkers());\r\n            };\r\n            return {\r\n                adjustDelta: adjustDelta,\r\n                adjustSet: adjustSet,\r\n                finish: finish\r\n            };\r\n        };\r\n        ModelLine.prototype.applyEdits = function (changedMarkers, edits) {\r\n            var deltaColumn = 0;\r\n            var resultText = this._text;\r\n            var tokensAdjuster = this._createTokensAdjuster();\r\n            var markersAdjuster = this._createMarkersAdjuster(changedMarkers);\r\n            for (var i = 0, len = edits.length; i < len; i++) {\r\n                var edit = edits[i];\r\n                // console.log();\r\n                // console.log('=============================');\r\n                // console.log('EDIT #' + i + ' [ ' + edit.startColumn + ' -> ' + edit.endColumn + ' ] : <<<' + edit.text + '>>>, forceMoveMarkers: ' + edit.forceMoveMarkers);\r\n                // console.log('deltaColumn: ' + deltaColumn);\r\n                var startColumn = deltaColumn + edit.startColumn;\r\n                var endColumn = deltaColumn + edit.endColumn;\r\n                var deletingCnt = endColumn - startColumn;\r\n                var insertingCnt = edit.text.length;\r\n                // Adjust tokens & markers before this edit\r\n                // console.log('Adjust tokens & markers before this edit');\r\n                tokensAdjuster.adjust(edit.startColumn - 1, deltaColumn, 1);\r\n                markersAdjuster.adjustDelta(edit.startColumn, deltaColumn, 1, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : (deletingCnt > 0 ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined));\r\n                // Adjust tokens & markers for the common part of this edit\r\n                var commonLength = Math.min(deletingCnt, insertingCnt);\r\n                if (commonLength > 0) {\r\n                    // console.log('Adjust tokens & markers for the common part of this edit');\r\n                    tokensAdjuster.adjust(edit.startColumn - 1 + commonLength, deltaColumn, startColumn);\r\n                    if (!edit.forceMoveMarkers) {\r\n                        markersAdjuster.adjustDelta(edit.startColumn + commonLength, deltaColumn, startColumn, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : (deletingCnt > insertingCnt ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined));\r\n                    }\r\n                }\r\n                // Perform the edit & update `deltaColumn`\r\n                resultText = resultText.substring(0, startColumn - 1) + edit.text + resultText.substring(endColumn - 1);\r\n                deltaColumn += insertingCnt - deletingCnt;\r\n                // Adjust tokens & markers inside this edit\r\n                // console.log('Adjust tokens & markers inside this edit');\r\n                tokensAdjuster.adjust(edit.endColumn, deltaColumn, startColumn);\r\n                markersAdjuster.adjustSet(edit.endColumn, startColumn + insertingCnt, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : MarkerMoveSemantics.MarkerDefined);\r\n            }\r\n            // Wrap up tokens & markers; adjust remaining if needed\r\n            tokensAdjuster.finish(deltaColumn, resultText.length);\r\n            markersAdjuster.finish(deltaColumn, resultText.length);\r\n            // Save the resulting text\r\n            this._setText(resultText);\r\n            return deltaColumn;\r\n        };\r\n        ModelLine.prototype.split = function (changedMarkers, splitColumn, forceMoveMarkers) {\r\n            // console.log('--> split @ ' + splitColumn + '::: ' + this._printMarkers());\r\n            var myText = this._text.substring(0, splitColumn - 1);\r\n            var otherText = this._text.substring(splitColumn - 1);\r\n            var otherMarkers = null;\r\n            if (this._markers) {\r\n                this._markers.sort(ModelLine._compareMarkers);\r\n                for (var i = 0, len = this._markers.length; i < len; i++) {\r\n                    var marker = this._markers[i];\r\n                    if (marker.column > splitColumn\r\n                        || (marker.column === splitColumn\r\n                            && (forceMoveMarkers\r\n                                || !marker.stickToPreviousCharacter))) {\r\n                        var myMarkers = this._markers.slice(0, i);\r\n                        otherMarkers = this._markers.slice(i);\r\n                        this._markers = myMarkers;\r\n                        break;\r\n                    }\r\n                }\r\n                if (otherMarkers) {\r\n                    for (var i = 0, len = otherMarkers.length; i < len; i++) {\r\n                        var marker = otherMarkers[i];\r\n                        changedMarkers[marker.id] = true;\r\n                        marker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\r\n                        marker.oldColumn = marker.oldColumn || marker.column;\r\n                        marker.column -= splitColumn - 1;\r\n                    }\r\n                }\r\n            }\r\n            this._setText(myText);\r\n            var otherLine = new ModelLine(this._lineNumber + 1, otherText);\r\n            if (otherMarkers) {\r\n                otherLine.addMarkers(otherMarkers);\r\n            }\r\n            return otherLine;\r\n        };\r\n        ModelLine.prototype.append = function (changedMarkers, other) {\r\n            // console.log('--> append: THIS :: ' + this._printMarkers());\r\n            // console.log('--> append: OTHER :: ' + this._printMarkers());\r\n            var thisTextLength = this._text.length;\r\n            this._setText(this._text + other._text);\r\n            var otherLineTokens = other._lineTokens;\r\n            if (otherLineTokens) {\r\n                // Other has real tokens\r\n                var otherTokens = otherLineTokens.getBinaryEncodedTokens();\r\n                // Adjust other tokens\r\n                if (thisTextLength > 0) {\r\n                    for (var i = 0, len = otherTokens.length; i < len; i++) {\r\n                        var token = otherTokens[i];\r\n                        var deflatedStartIndex = (token / START_INDEX_OFFSET) & START_INDEX_MASK;\r\n                        var deflatedType = (token / TYPE_OFFSET) & TYPE_MASK;\r\n                        var newStartIndex = deflatedStartIndex + thisTextLength;\r\n                        var newToken = deflatedType * TYPE_OFFSET + newStartIndex * START_INDEX_OFFSET;\r\n                        otherTokens[i] = newToken;\r\n                    }\r\n                }\r\n                // Append other tokens\r\n                var myLineTokens = this._lineTokens;\r\n                if (myLineTokens) {\r\n                    // I have real tokens\r\n                    this._setLineTokensFromDeflated(myLineTokens.getBinaryEncodedTokensMap(), myLineTokens.getBinaryEncodedTokens().concat(otherTokens));\r\n                }\r\n                else {\r\n                    // I don't have real tokens\r\n                    this._setLineTokensFromDeflated(otherLineTokens.getBinaryEncodedTokensMap(), otherTokens);\r\n                }\r\n            }\r\n            if (other._markers) {\r\n                // Other has markers\r\n                var otherMarkers = other._markers;\r\n                // Adjust other markers\r\n                for (var i = 0, len = otherMarkers.length; i < len; i++) {\r\n                    var marker = otherMarkers[i];\r\n                    changedMarkers[marker.id] = true;\r\n                    marker.oldLineNumber = marker.oldLineNumber || other.lineNumber;\r\n                    marker.oldColumn = marker.oldColumn || marker.column;\r\n                    marker.column += thisTextLength;\r\n                }\r\n                this.addMarkers(otherMarkers);\r\n            }\r\n        };\r\n        ModelLine.prototype.addMarker = function (marker) {\r\n            marker.line = this;\r\n            if (!this._markers) {\r\n                this._markers = [marker];\r\n            }\r\n            else {\r\n                this._markers.push(marker);\r\n            }\r\n        };\r\n        ModelLine.prototype.addMarkers = function (markers) {\r\n            if (markers.length === 0) {\r\n                return;\r\n            }\r\n            var i, len;\r\n            for (i = 0, len = markers.length; i < len; i++) {\r\n                markers[i].line = this;\r\n            }\r\n            if (!this._markers) {\r\n                this._markers = markers.slice(0);\r\n            }\r\n            else {\r\n                this._markers = this._markers.concat(markers);\r\n            }\r\n        };\r\n        ModelLine._compareMarkers = function (a, b) {\r\n            if (a.column === b.column) {\r\n                return (a.stickToPreviousCharacter ? 0 : 1) - (b.stickToPreviousCharacter ? 0 : 1);\r\n            }\r\n            return a.column - b.column;\r\n        };\r\n        ModelLine.prototype.removeMarker = function (marker) {\r\n            if (!this._markers) {\r\n                return;\r\n            }\r\n            var index = this._indexOfMarkerId(marker.id);\r\n            if (index >= 0) {\r\n                marker.line = null;\r\n                this._markers.splice(index, 1);\r\n            }\r\n            if (this._markers.length === 0) {\r\n                this._markers = null;\r\n            }\r\n        };\r\n        ModelLine.prototype.removeMarkers = function (deleteMarkers) {\r\n            if (!this._markers) {\r\n                return;\r\n            }\r\n            for (var i = 0, len = this._markers.length; i < len; i++) {\r\n                var marker = this._markers[i];\r\n                if (deleteMarkers[marker.id]) {\r\n                    marker.line = null;\r\n                    this._markers.splice(i, 1);\r\n                    len--;\r\n                    i--;\r\n                }\r\n            }\r\n            if (this._markers.length === 0) {\r\n                this._markers = null;\r\n            }\r\n        };\r\n        ModelLine.prototype.getMarkers = function () {\r\n            if (!this._markers) {\r\n                return [];\r\n            }\r\n            return this._markers.slice(0);\r\n        };\r\n        ModelLine.prototype.updateLineNumber = function (changedMarkers, newLineNumber) {\r\n            if (this._markers) {\r\n                var markers = this._markers, i, len, marker;\r\n                for (i = 0, len = markers.length; i < len; i++) {\r\n                    marker = markers[i];\r\n                    changedMarkers[marker.id] = true;\r\n                    marker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\r\n                }\r\n            }\r\n            this._lineNumber = newLineNumber;\r\n        };\r\n        ModelLine.prototype.deleteLine = function (changedMarkers, setMarkersColumn, setMarkersOldLineNumber) {\r\n            // console.log('--> deleteLine: ');\r\n            if (this._markers) {\r\n                var markers = this._markers, i, len, marker;\r\n                // Mark all these markers as changed\r\n                for (i = 0, len = markers.length; i < len; i++) {\r\n                    marker = markers[i];\r\n                    changedMarkers[marker.id] = true;\r\n                    marker.oldColumn = marker.oldColumn || marker.column;\r\n                    marker.oldLineNumber = marker.oldLineNumber || setMarkersOldLineNumber;\r\n                    marker.column = setMarkersColumn;\r\n                }\r\n                return markers;\r\n            }\r\n            return [];\r\n        };\r\n        ModelLine.prototype._indexOfMarkerId = function (markerId) {\r\n            var markers = this._markers;\r\n            for (var i = 0, len = markers.length; i < len; i++) {\r\n                if (markers[i].id === markerId) {\r\n                    return i;\r\n                }\r\n            }\r\n        };\r\n        return ModelLine;\r\n    }());\r\n    exports.ModelLine = ModelLine;\r\n    function toLineTokensFromInflated(map, tokens, textLength) {\r\n        if (textLength === 0) {\r\n            return null;\r\n        }\r\n        if (!tokens || tokens.length === 0) {\r\n            return null;\r\n        }\r\n        if (tokens.length === 1) {\r\n            if (tokens[0].startIndex === 0 && tokens[0].type === '') {\r\n                return null;\r\n            }\r\n        }\r\n        var deflated = tokensBinaryEncoding_1.TokensBinaryEncoding.deflateArr(map, tokens);\r\n        return new LineTokens(map, deflated);\r\n    }\r\n    function toLineTokensFromDeflated(map, tokens, textLength) {\r\n        if (textLength === 0) {\r\n            return null;\r\n        }\r\n        if (!tokens || tokens.length === 0) {\r\n            return null;\r\n        }\r\n        if (tokens.length === 1) {\r\n            if (tokens[0] === 0) {\r\n                return null;\r\n            }\r\n        }\r\n        return new LineTokens(map, tokens);\r\n    }\r\n    var LineTokens = (function () {\r\n        function LineTokens(map, tokens) {\r\n            this.map = map;\r\n            this._tokens = tokens;\r\n        }\r\n        LineTokens.prototype.getBinaryEncodedTokensMap = function () {\r\n            return this.map;\r\n        };\r\n        LineTokens.prototype.getBinaryEncodedTokens = function () {\r\n            return this._tokens;\r\n        };\r\n        LineTokens.prototype.getTokenCount = function () {\r\n            return this._tokens.length;\r\n        };\r\n        LineTokens.prototype.getTokenStartIndex = function (tokenIndex) {\r\n            return tokensBinaryEncoding_1.TokensBinaryEncoding.getStartIndex(this._tokens[tokenIndex]);\r\n        };\r\n        LineTokens.prototype.getTokenType = function (tokenIndex) {\r\n            return tokensBinaryEncoding_1.TokensBinaryEncoding.getType(this.map, this._tokens[tokenIndex]);\r\n        };\r\n        LineTokens.prototype.getTokenEndIndex = function (tokenIndex, textLength) {\r\n            if (tokenIndex + 1 < this._tokens.length) {\r\n                return tokensBinaryEncoding_1.TokensBinaryEncoding.getStartIndex(this._tokens[tokenIndex + 1]);\r\n            }\r\n            return textLength;\r\n        };\r\n        LineTokens.prototype.equals = function (other) {\r\n            if (other instanceof LineTokens) {\r\n                if (this.map !== other.map) {\r\n                    return false;\r\n                }\r\n                if (this._tokens.length !== other._tokens.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0, len = this._tokens.length; i < len; i++) {\r\n                    if (this._tokens[i] !== other._tokens[i]) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            if (!(other instanceof LineTokens)) {\r\n                return false;\r\n            }\r\n        };\r\n        LineTokens.prototype.findIndexOfOffset = function (offset) {\r\n            return tokensBinaryEncoding_1.TokensBinaryEncoding.findIndexOfOffset(this._tokens, offset);\r\n        };\r\n        LineTokens.prototype.inflate = function () {\r\n            return tokensBinaryEncoding_1.TokensBinaryEncoding.inflateArr(this.map, this._tokens);\r\n        };\r\n        LineTokens.prototype.sliceAndInflate = function (startOffset, endOffset, deltaStartIndex) {\r\n            return tokensBinaryEncoding_1.TokensBinaryEncoding.sliceAndInflate(this.map, this._tokens, startOffset, endOffset, deltaStartIndex);\r\n        };\r\n        return LineTokens;\r\n    }());\r\n    exports.LineTokens = LineTokens;\r\n    var EmptyLineTokens = (function () {\r\n        function EmptyLineTokens() {\r\n        }\r\n        EmptyLineTokens.prototype.getTokenCount = function () {\r\n            return 0;\r\n        };\r\n        EmptyLineTokens.prototype.getTokenStartIndex = function (tokenIndex) {\r\n            return 0;\r\n        };\r\n        EmptyLineTokens.prototype.getTokenType = function (tokenIndex) {\r\n            return strings.empty;\r\n        };\r\n        EmptyLineTokens.prototype.getTokenEndIndex = function (tokenIndex, textLength) {\r\n            return 0;\r\n        };\r\n        EmptyLineTokens.prototype.equals = function (other) {\r\n            return other === this;\r\n        };\r\n        EmptyLineTokens.prototype.findIndexOfOffset = function (offset) {\r\n            return 0;\r\n        };\r\n        EmptyLineTokens.prototype.inflate = function () {\r\n            return [];\r\n        };\r\n        EmptyLineTokens.prototype.sliceAndInflate = function (startOffset, endOffset, deltaStartIndex) {\r\n            return [];\r\n        };\r\n        EmptyLineTokens.INSTANCE = new EmptyLineTokens();\r\n        return EmptyLineTokens;\r\n    }());\r\n    var DefaultLineTokens = (function () {\r\n        function DefaultLineTokens() {\r\n        }\r\n        DefaultLineTokens.prototype.getTokenCount = function () {\r\n            return 1;\r\n        };\r\n        DefaultLineTokens.prototype.getTokenStartIndex = function (tokenIndex) {\r\n            return 0;\r\n        };\r\n        DefaultLineTokens.prototype.getTokenType = function (tokenIndex) {\r\n            return strings.empty;\r\n        };\r\n        DefaultLineTokens.prototype.getTokenEndIndex = function (tokenIndex, textLength) {\r\n            return textLength;\r\n        };\r\n        DefaultLineTokens.prototype.equals = function (other) {\r\n            return this === other;\r\n        };\r\n        DefaultLineTokens.prototype.findIndexOfOffset = function (offset) {\r\n            return 0;\r\n        };\r\n        DefaultLineTokens.prototype.inflate = function () {\r\n            return [new viewLineToken_1.ViewLineToken(0, '')];\r\n        };\r\n        DefaultLineTokens.prototype.sliceAndInflate = function (startOffset, endOffset, deltaStartIndex) {\r\n            return [new viewLineToken_1.ViewLineToken(0, '')];\r\n        };\r\n        DefaultLineTokens.INSTANCE = new DefaultLineTokens();\r\n        return DefaultLineTokens;\r\n    }());\r\n    exports.DefaultLineTokens = DefaultLineTokens;\r\n    function toModeTransitions(topLevelMode, modeTransitions) {\r\n        if (!modeTransitions || modeTransitions.length === 0) {\r\n            return null;\r\n        }\r\n        else if (modeTransitions.length === 1 && modeTransitions[0].startIndex === 0 && modeTransitions[0].mode === topLevelMode) {\r\n            return null;\r\n        }\r\n        return modeTransitions;\r\n    }\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/common/modes/languageFeatureRegistry\", [\"require\", \"exports\", 'vs/base/common/event', 'vs/editor/common/modes/languageSelector'], function (require, exports, event_1, languageSelector_1) {\r\n    'use strict';\r\n    var LanguageFeatureRegistry = (function () {\r\n        function LanguageFeatureRegistry() {\r\n            this._clock = 0;\r\n            this._entries = [];\r\n            this._onDidChange = new event_1.Emitter();\r\n        }\r\n        Object.defineProperty(LanguageFeatureRegistry.prototype, \"onDidChange\", {\r\n            get: function () {\r\n                return this._onDidChange.event;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        LanguageFeatureRegistry.prototype.register = function (selector, provider, isBuiltin) {\r\n            var _this = this;\r\n            if (isBuiltin === void 0) { isBuiltin = false; }\r\n            var entry = {\r\n                selector: selector,\r\n                provider: provider,\r\n                isBuiltin: isBuiltin,\r\n                _score: -1,\r\n                _time: this._clock++\r\n            };\r\n            this._entries.push(entry);\r\n            this._lastCandidate = undefined;\r\n            this._onDidChange.fire(this._entries.length);\r\n            return {\r\n                dispose: function () {\r\n                    if (entry) {\r\n                        var idx = _this._entries.indexOf(entry);\r\n                        if (idx >= 0) {\r\n                            _this._entries.splice(idx, 1);\r\n                            _this._lastCandidate = undefined;\r\n                            _this._onDidChange.fire(_this._entries.length);\r\n                            entry = undefined;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        LanguageFeatureRegistry.prototype.has = function (model) {\r\n            return this.all(model).length > 0;\r\n        };\r\n        LanguageFeatureRegistry.prototype.all = function (model) {\r\n            if (!model || model.isTooLargeForHavingAMode()) {\r\n                return [];\r\n            }\r\n            this._updateScores(model);\r\n            var result = [];\r\n            // from registry\r\n            for (var _i = 0, _a = this._entries; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                if (entry._score > 0) {\r\n                    result.push(entry.provider);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        LanguageFeatureRegistry.prototype.ordered = function (model) {\r\n            var result = [];\r\n            this._orderedForEach(model, function (entry) { return result.push(entry.provider); });\r\n            return result;\r\n        };\r\n        LanguageFeatureRegistry.prototype.orderedGroups = function (model) {\r\n            var result = [];\r\n            var lastBucket;\r\n            var lastBucketScore;\r\n            this._orderedForEach(model, function (entry) {\r\n                if (lastBucket && lastBucketScore === entry._score) {\r\n                    lastBucket.push(entry.provider);\r\n                }\r\n                else {\r\n                    lastBucketScore = entry._score;\r\n                    lastBucket = [entry.provider];\r\n                    result.push(lastBucket);\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n        LanguageFeatureRegistry.prototype._orderedForEach = function (model, callback) {\r\n            if (!model || model.isTooLargeForHavingAMode()) {\r\n                return;\r\n            }\r\n            this._updateScores(model);\r\n            for (var from = 0; from < this._entries.length; from++) {\r\n                var entry = this._entries[from];\r\n                if (entry._score > 0) {\r\n                    callback(entry);\r\n                }\r\n            }\r\n        };\r\n        LanguageFeatureRegistry.prototype._updateScores = function (model) {\r\n            var candidate = {\r\n                uri: model.uri.toString(),\r\n                language: model.getModeId()\r\n            };\r\n            if (this._lastCandidate\r\n                && this._lastCandidate.language === candidate.language\r\n                && this._lastCandidate.uri === candidate.uri) {\r\n                // nothing has changed\r\n                return;\r\n            }\r\n            this._lastCandidate = candidate;\r\n            for (var _i = 0, _a = this._entries; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                entry._score = languageSelector_1.score(entry.selector, model.uri, model.getModeId());\r\n                if (entry.isBuiltin && entry._score > 0) {\r\n                    entry._score = .5;\r\n                    entry._time = -1;\r\n                }\r\n            }\r\n            // needs sorting\r\n            this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\r\n        };\r\n        LanguageFeatureRegistry._compareByScoreAndTime = function (a, b) {\r\n            if (a._score < b._score) {\r\n                return 1;\r\n            }\r\n            else if (a._score > b._score) {\r\n                return -1;\r\n            }\r\n            else if (a._time < b._time) {\r\n                return 1;\r\n            }\r\n            else if (a._time > b._time) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        };\r\n        return LanguageFeatureRegistry;\r\n    }());\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = LanguageFeatureRegistry;\r\n});\r\n\ndefine(\"vs/editor/common/modes\", [\"require\", \"exports\", 'vs/editor/common/modes/languageFeatureRegistry'], function (require, exports, languageFeatureRegistry_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * @internal\r\n     */\r\n    (function (MutableSupport) {\r\n        MutableSupport[MutableSupport[\"RichEditSupport\"] = 1] = \"RichEditSupport\";\r\n        MutableSupport[MutableSupport[\"TokenizationSupport\"] = 2] = \"TokenizationSupport\";\r\n    })(exports.MutableSupport || (exports.MutableSupport = {}));\r\n    var MutableSupport = exports.MutableSupport;\r\n    /**\r\n     * @internal\r\n     */\r\n    function mutableSupportToString(registerableSupport) {\r\n        if (registerableSupport === MutableSupport.RichEditSupport) {\r\n            return 'richEditSupport';\r\n        }\r\n        if (registerableSupport === MutableSupport.TokenizationSupport) {\r\n            return 'tokenizationSupport';\r\n        }\r\n        throw new Error('Illegal argument!');\r\n    }\r\n    exports.mutableSupportToString = mutableSupportToString;\r\n    (function (DocumentHighlightKind) {\r\n        DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\r\n        DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\r\n        DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\r\n    })(exports.DocumentHighlightKind || (exports.DocumentHighlightKind = {}));\r\n    var DocumentHighlightKind = exports.DocumentHighlightKind;\r\n    (function (SymbolKind) {\r\n        SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\r\n        SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\r\n        SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\r\n        SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\r\n        SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\r\n        SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\r\n        SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\r\n        SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\r\n        SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\r\n        SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\r\n        SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\r\n        SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\r\n        SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\r\n        SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\r\n        SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\r\n        SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\r\n        SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\r\n        SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\r\n        SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\r\n        SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\r\n        SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\r\n    })(exports.SymbolKind || (exports.SymbolKind = {}));\r\n    var SymbolKind = exports.SymbolKind;\r\n    /**\r\n     * @internal\r\n     */\r\n    var SymbolKind;\r\n    (function (SymbolKind) {\r\n        /**\r\n         * @internal\r\n         */\r\n        function from(kind) {\r\n            switch (kind) {\r\n                case SymbolKind.Method:\r\n                    return 'method';\r\n                case SymbolKind.Function:\r\n                    return 'function';\r\n                case SymbolKind.Constructor:\r\n                    return 'constructor';\r\n                case SymbolKind.Variable:\r\n                    return 'variable';\r\n                case SymbolKind.Class:\r\n                    return 'class';\r\n                case SymbolKind.Interface:\r\n                    return 'interface';\r\n                case SymbolKind.Namespace:\r\n                    return 'namespace';\r\n                case SymbolKind.Package:\r\n                    return 'package';\r\n                case SymbolKind.Module:\r\n                    return 'module';\r\n                case SymbolKind.Property:\r\n                    return 'property';\r\n                case SymbolKind.Enum:\r\n                    return 'enum';\r\n                case SymbolKind.String:\r\n                    return 'string';\r\n                case SymbolKind.File:\r\n                    return 'file';\r\n                case SymbolKind.Array:\r\n                    return 'array';\r\n                case SymbolKind.Number:\r\n                    return 'number';\r\n                case SymbolKind.Boolean:\r\n                    return 'boolean';\r\n                case SymbolKind.Object:\r\n                    return 'object';\r\n                case SymbolKind.Key:\r\n                    return 'key';\r\n                case SymbolKind.Null:\r\n                    return 'null';\r\n            }\r\n            return 'property';\r\n        }\r\n        SymbolKind.from = from;\r\n        /**\r\n         * @internal\r\n         */\r\n        function to(type) {\r\n            switch (type) {\r\n                case 'method':\r\n                    return SymbolKind.Method;\r\n                case 'function':\r\n                    return SymbolKind.Function;\r\n                case 'constructor':\r\n                    return SymbolKind.Constructor;\r\n                case 'variable':\r\n                    return SymbolKind.Variable;\r\n                case 'class':\r\n                    return SymbolKind.Class;\r\n                case 'interface':\r\n                    return SymbolKind.Interface;\r\n                case 'namespace':\r\n                    return SymbolKind.Namespace;\r\n                case 'package':\r\n                    return SymbolKind.Package;\r\n                case 'module':\r\n                    return SymbolKind.Module;\r\n                case 'property':\r\n                    return SymbolKind.Property;\r\n                case 'enum':\r\n                    return SymbolKind.Enum;\r\n                case 'string':\r\n                    return SymbolKind.String;\r\n                case 'file':\r\n                    return SymbolKind.File;\r\n                case 'array':\r\n                    return SymbolKind.Array;\r\n                case 'number':\r\n                    return SymbolKind.Number;\r\n                case 'boolean':\r\n                    return SymbolKind.Boolean;\r\n                case 'object':\r\n                    return SymbolKind.Object;\r\n                case 'key':\r\n                    return SymbolKind.Key;\r\n                case 'null':\r\n                    return SymbolKind.Null;\r\n            }\r\n            return SymbolKind.Property;\r\n        }\r\n        SymbolKind.to = to;\r\n    })(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));\r\n    (function (IndentAction) {\r\n        IndentAction[IndentAction[\"None\"] = 0] = \"None\";\r\n        IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\r\n        IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\r\n        IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\r\n    })(exports.IndentAction || (exports.IndentAction = {}));\r\n    var IndentAction = exports.IndentAction;\r\n    // --- feature registries ------\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.ReferenceProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.RenameProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.SuggestRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.SignatureHelpProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.HoverProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.DocumentSymbolProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.DocumentHighlightProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.DefinitionProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.CodeLensProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.CodeActionProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.DocumentFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.DocumentRangeFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.OnTypeFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();\r\n    /**\r\n     * @internal\r\n     */\r\n    exports.LinkProviderRegistry = new languageFeatureRegistry_1.default();\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports/onEnter\", [\"require\", \"exports\", 'vs/base/common/errors', 'vs/base/common/strings', 'vs/editor/common/core/position', 'vs/editor/common/modes', 'vs/editor/common/modes/supports'], function (require, exports, errors_1, strings, position_1, modes_1, supports_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var OnEnterSupport = (function () {\r\n        function OnEnterSupport(modeId, opts) {\r\n            opts = opts || {};\r\n            opts.brackets = opts.brackets || [\r\n                ['(', ')'],\r\n                ['{', '}'],\r\n                ['[', ']']\r\n            ];\r\n            this._modeId = modeId;\r\n            this._brackets = opts.brackets.map(function (bracket) {\r\n                return {\r\n                    open: bracket[0],\r\n                    openRegExp: OnEnterSupport._createOpenBracketRegExp(bracket[0]),\r\n                    close: bracket[1],\r\n                    closeRegExp: OnEnterSupport._createCloseBracketRegExp(bracket[1]),\r\n                };\r\n            });\r\n            this._regExpRules = opts.regExpRules || [];\r\n            this._indentationRules = opts.indentationRules;\r\n        }\r\n        OnEnterSupport.prototype.onEnter = function (model, position) {\r\n            var _this = this;\r\n            var context = model.getLineContext(position.lineNumber);\r\n            return supports_1.handleEvent(context, position.column - 1, function (nestedMode, context, offset) {\r\n                if (_this._modeId === nestedMode.getId()) {\r\n                    return _this._onEnter(model, position);\r\n                }\r\n                else if (nestedMode.richEditSupport && nestedMode.richEditSupport.onEnter) {\r\n                    return nestedMode.richEditSupport.onEnter.onEnter(model, position);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            });\r\n        };\r\n        OnEnterSupport.prototype._onEnter = function (model, position) {\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            var beforeEnterText = lineText.substr(0, position.column - 1);\r\n            var afterEnterText = lineText.substr(position.column - 1);\r\n            var oneLineAboveText = position.lineNumber === 1 ? '' : model.getLineContent(position.lineNumber - 1);\r\n            return this._actualOnEnter(oneLineAboveText, beforeEnterText, afterEnterText);\r\n        };\r\n        OnEnterSupport.prototype._actualOnEnter = function (oneLineAboveText, beforeEnterText, afterEnterText) {\r\n            // (1): `regExpRules`\r\n            for (var i = 0, len = this._regExpRules.length; i < len; i++) {\r\n                var rule = this._regExpRules[i];\r\n                if (rule.beforeText.test(beforeEnterText)) {\r\n                    if (rule.afterText) {\r\n                        if (rule.afterText.test(afterEnterText)) {\r\n                            return rule.action;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return rule.action;\r\n                    }\r\n                }\r\n            }\r\n            // (2): Special indent-outdent\r\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\r\n                for (var i = 0, len = this._brackets.length; i < len; i++) {\r\n                    var bracket = this._brackets[i];\r\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\r\n                        return OnEnterSupport._INDENT_OUTDENT;\r\n                    }\r\n                }\r\n            }\r\n            // (3): Indentation Support\r\n            if (this._indentationRules) {\r\n                if (this._indentationRules.increaseIndentPattern && this._indentationRules.increaseIndentPattern.test(beforeEnterText)) {\r\n                    return OnEnterSupport._INDENT;\r\n                }\r\n                if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(beforeEnterText)) {\r\n                    return OnEnterSupport._INDENT;\r\n                }\r\n                if (/^\\s/.test(beforeEnterText)) {\r\n                    // No reason to run regular expressions if there is nothing to outdent from\r\n                    if (this._indentationRules.decreaseIndentPattern && this._indentationRules.decreaseIndentPattern.test(afterEnterText)) {\r\n                        return OnEnterSupport._OUTDENT;\r\n                    }\r\n                    if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(oneLineAboveText)) {\r\n                        return OnEnterSupport._OUTDENT;\r\n                    }\r\n                }\r\n            }\r\n            // (4): Open bracket based logic\r\n            if (beforeEnterText.length > 0) {\r\n                for (var i = 0, len = this._brackets.length; i < len; i++) {\r\n                    var bracket = this._brackets[i];\r\n                    if (bracket.openRegExp.test(beforeEnterText)) {\r\n                        return OnEnterSupport._INDENT;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        OnEnterSupport._createOpenBracketRegExp = function (bracket) {\r\n            var str = strings.escapeRegExpCharacters(bracket);\r\n            if (!/\\B/.test(str.charAt(0))) {\r\n                str = '\\\\b' + str;\r\n            }\r\n            str += '\\\\s*$';\r\n            return OnEnterSupport._safeRegExp(str);\r\n        };\r\n        OnEnterSupport._createCloseBracketRegExp = function (bracket) {\r\n            var str = strings.escapeRegExpCharacters(bracket);\r\n            if (!/\\B/.test(str.charAt(str.length - 1))) {\r\n                str = str + '\\\\b';\r\n            }\r\n            str = '^\\\\s*' + str;\r\n            return OnEnterSupport._safeRegExp(str);\r\n        };\r\n        OnEnterSupport._safeRegExp = function (def) {\r\n            try {\r\n                return new RegExp(def);\r\n            }\r\n            catch (err) {\r\n                errors_1.onUnexpectedError(err);\r\n                return null;\r\n            }\r\n        };\r\n        OnEnterSupport._INDENT = { indentAction: modes_1.IndentAction.Indent };\r\n        OnEnterSupport._INDENT_OUTDENT = { indentAction: modes_1.IndentAction.IndentOutdent };\r\n        OnEnterSupport._OUTDENT = { indentAction: modes_1.IndentAction.Outdent };\r\n        return OnEnterSupport;\r\n    }());\r\n    exports.OnEnterSupport = OnEnterSupport;\r\n    function getRawEnterActionAtPosition(model, lineNumber, column) {\r\n        var result;\r\n        var richEditSupport = model.getMode().richEditSupport;\r\n        if (richEditSupport && richEditSupport.onEnter) {\r\n            try {\r\n                result = richEditSupport.onEnter.onEnter(model, new position_1.Position(lineNumber, column));\r\n            }\r\n            catch (e) {\r\n                errors_1.onUnexpectedError(e);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    exports.getRawEnterActionAtPosition = getRawEnterActionAtPosition;\r\n    function getEnterActionAtPosition(model, lineNumber, column) {\r\n        var lineText = model.getLineContent(lineNumber);\r\n        var indentation = strings.getLeadingWhitespace(lineText);\r\n        if (indentation.length > column - 1) {\r\n            indentation = indentation.substring(0, column - 1);\r\n        }\r\n        var enterAction = getRawEnterActionAtPosition(model, lineNumber, column);\r\n        if (!enterAction) {\r\n            enterAction = {\r\n                indentAction: modes_1.IndentAction.None,\r\n                appendText: '',\r\n            };\r\n        }\r\n        else {\r\n            if (!enterAction.appendText) {\r\n                if ((enterAction.indentAction === modes_1.IndentAction.Indent) ||\r\n                    (enterAction.indentAction === modes_1.IndentAction.IndentOutdent)) {\r\n                    enterAction.appendText = '\\t';\r\n                }\r\n                else {\r\n                    enterAction.appendText = '';\r\n                }\r\n            }\r\n        }\r\n        if (enterAction.removeText) {\r\n            indentation = indentation.substring(0, indentation.length - 1);\r\n        }\r\n        return {\r\n            enterAction: enterAction,\r\n            indentation: indentation\r\n        };\r\n    }\r\n    exports.getEnterActionAtPosition = getEnterActionAtPosition;\r\n});\r\n\ndefine(\"vs/nls!vs/base/common/severity\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/base/common/severity\", data); });\ndefine(\"vs/base/common/severity\", [\"require\", \"exports\", 'vs/nls!vs/base/common/severity', 'vs/base/common/strings'], function (require, exports, nls, strings) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Severity;\r\n    (function (Severity) {\r\n        Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\r\n        Severity[Severity[\"Info\"] = 1] = \"Info\";\r\n        Severity[Severity[\"Warning\"] = 2] = \"Warning\";\r\n        Severity[Severity[\"Error\"] = 3] = \"Error\";\r\n    })(Severity || (Severity = {}));\r\n    var Severity;\r\n    (function (Severity) {\r\n        var _error = 'error', _warning = 'warning', _warn = 'warn', _info = 'info';\r\n        var _displayStrings = Object.create(null);\r\n        _displayStrings[Severity.Error] = nls.localize(0, null);\r\n        _displayStrings[Severity.Warning] = nls.localize(1, null);\r\n        _displayStrings[Severity.Info] = nls.localize(2, null);\r\n        /**\r\n         * Parses 'error', 'warning', 'warn', 'info' in call casings\r\n         * and falls back to ignore.\r\n         */\r\n        function fromValue(value) {\r\n            if (!value) {\r\n                return Severity.Ignore;\r\n            }\r\n            if (strings.equalsIgnoreCase(_error, value)) {\r\n                return Severity.Error;\r\n            }\r\n            if (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\r\n                return Severity.Warning;\r\n            }\r\n            if (strings.equalsIgnoreCase(_info, value)) {\r\n                return Severity.Info;\r\n            }\r\n            return Severity.Ignore;\r\n        }\r\n        Severity.fromValue = fromValue;\r\n        function toString(value) {\r\n            return _displayStrings[value] || strings.empty;\r\n        }\r\n        Severity.toString = toString;\r\n        function compare(a, b) {\r\n            return b - a;\r\n        }\r\n        Severity.compare = compare;\r\n    })(Severity || (Severity = {}));\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = Severity;\r\n});\r\n\ndefine(\"vs/nls!vs/editor/common/config/defaultConfig\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/editor/common/config/defaultConfig\", data); });\ndefine(\"vs/editor/common/config/defaultConfig\", [\"require\", \"exports\", 'vs/nls!vs/editor/common/config/defaultConfig', 'vs/base/common/platform'], function (require, exports, nls, platform) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?';\r\n    exports.DEFAULT_INDENTATION = {\r\n        tabSize: 4,\r\n        insertSpaces: true,\r\n        detectIndentation: true\r\n    };\r\n    exports.DEFAULT_TRIM_AUTO_WHITESPACE = true;\r\n    var DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\r\n    var DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\r\n    var DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'Courier New\\', monospace, \\'Droid Sans Fallback\\'';\r\n    /**\r\n     * Determined from empirical observations.\r\n     */\r\n    exports.GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\r\n    var ConfigClass = (function () {\r\n        function ConfigClass() {\r\n            this.editor = {\r\n                experimentalScreenReader: true,\r\n                rulers: [],\r\n                wordSeparators: exports.USUAL_WORD_SEPARATORS,\r\n                selectionClipboard: true,\r\n                ariaLabel: nls.localize(0, null),\r\n                lineNumbers: true,\r\n                selectOnLineNumbers: true,\r\n                lineNumbersMinChars: 5,\r\n                glyphMargin: false,\r\n                lineDecorationsWidth: 10,\r\n                revealHorizontalRightPadding: 30,\r\n                roundedSelection: true,\r\n                theme: 'vs',\r\n                readOnly: false,\r\n                scrollbar: {\r\n                    verticalScrollbarSize: 14,\r\n                    horizontal: 'auto',\r\n                    useShadows: true,\r\n                    verticalHasArrows: false,\r\n                    horizontalHasArrows: false\r\n                },\r\n                overviewRulerLanes: 2,\r\n                cursorBlinking: 'blink',\r\n                cursorStyle: 'line',\r\n                fontLigatures: false,\r\n                disableTranslate3d: false,\r\n                hideCursorInOverviewRuler: false,\r\n                scrollBeyondLastLine: true,\r\n                automaticLayout: false,\r\n                wrappingColumn: 300,\r\n                wrappingIndent: 'same',\r\n                wordWrapBreakBeforeCharacters: '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋',\r\n                wordWrapBreakAfterCharacters: ' \\t})]?|&,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ’”〉》」』】〕）］｝｣',\r\n                wordWrapBreakObtrusiveCharacters: '.',\r\n                tabFocusMode: false,\r\n                // Features\r\n                hover: true,\r\n                contextmenu: true,\r\n                mouseWheelScrollSensitivity: 1,\r\n                quickSuggestions: true,\r\n                quickSuggestionsDelay: 10,\r\n                iconsInSuggestions: true,\r\n                autoClosingBrackets: true,\r\n                formatOnType: false,\r\n                suggestOnTriggerCharacters: true,\r\n                acceptSuggestionOnEnter: true,\r\n                selectionHighlight: true,\r\n                outlineMarkers: false,\r\n                referenceInfos: true,\r\n                folding: true,\r\n                renderWhitespace: false,\r\n                indentGuides: false,\r\n                useTabStops: true,\r\n                fontFamily: (platform.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : (platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY)),\r\n                fontSize: (platform.isMacintosh ? 12 : 14),\r\n                lineHeight: 0\r\n            };\r\n        }\r\n        return ConfigClass;\r\n    }());\r\n    exports.DefaultConfig = new ConfigClass();\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/textModel\", [\"require\", \"exports\", 'vs/base/common/eventEmitter', 'vs/base/common/strings', 'vs/editor/common/core/position', 'vs/editor/common/core/range', 'vs/editor/common/editorCommon', 'vs/editor/common/model/modelLine', 'vs/editor/common/model/indentationGuesser', 'vs/editor/common/config/defaultConfig', 'vs/editor/common/viewModel/prefixSumComputer'], function (require, exports, eventEmitter_1, strings, position_1, range_1, editorCommon, modelLine_1, indentationGuesser_1, defaultConfig_1, prefixSumComputer_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var LIMIT_FIND_COUNT = 999;\r\n    exports.LONG_LINE_BOUNDARY = 1000;\r\n    var TextModel = (function (_super) {\r\n        __extends(TextModel, _super);\r\n        function TextModel(allowedEventTypes, rawText) {\r\n            allowedEventTypes.push(editorCommon.EventType.ModelRawContentChanged, editorCommon.EventType.ModelOptionsChanged);\r\n            _super.call(this, allowedEventTypes);\r\n            this._shouldSimplifyMode = (rawText.length > TextModel.MODEL_SYNC_LIMIT);\r\n            this._shouldDenyMode = (rawText.length > TextModel.MODEL_TOKENIZATION_LIMIT);\r\n            this._options = rawText.options;\r\n            this._constructLines(rawText);\r\n            this._setVersionId(1);\r\n            this._isDisposed = false;\r\n            this._isDisposing = false;\r\n        }\r\n        TextModel.prototype.isTooLargeForHavingAMode = function () {\r\n            return this._shouldDenyMode;\r\n        };\r\n        TextModel.prototype.isTooLargeForHavingARichMode = function () {\r\n            return this._shouldSimplifyMode;\r\n        };\r\n        TextModel.prototype.getOptions = function () {\r\n            return this._options;\r\n        };\r\n        TextModel.prototype.updateOptions = function (newOpts) {\r\n            var somethingChanged = false;\r\n            var changed = {\r\n                tabSize: false,\r\n                insertSpaces: false,\r\n                trimAutoWhitespace: false\r\n            };\r\n            if (typeof newOpts.insertSpaces !== 'undefined') {\r\n                if (this._options.insertSpaces !== newOpts.insertSpaces) {\r\n                    somethingChanged = true;\r\n                    changed.insertSpaces = true;\r\n                    this._options.insertSpaces = newOpts.insertSpaces;\r\n                }\r\n            }\r\n            if (typeof newOpts.tabSize !== 'undefined') {\r\n                if (this._options.tabSize !== newOpts.tabSize) {\r\n                    somethingChanged = true;\r\n                    changed.tabSize = true;\r\n                    this._options.tabSize = newOpts.tabSize;\r\n                }\r\n            }\r\n            if (typeof newOpts.trimAutoWhitespace !== 'undefined') {\r\n                if (this._options.trimAutoWhitespace !== newOpts.trimAutoWhitespace) {\r\n                    somethingChanged = true;\r\n                    changed.trimAutoWhitespace = true;\r\n                    this._options.trimAutoWhitespace = newOpts.trimAutoWhitespace;\r\n                }\r\n            }\r\n            if (somethingChanged) {\r\n                this.emit(editorCommon.EventType.ModelOptionsChanged, changed);\r\n            }\r\n        };\r\n        TextModel.prototype.detectIndentation = function (defaultInsertSpaces, defaultTabSize) {\r\n            var lines = this._lines.map(function (line) { return line.text; });\r\n            var guessedIndentation = indentationGuesser_1.guessIndentation(lines, defaultTabSize, defaultInsertSpaces);\r\n            this.updateOptions({\r\n                insertSpaces: guessedIndentation.insertSpaces,\r\n                tabSize: guessedIndentation.tabSize\r\n            });\r\n        };\r\n        TextModel.prototype._normalizeIndentationFromWhitespace = function (str) {\r\n            var tabSize = this._options.tabSize;\r\n            var insertSpaces = this._options.insertSpaces;\r\n            var spacesCnt = 0;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (str.charAt(i) === '\\t') {\r\n                    spacesCnt += tabSize;\r\n                }\r\n                else {\r\n                    spacesCnt++;\r\n                }\r\n            }\r\n            var result = '';\r\n            if (!insertSpaces) {\r\n                var tabsCnt = Math.floor(spacesCnt / tabSize);\r\n                spacesCnt = spacesCnt % tabSize;\r\n                for (var i = 0; i < tabsCnt; i++) {\r\n                    result += '\\t';\r\n                }\r\n            }\r\n            for (var i = 0; i < spacesCnt; i++) {\r\n                result += ' ';\r\n            }\r\n            return result;\r\n        };\r\n        TextModel.prototype.normalizeIndentation = function (str) {\r\n            var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\r\n            if (firstNonWhitespaceIndex === -1) {\r\n                firstNonWhitespaceIndex = str.length;\r\n            }\r\n            return this._normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex)) + str.substring(firstNonWhitespaceIndex);\r\n        };\r\n        TextModel.prototype.getOneIndent = function () {\r\n            var tabSize = this._options.tabSize;\r\n            var insertSpaces = this._options.insertSpaces;\r\n            if (insertSpaces) {\r\n                var result = '';\r\n                for (var i = 0; i < tabSize; i++) {\r\n                    result += ' ';\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                return '\\t';\r\n            }\r\n        };\r\n        TextModel.prototype.getVersionId = function () {\r\n            return this._versionId;\r\n        };\r\n        TextModel.prototype.getAlternativeVersionId = function () {\r\n            return this._alternativeVersionId;\r\n        };\r\n        TextModel.prototype._ensureLineStarts = function () {\r\n            if (!this._lineStarts) {\r\n                var lineStartValues = [];\r\n                var eolLength = this._EOL.length;\r\n                for (var i = 0, len = this._lines.length; i < len; i++) {\r\n                    lineStartValues.push(this._lines[i].text.length + eolLength);\r\n                }\r\n                this._lineStarts = new prefixSumComputer_1.PrefixSumComputer(lineStartValues);\r\n            }\r\n        };\r\n        TextModel.prototype.getOffsetAt = function (rawPosition) {\r\n            var position = this.validatePosition(rawPosition);\r\n            this._ensureLineStarts();\r\n            return this._lineStarts.getAccumulatedValue(position.lineNumber - 2) + position.column - 1;\r\n        };\r\n        TextModel.prototype.getPositionAt = function (offset) {\r\n            offset = Math.floor(offset);\r\n            offset = Math.max(0, offset);\r\n            this._ensureLineStarts();\r\n            var out = this._lineStarts.getIndexOf(offset);\r\n            var lineLength = this._lines[out.index].text.length;\r\n            // Ensure we return a valid position\r\n            return new position_1.Position(out.index + 1, Math.min(out.remainder + 1, lineLength + 1));\r\n        };\r\n        TextModel.prototype._increaseVersionId = function () {\r\n            this._setVersionId(this._versionId + 1);\r\n        };\r\n        TextModel.prototype._setVersionId = function (newVersionId) {\r\n            this._versionId = newVersionId;\r\n            this._alternativeVersionId = this._versionId;\r\n        };\r\n        TextModel.prototype._overwriteAlternativeVersionId = function (newAlternativeVersionId) {\r\n            this._alternativeVersionId = newAlternativeVersionId;\r\n        };\r\n        TextModel.prototype.isDisposed = function () {\r\n            return this._isDisposed;\r\n        };\r\n        TextModel.prototype.dispose = function () {\r\n            this._isDisposed = true;\r\n            // Null out members, such that any use of a disposed model will throw exceptions sooner rather than later\r\n            this._lines = null;\r\n            this._EOL = null;\r\n            this._BOM = null;\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        TextModel.prototype._createContentChangedFlushEvent = function () {\r\n            return {\r\n                changeType: editorCommon.EventType.ModelRawContentChangedFlush,\r\n                detail: null,\r\n                // TODO@Alex -> remove these fields from here\r\n                versionId: -1,\r\n                isUndoing: false,\r\n                isRedoing: false\r\n            };\r\n        };\r\n        TextModel.prototype._emitContentChanged2 = function (startLineNumber, startColumn, endLineNumber, endColumn, rangeLength, text, isUndoing, isRedoing) {\r\n            var e = {\r\n                range: new range_1.Range(startLineNumber, startColumn, endLineNumber, endColumn),\r\n                rangeLength: rangeLength,\r\n                text: text,\r\n                eol: this._EOL,\r\n                versionId: this.getVersionId(),\r\n                isUndoing: isUndoing,\r\n                isRedoing: isRedoing\r\n            };\r\n            if (!this._isDisposing) {\r\n                this.emit(editorCommon.EventType.ModelContentChanged2, e);\r\n            }\r\n        };\r\n        TextModel.prototype._resetValue = function (e, newValue) {\r\n            this._constructLines(newValue);\r\n            this._increaseVersionId();\r\n            e.detail = this.toRawText();\r\n            e.versionId = this._versionId;\r\n        };\r\n        TextModel.prototype.toRawText = function () {\r\n            return {\r\n                BOM: this._BOM,\r\n                EOL: this._EOL,\r\n                lines: this.getLinesContent(),\r\n                length: this.getValueLength(),\r\n                options: this._options\r\n            };\r\n        };\r\n        TextModel.prototype.equals = function (other) {\r\n            if (this._BOM !== other.BOM) {\r\n                return false;\r\n            }\r\n            if (this._EOL !== other.EOL) {\r\n                return false;\r\n            }\r\n            if (this._lines.length !== other.lines.length) {\r\n                return false;\r\n            }\r\n            for (var i = 0, len = this._lines.length; i < len; i++) {\r\n                if (this._lines[i].text !== other.lines[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        TextModel.prototype.setValue = function (value) {\r\n            if (value === null) {\r\n                // There's nothing to do\r\n                return;\r\n            }\r\n            var rawText = null;\r\n            rawText = TextModel.toRawText(value, {\r\n                tabSize: this._options.tabSize,\r\n                insertSpaces: this._options.insertSpaces,\r\n                trimAutoWhitespace: this._options.trimAutoWhitespace,\r\n                detectIndentation: false,\r\n                defaultEOL: this._options.defaultEOL\r\n            });\r\n            this.setValueFromRawText(rawText);\r\n        };\r\n        TextModel.prototype.setValueFromRawText = function (newValue) {\r\n            if (newValue === null) {\r\n                // There's nothing to do\r\n                return;\r\n            }\r\n            var oldFullModelRange = this.getFullModelRange();\r\n            var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\r\n            var endLineNumber = this.getLineCount();\r\n            var endColumn = this.getLineMaxColumn(endLineNumber);\r\n            var e = this._createContentChangedFlushEvent();\r\n            this._resetValue(e, newValue);\r\n            this._emitModelContentChangedFlushEvent(e);\r\n            this._emitContentChanged2(1, 1, endLineNumber, endColumn, oldModelValueLength, this.getValue(), false, false);\r\n        };\r\n        TextModel.prototype.getValue = function (eol, preserveBOM) {\r\n            if (preserveBOM === void 0) { preserveBOM = false; }\r\n            var fullModelRange = this.getFullModelRange();\r\n            var fullModelValue = this.getValueInRange(fullModelRange, eol);\r\n            if (preserveBOM) {\r\n                return this._BOM + fullModelValue;\r\n            }\r\n            return fullModelValue;\r\n        };\r\n        TextModel.prototype.getValueLength = function (eol, preserveBOM) {\r\n            if (preserveBOM === void 0) { preserveBOM = false; }\r\n            var fullModelRange = this.getFullModelRange();\r\n            var fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\r\n            if (preserveBOM) {\r\n                return this._BOM.length + fullModelValue;\r\n            }\r\n            return fullModelValue;\r\n        };\r\n        TextModel.prototype.getEmptiedValueInRange = function (rawRange, fillCharacter, eol) {\r\n            if (fillCharacter === void 0) { fillCharacter = ''; }\r\n            if (eol === void 0) { eol = editorCommon.EndOfLinePreference.TextDefined; }\r\n            var range = this.validateRange(rawRange);\r\n            if (range.isEmpty()) {\r\n                return '';\r\n            }\r\n            if (range.startLineNumber === range.endLineNumber) {\r\n                return this._repeatCharacter(fillCharacter, range.endColumn - range.startColumn);\r\n            }\r\n            var lineEnding = this._getEndOfLine(eol), startLineIndex = range.startLineNumber - 1, endLineIndex = range.endLineNumber - 1, resultLines = [];\r\n            resultLines.push(this._repeatCharacter(fillCharacter, this._lines[startLineIndex].text.length - range.startColumn + 1));\r\n            for (var i = startLineIndex + 1; i < endLineIndex; i++) {\r\n                resultLines.push(this._repeatCharacter(fillCharacter, this._lines[i].text.length));\r\n            }\r\n            resultLines.push(this._repeatCharacter(fillCharacter, range.endColumn - 1));\r\n            return resultLines.join(lineEnding);\r\n        };\r\n        TextModel.prototype._repeatCharacter = function (fillCharacter, count) {\r\n            var r = '';\r\n            for (var i = 0; i < count; i++) {\r\n                r += fillCharacter;\r\n            }\r\n            return r;\r\n        };\r\n        TextModel.prototype.getValueInRange = function (rawRange, eol) {\r\n            if (eol === void 0) { eol = editorCommon.EndOfLinePreference.TextDefined; }\r\n            var range = this.validateRange(rawRange);\r\n            if (range.isEmpty()) {\r\n                return '';\r\n            }\r\n            if (range.startLineNumber === range.endLineNumber) {\r\n                return this._lines[range.startLineNumber - 1].text.substring(range.startColumn - 1, range.endColumn - 1);\r\n            }\r\n            var lineEnding = this._getEndOfLine(eol), startLineIndex = range.startLineNumber - 1, endLineIndex = range.endLineNumber - 1, resultLines = [];\r\n            resultLines.push(this._lines[startLineIndex].text.substring(range.startColumn - 1));\r\n            for (var i = startLineIndex + 1; i < endLineIndex; i++) {\r\n                resultLines.push(this._lines[i].text);\r\n            }\r\n            resultLines.push(this._lines[endLineIndex].text.substring(0, range.endColumn - 1));\r\n            return resultLines.join(lineEnding);\r\n        };\r\n        TextModel.prototype.getValueLengthInRange = function (rawRange, eol) {\r\n            if (eol === void 0) { eol = editorCommon.EndOfLinePreference.TextDefined; }\r\n            var range = this.validateRange(rawRange);\r\n            if (range.isEmpty()) {\r\n                return 0;\r\n            }\r\n            if (range.startLineNumber === range.endLineNumber) {\r\n                return (range.endColumn - range.startColumn);\r\n            }\r\n            var startOffset = this.getOffsetAt(new position_1.Position(range.startLineNumber, range.startColumn));\r\n            var endOffset = this.getOffsetAt(new position_1.Position(range.endLineNumber, range.endColumn));\r\n            return endOffset - startOffset;\r\n        };\r\n        TextModel.prototype.isDominatedByLongLines = function () {\r\n            var smallLineCharCount = 0, longLineCharCount = 0, i, len, lines = this._lines, lineLength;\r\n            for (i = 0, len = this._lines.length; i < len; i++) {\r\n                lineLength = lines[i].text.length;\r\n                if (lineLength >= exports.LONG_LINE_BOUNDARY) {\r\n                    longLineCharCount += lineLength;\r\n                }\r\n                else {\r\n                    smallLineCharCount += lineLength;\r\n                }\r\n            }\r\n            return (longLineCharCount > smallLineCharCount);\r\n        };\r\n        TextModel.prototype.getLineCount = function () {\r\n            return this._lines.length;\r\n        };\r\n        TextModel.prototype.getLineContent = function (lineNumber) {\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            return this._lines[lineNumber - 1].text;\r\n        };\r\n        TextModel.prototype.getLinesContent = function () {\r\n            var r = [];\r\n            for (var i = 0, len = this._lines.length; i < len; i++) {\r\n                r[i] = this._lines[i].text;\r\n            }\r\n            return r;\r\n        };\r\n        TextModel.prototype.getEOL = function () {\r\n            return this._EOL;\r\n        };\r\n        TextModel.prototype.setEOL = function (eol) {\r\n            var newEOL = (eol === editorCommon.EndOfLineSequence.CRLF ? '\\r\\n' : '\\n');\r\n            if (this._EOL === newEOL) {\r\n                // Nothing to do\r\n                return;\r\n            }\r\n            var oldFullModelRange = this.getFullModelRange();\r\n            var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\r\n            var endLineNumber = this.getLineCount();\r\n            var endColumn = this.getLineMaxColumn(endLineNumber);\r\n            this._EOL = newEOL;\r\n            this._lineStarts = null;\r\n            this._increaseVersionId();\r\n            var e = this._createContentChangedFlushEvent();\r\n            e.detail = this.toRawText();\r\n            e.versionId = this._versionId;\r\n            this._emitModelContentChangedFlushEvent(e);\r\n            this._emitContentChanged2(1, 1, endLineNumber, endColumn, oldModelValueLength, this.getValue(), false, false);\r\n        };\r\n        TextModel.prototype.getLineMinColumn = function (lineNumber) {\r\n            return 1;\r\n        };\r\n        TextModel.prototype.getLineMaxColumn = function (lineNumber) {\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            return this._lines[lineNumber - 1].text.length + 1;\r\n        };\r\n        TextModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            var result = strings.firstNonWhitespaceIndex(this._lines[lineNumber - 1].text);\r\n            if (result === -1) {\r\n                return 0;\r\n            }\r\n            return result + 1;\r\n        };\r\n        TextModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            var result = strings.lastNonWhitespaceIndex(this._lines[lineNumber - 1].text);\r\n            if (result === -1) {\r\n                return 0;\r\n            }\r\n            return result + 2;\r\n        };\r\n        TextModel.prototype.validateLineNumber = function (lineNumber) {\r\n            if (lineNumber < 1) {\r\n                lineNumber = 1;\r\n            }\r\n            if (lineNumber > this._lines.length) {\r\n                lineNumber = this._lines.length;\r\n            }\r\n            return lineNumber;\r\n        };\r\n        TextModel.prototype.validatePosition = function (position) {\r\n            var lineNumber = position.lineNumber ? position.lineNumber : 1;\r\n            var column = position.column ? position.column : 1;\r\n            if (lineNumber < 1) {\r\n                lineNumber = 1;\r\n                column = 1;\r\n            }\r\n            else if (lineNumber > this._lines.length) {\r\n                lineNumber = this._lines.length;\r\n                column = this.getLineMaxColumn(lineNumber);\r\n            }\r\n            else {\r\n                var maxColumn = this.getLineMaxColumn(lineNumber);\r\n                if (column < 1) {\r\n                    column = 1;\r\n                }\r\n                else if (column > maxColumn) {\r\n                    column = maxColumn;\r\n                }\r\n            }\r\n            return new position_1.Position(lineNumber, column);\r\n        };\r\n        TextModel.prototype.validateRange = function (range) {\r\n            var start = this.validatePosition(new position_1.Position(range.startLineNumber, range.startColumn));\r\n            var end = this.validatePosition(new position_1.Position(range.endLineNumber, range.endColumn));\r\n            return new range_1.Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n        };\r\n        TextModel.prototype.modifyPosition = function (rawPosition, offset) {\r\n            return this.getPositionAt(this.getOffsetAt(rawPosition) + offset);\r\n        };\r\n        TextModel.prototype.getFullModelRange = function () {\r\n            var lineCount = this.getLineCount();\r\n            return new range_1.Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\r\n        };\r\n        TextModel.prototype._emitModelContentChangedFlushEvent = function (e) {\r\n            if (!this._isDisposing) {\r\n                this.emit(editorCommon.EventType.ModelRawContentChanged, e);\r\n            }\r\n        };\r\n        TextModel.toRawText = function (rawText, opts) {\r\n            // Count the number of lines that end with \\r\\n\r\n            var carriageReturnCnt = 0, lastCarriageReturnIndex = -1;\r\n            while ((lastCarriageReturnIndex = rawText.indexOf('\\r', lastCarriageReturnIndex + 1)) !== -1) {\r\n                carriageReturnCnt++;\r\n            }\r\n            // Split the text into liens\r\n            var lines = rawText.split(/\\r\\n|\\r|\\n/);\r\n            // Remove the BOM (if present)\r\n            var BOM = '';\r\n            if (strings.startsWithUTF8BOM(lines[0])) {\r\n                BOM = strings.UTF8_BOM_CHARACTER;\r\n                lines[0] = lines[0].substr(1);\r\n            }\r\n            var lineFeedCnt = lines.length - 1;\r\n            var EOL = '';\r\n            if (lineFeedCnt === 0) {\r\n                // This is an empty file or a file with precisely one line\r\n                EOL = (opts.defaultEOL === editorCommon.DefaultEndOfLine.LF ? '\\n' : '\\r\\n');\r\n            }\r\n            else if (carriageReturnCnt > lineFeedCnt / 2) {\r\n                // More than half of the file contains \\r\\n ending lines\r\n                EOL = '\\r\\n';\r\n            }\r\n            else {\r\n                // At least one line more ends in \\n\r\n                EOL = '\\n';\r\n            }\r\n            var resolvedOpts;\r\n            if (opts.detectIndentation) {\r\n                var guessedIndentation = indentationGuesser_1.guessIndentation(lines, opts.tabSize, opts.insertSpaces);\r\n                resolvedOpts = {\r\n                    tabSize: guessedIndentation.tabSize,\r\n                    insertSpaces: guessedIndentation.insertSpaces,\r\n                    trimAutoWhitespace: opts.trimAutoWhitespace,\r\n                    defaultEOL: opts.defaultEOL\r\n                };\r\n            }\r\n            else {\r\n                resolvedOpts = {\r\n                    tabSize: opts.tabSize,\r\n                    insertSpaces: opts.insertSpaces,\r\n                    trimAutoWhitespace: opts.trimAutoWhitespace,\r\n                    defaultEOL: opts.defaultEOL\r\n                };\r\n            }\r\n            return {\r\n                BOM: BOM,\r\n                EOL: EOL,\r\n                lines: lines,\r\n                length: rawText.length,\r\n                options: resolvedOpts\r\n            };\r\n        };\r\n        TextModel.prototype._constructLines = function (rawText) {\r\n            var rawLines = rawText.lines, modelLines = [], i, len;\r\n            for (i = 0, len = rawLines.length; i < len; i++) {\r\n                modelLines.push(new modelLine_1.ModelLine(i + 1, rawLines[i]));\r\n            }\r\n            this._BOM = rawText.BOM;\r\n            this._EOL = rawText.EOL;\r\n            this._lines = modelLines;\r\n            this._lineStarts = null;\r\n        };\r\n        TextModel.prototype._getEndOfLine = function (eol) {\r\n            switch (eol) {\r\n                case editorCommon.EndOfLinePreference.LF:\r\n                    return '\\n';\r\n                case editorCommon.EndOfLinePreference.CRLF:\r\n                    return '\\r\\n';\r\n                case editorCommon.EndOfLinePreference.TextDefined:\r\n                    return this.getEOL();\r\n            }\r\n            throw new Error('Unknown EOL preference');\r\n        };\r\n        TextModel.prototype.findMatches = function (searchString, rawSearchScope, isRegex, matchCase, wholeWord, limitResultCount) {\r\n            if (limitResultCount === void 0) { limitResultCount = LIMIT_FIND_COUNT; }\r\n            var regex = strings.createSafeRegExp(searchString, isRegex, matchCase, wholeWord);\r\n            if (!regex) {\r\n                return [];\r\n            }\r\n            var searchRange;\r\n            if (range_1.Range.isIRange(rawSearchScope)) {\r\n                searchRange = rawSearchScope;\r\n            }\r\n            else {\r\n                searchRange = this.getFullModelRange();\r\n            }\r\n            return this._doFindMatches(searchRange, regex, limitResultCount);\r\n        };\r\n        TextModel.prototype.findNextMatch = function (searchString, rawSearchStart, isRegex, matchCase, wholeWord) {\r\n            var regex = strings.createSafeRegExp(searchString, isRegex, matchCase, wholeWord);\r\n            if (!regex) {\r\n                return null;\r\n            }\r\n            var searchStart = this.validatePosition(rawSearchStart), lineCount = this.getLineCount(), startLineNumber = searchStart.lineNumber, text, r;\r\n            // Look in first line\r\n            text = this._lines[startLineNumber - 1].text.substring(searchStart.column - 1);\r\n            r = this._findMatchInLine(regex, text, startLineNumber, searchStart.column - 1);\r\n            if (r) {\r\n                return r;\r\n            }\r\n            for (var i = 1; i <= lineCount; i++) {\r\n                var lineIndex = (startLineNumber + i - 1) % lineCount;\r\n                text = this._lines[lineIndex].text;\r\n                r = this._findMatchInLine(regex, text, lineIndex + 1, 0);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModel.prototype.findPreviousMatch = function (searchString, rawSearchStart, isRegex, matchCase, wholeWord) {\r\n            var regex = strings.createSafeRegExp(searchString, isRegex, matchCase, wholeWord);\r\n            if (!regex) {\r\n                return null;\r\n            }\r\n            var searchStart = this.validatePosition(rawSearchStart), lineCount = this.getLineCount(), startLineNumber = searchStart.lineNumber, text, r;\r\n            // Look in first line\r\n            text = this._lines[startLineNumber - 1].text.substring(0, searchStart.column - 1);\r\n            r = this._findLastMatchInLine(regex, text, startLineNumber);\r\n            if (r) {\r\n                return r;\r\n            }\r\n            for (var i = 1; i <= lineCount; i++) {\r\n                var lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\r\n                text = this._lines[lineIndex].text;\r\n                r = this._findLastMatchInLine(regex, text, lineIndex + 1);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModel.prototype._doFindMatches = function (searchRange, searchRegex, limitResultCount) {\r\n            var result = [], text, counter = 0;\r\n            // Early case for a search range that starts & stops on the same line number\r\n            if (searchRange.startLineNumber === searchRange.endLineNumber) {\r\n                text = this._lines[searchRange.startLineNumber - 1].text.substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\r\n                counter = this._findMatchesInLine(searchRegex, text, searchRange.startLineNumber, searchRange.startColumn - 1, counter, result, limitResultCount);\r\n                return result;\r\n            }\r\n            // Collect results from first line\r\n            text = this._lines[searchRange.startLineNumber - 1].text.substring(searchRange.startColumn - 1);\r\n            counter = this._findMatchesInLine(searchRegex, text, searchRange.startLineNumber, searchRange.startColumn - 1, counter, result, limitResultCount);\r\n            // Collect results from middle lines\r\n            for (var lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && counter < limitResultCount; lineNumber++) {\r\n                counter = this._findMatchesInLine(searchRegex, this._lines[lineNumber - 1].text, lineNumber, 0, counter, result, limitResultCount);\r\n            }\r\n            // Collect results from last line\r\n            if (counter < limitResultCount) {\r\n                text = this._lines[searchRange.endLineNumber - 1].text.substring(0, searchRange.endColumn - 1);\r\n                counter = this._findMatchesInLine(searchRegex, text, searchRange.endLineNumber, 0, counter, result, limitResultCount);\r\n            }\r\n            return result;\r\n        };\r\n        TextModel.prototype._findMatchInLine = function (searchRegex, text, lineNumber, deltaOffset) {\r\n            var m = searchRegex.exec(text);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            return new range_1.Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset);\r\n        };\r\n        TextModel.prototype._findLastMatchInLine = function (searchRegex, text, lineNumber) {\r\n            var bestResult = null;\r\n            var m;\r\n            while ((m = searchRegex.exec(text))) {\r\n                var result = new range_1.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length);\r\n                if (result.equalsRange(bestResult)) {\r\n                    break;\r\n                }\r\n                bestResult = result;\r\n            }\r\n            return bestResult;\r\n        };\r\n        TextModel.prototype._findMatchesInLine = function (searchRegex, text, lineNumber, deltaOffset, counter, result, limitResultCount) {\r\n            var m;\r\n            // Reset regex to search from the beginning\r\n            searchRegex.lastIndex = 0;\r\n            do {\r\n                m = searchRegex.exec(text);\r\n                if (m) {\r\n                    var range = new range_1.Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset);\r\n                    // Exit early if the regex matches the same range\r\n                    if (range.equalsRange(result[result.length - 1])) {\r\n                        return counter;\r\n                    }\r\n                    result.push(range);\r\n                    counter++;\r\n                    if (counter >= limitResultCount) {\r\n                        return counter;\r\n                    }\r\n                }\r\n            } while (m);\r\n            return counter;\r\n        };\r\n        TextModel.MODEL_SYNC_LIMIT = 5 * 1024 * 1024; // 5 MB\r\n        TextModel.MODEL_TOKENIZATION_LIMIT = 20 * 1024 * 1024; // 20 MB\r\n        TextModel.DEFAULT_CREATION_OPTIONS = {\r\n            tabSize: defaultConfig_1.DEFAULT_INDENTATION.tabSize,\r\n            insertSpaces: defaultConfig_1.DEFAULT_INDENTATION.insertSpaces,\r\n            detectIndentation: false,\r\n            defaultEOL: editorCommon.DefaultEndOfLine.LF,\r\n            trimAutoWhitespace: defaultConfig_1.DEFAULT_TRIM_AUTO_WHITESPACE,\r\n        };\r\n        return TextModel;\r\n    }(eventEmitter_1.OrderGuaranteeEventEmitter));\r\n    exports.TextModel = TextModel;\r\n    var RawText = (function () {\r\n        function RawText() {\r\n        }\r\n        RawText.fromString = function (rawText, opts) {\r\n            return TextModel.toRawText(rawText, opts);\r\n        };\r\n        RawText.fromStringWithModelOptions = function (rawText, model) {\r\n            var opts = model.getOptions();\r\n            return TextModel.toRawText(rawText, {\r\n                tabSize: opts.tabSize,\r\n                insertSpaces: opts.insertSpaces,\r\n                trimAutoWhitespace: opts.trimAutoWhitespace,\r\n                detectIndentation: false,\r\n                defaultEOL: opts.defaultEOL\r\n            });\r\n        };\r\n        return RawText;\r\n    }());\r\n    exports.RawText = RawText;\r\n});\r\n\ndefine(\"vs/editor/common/modes/nullMode\", [\"require\", \"exports\", 'vs/editor/common/config/defaultConfig'], function (require, exports, defaultConfig_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var NullState = (function () {\r\n        function NullState(mode, stateData) {\r\n            this.mode = mode;\r\n            this.stateData = stateData;\r\n        }\r\n        NullState.prototype.clone = function () {\r\n            var stateDataClone = (this.stateData ? this.stateData.clone() : null);\r\n            return new NullState(this.mode, stateDataClone);\r\n        };\r\n        NullState.prototype.equals = function (other) {\r\n            if (this.mode !== other.getMode()) {\r\n                return false;\r\n            }\r\n            var otherStateData = other.getStateData();\r\n            if (!this.stateData && !otherStateData) {\r\n                return true;\r\n            }\r\n            if (this.stateData && otherStateData) {\r\n                return this.stateData.equals(otherStateData);\r\n            }\r\n            return false;\r\n        };\r\n        NullState.prototype.getMode = function () {\r\n            return this.mode;\r\n        };\r\n        NullState.prototype.tokenize = function (stream) {\r\n            stream.advanceToEOS();\r\n            return { type: '' };\r\n        };\r\n        NullState.prototype.getStateData = function () {\r\n            return this.stateData;\r\n        };\r\n        NullState.prototype.setStateData = function (stateData) {\r\n            this.stateData = stateData;\r\n        };\r\n        return NullState;\r\n    }());\r\n    exports.NullState = NullState;\r\n    var NullMode = (function () {\r\n        function NullMode() {\r\n            this.richEditSupport = {\r\n                wordDefinition: NullMode.DEFAULT_WORD_REGEXP\r\n            };\r\n        }\r\n        /**\r\n         * Create a word definition regular expression based on default word separators.\r\n         * Optionally provide allowed separators that should be included in words.\r\n         *\r\n         * The default would look like this:\r\n         * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\r\n         */\r\n        NullMode.createWordRegExp = function (allowInWords) {\r\n            if (allowInWords === void 0) { allowInWords = ''; }\r\n            var usualSeparators = defaultConfig_1.USUAL_WORD_SEPARATORS;\r\n            var source = '(-?\\\\d*\\\\.\\\\d\\\\w*)|([^';\r\n            for (var i = 0; i < usualSeparators.length; i++) {\r\n                if (allowInWords.indexOf(usualSeparators[i]) >= 0) {\r\n                    continue;\r\n                }\r\n                source += '\\\\' + usualSeparators[i];\r\n            }\r\n            source += '\\\\s]+)';\r\n            return new RegExp(source, 'g');\r\n        };\r\n        NullMode.prototype.getId = function () {\r\n            return NullMode.ID;\r\n        };\r\n        NullMode.prototype.toSimplifiedMode = function () {\r\n            return this;\r\n        };\r\n        // catches numbers (including floating numbers) in the first group, and alphanum in the second\r\n        NullMode.DEFAULT_WORD_REGEXP = NullMode.createWordRegExp();\r\n        NullMode.ID = 'vs.editor.modes.nullMode';\r\n        return NullMode;\r\n    }());\r\n    exports.NullMode = NullMode;\r\n    function nullTokenize(mode, buffer, state, deltaOffset, stopAtOffset) {\r\n        if (deltaOffset === void 0) { deltaOffset = 0; }\r\n        var tokens = [\r\n            {\r\n                startIndex: deltaOffset,\r\n                type: ''\r\n            }\r\n        ];\r\n        var modeTransitions = [\r\n            {\r\n                startIndex: deltaOffset,\r\n                mode: mode\r\n            }\r\n        ];\r\n        return {\r\n            tokens: tokens,\r\n            actualStopOffset: deltaOffset + buffer.length,\r\n            endState: state,\r\n            modeTransitions: modeTransitions\r\n        };\r\n    }\r\n    exports.nullTokenize = nullTokenize;\r\n});\r\n\ndefine(\"vs/editor/common/model/textModelWithTokensHelpers\", [\"require\", \"exports\", 'vs/editor/common/modes/nullMode', 'vs/editor/common/core/modeTransition'], function (require, exports, nullMode_1, modeTransition_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var WordHelper = (function () {\r\n        function WordHelper() {\r\n        }\r\n        WordHelper._safeGetWordDefinition = function (mode) {\r\n            return (mode.richEditSupport ? mode.richEditSupport.wordDefinition : null);\r\n        };\r\n        WordHelper.ensureValidWordDefinition = function (wordDefinition) {\r\n            var result = nullMode_1.NullMode.DEFAULT_WORD_REGEXP;\r\n            if (wordDefinition && (wordDefinition instanceof RegExp)) {\r\n                if (!wordDefinition.global) {\r\n                    var flags = 'g';\r\n                    if (wordDefinition.ignoreCase) {\r\n                        flags += 'i';\r\n                    }\r\n                    if (wordDefinition.multiline) {\r\n                        flags += 'm';\r\n                    }\r\n                    result = new RegExp(wordDefinition.source, flags);\r\n                }\r\n                else {\r\n                    result = wordDefinition;\r\n                }\r\n            }\r\n            result.lastIndex = 0;\r\n            return result;\r\n        };\r\n        WordHelper.massageWordDefinitionOf = function (mode) {\r\n            return WordHelper.ensureValidWordDefinition(WordHelper._safeGetWordDefinition(mode));\r\n        };\r\n        WordHelper._getWordAtColumn = function (txt, column, modeIndex, modeTransitions) {\r\n            var modeStartIndex = modeTransitions[modeIndex].startIndex, modeEndIndex = (modeIndex + 1 < modeTransitions.length ? modeTransitions[modeIndex + 1].startIndex : txt.length), mode = modeTransitions[modeIndex].mode;\r\n            return WordHelper._getWordAtText(column, WordHelper.massageWordDefinitionOf(mode), txt.substring(modeStartIndex, modeEndIndex), modeStartIndex);\r\n        };\r\n        WordHelper.getWordAtPosition = function (textSource, position) {\r\n            if (!textSource._lineIsTokenized(position.lineNumber)) {\r\n                return WordHelper._getWordAtText(position.column, WordHelper.massageWordDefinitionOf(textSource.getMode()), textSource.getLineContent(position.lineNumber), 0);\r\n            }\r\n            var result = null;\r\n            var txt = textSource.getLineContent(position.lineNumber), modeTransitions = textSource._getLineModeTransitions(position.lineNumber), columnIndex = position.column - 1, modeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, columnIndex);\r\n            result = WordHelper._getWordAtColumn(txt, position.column, modeIndex, modeTransitions);\r\n            if (!result && modeIndex > 0 && modeTransitions[modeIndex].startIndex === columnIndex) {\r\n                // The position is right at the beginning of `modeIndex`, so try looking at `modeIndex` - 1 too\r\n                result = WordHelper._getWordAtColumn(txt, position.column, modeIndex - 1, modeTransitions);\r\n            }\r\n            return result;\r\n        };\r\n        WordHelper._getWordAtText = function (column, wordDefinition, text, textOffset) {\r\n            // console.log('_getWordAtText: ', column, text, textOffset);\r\n            var words = text.match(wordDefinition), k, startWord, endWord, startColumn, endColumn, word;\r\n            if (words) {\r\n                for (k = 0; k < words.length; k++) {\r\n                    word = words[k].trim();\r\n                    if (word.length > 0) {\r\n                        startWord = text.indexOf(word, endWord);\r\n                        endWord = startWord + word.length;\r\n                        startColumn = textOffset + startWord + 1;\r\n                        endColumn = textOffset + endWord + 1;\r\n                        if (startColumn <= column && column <= endColumn) {\r\n                            return {\r\n                                word: word,\r\n                                startColumn: startColumn,\r\n                                endColumn: endColumn\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return WordHelper;\r\n    }());\r\n    exports.WordHelper = WordHelper;\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports/richEditSupport\", [\"require\", \"exports\", 'vs/editor/common/modes/nullMode', 'vs/editor/common/modes/supports/characterPair', 'vs/editor/common/modes/supports/electricCharacter', 'vs/editor/common/modes/supports/onEnter', 'vs/editor/common/modes/supports/richEditBrackets'], function (require, exports, nullMode_1, characterPair_1, electricCharacter_1, onEnter_1, richEditBrackets_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var RichEditSupport = (function () {\r\n        function RichEditSupport(modeId, previous, rawConf) {\r\n            var prev = null;\r\n            if (previous instanceof RichEditSupport) {\r\n                prev = previous._conf;\r\n            }\r\n            this._conf = RichEditSupport._mergeConf(prev, rawConf);\r\n            if (this._conf.brackets) {\r\n                this.brackets = new richEditBrackets_1.RichEditBrackets(modeId, this._conf.brackets);\r\n            }\r\n            this._handleOnEnter(modeId, this._conf);\r\n            this._handleComments(modeId, this._conf);\r\n            if (this._conf.autoClosingPairs) {\r\n                this.characterPair = new characterPair_1.CharacterPairSupport(modeId, this._conf);\r\n            }\r\n            if (this._conf.__electricCharacterSupport || this._conf.brackets) {\r\n                this.electricCharacter = new electricCharacter_1.BracketElectricCharacterSupport(modeId, this.brackets, this._conf.__electricCharacterSupport);\r\n            }\r\n            this.wordDefinition = this._conf.wordPattern || nullMode_1.NullMode.DEFAULT_WORD_REGEXP;\r\n        }\r\n        RichEditSupport._mergeConf = function (prev, current) {\r\n            return {\r\n                comments: (prev ? current.comments || prev.comments : current.comments),\r\n                brackets: (prev ? current.brackets || prev.brackets : current.brackets),\r\n                wordPattern: (prev ? current.wordPattern || prev.wordPattern : current.wordPattern),\r\n                indentationRules: (prev ? current.indentationRules || prev.indentationRules : current.indentationRules),\r\n                onEnterRules: (prev ? current.onEnterRules || prev.onEnterRules : current.onEnterRules),\r\n                autoClosingPairs: (prev ? current.autoClosingPairs || prev.autoClosingPairs : current.autoClosingPairs),\r\n                surroundingPairs: (prev ? current.surroundingPairs || prev.surroundingPairs : current.surroundingPairs),\r\n                __electricCharacterSupport: (prev ? current.__electricCharacterSupport || prev.__electricCharacterSupport : current.__electricCharacterSupport),\r\n            };\r\n        };\r\n        RichEditSupport.prototype._handleOnEnter = function (modeId, conf) {\r\n            // on enter\r\n            var onEnter = {};\r\n            var empty = true;\r\n            if (conf.brackets) {\r\n                empty = false;\r\n                onEnter.brackets = conf.brackets;\r\n            }\r\n            if (conf.indentationRules) {\r\n                empty = false;\r\n                onEnter.indentationRules = conf.indentationRules;\r\n            }\r\n            if (conf.onEnterRules) {\r\n                empty = false;\r\n                onEnter.regExpRules = conf.onEnterRules;\r\n            }\r\n            if (!empty) {\r\n                this.onEnter = new onEnter_1.OnEnterSupport(modeId, onEnter);\r\n            }\r\n        };\r\n        RichEditSupport.prototype._handleComments = function (modeId, conf) {\r\n            var commentRule = conf.comments;\r\n            // comment configuration\r\n            if (commentRule) {\r\n                this.comments = {};\r\n                if (commentRule.lineComment) {\r\n                    this.comments.lineCommentToken = commentRule.lineComment;\r\n                }\r\n                if (commentRule.blockComment) {\r\n                    var _a = commentRule.blockComment, blockStart = _a[0], blockEnd = _a[1];\r\n                    this.comments.blockCommentStartToken = blockStart;\r\n                    this.comments.blockCommentEndToken = blockEnd;\r\n                }\r\n            }\r\n        };\r\n        return RichEditSupport;\r\n    }());\r\n    exports.RichEditSupport = RichEditSupport;\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports/tokenizationSupport\", [\"require\", \"exports\", 'vs/editor/common/modes', 'vs/editor/common/modes/lineStream', 'vs/editor/common/modes/nullMode', 'vs/editor/common/modes/supports'], function (require, exports, modes, lineStream_1, nullMode_1, supports_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    function isFunction(something) {\r\n        return typeof something === 'function';\r\n    }\r\n    var TokenizationSupport = (function () {\r\n        function TokenizationSupport(mode, customization, supportsNestedModes, shouldGenerateEmbeddedModels) {\r\n            this._mode = mode;\r\n            this.customization = customization;\r\n            this.supportsNestedModes = supportsNestedModes;\r\n            this._embeddedModesListeners = {};\r\n            if (this.supportsNestedModes) {\r\n                if (!this._mode.registerSupport) {\r\n                    throw new Error('Cannot be a mode with nested modes unless I can emit a tokenizationSupport changed event!');\r\n                }\r\n            }\r\n            this.shouldGenerateEmbeddedModels = shouldGenerateEmbeddedModels;\r\n            this.defaults = {\r\n                enterNestedMode: !isFunction(customization.enterNestedMode),\r\n                getNestedMode: !isFunction(customization.getNestedMode),\r\n                getNestedModeInitialState: !isFunction(customization.getNestedModeInitialState),\r\n                getLeavingNestedModeData: !isFunction(customization.getLeavingNestedModeData),\r\n                onReturningFromNestedMode: !isFunction(customization.onReturningFromNestedMode)\r\n            };\r\n        }\r\n        TokenizationSupport.prototype.dispose = function () {\r\n            for (var listener in this._embeddedModesListeners) {\r\n                this._embeddedModesListeners[listener].dispose();\r\n                delete this._embeddedModesListeners[listener];\r\n            }\r\n        };\r\n        TokenizationSupport.prototype.getInitialState = function () {\r\n            return this.customization.getInitialState();\r\n        };\r\n        TokenizationSupport.prototype.tokenize = function (line, state, deltaOffset, stopAtOffset) {\r\n            if (deltaOffset === void 0) { deltaOffset = 0; }\r\n            if (stopAtOffset === void 0) { stopAtOffset = deltaOffset + line.length; }\r\n            if (state.getMode() !== this._mode) {\r\n                return this._nestedTokenize(line, state, deltaOffset, stopAtOffset, [], []);\r\n            }\r\n            else {\r\n                return this._myTokenize(line, state, deltaOffset, stopAtOffset, [], []);\r\n            }\r\n        };\r\n        /**\r\n         * Precondition is: nestedModeState.getMode() !== this\r\n         * This means we are in a nested mode when parsing starts on this line.\r\n         */\r\n        TokenizationSupport.prototype._nestedTokenize = function (buffer, nestedModeState, deltaOffset, stopAtOffset, prependTokens, prependModeTransitions) {\r\n            var myStateBeforeNestedMode = nestedModeState.getStateData();\r\n            var leavingNestedModeData = this.getLeavingNestedModeData(buffer, myStateBeforeNestedMode);\r\n            // Be sure to give every embedded mode the\r\n            // opportunity to leave nested mode.\r\n            // i.e. Don't go straight to the most nested mode\r\n            var stepOnceNestedState = nestedModeState;\r\n            while (stepOnceNestedState.getStateData() && stepOnceNestedState.getStateData().getMode() !== this._mode) {\r\n                stepOnceNestedState = stepOnceNestedState.getStateData();\r\n            }\r\n            var nestedMode = stepOnceNestedState.getMode();\r\n            if (!leavingNestedModeData) {\r\n                // tokenization will not leave nested mode\r\n                var result;\r\n                if (nestedMode.tokenizationSupport) {\r\n                    result = nestedMode.tokenizationSupport.tokenize(buffer, nestedModeState, deltaOffset, stopAtOffset);\r\n                }\r\n                else {\r\n                    // The nested mode doesn't have tokenization support,\r\n                    // unfortunatelly this means we have to fake it\r\n                    result = nullMode_1.nullTokenize(nestedMode, buffer, nestedModeState, deltaOffset);\r\n                }\r\n                result.tokens = prependTokens.concat(result.tokens);\r\n                result.modeTransitions = prependModeTransitions.concat(result.modeTransitions);\r\n                return result;\r\n            }\r\n            var nestedModeBuffer = leavingNestedModeData.nestedModeBuffer;\r\n            if (nestedModeBuffer.length > 0) {\r\n                // Tokenize with the nested mode\r\n                var nestedModeLineTokens;\r\n                if (nestedMode.tokenizationSupport) {\r\n                    nestedModeLineTokens = nestedMode.tokenizationSupport.tokenize(nestedModeBuffer, nestedModeState, deltaOffset, stopAtOffset);\r\n                }\r\n                else {\r\n                    // The nested mode doesn't have tokenization support,\r\n                    // unfortunatelly this means we have to fake it\r\n                    nestedModeLineTokens = nullMode_1.nullTokenize(nestedMode, nestedModeBuffer, nestedModeState, deltaOffset);\r\n                }\r\n                // Save last state of nested mode\r\n                nestedModeState = nestedModeLineTokens.endState;\r\n                // Prepend nested mode's result to our result\r\n                prependTokens = prependTokens.concat(nestedModeLineTokens.tokens);\r\n                prependModeTransitions = prependModeTransitions.concat(nestedModeLineTokens.modeTransitions);\r\n            }\r\n            var bufferAfterNestedMode = leavingNestedModeData.bufferAfterNestedMode;\r\n            var myStateAfterNestedMode = leavingNestedModeData.stateAfterNestedMode;\r\n            myStateAfterNestedMode.setStateData(myStateBeforeNestedMode.getStateData());\r\n            this.onReturningFromNestedMode(myStateAfterNestedMode, nestedModeState);\r\n            return this._myTokenize(bufferAfterNestedMode, myStateAfterNestedMode, deltaOffset + nestedModeBuffer.length, stopAtOffset, prependTokens, prependModeTransitions);\r\n        };\r\n        /**\r\n         * Precondition is: state.getMode() === this\r\n         * This means we are in the current mode when parsing starts on this line.\r\n         */\r\n        TokenizationSupport.prototype._myTokenize = function (buffer, myState, deltaOffset, stopAtOffset, prependTokens, prependModeTransitions) {\r\n            var _this = this;\r\n            var lineStream = new lineStream_1.LineStream(buffer);\r\n            var tokenResult, beforeTokenizeStreamPos;\r\n            var previousType = null;\r\n            var retokenize = null;\r\n            myState = myState.clone();\r\n            if (prependModeTransitions.length <= 0 || prependModeTransitions[prependModeTransitions.length - 1].mode !== this._mode) {\r\n                // Avoid transitioning to the same mode (this can happen in case of empty embedded modes)\r\n                prependModeTransitions.push({\r\n                    startIndex: deltaOffset,\r\n                    mode: this._mode\r\n                });\r\n            }\r\n            var maxPos = Math.min(stopAtOffset - deltaOffset, buffer.length);\r\n            while (lineStream.pos() < maxPos) {\r\n                beforeTokenizeStreamPos = lineStream.pos();\r\n                do {\r\n                    tokenResult = myState.tokenize(lineStream);\r\n                    if (tokenResult === null || tokenResult === undefined ||\r\n                        ((tokenResult.type === undefined || tokenResult.type === null) &&\r\n                            (tokenResult.nextState === undefined || tokenResult.nextState === null))) {\r\n                        throw new Error('Tokenizer must return a valid state');\r\n                    }\r\n                    if (tokenResult.nextState) {\r\n                        tokenResult.nextState.setStateData(myState.getStateData());\r\n                        myState = tokenResult.nextState;\r\n                    }\r\n                    if (lineStream.pos() <= beforeTokenizeStreamPos) {\r\n                        throw new Error('Stream did not advance while tokenizing. Mode id is ' + this._mode.getId() + ' (stuck at token type: \"' + tokenResult.type + '\", prepend tokens: \"' + (prependTokens.map(function (t) { return t.type; }).join(',')) + '\").');\r\n                    }\r\n                } while (!tokenResult.type && tokenResult.type !== '');\r\n                if (previousType !== tokenResult.type || tokenResult.dontMergeWithPrev || previousType === null) {\r\n                    prependTokens.push(new supports_1.Token(beforeTokenizeStreamPos + deltaOffset, tokenResult.type));\r\n                }\r\n                previousType = tokenResult.type;\r\n                if (this.supportsNestedModes && this.enterNestedMode(myState)) {\r\n                    var currentEmbeddedLevels = this._getEmbeddedLevel(myState);\r\n                    if (currentEmbeddedLevels < TokenizationSupport.MAX_EMBEDDED_LEVELS) {\r\n                        var nestedModeState = this.getNestedModeInitialState(myState);\r\n                        // Re-emit tokenizationSupport change events from all modes that I ever embedded\r\n                        var embeddedMode = nestedModeState.state.getMode();\r\n                        if (typeof embeddedMode.addSupportChangedListener === 'function' && !this._embeddedModesListeners.hasOwnProperty(embeddedMode.getId())) {\r\n                            var emitting = false;\r\n                            this._embeddedModesListeners[embeddedMode.getId()] = embeddedMode.addSupportChangedListener(function (e) {\r\n                                if (emitting) {\r\n                                    return;\r\n                                }\r\n                                if (e.tokenizationSupport) {\r\n                                    emitting = true;\r\n                                    _this._mode.registerSupport(modes.MutableSupport.TokenizationSupport, function (mode) {\r\n                                        return mode.tokenizationSupport;\r\n                                    });\r\n                                    emitting = false;\r\n                                }\r\n                            });\r\n                        }\r\n                        if (!lineStream.eos()) {\r\n                            // There is content from the embedded mode\r\n                            var restOfBuffer = buffer.substr(lineStream.pos());\r\n                            var result = this._nestedTokenize(restOfBuffer, nestedModeState.state, deltaOffset + lineStream.pos(), stopAtOffset, prependTokens, prependModeTransitions);\r\n                            result.retokenize = result.retokenize || nestedModeState.missingModePromise;\r\n                            return result;\r\n                        }\r\n                        else {\r\n                            // Transition to the nested mode state\r\n                            myState = nestedModeState.state;\r\n                            retokenize = nestedModeState.missingModePromise;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                tokens: prependTokens,\r\n                actualStopOffset: lineStream.pos() + deltaOffset,\r\n                modeTransitions: prependModeTransitions,\r\n                endState: myState,\r\n                retokenize: retokenize\r\n            };\r\n        };\r\n        TokenizationSupport.prototype._getEmbeddedLevel = function (state) {\r\n            var result = -1;\r\n            while (state) {\r\n                result++;\r\n                state = state.getStateData();\r\n            }\r\n            return result;\r\n        };\r\n        TokenizationSupport.prototype.enterNestedMode = function (state) {\r\n            if (this.defaults.enterNestedMode) {\r\n                return false;\r\n            }\r\n            return this.customization.enterNestedMode(state);\r\n        };\r\n        TokenizationSupport.prototype.getNestedMode = function (state) {\r\n            if (this.defaults.getNestedMode) {\r\n                return null;\r\n            }\r\n            return this.customization.getNestedMode(state);\r\n        };\r\n        TokenizationSupport._validatedNestedMode = function (input) {\r\n            var mode = new nullMode_1.NullMode(), missingModePromise = null;\r\n            if (input && input.mode) {\r\n                mode = input.mode;\r\n            }\r\n            if (input && input.missingModePromise) {\r\n                missingModePromise = input.missingModePromise;\r\n            }\r\n            return {\r\n                mode: mode,\r\n                missingModePromise: missingModePromise\r\n            };\r\n        };\r\n        TokenizationSupport.prototype.getNestedModeInitialState = function (state) {\r\n            if (this.defaults.getNestedModeInitialState) {\r\n                var nestedMode = TokenizationSupport._validatedNestedMode(this.getNestedMode(state));\r\n                var missingModePromise = nestedMode.missingModePromise;\r\n                var nestedModeState;\r\n                if (nestedMode.mode.tokenizationSupport) {\r\n                    nestedModeState = nestedMode.mode.tokenizationSupport.getInitialState();\r\n                }\r\n                else {\r\n                    nestedModeState = new nullMode_1.NullState(nestedMode.mode, null);\r\n                }\r\n                nestedModeState.setStateData(state);\r\n                return {\r\n                    state: nestedModeState,\r\n                    missingModePromise: missingModePromise\r\n                };\r\n            }\r\n            return this.customization.getNestedModeInitialState(state);\r\n        };\r\n        TokenizationSupport.prototype.getLeavingNestedModeData = function (line, state) {\r\n            if (this.defaults.getLeavingNestedModeData) {\r\n                return null;\r\n            }\r\n            return this.customization.getLeavingNestedModeData(line, state);\r\n        };\r\n        TokenizationSupport.prototype.onReturningFromNestedMode = function (myStateAfterNestedMode, lastNestedModeState) {\r\n            if (this.defaults.onReturningFromNestedMode) {\r\n                return null;\r\n            }\r\n            return this.customization.onReturningFromNestedMode(myStateAfterNestedMode, lastNestedModeState);\r\n        };\r\n        TokenizationSupport.MAX_EMBEDDED_LEVELS = 5;\r\n        return TokenizationSupport;\r\n    }());\r\n    exports.TokenizationSupport = TokenizationSupport;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/modes/monarch/monarchLexer\", [\"require\", \"exports\", 'vs/editor/common/modes/abstractState', 'vs/editor/common/modes/lineStream', 'vs/editor/common/modes/monarch/monarchCommon', 'vs/editor/common/modes/supports/tokenizationSupport'], function (require, exports, abstractState_1, lineStream_1, monarchCommon, tokenizationSupport_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * The MonarchLexer class implements a monaco lexer that highlights source code.\r\n     * It takes a compiled lexer to guide the tokenizer and maintains a stack of\r\n     * lexer states.\r\n     */\r\n    var MonarchLexer = (function (_super) {\r\n        __extends(MonarchLexer, _super);\r\n        function MonarchLexer(mode, modeService, lexer, stack, embeddedMode) {\r\n            _super.call(this, mode);\r\n            this.id = MonarchLexer.ID++; // for debugging, assigns unique id to each instance\r\n            this.modeService = modeService;\r\n            this.lexer = lexer; // (compiled) lexer description\r\n            this.stack = (stack ? stack : [lexer.start]); // stack of states\r\n            this.embeddedMode = (embeddedMode ? embeddedMode : null); // are we scanning an embedded section?\r\n            // did we encounter an embedded start on this line?\r\n            // no need for cloning or equality since it is used only within a line\r\n            this.embeddedEntered = false;\r\n            // regular expression group matching\r\n            // these never need cloning or equality since they are only used within a line match\r\n            this.groupActions = null;\r\n            this.groupMatches = null;\r\n            this.groupMatched = null;\r\n            this.groupRule = null;\r\n        }\r\n        MonarchLexer.prototype.makeClone = function () {\r\n            return new MonarchLexer(this.getMode(), this.modeService, this.lexer, this.stack.slice(0), this.embeddedMode);\r\n        };\r\n        MonarchLexer.prototype.equals = function (other) {\r\n            if (!_super.prototype.equals.call(this, other)) {\r\n                return false;\r\n            }\r\n            if (!(other instanceof MonarchLexer)) {\r\n                return false;\r\n            }\r\n            var otherm = other;\r\n            if ((this.stack.length !== otherm.stack.length) || (this.lexer.name !== otherm.lexer.name) ||\r\n                (this.embeddedMode !== otherm.embeddedMode)) {\r\n                return false;\r\n            }\r\n            var idx;\r\n            for (idx in this.stack) {\r\n                if (this.stack.hasOwnProperty(idx)) {\r\n                    if (this.stack[idx] !== otherm.stack[idx]) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        /**\r\n         * The main tokenizer: this function gets called by monaco to tokenize lines\r\n         * Note: we don't want to raise exceptions here and always keep going..\r\n         *\r\n         * TODO: there are many optimizations possible here for the common cases\r\n         * but for now I concentrated on functionality and correctness.\r\n         */\r\n        MonarchLexer.prototype.tokenize = function (stream, noConsumeIsOk) {\r\n            var stackLen0 = this.stack.length; // these are saved to check progress\r\n            var groupLen0 = 0;\r\n            var state = this.stack[0]; // the current state\r\n            this.embeddedEntered = false;\r\n            var matches = null;\r\n            var matched = null;\r\n            var action = null;\r\n            var next = null;\r\n            var rule = null;\r\n            // check if we need to process group matches first\r\n            if (this.groupActions) {\r\n                groupLen0 = this.groupActions.length;\r\n                matches = this.groupMatches;\r\n                matched = this.groupMatched.shift();\r\n                action = this.groupActions.shift();\r\n                rule = this.groupRule;\r\n                // cleanup if necessary\r\n                if (this.groupActions.length === 0) {\r\n                    this.groupActions = null;\r\n                    this.groupMatches = null;\r\n                    this.groupMatched = null;\r\n                    this.groupRule = null;\r\n                }\r\n            }\r\n            else {\r\n                // nothing to do\r\n                if (stream.eos()) {\r\n                    return { type: '' };\r\n                }\r\n                // get the entire line\r\n                var line = stream.advanceToEOS();\r\n                stream.goBack(line.length);\r\n                // get the rules for this state\r\n                var rules = this.lexer.tokenizer[state];\r\n                if (!rules) {\r\n                    rules = monarchCommon.findRules(this.lexer, state); // do parent matching\r\n                }\r\n                if (!rules) {\r\n                    monarchCommon.throwError(this.lexer, 'tokenizer state is not defined: ' + state);\r\n                }\r\n                else {\r\n                    // try each rule until we match\r\n                    rule = null;\r\n                    var pos = stream.pos();\r\n                    var idx;\r\n                    for (idx in rules) {\r\n                        if (rules.hasOwnProperty(idx)) {\r\n                            rule = rules[idx];\r\n                            if (pos === 0 || !rule.matchOnlyAtLineStart) {\r\n                                matches = line.match(rule.regex);\r\n                                if (matches) {\r\n                                    matched = matches[0];\r\n                                    action = rule.action;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // We matched 'rule' with 'matches' and 'action'\r\n            if (!matches) {\r\n                matches = [''];\r\n                matched = '';\r\n            }\r\n            if (!action) {\r\n                // bad: we didn't match anything, and there is no action to take\r\n                // we need to advance the stream or we get progress trouble\r\n                if (!stream.eos()) {\r\n                    matches = [stream.peek()];\r\n                    matched = matches[0];\r\n                }\r\n                action = this.lexer.defaultToken;\r\n            }\r\n            // advance stream\r\n            stream.advance(matched.length);\r\n            // maybe call action function (used for 'cases')\r\n            while (action.test) {\r\n                var callres = action.test(matched, matches, state, stream.eos());\r\n                action = callres;\r\n            }\r\n            // set the result: either a string or an array of actions\r\n            var result = null;\r\n            if (typeof (action) === 'string' || Array.isArray(action)) {\r\n                result = action;\r\n            }\r\n            else if (action.group) {\r\n                result = action.group;\r\n            }\r\n            else if (action.token !== null && action.token !== undefined) {\r\n                result = action.token;\r\n                // do $n replacements?\r\n                if (action.tokenSubst) {\r\n                    result = monarchCommon.substituteMatches(this.lexer, result, matched, matches, state);\r\n                }\r\n                // enter embedded mode?\r\n                if (action.nextEmbedded) {\r\n                    if (action.nextEmbedded === '@pop') {\r\n                        if (!this.embeddedMode) {\r\n                            monarchCommon.throwError(this.lexer, 'cannot pop embedded mode if not inside one');\r\n                        }\r\n                        this.embeddedMode = null;\r\n                    }\r\n                    else if (this.embeddedMode) {\r\n                        monarchCommon.throwError(this.lexer, 'cannot enter embedded mode from within an embedded mode');\r\n                    }\r\n                    else {\r\n                        this.embeddedMode = monarchCommon.substituteMatches(this.lexer, action.nextEmbedded, matched, matches, state);\r\n                        // substitute language alias to known modes to support syntax highlighting\r\n                        var embeddedMode = this.modeService.getModeIdForLanguageName(this.embeddedMode);\r\n                        if (this.embeddedMode && embeddedMode) {\r\n                            this.embeddedMode = embeddedMode;\r\n                        }\r\n                        this.embeddedEntered = true;\r\n                    }\r\n                }\r\n                // state transformations\r\n                if (action.goBack) {\r\n                    stream.goBack(action.goBack);\r\n                }\r\n                if (action.switchTo && typeof action.switchTo === 'string') {\r\n                    var nextState = monarchCommon.substituteMatches(this.lexer, action.switchTo, matched, matches, state); // switch state without a push...\r\n                    if (nextState[0] === '@') {\r\n                        nextState = nextState.substr(1); // peel off starting '@'\r\n                    }\r\n                    if (!monarchCommon.findRules(this.lexer, nextState)) {\r\n                        monarchCommon.throwError(this.lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + rule.name);\r\n                    }\r\n                    else {\r\n                        this.stack[0] = nextState;\r\n                    }\r\n                    next = null;\r\n                }\r\n                else if (action.transform && typeof action.transform === 'function') {\r\n                    this.stack = action.transform(this.stack); // if you need to do really funky stuff...\r\n                    next = null;\r\n                }\r\n                else if (action.next) {\r\n                    if (action.next === '@push') {\r\n                        if (this.stack.length >= this.lexer.maxStack) {\r\n                            monarchCommon.throwError(this.lexer, 'maximum tokenizer stack size reached: [' +\r\n                                this.stack[0] + ',' + this.stack[1] + ',...,' +\r\n                                this.stack[this.stack.length - 2] + ',' + this.stack[this.stack.length - 1] + ']');\r\n                        }\r\n                        else {\r\n                            this.stack.unshift(state);\r\n                        }\r\n                    }\r\n                    else if (action.next === '@pop') {\r\n                        if (this.stack.length <= 1) {\r\n                            monarchCommon.throwError(this.lexer, 'trying to pop an empty stack in rule: ' + rule.name);\r\n                        }\r\n                        else {\r\n                            this.stack.shift();\r\n                        }\r\n                    }\r\n                    else if (action.next === '@popall') {\r\n                        if (this.stack.length > 1) {\r\n                            this.stack = [this.stack[this.stack.length - 1]];\r\n                        }\r\n                    }\r\n                    else {\r\n                        var nextState = monarchCommon.substituteMatches(this.lexer, action.next, matched, matches, state);\r\n                        if (nextState[0] === '@') {\r\n                            nextState = nextState.substr(1); // peel off starting '@'\r\n                        }\r\n                        if (!monarchCommon.findRules(this.lexer, nextState)) {\r\n                            monarchCommon.throwError(this.lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + rule.name);\r\n                        }\r\n                        else {\r\n                            this.stack.unshift(nextState);\r\n                        }\r\n                    }\r\n                }\r\n                if (action.log && typeof (action.log) === 'string') {\r\n                    monarchCommon.log(this.lexer, this.lexer.displayName + ': ' + monarchCommon.substituteMatches(this.lexer, action.log, matched, matches, state));\r\n                }\r\n            }\r\n            // check result\r\n            if (result === null) {\r\n                monarchCommon.throwError(this.lexer, 'lexer rule has no well-defined action in rule: ' + rule.name);\r\n                result = this.lexer.defaultToken;\r\n            }\r\n            // is the result a group match?\r\n            if (Array.isArray(result)) {\r\n                if (this.groupActions && this.groupActions.length > 0) {\r\n                    monarchCommon.throwError(this.lexer, 'groups cannot be nested: ' + rule.name);\r\n                }\r\n                if (matches.length !== result.length + 1) {\r\n                    monarchCommon.throwError(this.lexer, 'matched number of groups does not match the number of actions in rule: ' + rule.name);\r\n                }\r\n                var totalLen = 0;\r\n                for (var i = 1; i < matches.length; i++) {\r\n                    totalLen += matches[i].length;\r\n                }\r\n                if (totalLen !== matched.length) {\r\n                    monarchCommon.throwError(this.lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + rule.name);\r\n                }\r\n                this.groupMatches = matches;\r\n                this.groupMatched = matches.slice(1);\r\n                this.groupActions = result.slice(0);\r\n                this.groupRule = rule;\r\n                stream.goBack(matched.length);\r\n                return this.tokenize(stream); // call recursively to initiate first result match\r\n            }\r\n            else {\r\n                // check for '@rematch'\r\n                if (result === '@rematch') {\r\n                    stream.goBack(matched.length);\r\n                    matched = ''; // better set the next state too..\r\n                    matches = null;\r\n                    result = '';\r\n                }\r\n                // check progress\r\n                if (matched.length === 0) {\r\n                    if (stackLen0 !== this.stack.length || state !== this.stack[0]\r\n                        || (!this.groupActions ? 0 : this.groupActions.length) !== groupLen0) {\r\n                        if (!noConsumeIsOk) {\r\n                            return this.tokenize(stream); // tokenize again in the new state\r\n                        }\r\n                    }\r\n                    else {\r\n                        monarchCommon.throwError(this.lexer, 'no progress in tokenizer in rule: ' + rule.name);\r\n                        stream.advanceToEOS(); // must make progress or editor loops\r\n                    }\r\n                }\r\n                // return the result (and check for brace matching)\r\n                // todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\r\n                if (result.indexOf('@brackets') === 0) {\r\n                    var rest = result.substr('@brackets'.length);\r\n                    var bracket = findBracket(this.lexer, matched);\r\n                    if (!bracket) {\r\n                        monarchCommon.throwError(this.lexer, '@brackets token returned but no bracket defined as: ' + matched);\r\n                        bracket = { token: '', bracketType: monarchCommon.MonarchBracket.None };\r\n                    }\r\n                    return { type: monarchCommon.sanitize(bracket.token + rest) };\r\n                }\r\n                else {\r\n                    var token = (result === '' ? '' : result + this.lexer.tokenPostfix);\r\n                    return { type: monarchCommon.sanitize(token) };\r\n                }\r\n            }\r\n        };\r\n        MonarchLexer.ID = 0;\r\n        return MonarchLexer;\r\n    }(abstractState_1.AbstractState));\r\n    exports.MonarchLexer = MonarchLexer;\r\n    /**\r\n     * Searches for a bracket in the 'brackets' attribute that matches the input.\r\n     */\r\n    function findBracket(lexer, matched) {\r\n        if (!matched) {\r\n            return null;\r\n        }\r\n        matched = monarchCommon.fixCase(lexer, matched);\r\n        var brackets = lexer.brackets;\r\n        for (var i = 0; i < brackets.length; i++) {\r\n            var bracket = brackets[i];\r\n            if (bracket.open === matched) {\r\n                return { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Open };\r\n            }\r\n            else if (bracket.close === matched) {\r\n                return { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Close };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function createTokenizationSupport(modeService, mode, lexer) {\r\n        return new tokenizationSupport_1.TokenizationSupport(mode, {\r\n            getInitialState: function () {\r\n                return new MonarchLexer(mode, modeService, lexer);\r\n            },\r\n            enterNestedMode: function (state) {\r\n                if (state instanceof MonarchLexer) {\r\n                    return state.embeddedEntered;\r\n                }\r\n                return false;\r\n            },\r\n            getNestedMode: function (rawState) {\r\n                var mime = rawState.embeddedMode;\r\n                if (!modeService.isRegisteredMode(mime)) {\r\n                    // unknown mode\r\n                    return {\r\n                        mode: modeService.getMode('text/plain'),\r\n                        missingModePromise: null\r\n                    };\r\n                }\r\n                var mode = modeService.getMode(mime);\r\n                if (mode) {\r\n                    // mode is available\r\n                    return {\r\n                        mode: mode,\r\n                        missingModePromise: null\r\n                    };\r\n                }\r\n                // mode is not yet loaded\r\n                return {\r\n                    mode: modeService.getMode('text/plain'),\r\n                    missingModePromise: modeService.getOrCreateMode(mime).then(function () { return null; })\r\n                };\r\n            },\r\n            getLeavingNestedModeData: function (line, state) {\r\n                // state = state.clone();\r\n                var mstate = state.clone();\r\n                var stream = new lineStream_1.LineStream(line);\r\n                while (!stream.eos() && mstate.embeddedMode) {\r\n                    mstate.tokenize(stream, true); // allow no consumption for @rematch\r\n                }\r\n                if (mstate.embeddedMode) {\r\n                    return null; // don't leave yet\r\n                }\r\n                var end = stream.pos();\r\n                return {\r\n                    nestedModeBuffer: line.substring(0, end),\r\n                    bufferAfterNestedMode: line.substring(end),\r\n                    stateAfterNestedMode: mstate\r\n                };\r\n            }\r\n        }, lexer.usesEmbedded, false);\r\n    }\r\n    exports.createTokenizationSupport = createTokenizationSupport;\r\n});\r\n\ndefine(\"vs/nls!vs/editor/common/model/textModelWithTokens\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/editor/common/model/textModelWithTokens\", data); });\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/textModelWithTokens\", [\"require\", \"exports\", 'vs/nls!vs/editor/common/model/textModelWithTokens', 'vs/base/common/async', 'vs/base/common/errors', 'vs/base/common/lifecycle', 'vs/base/common/stopwatch', 'vs/base/common/timer', 'vs/base/common/winjs.base', 'vs/editor/common/editorCommon', 'vs/editor/common/model/textModel', 'vs/editor/common/model/textModelWithTokensHelpers', 'vs/editor/common/model/tokenIterator', 'vs/editor/common/modes/nullMode', 'vs/editor/common/modes/supports', 'vs/editor/common/modes/supports/richEditBrackets', 'vs/editor/common/core/modeTransition', 'vs/editor/common/model/lineToken', 'vs/editor/common/model/tokensBinaryEncoding'], function (require, exports, nls, async_1, errors_1, lifecycle_1, stopwatch_1, timer, winjs_base_1, editorCommon, textModel_1, textModelWithTokensHelpers_1, tokenIterator_1, nullMode_1, supports_1, richEditBrackets_1, modeTransition_1, lineToken_1, tokensBinaryEncoding_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var ModeToModelBinder = (function () {\r\n        function ModeToModelBinder(modePromise, model) {\r\n            var _this = this;\r\n            this._modePromise = modePromise;\r\n            // Create an external mode promise that fires after the mode is set to the model\r\n            this._externalModePromise = new winjs_base_1.TPromise(function (c, e, p) {\r\n                _this._externalModePromise_c = c;\r\n                _this._externalModePromise_e = e;\r\n            }, function () {\r\n                // this promise cannot be canceled\r\n            });\r\n            this._model = model;\r\n            this._isDisposed = false;\r\n            // Ensure asynchronicity\r\n            winjs_base_1.TPromise.timeout(0).then(function () {\r\n                return _this._modePromise;\r\n            }).then(function (mode) {\r\n                if (_this._isDisposed) {\r\n                    _this._externalModePromise_c(false);\r\n                    return;\r\n                }\r\n                var model = _this._model;\r\n                _this.dispose();\r\n                model.setMode(mode);\r\n                model._warmUpTokens();\r\n                _this._externalModePromise_c(true);\r\n            }).done(null, function (err) {\r\n                _this._externalModePromise_e(err);\r\n                errors_1.onUnexpectedError(err);\r\n            });\r\n        }\r\n        ModeToModelBinder.prototype.getModePromise = function () {\r\n            return this._externalModePromise;\r\n        };\r\n        ModeToModelBinder.prototype.dispose = function () {\r\n            this._modePromise = null;\r\n            this._model = null;\r\n            this._isDisposed = true;\r\n        };\r\n        return ModeToModelBinder;\r\n    }());\r\n    var FullModelRetokenizer = (function () {\r\n        function FullModelRetokenizer(retokenizePromise, model) {\r\n            var _this = this;\r\n            this._retokenizePromise = retokenizePromise;\r\n            this._model = model;\r\n            this._isDisposed = false;\r\n            this.isFulfilled = false;\r\n            // Ensure asynchronicity\r\n            winjs_base_1.TPromise.timeout(0).then(function () {\r\n                return _this._retokenizePromise;\r\n            }).then(function () {\r\n                if (_this._isDisposed) {\r\n                    return;\r\n                }\r\n                _this.isFulfilled = true;\r\n                _this._model.onRetokenizerFulfilled();\r\n            }).done(null, errors_1.onUnexpectedError);\r\n        }\r\n        FullModelRetokenizer.prototype.getRange = function () {\r\n            return null;\r\n        };\r\n        FullModelRetokenizer.prototype.dispose = function () {\r\n            this._retokenizePromise = null;\r\n            this._model = null;\r\n            this._isDisposed = true;\r\n        };\r\n        return FullModelRetokenizer;\r\n    }());\r\n    exports.FullModelRetokenizer = FullModelRetokenizer;\r\n    var LineContext = (function () {\r\n        function LineContext(topLevelMode, line) {\r\n            this.modeTransitions = line.getModeTransitions(topLevelMode);\r\n            this._text = line.text;\r\n            this._lineTokens = line.getTokens();\r\n        }\r\n        LineContext.prototype.getLineContent = function () {\r\n            return this._text;\r\n        };\r\n        LineContext.prototype.getTokenCount = function () {\r\n            return this._lineTokens.getTokenCount();\r\n        };\r\n        LineContext.prototype.getTokenStartIndex = function (tokenIndex) {\r\n            return this._lineTokens.getTokenStartIndex(tokenIndex);\r\n        };\r\n        LineContext.prototype.getTokenEndIndex = function (tokenIndex) {\r\n            return this._lineTokens.getTokenEndIndex(tokenIndex, this._text.length);\r\n        };\r\n        LineContext.prototype.getTokenType = function (tokenIndex) {\r\n            return this._lineTokens.getTokenType(tokenIndex);\r\n        };\r\n        LineContext.prototype.getTokenText = function (tokenIndex) {\r\n            var startIndex = this._lineTokens.getTokenStartIndex(tokenIndex);\r\n            var endIndex = this._lineTokens.getTokenEndIndex(tokenIndex, this._text.length);\r\n            return this._text.substring(startIndex, endIndex);\r\n        };\r\n        LineContext.prototype.findIndexOfOffset = function (offset) {\r\n            return this._lineTokens.findIndexOfOffset(offset);\r\n        };\r\n        return LineContext;\r\n    }());\r\n    var TextModelWithTokens = (function (_super) {\r\n        __extends(TextModelWithTokens, _super);\r\n        function TextModelWithTokens(allowedEventTypes, rawText, shouldAutoTokenize, modeOrPromise) {\r\n            var _this = this;\r\n            allowedEventTypes.push(editorCommon.EventType.ModelTokensChanged);\r\n            allowedEventTypes.push(editorCommon.EventType.ModelModeChanged);\r\n            allowedEventTypes.push(editorCommon.EventType.ModelModeSupportChanged);\r\n            _super.call(this, allowedEventTypes, rawText);\r\n            this._shouldAutoTokenize = shouldAutoTokenize;\r\n            this._mode = null;\r\n            this._modeListener = null;\r\n            this._modeToModelBinder = null;\r\n            this._tokensInflatorMap = null;\r\n            this._invalidLineStartIndex = 0;\r\n            this._lastState = null;\r\n            this._revalidateTokensTimeout = -1;\r\n            this._scheduleRetokenizeNow = null;\r\n            this._retokenizers = null;\r\n            if (!modeOrPromise) {\r\n                this._mode = new nullMode_1.NullMode();\r\n            }\r\n            else if (winjs_base_1.TPromise.is(modeOrPromise)) {\r\n                // TODO@Alex: To avoid mode id changes, we check if this promise is resolved\r\n                var promiseValue = modeOrPromise._value;\r\n                if (promiseValue && typeof promiseValue.getId === 'function') {\r\n                    // The promise is already resolved\r\n                    this._mode = this._massageMode(promiseValue);\r\n                    this._resetModeListener(this._mode);\r\n                }\r\n                else {\r\n                    var modePromise = modeOrPromise;\r\n                    this._modeToModelBinder = new ModeToModelBinder(modePromise, this);\r\n                    this._mode = new nullMode_1.NullMode();\r\n                }\r\n            }\r\n            else {\r\n                this._mode = this._massageMode(modeOrPromise);\r\n                this._resetModeListener(this._mode);\r\n            }\r\n            this._revalidateTokensTimeout = -1;\r\n            this._scheduleRetokenizeNow = new async_1.RunOnceScheduler(function () { return _this._retokenizeNow(); }, 200);\r\n            this._retokenizers = [];\r\n            this._resetTokenizationState();\r\n        }\r\n        TextModelWithTokens.prototype.dispose = function () {\r\n            if (this._modeToModelBinder) {\r\n                this._modeToModelBinder.dispose();\r\n                this._modeToModelBinder = null;\r\n            }\r\n            this._resetModeListener(null);\r\n            this._clearTimers();\r\n            this._mode = null;\r\n            this._lastState = null;\r\n            this._tokensInflatorMap = null;\r\n            this._retokenizers = lifecycle_1.dispose(this._retokenizers);\r\n            this._scheduleRetokenizeNow.dispose();\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        TextModelWithTokens.prototype._massageMode = function (mode) {\r\n            if (this.isTooLargeForHavingAMode()) {\r\n                return new nullMode_1.NullMode();\r\n            }\r\n            if (this.isTooLargeForHavingARichMode()) {\r\n                return mode.toSimplifiedMode();\r\n            }\r\n            return mode;\r\n        };\r\n        TextModelWithTokens.prototype.whenModeIsReady = function () {\r\n            var _this = this;\r\n            if (this._modeToModelBinder) {\r\n                // Still waiting for some mode to load\r\n                return this._modeToModelBinder.getModePromise().then(function () { return _this._mode; });\r\n            }\r\n            return winjs_base_1.TPromise.as(this._mode);\r\n        };\r\n        TextModelWithTokens.prototype.onRetokenizerFulfilled = function () {\r\n            this._scheduleRetokenizeNow.schedule();\r\n        };\r\n        TextModelWithTokens.prototype._retokenizeNow = function () {\r\n            var fulfilled = this._retokenizers.filter(function (r) { return r.isFulfilled; });\r\n            this._retokenizers = this._retokenizers.filter(function (r) { return !r.isFulfilled; });\r\n            var hasFullModel = false;\r\n            for (var i = 0; i < fulfilled.length; i++) {\r\n                if (!fulfilled[i].getRange()) {\r\n                    hasFullModel = true;\r\n                }\r\n            }\r\n            if (hasFullModel) {\r\n                // Just invalidate all the lines\r\n                for (var i = 0, len = this._lines.length; i < len; i++) {\r\n                    this._lines[i].isInvalid = true;\r\n                }\r\n                this._invalidLineStartIndex = 0;\r\n            }\r\n            else {\r\n                var minLineNumber = Number.MAX_VALUE;\r\n                for (var i = 0; i < fulfilled.length; i++) {\r\n                    var range = fulfilled[i].getRange();\r\n                    minLineNumber = Math.min(minLineNumber, range.startLineNumber);\r\n                    for (var lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\r\n                        this._lines[lineNumber - 1].isInvalid = true;\r\n                    }\r\n                }\r\n                if (minLineNumber - 1 < this._invalidLineStartIndex) {\r\n                    if (this._invalidLineStartIndex < this._lines.length) {\r\n                        this._lines[this._invalidLineStartIndex].isInvalid = true;\r\n                    }\r\n                    this._invalidLineStartIndex = minLineNumber - 1;\r\n                }\r\n            }\r\n            this._beginBackgroundTokenization();\r\n            for (var i = 0; i < fulfilled.length; i++) {\r\n                fulfilled[i].dispose();\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._createRetokenizer = function (retokenizePromise, lineNumber) {\r\n            return new FullModelRetokenizer(retokenizePromise, this);\r\n        };\r\n        TextModelWithTokens.prototype._resetValue = function (e, newValue) {\r\n            _super.prototype._resetValue.call(this, e, newValue);\r\n            // Cancel tokenization, clear all tokens and begin tokenizing\r\n            this._resetTokenizationState();\r\n        };\r\n        TextModelWithTokens.prototype._resetMode = function (e, newMode) {\r\n            // Cancel tokenization, clear all tokens and begin tokenizing\r\n            this._mode = newMode;\r\n            this._resetModeListener(newMode);\r\n            this._resetTokenizationState();\r\n            this.emitModelTokensChangedEvent(1, this.getLineCount());\r\n        };\r\n        TextModelWithTokens.prototype._resetModeListener = function (newMode) {\r\n            var _this = this;\r\n            if (this._modeListener) {\r\n                this._modeListener.dispose();\r\n                this._modeListener = null;\r\n            }\r\n            if (newMode && typeof newMode.addSupportChangedListener === 'function') {\r\n                this._modeListener = newMode.addSupportChangedListener(function (e) { return _this._onModeSupportChanged(e); });\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._onModeSupportChanged = function (e) {\r\n            this._emitModelModeSupportChangedEvent(e);\r\n            if (e.tokenizationSupport) {\r\n                this._resetTokenizationState();\r\n                this.emitModelTokensChangedEvent(1, this.getLineCount());\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._resetTokenizationState = function () {\r\n            this._retokenizers = lifecycle_1.dispose(this._retokenizers);\r\n            this._scheduleRetokenizeNow.cancel();\r\n            this._clearTimers();\r\n            for (var i = 0; i < this._lines.length; i++) {\r\n                this._lines[i].setState(null);\r\n            }\r\n            this._initializeTokenizationState();\r\n        };\r\n        TextModelWithTokens.prototype._clearTimers = function () {\r\n            if (this._revalidateTokensTimeout !== -1) {\r\n                clearTimeout(this._revalidateTokensTimeout);\r\n                this._revalidateTokensTimeout = -1;\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._initializeTokenizationState = function () {\r\n            // Initialize tokenization states\r\n            var initialState = null;\r\n            if (this._mode.tokenizationSupport) {\r\n                try {\r\n                    initialState = this._mode.tokenizationSupport.getInitialState();\r\n                }\r\n                catch (e) {\r\n                    e.friendlyMessage = TextModelWithTokens.MODE_TOKENIZATION_FAILED_MSG;\r\n                    errors_1.onUnexpectedError(e);\r\n                    this._mode = new nullMode_1.NullMode();\r\n                }\r\n            }\r\n            if (!initialState) {\r\n                initialState = new nullMode_1.NullState(this._mode, null);\r\n            }\r\n            this._lines[0].setState(initialState);\r\n            this._lastState = null;\r\n            this._tokensInflatorMap = new tokensBinaryEncoding_1.TokensInflatorMap();\r\n            this._invalidLineStartIndex = 0;\r\n            this._beginBackgroundTokenization();\r\n        };\r\n        TextModelWithTokens.prototype.getLineTokens = function (lineNumber, inaccurateTokensAcceptable) {\r\n            if (inaccurateTokensAcceptable === void 0) { inaccurateTokensAcceptable = false; }\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            if (!inaccurateTokensAcceptable) {\r\n                this._updateTokensUntilLine(lineNumber, true);\r\n            }\r\n            return this._lines[lineNumber - 1].getTokens();\r\n        };\r\n        TextModelWithTokens.prototype.getLineContext = function (lineNumber) {\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            this._updateTokensUntilLine(lineNumber, true);\r\n            return new LineContext(this._mode, this._lines[lineNumber - 1]);\r\n        };\r\n        TextModelWithTokens.prototype._getInternalTokens = function (lineNumber) {\r\n            this._updateTokensUntilLine(lineNumber, true);\r\n            return this._lines[lineNumber - 1].getTokens();\r\n        };\r\n        TextModelWithTokens.prototype.getMode = function () {\r\n            return this._mode;\r\n        };\r\n        TextModelWithTokens.prototype.setMode = function (newModeOrPromise) {\r\n            if (!newModeOrPromise) {\r\n                // There's nothing to do\r\n                return;\r\n            }\r\n            if (this._modeToModelBinder) {\r\n                this._modeToModelBinder.dispose();\r\n                this._modeToModelBinder = null;\r\n            }\r\n            if (winjs_base_1.TPromise.is(newModeOrPromise)) {\r\n                this._modeToModelBinder = new ModeToModelBinder(newModeOrPromise, this);\r\n            }\r\n            else {\r\n                var actualNewMode = this._massageMode(newModeOrPromise);\r\n                if (this._mode !== actualNewMode) {\r\n                    var e2 = {\r\n                        oldMode: this._mode,\r\n                        newMode: actualNewMode\r\n                    };\r\n                    this._resetMode(e2, actualNewMode);\r\n                    this._emitModelModeChangedEvent(e2);\r\n                }\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype.getModeAtPosition = function (_lineNumber, _column) {\r\n            var validPosition = this.validatePosition({\r\n                lineNumber: _lineNumber,\r\n                column: _column\r\n            });\r\n            var lineNumber = validPosition.lineNumber;\r\n            var column = validPosition.column;\r\n            if (column === 1) {\r\n                return this.getStateBeforeLine(lineNumber).getMode();\r\n            }\r\n            else if (column === this.getLineMaxColumn(lineNumber)) {\r\n                return this.getStateAfterLine(lineNumber).getMode();\r\n            }\r\n            else {\r\n                var modeTransitions = this._getLineModeTransitions(lineNumber);\r\n                var modeTransitionIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, column - 1);\r\n                return modeTransitions[modeTransitionIndex].mode;\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._invalidateLine = function (lineIndex) {\r\n            this._lines[lineIndex].isInvalid = true;\r\n            if (lineIndex < this._invalidLineStartIndex) {\r\n                if (this._invalidLineStartIndex < this._lines.length) {\r\n                    this._lines[this._invalidLineStartIndex].isInvalid = true;\r\n                }\r\n                this._invalidLineStartIndex = lineIndex;\r\n                this._beginBackgroundTokenization();\r\n            }\r\n        };\r\n        TextModelWithTokens._toLineTokens = function (tokens) {\r\n            if (!tokens || tokens.length === 0) {\r\n                return [];\r\n            }\r\n            if (tokens[0] instanceof lineToken_1.LineToken) {\r\n                return tokens;\r\n            }\r\n            var result = [];\r\n            for (var i = 0, len = tokens.length; i < len; i++) {\r\n                result[i] = new lineToken_1.LineToken(tokens[i].startIndex, tokens[i].type);\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithTokens._toModeTransitions = function (modeTransitions) {\r\n            if (!modeTransitions || modeTransitions.length === 0) {\r\n                return [];\r\n            }\r\n            if (modeTransitions[0] instanceof modeTransition_1.ModeTransition) {\r\n                return modeTransitions;\r\n            }\r\n            var result = [];\r\n            for (var i = 0, len = modeTransitions.length; i < len; i++) {\r\n                result[i] = new modeTransition_1.ModeTransition(modeTransitions[i].startIndex, modeTransitions[i].mode);\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithTokens.prototype._updateLineTokens = function (lineIndex, map, topLevelMode, r) {\r\n            this._lines[lineIndex].setTokens(map, TextModelWithTokens._toLineTokens(r.tokens), topLevelMode, TextModelWithTokens._toModeTransitions(r.modeTransitions));\r\n        };\r\n        TextModelWithTokens.prototype._beginBackgroundTokenization = function () {\r\n            var _this = this;\r\n            if (this._shouldAutoTokenize && this._revalidateTokensTimeout === -1) {\r\n                this._revalidateTokensTimeout = setTimeout(function () {\r\n                    _this._revalidateTokensTimeout = -1;\r\n                    _this._revalidateTokensNow();\r\n                }, 0);\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._warmUpTokens = function () {\r\n            // Warm up first 100 lines (if it takes less than 50ms)\r\n            var maxLineNumber = Math.min(100, this.getLineCount());\r\n            var toLineNumber = maxLineNumber;\r\n            for (var lineNumber = 1; lineNumber <= maxLineNumber; lineNumber++) {\r\n                var text = this._lines[lineNumber - 1].text;\r\n                if (text.length >= 200) {\r\n                    // This line is over 200 chars long, so warm up without it\r\n                    toLineNumber = lineNumber - 1;\r\n                    break;\r\n                }\r\n            }\r\n            this._revalidateTokensNow(toLineNumber);\r\n        };\r\n        TextModelWithTokens.prototype._revalidateTokensNow = function (toLineNumber) {\r\n            if (toLineNumber === void 0) { toLineNumber = this._invalidLineStartIndex + 1000000; }\r\n            var t1 = timer.start(timer.Topic.EDITOR, 'backgroundTokenization');\r\n            toLineNumber = Math.min(this._lines.length, toLineNumber);\r\n            var MAX_ALLOWED_TIME = 20, fromLineNumber = this._invalidLineStartIndex + 1, tokenizedChars = 0, currentCharsToTokenize = 0, currentEstimatedTimeToTokenize = 0, sw = stopwatch_1.StopWatch.create(false), elapsedTime;\r\n            // Tokenize at most 1000 lines. Estimate the tokenization speed per character and stop when:\r\n            // - MAX_ALLOWED_TIME is reached\r\n            // - tokenizing the next line would go above MAX_ALLOWED_TIME\r\n            for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n                elapsedTime = sw.elapsed();\r\n                if (elapsedTime > MAX_ALLOWED_TIME) {\r\n                    // Stop if MAX_ALLOWED_TIME is reached\r\n                    toLineNumber = lineNumber - 1;\r\n                    break;\r\n                }\r\n                // Compute how many characters will be tokenized for this line\r\n                currentCharsToTokenize = this._lines[lineNumber - 1].text.length;\r\n                if (tokenizedChars > 0) {\r\n                    // If we have enough history, estimate how long tokenizing this line would take\r\n                    currentEstimatedTimeToTokenize = (elapsedTime / tokenizedChars) * currentCharsToTokenize;\r\n                    if (elapsedTime + currentEstimatedTimeToTokenize > MAX_ALLOWED_TIME) {\r\n                        // Tokenizing this line will go above MAX_ALLOWED_TIME\r\n                        toLineNumber = lineNumber - 1;\r\n                        break;\r\n                    }\r\n                }\r\n                this._updateTokensUntilLine(lineNumber, false);\r\n                tokenizedChars += currentCharsToTokenize;\r\n            }\r\n            elapsedTime = sw.elapsed();\r\n            if (fromLineNumber <= toLineNumber) {\r\n                this.emitModelTokensChangedEvent(fromLineNumber, toLineNumber);\r\n            }\r\n            if (this._invalidLineStartIndex < this._lines.length) {\r\n                this._beginBackgroundTokenization();\r\n            }\r\n            t1.stop();\r\n        };\r\n        TextModelWithTokens.prototype.getStateBeforeLine = function (lineNumber) {\r\n            this._updateTokensUntilLine(lineNumber - 1, true);\r\n            return this._lines[lineNumber - 1].getState();\r\n        };\r\n        TextModelWithTokens.prototype.getStateAfterLine = function (lineNumber) {\r\n            this._updateTokensUntilLine(lineNumber, true);\r\n            return lineNumber < this._lines.length ? this._lines[lineNumber].getState() : this._lastState;\r\n        };\r\n        TextModelWithTokens.prototype._getLineModeTransitions = function (lineNumber) {\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            this._updateTokensUntilLine(lineNumber, true);\r\n            return this._lines[lineNumber - 1].getModeTransitions(this._mode);\r\n        };\r\n        TextModelWithTokens.prototype._updateTokensUntilLine = function (lineNumber, emitEvents) {\r\n            var linesLength = this._lines.length;\r\n            var endLineIndex = lineNumber - 1;\r\n            var stopLineTokenizationAfter = 1000000000; // 1 billion, if a line is so long, you have other trouble :).\r\n            var fromLineNumber = this._invalidLineStartIndex + 1, toLineNumber = lineNumber;\r\n            // Validate all states up to and including endLineIndex\r\n            for (var lineIndex = this._invalidLineStartIndex; lineIndex <= endLineIndex; lineIndex++) {\r\n                var endStateIndex = lineIndex + 1;\r\n                var r = null;\r\n                var text = this._lines[lineIndex].text;\r\n                if (this._mode.tokenizationSupport) {\r\n                    try {\r\n                        // Tokenize only the first X characters\r\n                        r = this._mode.tokenizationSupport.tokenize(this._lines[lineIndex].text, this._lines[lineIndex].getState(), 0, stopLineTokenizationAfter);\r\n                    }\r\n                    catch (e) {\r\n                        e.friendlyMessage = TextModelWithTokens.MODE_TOKENIZATION_FAILED_MSG;\r\n                        errors_1.onUnexpectedError(e);\r\n                    }\r\n                    if (r && r.retokenize) {\r\n                        this._retokenizers.push(this._createRetokenizer(r.retokenize, lineIndex + 1));\r\n                    }\r\n                    if (r && r.tokens && r.tokens.length > 0) {\r\n                        // Cannot have a stop offset before the last token\r\n                        r.actualStopOffset = Math.max(r.actualStopOffset, r.tokens[r.tokens.length - 1].startIndex + 1);\r\n                    }\r\n                    if (r && r.actualStopOffset < text.length) {\r\n                        // Treat the rest of the line (if above limit) as one default token\r\n                        r.tokens.push({\r\n                            startIndex: r.actualStopOffset,\r\n                            type: ''\r\n                        });\r\n                        // Use as end state the starting state\r\n                        r.endState = this._lines[lineIndex].getState();\r\n                    }\r\n                }\r\n                if (!r) {\r\n                    r = nullMode_1.nullTokenize(this._mode, text, this._lines[lineIndex].getState());\r\n                }\r\n                if (!r.modeTransitions) {\r\n                    r.modeTransitions = [];\r\n                }\r\n                if (r.modeTransitions.length === 0) {\r\n                    // Make sure there is at least the transition to the top-most mode\r\n                    r.modeTransitions.push({\r\n                        startIndex: 0,\r\n                        mode: this._mode\r\n                    });\r\n                }\r\n                this._updateLineTokens(lineIndex, this._tokensInflatorMap, this._mode, r);\r\n                if (this._lines[lineIndex].isInvalid) {\r\n                    this._lines[lineIndex].isInvalid = false;\r\n                }\r\n                if (endStateIndex < linesLength) {\r\n                    if (this._lines[endStateIndex].getState() !== null && r.endState.equals(this._lines[endStateIndex].getState())) {\r\n                        // The end state of this line remains the same\r\n                        var nextInvalidLineIndex = lineIndex + 1;\r\n                        while (nextInvalidLineIndex < linesLength) {\r\n                            if (this._lines[nextInvalidLineIndex].isInvalid) {\r\n                                break;\r\n                            }\r\n                            if (nextInvalidLineIndex + 1 < linesLength) {\r\n                                if (this._lines[nextInvalidLineIndex + 1].getState() === null) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (this._lastState === null) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            nextInvalidLineIndex++;\r\n                        }\r\n                        this._invalidLineStartIndex = Math.max(this._invalidLineStartIndex, nextInvalidLineIndex);\r\n                        lineIndex = nextInvalidLineIndex - 1; // -1 because the outer loop increments it\r\n                    }\r\n                    else {\r\n                        this._lines[endStateIndex].setState(r.endState);\r\n                    }\r\n                }\r\n                else {\r\n                    this._lastState = r.endState;\r\n                }\r\n            }\r\n            this._invalidLineStartIndex = Math.max(this._invalidLineStartIndex, endLineIndex + 1);\r\n            if (emitEvents && fromLineNumber <= toLineNumber) {\r\n                this.emitModelTokensChangedEvent(fromLineNumber, toLineNumber);\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype.emitModelTokensChangedEvent = function (fromLineNumber, toLineNumber) {\r\n            var e = {\r\n                fromLineNumber: fromLineNumber,\r\n                toLineNumber: toLineNumber\r\n            };\r\n            if (!this._isDisposing) {\r\n                this.emit(editorCommon.EventType.ModelTokensChanged, e);\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._emitModelModeChangedEvent = function (e) {\r\n            if (!this._isDisposing) {\r\n                this.emit(editorCommon.EventType.ModelModeChanged, e);\r\n            }\r\n        };\r\n        TextModelWithTokens.prototype._emitModelModeSupportChangedEvent = function (e) {\r\n            if (!this._isDisposing) {\r\n                this.emit(editorCommon.EventType.ModelModeSupportChanged, e);\r\n            }\r\n        };\r\n        // Having tokens allows implementing additional helper methods\r\n        TextModelWithTokens.prototype._lineIsTokenized = function (lineNumber) {\r\n            return this._invalidLineStartIndex > lineNumber - 1;\r\n        };\r\n        TextModelWithTokens.prototype._getWordDefinition = function () {\r\n            return textModelWithTokensHelpers_1.WordHelper.massageWordDefinitionOf(this._mode);\r\n        };\r\n        TextModelWithTokens.prototype.getWordAtPosition = function (position) {\r\n            return textModelWithTokensHelpers_1.WordHelper.getWordAtPosition(this, this.validatePosition(position));\r\n        };\r\n        TextModelWithTokens.prototype.getWordUntilPosition = function (position) {\r\n            var wordAtPosition = this.getWordAtPosition(position);\r\n            if (!wordAtPosition) {\r\n                return {\r\n                    word: '',\r\n                    startColumn: position.column,\r\n                    endColumn: position.column\r\n                };\r\n            }\r\n            return {\r\n                word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\r\n                startColumn: wordAtPosition.startColumn,\r\n                endColumn: position.column\r\n            };\r\n        };\r\n        TextModelWithTokens.prototype.tokenIterator = function (position, callback) {\r\n            var iter = new tokenIterator_1.TokenIterator(this, this.validatePosition(position));\r\n            var result = callback(iter);\r\n            iter._invalidate();\r\n            return result;\r\n        };\r\n        TextModelWithTokens.prototype.findMatchingBracketUp = function (bracket, _position) {\r\n            var position = this.validatePosition(_position);\r\n            var modeTransitions = this._lines[position.lineNumber - 1].getModeTransitions(this._mode);\r\n            var currentModeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\r\n            var currentMode = modeTransitions[currentModeIndex];\r\n            var currentModeBrackets = currentMode.mode.richEditSupport ? currentMode.mode.richEditSupport.brackets : null;\r\n            if (!currentModeBrackets) {\r\n                return null;\r\n            }\r\n            var data = currentModeBrackets.textIsBracket[bracket];\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            return this._findMatchingBracketUp(data, position);\r\n        };\r\n        TextModelWithTokens.prototype.matchBracket = function (position) {\r\n            return this._matchBracket(this.validatePosition(position));\r\n        };\r\n        TextModelWithTokens.prototype._matchBracket = function (position) {\r\n            var lineNumber = position.lineNumber;\r\n            var lineText = this._lines[lineNumber - 1].text;\r\n            var lineTokens = this._lines[lineNumber - 1].getTokens();\r\n            var currentTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\r\n            var currentTokenStart = lineTokens.getTokenStartIndex(currentTokenIndex);\r\n            var modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\r\n            var currentModeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\r\n            var currentMode = modeTransitions[currentModeIndex];\r\n            var currentModeBrackets = currentMode.mode.richEditSupport ? currentMode.mode.richEditSupport.brackets : null;\r\n            // If position is in between two tokens, try first looking in the previous token\r\n            if (currentTokenIndex > 0 && currentTokenStart === position.column - 1) {\r\n                var prevTokenIndex = currentTokenIndex - 1;\r\n                var prevTokenType = lineTokens.getTokenType(prevTokenIndex);\r\n                // check that previous token is not to be ignored\r\n                if (!supports_1.ignoreBracketsInToken(prevTokenType)) {\r\n                    var prevTokenStart = lineTokens.getTokenStartIndex(prevTokenIndex);\r\n                    var prevMode = currentMode;\r\n                    var prevModeBrackets = currentModeBrackets;\r\n                    // check if previous token is in a different mode\r\n                    if (currentModeIndex > 0 && currentMode.startIndex === position.column - 1) {\r\n                        prevMode = modeTransitions[currentModeIndex - 1];\r\n                        prevModeBrackets = prevMode.mode.richEditSupport ? prevMode.mode.richEditSupport.brackets : null;\r\n                    }\r\n                    if (prevModeBrackets) {\r\n                        // limit search in case previous token is very large, there's no need to go beyond `maxBracketLength`\r\n                        prevTokenStart = Math.max(prevTokenStart, position.column - 1 - prevModeBrackets.maxBracketLength);\r\n                        var foundBracket = richEditBrackets_1.BracketsUtils.findPrevBracketInToken(prevModeBrackets.reversedRegex, lineNumber, lineText, prevTokenStart, currentTokenStart);\r\n                        // check that we didn't hit a bracket too far away from position\r\n                        if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\r\n                            var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1);\r\n                            var r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText]);\r\n                            // check that we can actually match this bracket\r\n                            if (r) {\r\n                                return r;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // check that the token is not to be ignored\r\n            if (!supports_1.ignoreBracketsInToken(lineTokens.getTokenType(currentTokenIndex))) {\r\n                if (currentModeBrackets) {\r\n                    // limit search to not go before `maxBracketLength`\r\n                    currentTokenStart = Math.max(currentTokenStart, position.column - 1 - currentModeBrackets.maxBracketLength);\r\n                    // limit search to not go after `maxBracketLength`\r\n                    var currentTokenEnd = lineTokens.getTokenEndIndex(currentTokenIndex, lineText.length);\r\n                    currentTokenEnd = Math.min(currentTokenEnd, position.column - 1 + currentModeBrackets.maxBracketLength);\r\n                    // it might still be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\r\n                    while (true) {\r\n                        var foundBracket = richEditBrackets_1.BracketsUtils.findNextBracketInText(currentModeBrackets.forwardRegex, lineNumber, lineText.substring(currentTokenStart, currentTokenEnd), currentTokenStart);\r\n                        if (!foundBracket) {\r\n                            // there are no brackets in this text\r\n                            break;\r\n                        }\r\n                        // check that we didn't hit a bracket too far away from position\r\n                        if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\r\n                            var foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1);\r\n                            var r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText]);\r\n                            // check that we can actually match this bracket\r\n                            if (r) {\r\n                                return r;\r\n                            }\r\n                        }\r\n                        currentTokenStart = foundBracket.endColumn - 1;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithTokens.prototype._matchFoundBracket = function (foundBracket, data, isOpen) {\r\n            if (isOpen) {\r\n                var matched = this._findMatchingBracketDown(data, foundBracket.getEndPosition());\r\n                if (matched) {\r\n                    return [foundBracket, matched];\r\n                }\r\n            }\r\n            else {\r\n                var matched = this._findMatchingBracketUp(data, foundBracket.getStartPosition());\r\n                if (matched) {\r\n                    return [foundBracket, matched];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithTokens.prototype._findMatchingBracketUp = function (bracket, position) {\r\n            // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\r\n            var modeId = bracket.modeId;\r\n            var reversedBracketRegex = bracket.reversedRegex;\r\n            var count = -1;\r\n            for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\r\n                var lineTokens = this._lines[lineNumber - 1].getTokens();\r\n                var lineText = this._lines[lineNumber - 1].text;\r\n                var modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\r\n                var currentModeIndex = modeTransitions.length - 1;\r\n                var currentModeStart = modeTransitions[currentModeIndex].startIndex;\r\n                var currentModeId = modeTransitions[currentModeIndex].mode.getId();\r\n                var tokensLength = lineTokens.getTokenCount() - 1;\r\n                var currentTokenEnd = lineText.length;\r\n                if (lineNumber === position.lineNumber) {\r\n                    tokensLength = lineTokens.findIndexOfOffset(position.column - 1);\r\n                    currentTokenEnd = position.column - 1;\r\n                    currentModeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\r\n                    currentModeStart = modeTransitions[currentModeIndex].startIndex;\r\n                    currentModeId = modeTransitions[currentModeIndex].mode.getId();\r\n                }\r\n                for (var tokenIndex = tokensLength; tokenIndex >= 0; tokenIndex--) {\r\n                    var currentTokenType = lineTokens.getTokenType(tokenIndex);\r\n                    var currentTokenStart = lineTokens.getTokenStartIndex(tokenIndex);\r\n                    if (currentTokenStart < currentModeStart) {\r\n                        currentModeIndex--;\r\n                        currentModeStart = modeTransitions[currentModeIndex].startIndex;\r\n                        currentModeId = modeTransitions[currentModeIndex].mode.getId();\r\n                    }\r\n                    if (currentModeId === modeId && !supports_1.ignoreBracketsInToken(currentTokenType)) {\r\n                        while (true) {\r\n                            var r = richEditBrackets_1.BracketsUtils.findPrevBracketInToken(reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\r\n                            if (!r) {\r\n                                break;\r\n                            }\r\n                            var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1);\r\n                            if (hitText === bracket.open) {\r\n                                count++;\r\n                            }\r\n                            else if (hitText === bracket.close) {\r\n                                count--;\r\n                            }\r\n                            if (count === 0) {\r\n                                return r;\r\n                            }\r\n                            currentTokenEnd = r.startColumn - 1;\r\n                        }\r\n                    }\r\n                    currentTokenEnd = currentTokenStart;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithTokens.prototype._findMatchingBracketDown = function (bracket, position) {\r\n            // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\r\n            var modeId = bracket.modeId;\r\n            var bracketRegex = bracket.forwardRegex;\r\n            var count = 1;\r\n            for (var lineNumber = position.lineNumber, lineCount = this.getLineCount(); lineNumber <= lineCount; lineNumber++) {\r\n                var lineTokens = this._lines[lineNumber - 1].getTokens();\r\n                var lineText = this._lines[lineNumber - 1].text;\r\n                var modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\r\n                var currentModeIndex = 0;\r\n                var nextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\r\n                var currentModeId = modeTransitions[currentModeIndex].mode.getId();\r\n                var startTokenIndex = 0;\r\n                var currentTokenStart = lineTokens.getTokenStartIndex(startTokenIndex);\r\n                if (lineNumber === position.lineNumber) {\r\n                    startTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\r\n                    currentTokenStart = Math.max(currentTokenStart, position.column - 1);\r\n                    currentModeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\r\n                    nextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\r\n                    currentModeId = modeTransitions[currentModeIndex].mode.getId();\r\n                }\r\n                for (var tokenIndex = startTokenIndex, tokensLength = lineTokens.getTokenCount(); tokenIndex < tokensLength; tokenIndex++) {\r\n                    var currentTokenType = lineTokens.getTokenType(tokenIndex);\r\n                    var currentTokenEnd = lineTokens.getTokenEndIndex(tokenIndex, lineText.length);\r\n                    if (currentTokenStart >= nextModeStart) {\r\n                        currentModeIndex++;\r\n                        nextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\r\n                        currentModeId = modeTransitions[currentModeIndex].mode.getId();\r\n                    }\r\n                    if (currentModeId === modeId && !supports_1.ignoreBracketsInToken(currentTokenType)) {\r\n                        while (true) {\r\n                            var r = richEditBrackets_1.BracketsUtils.findNextBracketInToken(bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\r\n                            if (!r) {\r\n                                break;\r\n                            }\r\n                            var hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1);\r\n                            if (hitText === bracket.open) {\r\n                                count++;\r\n                            }\r\n                            else if (hitText === bracket.close) {\r\n                                count--;\r\n                            }\r\n                            if (count === 0) {\r\n                                return r;\r\n                            }\r\n                            currentTokenStart = r.endColumn - 1;\r\n                        }\r\n                    }\r\n                    currentTokenStart = currentTokenEnd;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithTokens.prototype.findPrevBracket = function (_position) {\r\n            var position = this.validatePosition(_position);\r\n            var reversedBracketRegex = /[\\(\\)\\[\\]\\{\\}]/; // TODO@Alex: use mode's brackets\r\n            for (var lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\r\n                var lineTokens = this._lines[lineNumber - 1].getTokens();\r\n                var lineText = this._lines[lineNumber - 1].text;\r\n                var tokensLength = lineTokens.getTokenCount() - 1;\r\n                var currentTokenEnd = lineText.length;\r\n                if (lineNumber === position.lineNumber) {\r\n                    tokensLength = lineTokens.findIndexOfOffset(position.column - 1);\r\n                    currentTokenEnd = position.column - 1;\r\n                }\r\n                for (var tokenIndex = tokensLength; tokenIndex >= 0; tokenIndex--) {\r\n                    var currentTokenType = lineTokens.getTokenType(tokenIndex);\r\n                    var currentTokenStart = lineTokens.getTokenStartIndex(tokenIndex);\r\n                    if (!supports_1.ignoreBracketsInToken(currentTokenType)) {\r\n                        var r = richEditBrackets_1.BracketsUtils.findPrevBracketInToken(reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\r\n                        if (r) {\r\n                            return this._toFoundBracket(r);\r\n                        }\r\n                    }\r\n                    currentTokenEnd = currentTokenStart;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithTokens.prototype.findNextBracket = function (_position) {\r\n            var position = this.validatePosition(_position);\r\n            var bracketRegex = /[\\(\\)\\[\\]\\{\\}]/; // TODO@Alex: use mode's brackets\r\n            for (var lineNumber = position.lineNumber, lineCount = this.getLineCount(); lineNumber <= lineCount; lineNumber++) {\r\n                var lineTokens = this._lines[lineNumber - 1].getTokens();\r\n                var lineText = this._lines[lineNumber - 1].text;\r\n                var startTokenIndex = 0;\r\n                var currentTokenStart = lineTokens.getTokenStartIndex(startTokenIndex);\r\n                if (lineNumber === position.lineNumber) {\r\n                    startTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\r\n                    currentTokenStart = Math.max(currentTokenStart, position.column - 1);\r\n                }\r\n                for (var tokenIndex = startTokenIndex, tokensLength = lineTokens.getTokenCount(); tokenIndex < tokensLength; tokenIndex++) {\r\n                    var currentTokenType = lineTokens.getTokenType(tokenIndex);\r\n                    var currentTokenEnd = lineTokens.getTokenEndIndex(tokenIndex, lineText.length);\r\n                    if (!supports_1.ignoreBracketsInToken(currentTokenType)) {\r\n                        var r = richEditBrackets_1.BracketsUtils.findNextBracketInToken(bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\r\n                        if (r) {\r\n                            return this._toFoundBracket(r);\r\n                        }\r\n                    }\r\n                    currentTokenStart = currentTokenEnd;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithTokens.prototype._toFoundBracket = function (r) {\r\n            if (!r) {\r\n                return null;\r\n            }\r\n            var text = this.getValueInRange(r);\r\n            // TODO@Alex: use mode's brackets\r\n            switch (text) {\r\n                case '(': return { range: r, open: '(', close: ')', isOpen: true };\r\n                case ')': return { range: r, open: '(', close: ')', isOpen: false };\r\n                case '[': return { range: r, open: '[', close: ']', isOpen: true };\r\n                case ']': return { range: r, open: '[', close: ']', isOpen: false };\r\n                case '{': return { range: r, open: '{', close: '}', isOpen: true };\r\n                case '}': return { range: r, open: '{', close: '}', isOpen: false };\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithTokens.MODE_TOKENIZATION_FAILED_MSG = nls.localize(0, null);\r\n        return TextModelWithTokens;\r\n    }(textModel_1.TextModel));\r\n    exports.TextModelWithTokens = TextModelWithTokens;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/mirrorModel\", [\"require\", \"exports\", 'vs/base/common/lifecycle', 'vs/editor/common/editorCommon', 'vs/editor/common/model/modelLine', 'vs/editor/common/model/textModel', 'vs/editor/common/model/textModelWithTokens', 'vs/editor/common/core/range', 'vs/editor/common/core/position'], function (require, exports, lifecycle_1, editorCommon, modelLine_1, textModel_1, textModelWithTokens_1, range_1, position_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var AbstractMirrorModel = (function (_super) {\r\n        __extends(AbstractMirrorModel, _super);\r\n        function AbstractMirrorModel(allowedEventTypes, versionId, value, mode, associatedResource) {\r\n            _super.call(this, allowedEventTypes.concat([editorCommon.EventType.ModelDispose]), value, false, mode);\r\n            this._setVersionId(versionId);\r\n            this._associatedResource = associatedResource;\r\n        }\r\n        AbstractMirrorModel.prototype.getModeId = function () {\r\n            return this.getMode().getId();\r\n        };\r\n        AbstractMirrorModel.prototype.getEmbeddedAtPosition = function (position) {\r\n            return null;\r\n        };\r\n        AbstractMirrorModel.prototype.getAllEmbedded = function () {\r\n            return [];\r\n        };\r\n        AbstractMirrorModel.prototype._constructLines = function (rawText) {\r\n            _super.prototype._constructLines.call(this, rawText);\r\n            // Force EOL to be \\n\r\n            this._EOL = '\\n';\r\n        };\r\n        AbstractMirrorModel.prototype.destroy = function () {\r\n            this.dispose();\r\n        };\r\n        AbstractMirrorModel.prototype.dispose = function () {\r\n            this.emit(editorCommon.EventType.ModelDispose);\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        Object.defineProperty(AbstractMirrorModel.prototype, \"uri\", {\r\n            get: function () {\r\n                return this._associatedResource;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        AbstractMirrorModel.prototype.getRangeFromOffsetAndLength = function (offset, length) {\r\n            var startPosition = this.getPositionAt(offset);\r\n            var endPosition = this.getPositionAt(offset + length);\r\n            return new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\r\n        };\r\n        AbstractMirrorModel.prototype.getOffsetAndLengthFromRange = function (range) {\r\n            var startOffset = this.getOffsetAt(new position_1.Position(range.startLineNumber, range.startColumn));\r\n            var endOffset = this.getOffsetAt(new position_1.Position(range.endLineNumber, range.endColumn));\r\n            return {\r\n                offset: startOffset,\r\n                length: endOffset - startOffset\r\n            };\r\n        };\r\n        AbstractMirrorModel.prototype.getPositionFromOffset = function (offset) {\r\n            return this.getPositionAt(offset);\r\n        };\r\n        AbstractMirrorModel.prototype.getOffsetFromPosition = function (position) {\r\n            return this.getOffsetAt(position);\r\n        };\r\n        AbstractMirrorModel.prototype.getLineStart = function (lineNumber) {\r\n            if (lineNumber < 1) {\r\n                lineNumber = 1;\r\n            }\r\n            if (lineNumber > this.getLineCount()) {\r\n                lineNumber = this.getLineCount();\r\n            }\r\n            return this.getOffsetAt(new position_1.Position(lineNumber, 1));\r\n        };\r\n        AbstractMirrorModel.prototype.getAllWordsWithRange = function () {\r\n            if (this._lines.length > 10000) {\r\n                // This is a very heavy method, unavailable for very heavy models\r\n                return [];\r\n            }\r\n            var result = [], i;\r\n            var toTextRange = function (info) {\r\n                var s = line.text.substring(info.start, info.end);\r\n                var r = { startLineNumber: i + 1, startColumn: info.start + 1, endLineNumber: i + 1, endColumn: info.end + 1 };\r\n                result.push({ text: s, range: r });\r\n            };\r\n            for (i = 0; i < this._lines.length; i++) {\r\n                var line = this._lines[i];\r\n                this.wordenize(line.text).forEach(toTextRange);\r\n            }\r\n            return result;\r\n        };\r\n        AbstractMirrorModel.prototype.getAllWords = function () {\r\n            var _this = this;\r\n            var result = [];\r\n            this._lines.forEach(function (line) {\r\n                _this.wordenize(line.text).forEach(function (info) {\r\n                    result.push(line.text.substring(info.start, info.end));\r\n                });\r\n            });\r\n            return result;\r\n        };\r\n        AbstractMirrorModel.prototype.getAllUniqueWords = function (skipWordOnce) {\r\n            var foundSkipWord = false;\r\n            var uniqueWords = {};\r\n            return this.getAllWords().filter(function (word) {\r\n                if (skipWordOnce && !foundSkipWord && skipWordOnce === word) {\r\n                    foundSkipWord = true;\r\n                    return false;\r\n                }\r\n                else if (uniqueWords[word]) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    uniqueWords[word] = true;\r\n                    return true;\r\n                }\r\n            });\r\n        };\r\n        //\t// TODO@Joh, TODO@Alex - remove these and make sure the super-things work\r\n        AbstractMirrorModel.prototype.wordenize = function (content) {\r\n            var result = [];\r\n            var match;\r\n            var wordsRegexp = this._getWordDefinition();\r\n            while (match = wordsRegexp.exec(content)) {\r\n                result.push({ start: match.index, end: match.index + match[0].length });\r\n            }\r\n            return result;\r\n        };\r\n        return AbstractMirrorModel;\r\n    }(textModelWithTokens_1.TextModelWithTokens));\r\n    exports.AbstractMirrorModel = AbstractMirrorModel;\r\n    var MirrorModelEmbedded = (function (_super) {\r\n        __extends(MirrorModelEmbedded, _super);\r\n        function MirrorModelEmbedded(actualModel, includeRanges, mode, url) {\r\n            _super.call(this, ['changed'], actualModel.getVersionId(), MirrorModelEmbedded._getMirrorValueWithinRanges(actualModel, includeRanges), mode, url);\r\n            this._actualModel = actualModel;\r\n        }\r\n        MirrorModelEmbedded._getMirrorValueWithinRanges = function (actualModel, includeRanges) {\r\n            var resultingText = '', prevLineAdded = 1, prevColumnAdded = 1, i;\r\n            for (i = 0; i < includeRanges.length; i++) {\r\n                var includeRange = includeRanges[i];\r\n                resultingText += actualModel.getEmptiedValueInRange({\r\n                    startLineNumber: prevLineAdded,\r\n                    startColumn: prevColumnAdded,\r\n                    endLineNumber: includeRange.startLineNumber,\r\n                    endColumn: includeRange.startColumn\r\n                }, ' ');\r\n                resultingText += actualModel.getValueInRange(includeRange);\r\n                prevLineAdded = includeRange.endLineNumber;\r\n                prevColumnAdded = includeRange.endColumn;\r\n            }\r\n            var lastLineNumber = actualModel.getLineCount(), lastColumn = actualModel.getLineMaxColumn(lastLineNumber);\r\n            resultingText += actualModel.getEmptiedValueInRange({\r\n                startLineNumber: prevLineAdded,\r\n                startColumn: prevColumnAdded,\r\n                endLineNumber: lastLineNumber,\r\n                endColumn: lastColumn\r\n            }, ' ');\r\n            var actualModelOptions = actualModel.getOptions();\r\n            return textModel_1.TextModel.toRawText(resultingText, {\r\n                tabSize: actualModelOptions.tabSize,\r\n                insertSpaces: actualModelOptions.insertSpaces,\r\n                detectIndentation: false,\r\n                defaultEOL: actualModelOptions.defaultEOL,\r\n                trimAutoWhitespace: actualModelOptions.trimAutoWhitespace\r\n            });\r\n        };\r\n        MirrorModelEmbedded.prototype.setIncludedRanges = function (newIncludedRanges) {\r\n            var prevVersionId = this.getVersionId();\r\n            // Force recreating of line starts (when used)\r\n            this._constructLines(MirrorModelEmbedded._getMirrorValueWithinRanges(this._actualModel, newIncludedRanges));\r\n            this._resetTokenizationState();\r\n            this._setVersionId(prevVersionId + 1);\r\n            this.emit('changed', {});\r\n        };\r\n        return MirrorModelEmbedded;\r\n    }(AbstractMirrorModel));\r\n    exports.MirrorModelEmbedded = MirrorModelEmbedded;\r\n    var EmbeddedModeRange = (function () {\r\n        function EmbeddedModeRange(mode) {\r\n            this.mode = mode;\r\n            this.ranges = [];\r\n        }\r\n        return EmbeddedModeRange;\r\n    }());\r\n    function createTestMirrorModelFromString(value, mode, associatedResource) {\r\n        if (mode === void 0) { mode = null; }\r\n        return new MirrorModel(null, 0, textModel_1.TextModel.toRawText(value, textModel_1.TextModel.DEFAULT_CREATION_OPTIONS), mode, associatedResource);\r\n    }\r\n    exports.createTestMirrorModelFromString = createTestMirrorModelFromString;\r\n    var MirrorModel = (function (_super) {\r\n        __extends(MirrorModel, _super);\r\n        function MirrorModel(resourceService, versionId, value, mode, associatedResource) {\r\n            _super.call(this, ['changed'], versionId, value, mode, associatedResource);\r\n            this._resourceService = resourceService;\r\n            this._embeddedModels = {};\r\n            this._updateEmbeddedModels();\r\n        }\r\n        MirrorModel.prototype.getEmbeddedAtPosition = function (position) {\r\n            var modeAtPosition = this.getModeAtPosition(position.lineNumber, position.column);\r\n            if (this._embeddedModels.hasOwnProperty(modeAtPosition.getId())) {\r\n                return this._embeddedModels[modeAtPosition.getId()];\r\n            }\r\n            return null;\r\n        };\r\n        MirrorModel.prototype.getAllEmbedded = function () {\r\n            var _this = this;\r\n            return Object.keys(this._embeddedModels).map(function (embeddedModeId) { return _this._embeddedModels[embeddedModeId]; });\r\n        };\r\n        MirrorModel.prototype.dispose = function () {\r\n            var _this = this;\r\n            _super.prototype.dispose.call(this);\r\n            var embeddedModels = Object.keys(this._embeddedModels).map(function (modeId) { return _this._embeddedModels[modeId]; });\r\n            embeddedModels.forEach(function (embeddedModel) { return _this._resourceService.remove(embeddedModel.uri); });\r\n            lifecycle_1.dispose(embeddedModels);\r\n            this._embeddedModels = {};\r\n        };\r\n        MirrorModel.prototype.setMode = function (newModeOrPromise) {\r\n            _super.prototype.setMode.call(this, newModeOrPromise);\r\n            this._updateEmbeddedModels();\r\n        };\r\n        MirrorModel._getModesRanges = function (model) {\r\n            var encounteredModesRanges = {};\r\n            var getOrCreateEmbeddedModeRange = function (modeId, mode) {\r\n                if (!encounteredModesRanges.hasOwnProperty(modeId)) {\r\n                    encounteredModesRanges[modeId] = new EmbeddedModeRange(mode);\r\n                }\r\n                return encounteredModesRanges[modeId];\r\n            };\r\n            var lineCount = model.getLineCount();\r\n            var currentModeId = model.getMode().getId();\r\n            var currentMode = model.getMode();\r\n            var currentStartLineNumber = 1, currentStartColumn = 1;\r\n            for (var lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\r\n                var modeTransitions = model._getLineModeTransitions(lineNumber);\r\n                for (var i = 0; i < modeTransitions.length; i++) {\r\n                    var modeTransition = modeTransitions[i];\r\n                    if (modeTransition.mode.getId() !== currentModeId) {\r\n                        var modeRange = getOrCreateEmbeddedModeRange(currentModeId, currentMode);\r\n                        modeRange.ranges.push({\r\n                            startLineNumber: currentStartLineNumber,\r\n                            startColumn: currentStartColumn,\r\n                            endLineNumber: lineNumber,\r\n                            endColumn: modeTransition.startIndex + 1\r\n                        });\r\n                        currentModeId = modeTransition.mode.getId();\r\n                        currentMode = modeTransition.mode;\r\n                        currentStartLineNumber = lineNumber;\r\n                        currentStartColumn = modeTransition.startIndex + 1;\r\n                    }\r\n                }\r\n            }\r\n            var lastLineNumber = lineCount;\r\n            var lastColumn = model.getLineMaxColumn(lastLineNumber);\r\n            if (currentStartLineNumber !== lastLineNumber || currentStartColumn !== lastColumn) {\r\n                var modeRange = getOrCreateEmbeddedModeRange(currentModeId, currentMode);\r\n                modeRange.ranges.push({\r\n                    startLineNumber: currentStartLineNumber,\r\n                    startColumn: currentStartColumn,\r\n                    endLineNumber: lastLineNumber,\r\n                    endColumn: lastColumn\r\n                });\r\n            }\r\n            return encounteredModesRanges;\r\n        };\r\n        MirrorModel.prototype._updateEmbeddedModels = function () {\r\n            if (!this._resourceService || !this.getMode().tokenizationSupport || !this.getMode().tokenizationSupport.shouldGenerateEmbeddedModels) {\r\n                return false;\r\n            }\r\n            var newModesRanges = MirrorModel._getModesRanges(this);\r\n            // Empty out embedded models that have disappeared\r\n            var oldNestedModesIds = Object.keys(this._embeddedModels);\r\n            for (var i = 0; i < oldNestedModesIds.length; i++) {\r\n                var oldNestedModeId = oldNestedModesIds[i];\r\n                if (!newModesRanges.hasOwnProperty(oldNestedModeId)) {\r\n                    this._embeddedModels[oldNestedModeId].setIncludedRanges([{\r\n                            startLineNumber: 1,\r\n                            startColumn: 1,\r\n                            endLineNumber: 1,\r\n                            endColumn: 1\r\n                        }]);\r\n                }\r\n            }\r\n            var newNestedModesIds = Object.keys(newModesRanges);\r\n            for (var i = 0; i < newNestedModesIds.length; i++) {\r\n                var newNestedModeId = newNestedModesIds[i];\r\n                if (this._embeddedModels.hasOwnProperty(newNestedModeId)) {\r\n                    this._embeddedModels[newNestedModeId].setIncludedRanges(newModesRanges[newNestedModeId].ranges);\r\n                }\r\n                else {\r\n                    // TODO@Alex: implement derived resources (embedded mirror models) better\r\n                    var embeddedModelUrl = this.uri.with({ fragment: this.uri.fragment + 'URL_MARSHAL_REMOVE' + newNestedModeId });\r\n                    this._embeddedModels[newNestedModeId] = new MirrorModelEmbedded(this, newModesRanges[newNestedModeId].ranges, newModesRanges[newNestedModeId].mode, embeddedModelUrl);\r\n                    this._resourceService.insert(this._embeddedModels[newNestedModeId].uri, this._embeddedModels[newNestedModeId]);\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        MirrorModel.prototype.onEvents = function (events) {\r\n            var changed = false;\r\n            for (var i = 0, len = events.contentChanged.length; i < len; i++) {\r\n                var contentChangedEvent = events.contentChanged[i];\r\n                this._setVersionId(contentChangedEvent.versionId);\r\n                switch (contentChangedEvent.changeType) {\r\n                    case editorCommon.EventType.ModelRawContentChangedFlush:\r\n                        this._onLinesFlushed(contentChangedEvent);\r\n                        changed = true;\r\n                        break;\r\n                    case editorCommon.EventType.ModelRawContentChangedLinesDeleted:\r\n                        this._onLinesDeleted(contentChangedEvent);\r\n                        changed = true;\r\n                        break;\r\n                    case editorCommon.EventType.ModelRawContentChangedLinesInserted:\r\n                        this._onLinesInserted(contentChangedEvent);\r\n                        changed = true;\r\n                        break;\r\n                    case editorCommon.EventType.ModelRawContentChangedLineChanged:\r\n                        this._onLineChanged(contentChangedEvent);\r\n                        changed = true;\r\n                        break;\r\n                }\r\n            }\r\n            var shouldFlushMarkers = false;\r\n            if (changed) {\r\n                this.emit('changed', {});\r\n                shouldFlushMarkers = this._updateEmbeddedModels();\r\n            }\r\n            return shouldFlushMarkers;\r\n        };\r\n        MirrorModel.prototype._onLinesFlushed = function (e) {\r\n            // Flush my lines\r\n            this._constructLines(e.detail);\r\n            this._resetTokenizationState();\r\n        };\r\n        MirrorModel.prototype._onLineChanged = function (e) {\r\n            this._lines[e.lineNumber - 1].applyEdits({}, [{\r\n                    startColumn: 1,\r\n                    endColumn: Number.MAX_VALUE,\r\n                    text: e.detail,\r\n                    forceMoveMarkers: false\r\n                }]);\r\n            if (this._lineStarts) {\r\n                // update prefix sum\r\n                this._lineStarts.changeValue(e.lineNumber - 1, this._lines[e.lineNumber - 1].text.length + this._EOL.length);\r\n            }\r\n            this._invalidateLine(e.lineNumber - 1);\r\n        };\r\n        MirrorModel.prototype._onLinesDeleted = function (e) {\r\n            var fromLineIndex = e.fromLineNumber - 1, toLineIndex = e.toLineNumber - 1;\r\n            // Save first line's state\r\n            var firstLineState = this._lines[fromLineIndex].getState();\r\n            this._lines.splice(fromLineIndex, toLineIndex - fromLineIndex + 1);\r\n            if (this._lineStarts) {\r\n                // update prefix sum\r\n                this._lineStarts.removeValues(fromLineIndex, toLineIndex - fromLineIndex + 1);\r\n            }\r\n            if (fromLineIndex < this._lines.length) {\r\n                // This check is always true in real world, but the tests forced this\r\n                // Restore first line's state\r\n                this._lines[fromLineIndex].setState(firstLineState);\r\n                // Invalidate line\r\n                this._invalidateLine(fromLineIndex);\r\n            }\r\n        };\r\n        MirrorModel.prototype._onLinesInserted = function (e) {\r\n            var lineIndex, i, splitLines = e.detail.split('\\n');\r\n            var newLengths = [];\r\n            for (lineIndex = e.fromLineNumber - 1, i = 0; lineIndex < e.toLineNumber; lineIndex++, i++) {\r\n                this._lines.splice(lineIndex, 0, new modelLine_1.ModelLine(0, splitLines[i]));\r\n                newLengths.push(splitLines[i].length + this._EOL.length);\r\n            }\r\n            if (this._lineStarts) {\r\n                // update prefix sum\r\n                this._lineStarts.insertValues(e.fromLineNumber - 1, newLengths);\r\n            }\r\n            if (e.fromLineNumber >= 2) {\r\n                // This check is always true in real world, but the tests forced this\r\n                this._invalidateLine(e.fromLineNumber - 2);\r\n            }\r\n        };\r\n        return MirrorModel;\r\n    }(AbstractMirrorModel));\r\n    exports.MirrorModel = MirrorModel;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/textModelWithMarkers\", [\"require\", \"exports\", 'vs/base/common/idGenerator', 'vs/editor/common/core/position', 'vs/editor/common/model/textModelWithTokens'], function (require, exports, idGenerator_1, position_1, textModelWithTokens_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var LineMarker = (function () {\r\n        function LineMarker(id, column, stickToPreviousCharacter) {\r\n            this.id = id;\r\n            this.column = column;\r\n            this.stickToPreviousCharacter = stickToPreviousCharacter;\r\n            this.oldLineNumber = 0;\r\n            this.oldColumn = 0;\r\n            this.line = null;\r\n        }\r\n        LineMarker.prototype.toString = function () {\r\n            return '{\\'' + this.id + '\\';' + this.column + ',' + this.stickToPreviousCharacter + ',[' + this.oldLineNumber + ',' + this.oldColumn + ']}';\r\n        };\r\n        return LineMarker;\r\n    }());\r\n    exports.LineMarker = LineMarker;\r\n    var _INSTANCE_COUNT = 0;\r\n    var TextModelWithMarkers = (function (_super) {\r\n        __extends(TextModelWithMarkers, _super);\r\n        function TextModelWithMarkers(allowedEventTypes, rawText, modeOrPromise) {\r\n            _super.call(this, allowedEventTypes, rawText, true, modeOrPromise);\r\n            this._markerIdGenerator = new idGenerator_1.IdGenerator((++_INSTANCE_COUNT) + ';');\r\n            this._markerIdToMarker = {};\r\n        }\r\n        TextModelWithMarkers.prototype.dispose = function () {\r\n            this._markerIdToMarker = null;\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        TextModelWithMarkers.prototype._resetValue = function (e, newValue) {\r\n            _super.prototype._resetValue.call(this, e, newValue);\r\n            // Destroy all my markers\r\n            this._markerIdToMarker = {};\r\n        };\r\n        TextModelWithMarkers.prototype._addMarker = function (lineNumber, column, stickToPreviousCharacter) {\r\n            var pos = this.validatePosition(new position_1.Position(lineNumber, column));\r\n            var marker = new LineMarker(this._markerIdGenerator.nextId(), pos.column, stickToPreviousCharacter);\r\n            this._markerIdToMarker[marker.id] = marker;\r\n            this._lines[pos.lineNumber - 1].addMarker(marker);\r\n            return marker.id;\r\n        };\r\n        TextModelWithMarkers.prototype._addMarkers = function (newMarkers) {\r\n            var addMarkersPerLine = Object.create(null);\r\n            var result = [];\r\n            for (var i = 0, len = newMarkers.length; i < len; i++) {\r\n                var newMarker = newMarkers[i];\r\n                var marker = new LineMarker(this._markerIdGenerator.nextId(), newMarker.column, newMarker.stickToPreviousCharacter);\r\n                this._markerIdToMarker[marker.id] = marker;\r\n                if (!addMarkersPerLine[newMarker.lineNumber]) {\r\n                    addMarkersPerLine[newMarker.lineNumber] = [];\r\n                }\r\n                addMarkersPerLine[newMarker.lineNumber].push(marker);\r\n                result.push(marker.id);\r\n            }\r\n            var lineNumbers = Object.keys(addMarkersPerLine);\r\n            for (var i = 0, len = lineNumbers.length; i < len; i++) {\r\n                var lineNumber = parseInt(lineNumbers[i], 10);\r\n                this._lines[lineNumber - 1].addMarkers(addMarkersPerLine[lineNumbers[i]]);\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithMarkers.prototype._changeMarker = function (id, lineNumber, column) {\r\n            if (this._markerIdToMarker.hasOwnProperty(id)) {\r\n                var marker = this._markerIdToMarker[id];\r\n                var newPos = this.validatePosition(new position_1.Position(lineNumber, column));\r\n                if (newPos.lineNumber !== marker.line.lineNumber) {\r\n                    // Move marker between lines\r\n                    marker.line.removeMarker(marker);\r\n                    this._lines[newPos.lineNumber - 1].addMarker(marker);\r\n                }\r\n                // Update marker column\r\n                marker.column = newPos.column;\r\n            }\r\n        };\r\n        TextModelWithMarkers.prototype._changeMarkerStickiness = function (id, newStickToPreviousCharacter) {\r\n            if (this._markerIdToMarker.hasOwnProperty(id)) {\r\n                var marker = this._markerIdToMarker[id];\r\n                if (marker.stickToPreviousCharacter !== newStickToPreviousCharacter) {\r\n                    marker.stickToPreviousCharacter = newStickToPreviousCharacter;\r\n                }\r\n            }\r\n        };\r\n        TextModelWithMarkers.prototype._getMarker = function (id) {\r\n            if (this._markerIdToMarker.hasOwnProperty(id)) {\r\n                var marker = this._markerIdToMarker[id];\r\n                return new position_1.Position(marker.line.lineNumber, marker.column);\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithMarkers.prototype._getMarkersCount = function () {\r\n            return Object.keys(this._markerIdToMarker).length;\r\n        };\r\n        TextModelWithMarkers.prototype._getLineMarkers = function (lineNumber) {\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                throw new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\r\n            }\r\n            return this._lines[lineNumber - 1].getMarkers();\r\n        };\r\n        TextModelWithMarkers.prototype._removeMarker = function (id) {\r\n            if (this._markerIdToMarker.hasOwnProperty(id)) {\r\n                var marker = this._markerIdToMarker[id];\r\n                marker.line.removeMarker(marker);\r\n                delete this._markerIdToMarker[id];\r\n            }\r\n        };\r\n        TextModelWithMarkers.prototype._removeMarkers = function (ids) {\r\n            var removeMarkersPerLine = Object.create(null);\r\n            for (var i = 0, len = ids.length; i < len; i++) {\r\n                var id = ids[i];\r\n                if (!this._markerIdToMarker.hasOwnProperty(id)) {\r\n                    continue;\r\n                }\r\n                var marker = this._markerIdToMarker[id];\r\n                var lineNumber = marker.line.lineNumber;\r\n                if (!removeMarkersPerLine[lineNumber]) {\r\n                    removeMarkersPerLine[lineNumber] = Object.create(null);\r\n                }\r\n                removeMarkersPerLine[lineNumber][id] = true;\r\n                delete this._markerIdToMarker[id];\r\n            }\r\n            var lineNumbers = Object.keys(removeMarkersPerLine);\r\n            for (var i = 0, len = lineNumbers.length; i < len; i++) {\r\n                var lineNumber = parseInt(lineNumbers[i], 10);\r\n                this._lines[lineNumber - 1].removeMarkers(removeMarkersPerLine[lineNumbers[i]]);\r\n            }\r\n        };\r\n        TextModelWithMarkers.prototype._getMarkersInMap = function (markersMap) {\r\n            var result = [];\r\n            var keys = Object.keys(markersMap);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var markerId = keys[i];\r\n                if (this._markerIdToMarker.hasOwnProperty(markerId)) {\r\n                    result.push(this._markerIdToMarker[markerId]);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        return TextModelWithMarkers;\r\n    }(textModelWithTokens_1.TextModelWithTokens));\r\n    exports.TextModelWithMarkers = TextModelWithMarkers;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/textModelWithTrackedRanges\", [\"require\", \"exports\", 'vs/base/common/idGenerator', 'vs/editor/common/core/range', 'vs/editor/common/editorCommon', 'vs/editor/common/model/textModelWithMarkers', 'vs/editor/common/model/textModelWithTokens'], function (require, exports, idGenerator_1, range_1, editorCommon, textModelWithMarkers_1, textModelWithTokens_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var TrackedRangeModelRetokenizer = (function (_super) {\r\n        __extends(TrackedRangeModelRetokenizer, _super);\r\n        function TrackedRangeModelRetokenizer(retokenizePromise, lineNumber, model) {\r\n            _super.call(this, retokenizePromise, model);\r\n            this.trackedRangeId = model.addTrackedRange({\r\n                startLineNumber: lineNumber,\r\n                startColumn: 1,\r\n                endLineNumber: lineNumber,\r\n                endColumn: model.getLineMaxColumn(lineNumber)\r\n            }, editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\r\n        }\r\n        TrackedRangeModelRetokenizer.prototype.getRange = function () {\r\n            return this._model.getTrackedRange(this.trackedRangeId);\r\n        };\r\n        TrackedRangeModelRetokenizer.prototype.dispose = function () {\r\n            var model = this._model;\r\n            // if this .dispose() is being called as part of the model.dispose(), then the tracked ranges might no longer be available (e.g. throw exceptions)\r\n            if (model.isValidTrackedRange(this.trackedRangeId)) {\r\n                model.removeTrackedRange(this.trackedRangeId);\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        return TrackedRangeModelRetokenizer;\r\n    }(textModelWithTokens_1.FullModelRetokenizer));\r\n    var TrackedRange = (function () {\r\n        function TrackedRange(id, startMarkedId, endMarkerId) {\r\n            this.id = id;\r\n            this.startMarkerId = startMarkedId;\r\n            this.endMarkerId = endMarkerId;\r\n        }\r\n        return TrackedRange;\r\n    }());\r\n    var _INSTANCE_COUNT = 0;\r\n    var TextModelWithTrackedRanges = (function (_super) {\r\n        __extends(TextModelWithTrackedRanges, _super);\r\n        function TextModelWithTrackedRanges(allowedEventTypes, rawText, modeOrPromise) {\r\n            _super.call(this, allowedEventTypes, rawText, modeOrPromise);\r\n            this._rangeIdGenerator = new idGenerator_1.IdGenerator((++_INSTANCE_COUNT) + ';');\r\n            this._ranges = {};\r\n            this._markerIdToRangeId = {};\r\n            this._multiLineTrackedRanges = {};\r\n        }\r\n        TextModelWithTrackedRanges.prototype._createRetokenizer = function (retokenizePromise, lineNumber) {\r\n            return new TrackedRangeModelRetokenizer(retokenizePromise, lineNumber, this);\r\n        };\r\n        TextModelWithTrackedRanges.prototype.dispose = function () {\r\n            this._ranges = null;\r\n            this._markerIdToRangeId = null;\r\n            this._multiLineTrackedRanges = null;\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        TextModelWithTrackedRanges.prototype._resetValue = function (e, newValue) {\r\n            _super.prototype._resetValue.call(this, e, newValue);\r\n            // Destroy all my tracked ranges\r\n            this._ranges = {};\r\n            this._markerIdToRangeId = {};\r\n            this._multiLineTrackedRanges = {};\r\n        };\r\n        TextModelWithTrackedRanges.prototype._setRangeIsMultiLine = function (rangeId, rangeIsMultiLine) {\r\n            var rangeWasMultiLine = this._multiLineTrackedRanges.hasOwnProperty(rangeId);\r\n            if (!rangeWasMultiLine && rangeIsMultiLine) {\r\n                this._multiLineTrackedRanges[rangeId] = true;\r\n            }\r\n            else if (rangeWasMultiLine && !rangeIsMultiLine) {\r\n                delete this._multiLineTrackedRanges[rangeId];\r\n            }\r\n        };\r\n        TextModelWithTrackedRanges.prototype._shouldStartMarkerSticksToPreviousCharacter = function (stickiness) {\r\n            if (stickiness === editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges || stickiness === editorCommon.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        TextModelWithTrackedRanges.prototype._shouldEndMarkerSticksToPreviousCharacter = function (stickiness) {\r\n            if (stickiness === editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges || stickiness === editorCommon.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        TextModelWithTrackedRanges.prototype._getTrackedRangesCount = function () {\r\n            return Object.keys(this._ranges).length;\r\n        };\r\n        TextModelWithTrackedRanges.prototype.addTrackedRange = function (textRange, stickiness) {\r\n            textRange = this.validateRange(textRange);\r\n            var startMarkerSticksToPreviousCharacter = this._shouldStartMarkerSticksToPreviousCharacter(stickiness);\r\n            var endMarkerSticksToPreviousCharacter = this._shouldEndMarkerSticksToPreviousCharacter(stickiness);\r\n            var startMarkerId = this._addMarker(textRange.startLineNumber, textRange.startColumn, startMarkerSticksToPreviousCharacter);\r\n            var endMarkerId = this._addMarker(textRange.endLineNumber, textRange.endColumn, endMarkerSticksToPreviousCharacter);\r\n            var range = new TrackedRange(this._rangeIdGenerator.nextId(), startMarkerId, endMarkerId);\r\n            this._ranges[range.id] = range;\r\n            this._markerIdToRangeId[startMarkerId] = range.id;\r\n            this._markerIdToRangeId[endMarkerId] = range.id;\r\n            this._setRangeIsMultiLine(range.id, (textRange.startLineNumber !== textRange.endLineNumber));\r\n            return range.id;\r\n        };\r\n        TextModelWithTrackedRanges.prototype._addTrackedRanges = function (textRanges, stickinessArr) {\r\n            var addMarkers = [];\r\n            for (var i = 0, len = textRanges.length; i < len; i++) {\r\n                var textRange = textRanges[i];\r\n                var stickiness = stickinessArr[i];\r\n                addMarkers.push({\r\n                    lineNumber: textRange.startLineNumber,\r\n                    column: textRange.startColumn,\r\n                    stickToPreviousCharacter: this._shouldStartMarkerSticksToPreviousCharacter(stickiness)\r\n                });\r\n                addMarkers.push({\r\n                    lineNumber: textRange.endLineNumber,\r\n                    column: textRange.endColumn,\r\n                    stickToPreviousCharacter: this._shouldEndMarkerSticksToPreviousCharacter(stickiness)\r\n                });\r\n            }\r\n            var markerIds = this._addMarkers(addMarkers);\r\n            var result = [];\r\n            for (var i = 0, len = textRanges.length; i < len; i++) {\r\n                var textRange = textRanges[i];\r\n                var startMarkerId = markerIds[2 * i];\r\n                var endMarkerId = markerIds[2 * i + 1];\r\n                var range = new TrackedRange(this._rangeIdGenerator.nextId(), startMarkerId, endMarkerId);\r\n                this._ranges[range.id] = range;\r\n                this._markerIdToRangeId[startMarkerId] = range.id;\r\n                this._markerIdToRangeId[endMarkerId] = range.id;\r\n                this._setRangeIsMultiLine(range.id, (textRange.startLineNumber !== textRange.endLineNumber));\r\n                result.push(range.id);\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithTrackedRanges.prototype.changeTrackedRange = function (rangeId, newTextRange) {\r\n            if (this._ranges.hasOwnProperty(rangeId)) {\r\n                newTextRange = this.validateRange(newTextRange);\r\n                var range = this._ranges[rangeId];\r\n                this._changeMarker(range.startMarkerId, newTextRange.startLineNumber, newTextRange.startColumn);\r\n                this._changeMarker(range.endMarkerId, newTextRange.endLineNumber, newTextRange.endColumn);\r\n                this._setRangeIsMultiLine(range.id, (newTextRange.startLineNumber !== newTextRange.endLineNumber));\r\n            }\r\n        };\r\n        TextModelWithTrackedRanges.prototype.changeTrackedRangeStickiness = function (rangeId, newStickiness) {\r\n            if (this._ranges.hasOwnProperty(rangeId)) {\r\n                var range = this._ranges[rangeId];\r\n                this._changeMarkerStickiness(range.startMarkerId, this._shouldStartMarkerSticksToPreviousCharacter(newStickiness));\r\n                this._changeMarkerStickiness(range.endMarkerId, this._shouldEndMarkerSticksToPreviousCharacter(newStickiness));\r\n            }\r\n        };\r\n        TextModelWithTrackedRanges.prototype.isValidTrackedRange = function (rangeId) {\r\n            if (this._isDisposed || !this._ranges) {\r\n                return false;\r\n            }\r\n            return this._ranges.hasOwnProperty(rangeId);\r\n        };\r\n        TextModelWithTrackedRanges.prototype.removeTrackedRange = function (rangeId) {\r\n            if (this._ranges.hasOwnProperty(rangeId)) {\r\n                var range = this._ranges[rangeId];\r\n                this._removeMarker(range.startMarkerId);\r\n                this._removeMarker(range.endMarkerId);\r\n                this._setRangeIsMultiLine(range.id, false);\r\n                delete this._ranges[range.id];\r\n                delete this._markerIdToRangeId[range.startMarkerId];\r\n                delete this._markerIdToRangeId[range.endMarkerId];\r\n            }\r\n        };\r\n        TextModelWithTrackedRanges.prototype.removeTrackedRanges = function (ids) {\r\n            var removeMarkers = [];\r\n            for (var i = 0, len = ids.length; i < len; i++) {\r\n                var rangeId = ids[i];\r\n                if (!this._ranges.hasOwnProperty(rangeId)) {\r\n                    continue;\r\n                }\r\n                var range = this._ranges[rangeId];\r\n                removeMarkers.push(range.startMarkerId);\r\n                removeMarkers.push(range.endMarkerId);\r\n                this._setRangeIsMultiLine(range.id, false);\r\n                delete this._ranges[range.id];\r\n                delete this._markerIdToRangeId[range.startMarkerId];\r\n                delete this._markerIdToRangeId[range.endMarkerId];\r\n            }\r\n            if (removeMarkers.length > 0) {\r\n                this._removeMarkers(removeMarkers);\r\n            }\r\n        };\r\n        TextModelWithTrackedRanges.prototype._newEditorRange = function (startPosition, endPosition) {\r\n            if (endPosition.isBefore(startPosition)) {\r\n                // This tracked range has turned in on itself (end marker before start marker)\r\n                // This can happen in extreme editing conditions where lots of text is removed and lots is added\r\n                // Treat it as a collapsed range\r\n                return new range_1.Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column);\r\n            }\r\n            return new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\r\n        };\r\n        TextModelWithTrackedRanges.prototype.getTrackedRange = function (rangeId) {\r\n            var range = this._ranges[rangeId];\r\n            var startMarker = this._getMarker(range.startMarkerId);\r\n            var endMarker = this._getMarker(range.endMarkerId);\r\n            return this._newEditorRange(startMarker, endMarker);\r\n        };\r\n        /**\r\n         * Fetch only multi-line ranges that intersect with the given line number range\r\n         */\r\n        TextModelWithTrackedRanges.prototype._getMultiLineTrackedRanges = function (filterStartLineNumber, filterEndLineNumber) {\r\n            var result = [];\r\n            var keys = Object.keys(this._multiLineTrackedRanges);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var rangeId = keys[i];\r\n                var range = this._ranges[rangeId];\r\n                var startMarker = this._getMarker(range.startMarkerId);\r\n                if (startMarker.lineNumber > filterEndLineNumber) {\r\n                    continue;\r\n                }\r\n                var endMarker = this._getMarker(range.endMarkerId);\r\n                if (endMarker.lineNumber < filterStartLineNumber) {\r\n                    continue;\r\n                }\r\n                result.push({\r\n                    id: range.id,\r\n                    range: this._newEditorRange(startMarker, endMarker)\r\n                });\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithTrackedRanges.prototype.getLinesTrackedRanges = function (startLineNumber, endLineNumber) {\r\n            var result = this._getMultiLineTrackedRanges(startLineNumber, endLineNumber), resultMap = {}, lineMarkers, lineMarker, rangeId, i, len, lineNumber, startMarker, endMarker;\r\n            for (i = 0, len = result.length; i < len; i++) {\r\n                resultMap[result[i].id] = true;\r\n            }\r\n            for (lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n                lineMarkers = this._getLineMarkers(lineNumber);\r\n                for (i = 0, len = lineMarkers.length; i < len; i++) {\r\n                    lineMarker = lineMarkers[i];\r\n                    if (this._markerIdToRangeId.hasOwnProperty(lineMarker.id)) {\r\n                        rangeId = this._markerIdToRangeId[lineMarker.id];\r\n                        if (!resultMap.hasOwnProperty(rangeId)) {\r\n                            startMarker = this._getMarker(this._ranges[rangeId].startMarkerId);\r\n                            endMarker = this._getMarker(this._ranges[rangeId].endMarkerId);\r\n                            result.push({\r\n                                id: rangeId,\r\n                                range: this._newEditorRange(startMarker, endMarker)\r\n                            });\r\n                            resultMap[rangeId] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithTrackedRanges.prototype._onChangedMarkers = function (changedMarkers) {\r\n            var changedRanges = {}, changedRange, range, rangeId, marker, i, len;\r\n            for (i = 0, len = changedMarkers.length; i < len; i++) {\r\n                marker = changedMarkers[i];\r\n                if (this._markerIdToRangeId.hasOwnProperty(marker.id)) {\r\n                    rangeId = this._markerIdToRangeId[marker.id];\r\n                    range = this._ranges[rangeId];\r\n                    if (changedRanges.hasOwnProperty(range.id)) {\r\n                        changedRange = changedRanges[range.id];\r\n                    }\r\n                    else {\r\n                        changedRange = {\r\n                            startLineNumber: 0,\r\n                            startColumn: 0,\r\n                            endLineNumber: 0,\r\n                            endColumn: 0\r\n                        };\r\n                        changedRanges[range.id] = changedRange;\r\n                    }\r\n                    if (marker.id === range.startMarkerId) {\r\n                        changedRange.startLineNumber = marker.oldLineNumber;\r\n                        changedRange.startColumn = marker.oldColumn;\r\n                    }\r\n                    else {\r\n                        changedRange.endLineNumber = marker.oldLineNumber;\r\n                        changedRange.endColumn = marker.oldColumn;\r\n                    }\r\n                    this._setRangeIsMultiLine(range.id, (this._getMarker(range.startMarkerId).lineNumber !== this._getMarker(range.endMarkerId).lineNumber));\r\n                }\r\n            }\r\n            return changedRanges;\r\n        };\r\n        return TextModelWithTrackedRanges;\r\n    }(textModelWithMarkers_1.TextModelWithMarkers));\r\n    exports.TextModelWithTrackedRanges = TextModelWithTrackedRanges;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/textModelWithDecorations\", [\"require\", \"exports\", 'vs/base/common/errors', 'vs/base/common/htmlContent', 'vs/base/common/strings', 'vs/base/common/idGenerator', 'vs/editor/common/core/range', 'vs/editor/common/editorCommon', 'vs/editor/common/model/textModelWithTrackedRanges'], function (require, exports, errors_1, htmlContent_1, strings, idGenerator_1, range_1, editorCommon, textModelWithTrackedRanges_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var DeferredEventsBuilder = (function () {\r\n        function DeferredEventsBuilder() {\r\n            this.changedMarkers = {};\r\n            this.oldDecorationRange = {};\r\n            this.oldDecorationOptions = {};\r\n            this.newOrChangedDecorations = {};\r\n            this.removedDecorations = {};\r\n        }\r\n        // --- Build decoration events\r\n        DeferredEventsBuilder.prototype.addNewDecoration = function (id) {\r\n            this.newOrChangedDecorations[id] = true;\r\n        };\r\n        DeferredEventsBuilder.prototype.addRemovedDecoration = function (id, ownerId, range, options) {\r\n            if (this.newOrChangedDecorations.hasOwnProperty(id)) {\r\n                delete this.newOrChangedDecorations[id];\r\n            }\r\n            if (!this.oldDecorationRange.hasOwnProperty(id)) {\r\n                this.oldDecorationRange[id] = range;\r\n            }\r\n            if (!this.oldDecorationOptions.hasOwnProperty(id)) {\r\n                this.oldDecorationOptions[id] = options;\r\n            }\r\n            this.removedDecorations[id] = true;\r\n        };\r\n        DeferredEventsBuilder.prototype.addMovedDecoration = function (id, oldRange) {\r\n            if (!this.oldDecorationRange.hasOwnProperty(id)) {\r\n                this.oldDecorationRange[id] = oldRange;\r\n            }\r\n            this.newOrChangedDecorations[id] = true;\r\n        };\r\n        DeferredEventsBuilder.prototype.addUpdatedDecoration = function (id, oldOptions) {\r\n            if (!this.oldDecorationOptions.hasOwnProperty(id)) {\r\n                this.oldDecorationOptions[id] = oldOptions;\r\n            }\r\n            this.newOrChangedDecorations[id] = true;\r\n        };\r\n        return DeferredEventsBuilder;\r\n    }());\r\n    exports.DeferredEventsBuilder = DeferredEventsBuilder;\r\n    var _INSTANCE_COUNT = 0;\r\n    var TextModelWithDecorations = (function (_super) {\r\n        __extends(TextModelWithDecorations, _super);\r\n        function TextModelWithDecorations(allowedEventTypes, rawText, modeOrPromise) {\r\n            allowedEventTypes.push(editorCommon.EventType.ModelDecorationsChanged);\r\n            _super.call(this, allowedEventTypes, rawText, modeOrPromise);\r\n            // Initialize decorations\r\n            this._decorationIdGenerator = new idGenerator_1.IdGenerator((++_INSTANCE_COUNT) + ';');\r\n            this.decorations = {};\r\n            this.rangeIdToDecorationId = {};\r\n            this._currentDeferredEvents = null;\r\n        }\r\n        TextModelWithDecorations.prototype.dispose = function () {\r\n            this.decorations = null;\r\n            this.rangeIdToDecorationId = null;\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        TextModelWithDecorations.prototype._resetValue = function (e, newValue) {\r\n            _super.prototype._resetValue.call(this, e, newValue);\r\n            // Destroy all my decorations\r\n            this.decorations = {};\r\n            this.rangeIdToDecorationId = {};\r\n        };\r\n        TextModelWithDecorations.prototype.changeDecorations = function (callback, ownerId) {\r\n            var _this = this;\r\n            if (ownerId === void 0) { ownerId = 0; }\r\n            return this._withDeferredEvents(function (deferredEventsBuilder) {\r\n                var changeAccessor = {\r\n                    addDecoration: function (range, options) {\r\n                        return _this._addDecorationImpl(deferredEventsBuilder, ownerId, _this.validateRange(range), _normalizeOptions(options));\r\n                    },\r\n                    changeDecoration: function (id, newRange) {\r\n                        _this._changeDecorationImpl(deferredEventsBuilder, id, _this.validateRange(newRange));\r\n                    },\r\n                    changeDecorationOptions: function (id, options) {\r\n                        _this._changeDecorationOptionsImpl(deferredEventsBuilder, id, _normalizeOptions(options));\r\n                    },\r\n                    removeDecoration: function (id) {\r\n                        _this._removeDecorationImpl(deferredEventsBuilder, id);\r\n                    },\r\n                    deltaDecorations: function (oldDecorations, newDecorations) {\r\n                        return _this._deltaDecorationsImpl(deferredEventsBuilder, ownerId, oldDecorations, _this._normalizeDeltaDecorations(newDecorations));\r\n                    }\r\n                };\r\n                var result = null;\r\n                try {\r\n                    result = callback(changeAccessor);\r\n                }\r\n                catch (e) {\r\n                    errors_1.onUnexpectedError(e);\r\n                }\r\n                // Invalidate change accessor\r\n                changeAccessor.addDecoration = null;\r\n                changeAccessor.changeDecoration = null;\r\n                changeAccessor.removeDecoration = null;\r\n                changeAccessor.deltaDecorations = null;\r\n                return result;\r\n            });\r\n        };\r\n        TextModelWithDecorations.prototype.deltaDecorations = function (oldDecorations, newDecorations, ownerId) {\r\n            if (ownerId === void 0) { ownerId = 0; }\r\n            if (!oldDecorations) {\r\n                oldDecorations = [];\r\n            }\r\n            return this.changeDecorations(function (changeAccessor) {\r\n                return changeAccessor.deltaDecorations(oldDecorations, newDecorations);\r\n            }, ownerId);\r\n        };\r\n        TextModelWithDecorations.prototype.removeAllDecorationsWithOwnerId = function (ownerId) {\r\n            var toRemove = [];\r\n            var keys = Object.keys(this.decorations);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var decorationId = keys[i];\r\n                var decoration = this.decorations[decorationId];\r\n                if (decoration.ownerId === ownerId) {\r\n                    toRemove.push(decoration.id);\r\n                }\r\n            }\r\n            this._removeDecorationsImpl(null, toRemove);\r\n        };\r\n        TextModelWithDecorations.prototype.getDecorationOptions = function (decorationId) {\r\n            if (this.decorations.hasOwnProperty(decorationId)) {\r\n                return this.decorations[decorationId].options;\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithDecorations.prototype.getDecorationRange = function (decorationId) {\r\n            if (this.decorations.hasOwnProperty(decorationId)) {\r\n                var decoration = this.decorations[decorationId];\r\n                return this.getTrackedRange(decoration.rangeId);\r\n            }\r\n            return null;\r\n        };\r\n        TextModelWithDecorations.prototype.getLineDecorations = function (lineNumber, ownerId, filterOutValidation) {\r\n            if (ownerId === void 0) { ownerId = 0; }\r\n            if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n            if (lineNumber < 1 || lineNumber > this.getLineCount()) {\r\n                return [];\r\n            }\r\n            return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\r\n        };\r\n        TextModelWithDecorations.prototype._getDecorationsInRange = function (startLineNumber, startColumn, endLineNumber, endColumn, ownerId, filterOutValidation) {\r\n            var result = [], decoration, lineRanges = this.getLinesTrackedRanges(startLineNumber, endLineNumber), i, lineRange, len;\r\n            for (i = 0, len = lineRanges.length; i < len; i++) {\r\n                lineRange = lineRanges[i];\r\n                // Look at line range only if there is a corresponding decoration for it\r\n                if (this.rangeIdToDecorationId.hasOwnProperty(lineRange.id)) {\r\n                    decoration = this.decorations[this.rangeIdToDecorationId[lineRange.id]];\r\n                    if (ownerId && decoration.ownerId && decoration.ownerId !== ownerId) {\r\n                        continue;\r\n                    }\r\n                    if (filterOutValidation) {\r\n                        if (decoration.options.className === editorCommon.ClassName.EditorErrorDecoration || decoration.options.className === editorCommon.ClassName.EditorWarningDecoration) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    if (lineRange.range.startLineNumber === startLineNumber && lineRange.range.endColumn < startColumn) {\r\n                        continue;\r\n                    }\r\n                    if (lineRange.range.endLineNumber === endLineNumber && lineRange.range.startColumn > endColumn) {\r\n                        continue;\r\n                    }\r\n                    result.push({\r\n                        id: decoration.id,\r\n                        ownerId: decoration.ownerId,\r\n                        range: lineRange.range,\r\n                        options: decoration.options\r\n                    });\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithDecorations.prototype.getLinesDecorations = function (startLineNumber, endLineNumber, ownerId, filterOutValidation) {\r\n            if (ownerId === void 0) { ownerId = 0; }\r\n            if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n            var lineCount = this.getLineCount();\r\n            startLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\r\n            endLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\r\n            return this._getDecorationsInRange(startLineNumber, 1, endLineNumber, Number.MAX_VALUE, ownerId, filterOutValidation);\r\n        };\r\n        TextModelWithDecorations.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n            var validatedRange = this.validateRange(range);\r\n            return this._getDecorationsInRange(validatedRange.startLineNumber, validatedRange.startColumn, validatedRange.endLineNumber, validatedRange.endColumn, ownerId, filterOutValidation);\r\n        };\r\n        TextModelWithDecorations.prototype.getAllDecorations = function (ownerId, filterOutValidation) {\r\n            if (ownerId === void 0) { ownerId = 0; }\r\n            if (filterOutValidation === void 0) { filterOutValidation = false; }\r\n            var result = [];\r\n            var keys = Object.keys(this.decorations);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var decorationId = keys[i];\r\n                var decoration = this.decorations[decorationId];\r\n                if (ownerId && decoration.ownerId && decoration.ownerId !== ownerId) {\r\n                    continue;\r\n                }\r\n                if (filterOutValidation) {\r\n                    if (decoration.options.className === editorCommon.ClassName.EditorErrorDecoration || decoration.options.className === editorCommon.ClassName.EditorWarningDecoration) {\r\n                        continue;\r\n                    }\r\n                }\r\n                result.push({\r\n                    id: decoration.id,\r\n                    ownerId: decoration.ownerId,\r\n                    range: this.getTrackedRange(decoration.rangeId),\r\n                    options: decoration.options\r\n                });\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithDecorations.prototype._withDeferredEvents = function (callback) {\r\n            var _this = this;\r\n            return this.deferredEmit(function () {\r\n                var createDeferredEvents = _this._currentDeferredEvents ? false : true;\r\n                if (createDeferredEvents) {\r\n                    _this._currentDeferredEvents = new DeferredEventsBuilder();\r\n                }\r\n                try {\r\n                    var result = callback(_this._currentDeferredEvents);\r\n                    if (createDeferredEvents) {\r\n                        _this._handleCollectedEvents(_this._currentDeferredEvents);\r\n                    }\r\n                }\r\n                finally {\r\n                    if (createDeferredEvents) {\r\n                        _this._currentDeferredEvents = null;\r\n                    }\r\n                }\r\n                return result;\r\n            });\r\n        };\r\n        TextModelWithDecorations.prototype._handleCollectedEvents = function (b) {\r\n            // Normalize changed markers into an array\r\n            var changedMarkers = this._getMarkersInMap(b.changedMarkers);\r\n            // Collect changed tracked ranges\r\n            var changedRanges = this._onChangedMarkers(changedMarkers);\r\n            // Collect decoration change events with the deferred event builder\r\n            this._onChangedRanges(b, changedRanges);\r\n            // Emit a single decorations changed event\r\n            this._handleCollectedDecorationsEvents(b);\r\n            // Reset markers for next round of events\r\n            for (var i = 0, len = changedMarkers.length; i < len; i++) {\r\n                changedMarkers[i].oldLineNumber = 0;\r\n                changedMarkers[i].oldColumn = 0;\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._onChangedRanges = function (eventBuilder, changedRanges) {\r\n            var keys = Object.keys(changedRanges);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var rangeId = keys[i];\r\n                if (this.rangeIdToDecorationId.hasOwnProperty(rangeId)) {\r\n                    var decorationId = this.rangeIdToDecorationId[rangeId];\r\n                    eventBuilder.addMovedDecoration(decorationId, changedRanges[rangeId]);\r\n                }\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._handleCollectedDecorationsEvents = function (b) {\r\n            var addedOrChangedDecorations = [], removedDecorations = [], decorationIds = [], decorationData, oldRange;\r\n            var keys = Object.keys(b.newOrChangedDecorations);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var decorationId = keys[i];\r\n                decorationIds.push(decorationId);\r\n                decorationData = this._getDecorationData(decorationId);\r\n                decorationData.isForValidation = (decorationData.options.className === editorCommon.ClassName.EditorErrorDecoration || decorationData.options.className === editorCommon.ClassName.EditorWarningDecoration);\r\n                addedOrChangedDecorations.push(decorationData);\r\n                if (b.oldDecorationRange.hasOwnProperty(decorationId)) {\r\n                    oldRange = b.oldDecorationRange[decorationId];\r\n                    oldRange.startLineNumber = oldRange.startLineNumber || decorationData.range.startLineNumber;\r\n                    oldRange.startColumn = oldRange.startColumn || decorationData.range.startColumn;\r\n                    oldRange.endLineNumber = oldRange.endLineNumber || decorationData.range.endLineNumber;\r\n                    oldRange.endColumn = oldRange.endColumn || decorationData.range.endColumn;\r\n                }\r\n            }\r\n            keys = Object.keys(b.removedDecorations);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var decorationId = keys[i];\r\n                decorationIds.push(decorationId);\r\n                removedDecorations.push(decorationId);\r\n            }\r\n            if (decorationIds.length > 0) {\r\n                var e = {\r\n                    ids: decorationIds,\r\n                    addedOrChangedDecorations: addedOrChangedDecorations,\r\n                    removedDecorations: removedDecorations,\r\n                    oldOptions: b.oldDecorationOptions,\r\n                    oldRanges: b.oldDecorationRange\r\n                };\r\n                this.emitModelDecorationsChangedEvent(e);\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._getDecorationData = function (decorationId) {\r\n            var decoration = this.decorations[decorationId];\r\n            return {\r\n                id: decoration.id,\r\n                ownerId: decoration.ownerId,\r\n                range: this.getTrackedRange(decoration.rangeId),\r\n                isForValidation: false,\r\n                options: decoration.options\r\n            };\r\n        };\r\n        TextModelWithDecorations.prototype.emitModelDecorationsChangedEvent = function (e) {\r\n            if (!this._isDisposing) {\r\n                this.emit(editorCommon.EventType.ModelDecorationsChanged, e);\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._normalizeDeltaDecorations = function (deltaDecorations) {\r\n            var result = [];\r\n            for (var i = 0, len = deltaDecorations.length; i < len; i++) {\r\n                var deltaDecoration = deltaDecorations[i];\r\n                result.push(new ModelDeltaDecoration(i, this.validateRange(deltaDecoration.range), _normalizeOptions(deltaDecoration.options)));\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithDecorations.prototype._addDecorationImpl = function (eventBuilder, ownerId, range, options) {\r\n            var rangeId = this.addTrackedRange(range, options.stickiness);\r\n            var decoration = new ModelInternalDecoration(this._decorationIdGenerator.nextId(), ownerId, rangeId, options);\r\n            this.decorations[decoration.id] = decoration;\r\n            this.rangeIdToDecorationId[rangeId] = decoration.id;\r\n            eventBuilder.addNewDecoration(decoration.id);\r\n            return decoration.id;\r\n        };\r\n        TextModelWithDecorations.prototype._addDecorationsImpl = function (eventBuilder, ownerId, newDecorations) {\r\n            var rangeIds = this._addTrackedRanges(newDecorations.map(function (d) { return d.range; }), newDecorations.map(function (d) { return d.options.stickiness; }));\r\n            var result = [];\r\n            for (var i = 0, len = newDecorations.length; i < len; i++) {\r\n                var rangeId = rangeIds[i];\r\n                var decoration = new ModelInternalDecoration(this._decorationIdGenerator.nextId(), ownerId, rangeId, newDecorations[i].options);\r\n                this.decorations[decoration.id] = decoration;\r\n                this.rangeIdToDecorationId[rangeId] = decoration.id;\r\n                eventBuilder.addNewDecoration(decoration.id);\r\n                result.push(decoration.id);\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithDecorations.prototype._changeDecorationImpl = function (eventBuilder, id, newRange) {\r\n            if (this.decorations.hasOwnProperty(id)) {\r\n                var decoration = this.decorations[id];\r\n                var oldRange = this.getTrackedRange(decoration.rangeId);\r\n                this.changeTrackedRange(decoration.rangeId, newRange);\r\n                eventBuilder.addMovedDecoration(id, oldRange);\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._changeDecorationOptionsImpl = function (eventBuilder, id, options) {\r\n            if (this.decorations.hasOwnProperty(id)) {\r\n                var decoration = this.decorations[id];\r\n                var oldOptions = decoration.options;\r\n                if (oldOptions.stickiness !== options.stickiness) {\r\n                    this.changeTrackedRangeStickiness(decoration.rangeId, options.stickiness);\r\n                }\r\n                decoration.options = options;\r\n                eventBuilder.addUpdatedDecoration(id, oldOptions);\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._removeDecorationImpl = function (eventBuilder, id) {\r\n            if (this.decorations.hasOwnProperty(id)) {\r\n                var decoration = this.decorations[id];\r\n                var oldRange = null;\r\n                if (eventBuilder) {\r\n                    oldRange = this.getTrackedRange(decoration.rangeId);\r\n                }\r\n                this.removeTrackedRange(decoration.rangeId);\r\n                delete this.rangeIdToDecorationId[decoration.rangeId];\r\n                delete this.decorations[id];\r\n                if (eventBuilder) {\r\n                    eventBuilder.addRemovedDecoration(id, decoration.ownerId, oldRange, decoration.options);\r\n                }\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._removeDecorationsImpl = function (eventBuilder, ids) {\r\n            var removeTrackedRanges = [];\r\n            for (var i = 0, len = ids.length; i < len; i++) {\r\n                var id = ids[i];\r\n                if (!this.decorations.hasOwnProperty(id)) {\r\n                    continue;\r\n                }\r\n                var decoration = this.decorations[id];\r\n                if (eventBuilder) {\r\n                    var oldRange = this.getTrackedRange(decoration.rangeId);\r\n                    eventBuilder.addRemovedDecoration(id, decoration.ownerId, oldRange, decoration.options);\r\n                }\r\n                removeTrackedRanges.push(decoration.rangeId);\r\n                delete this.rangeIdToDecorationId[decoration.rangeId];\r\n                delete this.decorations[id];\r\n            }\r\n            if (removeTrackedRanges.length > 0) {\r\n                this.removeTrackedRanges(removeTrackedRanges);\r\n            }\r\n        };\r\n        TextModelWithDecorations.prototype._resolveOldDecorations = function (oldDecorations) {\r\n            var result = [];\r\n            for (var i = 0, len = oldDecorations.length; i < len; i++) {\r\n                var id = oldDecorations[i];\r\n                if (!this.decorations.hasOwnProperty(id)) {\r\n                    continue;\r\n                }\r\n                var decoration = this.decorations[id];\r\n                result.push({\r\n                    id: id,\r\n                    range: this.getTrackedRange(decoration.rangeId),\r\n                    options: decoration.options\r\n                });\r\n            }\r\n            return result;\r\n        };\r\n        TextModelWithDecorations.prototype._deltaDecorationsImpl = function (eventBuilder, ownerId, oldDecorationsIds, newDecorations) {\r\n            if (oldDecorationsIds.length === 0) {\r\n                // Nothing to remove\r\n                return this._addDecorationsImpl(eventBuilder, ownerId, newDecorations);\r\n            }\r\n            if (newDecorations.length === 0) {\r\n                // Nothing to add\r\n                this._removeDecorationsImpl(eventBuilder, oldDecorationsIds);\r\n                return [];\r\n            }\r\n            var oldDecorations = this._resolveOldDecorations(oldDecorationsIds);\r\n            oldDecorations.sort(function (a, b) { return range_1.Range.compareRangesUsingStarts(a.range, b.range); });\r\n            newDecorations.sort(function (a, b) { return range_1.Range.compareRangesUsingStarts(a.range, b.range); });\r\n            var result = [], oldDecorationsIndex = 0, oldDecorationsLength = oldDecorations.length, newDecorationsIndex = 0, newDecorationsLength = newDecorations.length, decorationsToAdd = [], decorationsToRemove = [];\r\n            while (oldDecorationsIndex < oldDecorationsLength && newDecorationsIndex < newDecorationsLength) {\r\n                var oldDecoration = oldDecorations[oldDecorationsIndex];\r\n                var newDecoration = newDecorations[newDecorationsIndex];\r\n                var comparison = range_1.Range.compareRangesUsingStarts(oldDecoration.range, newDecoration.range);\r\n                if (comparison < 0) {\r\n                    // `oldDecoration` is before `newDecoration` => remove `oldDecoration`\r\n                    decorationsToRemove.push(oldDecoration.id);\r\n                    oldDecorationsIndex++;\r\n                    continue;\r\n                }\r\n                if (comparison > 0) {\r\n                    // `newDecoration` is before `oldDecoration` => add `newDecoration`\r\n                    decorationsToAdd.push(newDecoration);\r\n                    newDecorationsIndex++;\r\n                    continue;\r\n                }\r\n                // The ranges of `oldDecoration` and `newDecoration` are equal\r\n                if (!oldDecoration.options.equals(newDecoration.options)) {\r\n                    // The options do not match => remove `oldDecoration`\r\n                    decorationsToRemove.push(oldDecoration.id);\r\n                    oldDecorationsIndex++;\r\n                    continue;\r\n                }\r\n                // Bingo! We can reuse `oldDecoration` for `newDecoration`\r\n                result[newDecoration.index] = oldDecoration.id;\r\n                oldDecorationsIndex++;\r\n                newDecorationsIndex++;\r\n            }\r\n            while (oldDecorationsIndex < oldDecorationsLength) {\r\n                // No more new decorations => remove decoration at `oldDecorationsIndex`\r\n                decorationsToRemove.push(oldDecorations[oldDecorationsIndex].id);\r\n                oldDecorationsIndex++;\r\n            }\r\n            while (newDecorationsIndex < newDecorationsLength) {\r\n                // No more old decorations => add decoration at `newDecorationsIndex`\r\n                decorationsToAdd.push(newDecorations[newDecorationsIndex]);\r\n                newDecorationsIndex++;\r\n            }\r\n            // Remove `decorationsToRemove`\r\n            if (decorationsToRemove.length > 0) {\r\n                this._removeDecorationsImpl(eventBuilder, decorationsToRemove);\r\n            }\r\n            // Add `decorationsToAdd`\r\n            if (decorationsToAdd.length > 0) {\r\n                var newIds = this._addDecorationsImpl(eventBuilder, ownerId, decorationsToAdd);\r\n                for (var i = 0, len = decorationsToAdd.length; i < len; i++) {\r\n                    result[decorationsToAdd[i].index] = newIds[i];\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        return TextModelWithDecorations;\r\n    }(textModelWithTrackedRanges_1.TextModelWithTrackedRanges));\r\n    exports.TextModelWithDecorations = TextModelWithDecorations;\r\n    function cleanClassName(className) {\r\n        return className.replace(/[^a-z0-9\\-]/gi, ' ');\r\n    }\r\n    var ModelInternalDecoration = (function () {\r\n        function ModelInternalDecoration(id, ownerId, rangeId, options) {\r\n            this.id = id;\r\n            this.ownerId = ownerId;\r\n            this.rangeId = rangeId;\r\n            this.options = options;\r\n        }\r\n        return ModelInternalDecoration;\r\n    }());\r\n    var ModelDecorationOptions = (function () {\r\n        function ModelDecorationOptions(options) {\r\n            this.stickiness = options.stickiness || editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges;\r\n            this.className = cleanClassName(options.className || strings.empty);\r\n            this.hoverMessage = options.hoverMessage || strings.empty;\r\n            this.htmlMessage = options.htmlMessage || [];\r\n            this.isWholeLine = options.isWholeLine || false;\r\n            this.overviewRuler = _normalizeOverviewRulerOptions(options.overviewRuler, options.showInOverviewRuler);\r\n            this.glyphMarginClassName = cleanClassName(options.glyphMarginClassName || strings.empty);\r\n            this.linesDecorationsClassName = cleanClassName(options.linesDecorationsClassName || strings.empty);\r\n            this.inlineClassName = cleanClassName(options.inlineClassName || strings.empty);\r\n        }\r\n        ModelDecorationOptions._overviewRulerEquals = function (a, b) {\r\n            return (a.color === b.color\r\n                && a.position === b.position\r\n                && a.darkColor === b.darkColor);\r\n        };\r\n        ModelDecorationOptions.prototype.equals = function (other) {\r\n            return (this.stickiness === other.stickiness\r\n                && this.className === other.className\r\n                && this.hoverMessage === other.hoverMessage\r\n                && this.isWholeLine === other.isWholeLine\r\n                && this.showInOverviewRuler === other.showInOverviewRuler\r\n                && this.glyphMarginClassName === other.glyphMarginClassName\r\n                && this.linesDecorationsClassName === other.linesDecorationsClassName\r\n                && this.inlineClassName === other.inlineClassName\r\n                && htmlContent_1.htmlContentElementArrEquals(this.htmlMessage, other.htmlMessage)\r\n                && ModelDecorationOptions._overviewRulerEquals(this.overviewRuler, other.overviewRuler));\r\n        };\r\n        return ModelDecorationOptions;\r\n    }());\r\n    var ModelDeltaDecoration = (function () {\r\n        function ModelDeltaDecoration(index, range, options) {\r\n            this.index = index;\r\n            this.range = range;\r\n            this.options = options;\r\n        }\r\n        return ModelDeltaDecoration;\r\n    }());\r\n    function _normalizeOptions(options) {\r\n        return new ModelDecorationOptions(options);\r\n    }\r\n    var ModelDecorationOverviewRulerOptions = (function () {\r\n        function ModelDecorationOverviewRulerOptions(options, legacyShowInOverviewRuler) {\r\n            this.color = strings.empty;\r\n            this.darkColor = strings.empty;\r\n            this.position = editorCommon.OverviewRulerLane.Center;\r\n            if (legacyShowInOverviewRuler) {\r\n                this.color = legacyShowInOverviewRuler;\r\n            }\r\n            if (options && options.color) {\r\n                this.color = options.color;\r\n            }\r\n            if (options && options.darkColor) {\r\n                this.darkColor = options.darkColor;\r\n            }\r\n            if (options && options.hasOwnProperty('position')) {\r\n                this.position = options.position;\r\n            }\r\n        }\r\n        return ModelDecorationOverviewRulerOptions;\r\n    }());\r\n    function _normalizeOverviewRulerOptions(options, legacyShowInOverviewRuler) {\r\n        if (legacyShowInOverviewRuler === void 0) { legacyShowInOverviewRuler = null; }\r\n        return new ModelDecorationOverviewRulerOptions(options, legacyShowInOverviewRuler);\r\n    }\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/editableTextModel\", [\"require\", \"exports\", 'vs/editor/common/core/range', 'vs/editor/common/editorCommon', 'vs/editor/common/model/editStack', 'vs/editor/common/model/modelLine', 'vs/editor/common/model/textModelWithDecorations', 'vs/base/common/strings'], function (require, exports, range_1, editorCommon, editStack_1, modelLine_1, textModelWithDecorations_1, strings) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var EditableTextModel = (function (_super) {\r\n        __extends(EditableTextModel, _super);\r\n        function EditableTextModel(allowedEventTypes, rawText, modeOrPromise) {\r\n            allowedEventTypes.push(editorCommon.EventType.ModelRawContentChanged);\r\n            allowedEventTypes.push(editorCommon.EventType.ModelContentChanged2);\r\n            _super.call(this, allowedEventTypes, rawText, modeOrPromise);\r\n            this._commandManager = new editStack_1.EditStack(this);\r\n            this._isUndoing = false;\r\n            this._isRedoing = false;\r\n            this._hasEditableRange = false;\r\n            this._editableRangeId = null;\r\n            this._trimAutoWhitespaceLines = null;\r\n        }\r\n        EditableTextModel.prototype.onDidChangeRawContent = function (listener) {\r\n            return this.addListener2(editorCommon.EventType.ModelRawContentChanged, listener);\r\n        };\r\n        EditableTextModel.prototype.onDidChangeContent = function (listener) {\r\n            return this.addListener2(editorCommon.EventType.ModelContentChanged2, listener);\r\n        };\r\n        EditableTextModel.prototype.dispose = function () {\r\n            this._commandManager = null;\r\n            _super.prototype.dispose.call(this);\r\n        };\r\n        EditableTextModel.prototype._resetValue = function (e, newValue) {\r\n            _super.prototype._resetValue.call(this, e, newValue);\r\n            // Destroy my edit history and settings\r\n            this._commandManager = new editStack_1.EditStack(this);\r\n            this._hasEditableRange = false;\r\n            this._editableRangeId = null;\r\n            this._trimAutoWhitespaceLines = null;\r\n        };\r\n        EditableTextModel.prototype.pushStackElement = function () {\r\n            this._commandManager.pushStackElement();\r\n        };\r\n        EditableTextModel.prototype.pushEditOperations = function (beforeCursorState, editOperations, cursorStateComputer) {\r\n            var _this = this;\r\n            return this.deferredEmit(function () {\r\n                if (_this._options.trimAutoWhitespace && _this._trimAutoWhitespaceLines) {\r\n                    // Go through each saved line number and insert a trim whitespace edit\r\n                    // if it is safe to do so (no conflicts with other edits).\r\n                    var incomingEdits = editOperations.map(function (op) {\r\n                        return {\r\n                            range: _this.validateRange(op.range),\r\n                            text: op.text\r\n                        };\r\n                    });\r\n                    // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\r\n                    // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\r\n                    var editsAreNearCursors = true;\r\n                    for (var i = 0, len = beforeCursorState.length; i < len; i++) {\r\n                        var sel = beforeCursorState[i];\r\n                        var foundEditNearSel = false;\r\n                        for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\r\n                            var editRange = incomingEdits[j].range;\r\n                            var selIsAbove = editRange.startLineNumber > sel.endLineNumber;\r\n                            var selIsBelow = sel.startLineNumber > editRange.endLineNumber;\r\n                            if (!selIsAbove && !selIsBelow) {\r\n                                foundEditNearSel = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!foundEditNearSel) {\r\n                            editsAreNearCursors = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (editsAreNearCursors) {\r\n                        for (var i = 0, len = _this._trimAutoWhitespaceLines.length; i < len; i++) {\r\n                            var trimLineNumber = _this._trimAutoWhitespaceLines[i];\r\n                            var maxLineColumn = _this.getLineMaxColumn(trimLineNumber);\r\n                            var allowTrimLine = true;\r\n                            for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\r\n                                var editRange = incomingEdits[j].range;\r\n                                var editText = incomingEdits[j].text;\r\n                                if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\r\n                                    // `trimLine` is completely outside this edit\r\n                                    continue;\r\n                                }\r\n                                // At this point:\r\n                                //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\r\n                                if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\r\n                                    && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\r\n                                    // This edit inserts a new line (and maybe other text) after `trimLine`\r\n                                    continue;\r\n                                }\r\n                                // Looks like we can't trim this line as it would interfere with an incoming edit\r\n                                allowTrimLine = false;\r\n                                break;\r\n                            }\r\n                            if (allowTrimLine) {\r\n                                editOperations.push({\r\n                                    identifier: null,\r\n                                    range: new range_1.Range(trimLineNumber, 1, trimLineNumber, maxLineColumn),\r\n                                    text: null,\r\n                                    forceMoveMarkers: false,\r\n                                    isAutoWhitespaceEdit: false\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    _this._trimAutoWhitespaceLines = null;\r\n                }\r\n                return _this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer);\r\n            });\r\n        };\r\n        /**\r\n         * Transform operations such that they represent the same logic edit,\r\n         * but that they also do not cause OOM crashes.\r\n         */\r\n        EditableTextModel.prototype._reduceOperations = function (operations) {\r\n            if (operations.length < 1000) {\r\n                // We know from empirical testing that a thousand edits work fine regardless of their shape.\r\n                return operations;\r\n            }\r\n            // At one point, due to how events are emitted and how each operation is handled,\r\n            // some operations can trigger a high ammount of temporary string allocations,\r\n            // that will immediately get edited again.\r\n            // e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\r\n            // Therefore, the strategy is to collapse all the operations into a huge single edit operation\r\n            return [this._toSingleEditOperation(operations)];\r\n        };\r\n        EditableTextModel.prototype._toSingleEditOperation = function (operations) {\r\n            var forceMoveMarkers = false, firstEditRange = operations[0].range, lastEditRange = operations[operations.length - 1].range, entireEditRange = new range_1.Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn), lastEndLineNumber = firstEditRange.startLineNumber, lastEndColumn = firstEditRange.startColumn, result = [];\r\n            for (var i = 0, len = operations.length; i < len; i++) {\r\n                var operation = operations[i], range = operation.range;\r\n                forceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\r\n                // (1) -- Push old text\r\n                for (var lineNumber = lastEndLineNumber; lineNumber < range.startLineNumber; lineNumber++) {\r\n                    if (lineNumber === lastEndLineNumber) {\r\n                        result.push(this._lines[lineNumber - 1].text.substring(lastEndColumn - 1));\r\n                    }\r\n                    else {\r\n                        result.push('\\n');\r\n                        result.push(this._lines[lineNumber - 1].text);\r\n                    }\r\n                }\r\n                if (range.startLineNumber === lastEndLineNumber) {\r\n                    result.push(this._lines[range.startLineNumber - 1].text.substring(lastEndColumn - 1, range.startColumn - 1));\r\n                }\r\n                else {\r\n                    result.push('\\n');\r\n                    result.push(this._lines[range.startLineNumber - 1].text.substring(0, range.startColumn - 1));\r\n                }\r\n                // (2) -- Push new text\r\n                if (operation.lines) {\r\n                    for (var j = 0, lenJ = operation.lines.length; j < lenJ; j++) {\r\n                        if (j !== 0) {\r\n                            result.push('\\n');\r\n                        }\r\n                        result.push(operation.lines[j]);\r\n                    }\r\n                }\r\n                lastEndLineNumber = operation.range.endLineNumber;\r\n                lastEndColumn = operation.range.endColumn;\r\n            }\r\n            return {\r\n                sortIndex: 0,\r\n                identifier: operations[0].identifier,\r\n                range: entireEditRange,\r\n                rangeLength: this.getValueLengthInRange(entireEditRange),\r\n                lines: result.join('').split('\\n'),\r\n                forceMoveMarkers: forceMoveMarkers,\r\n                isAutoWhitespaceEdit: false\r\n            };\r\n        };\r\n        EditableTextModel._sortOpsAscending = function (a, b) {\r\n            var r = range_1.Range.compareRangesUsingEnds(a.range, b.range);\r\n            if (r === 0) {\r\n                return a.sortIndex - b.sortIndex;\r\n            }\r\n            return r;\r\n        };\r\n        EditableTextModel._sortOpsDescending = function (a, b) {\r\n            var r = range_1.Range.compareRangesUsingEnds(a.range, b.range);\r\n            if (r === 0) {\r\n                return b.sortIndex - a.sortIndex;\r\n            }\r\n            return -r;\r\n        };\r\n        EditableTextModel.prototype.applyEdits = function (rawOperations) {\r\n            if (rawOperations.length === 0) {\r\n                return [];\r\n            }\r\n            var operations = [];\r\n            for (var i = 0; i < rawOperations.length; i++) {\r\n                var op = rawOperations[i];\r\n                var validatedRange = this.validateRange(op.range);\r\n                operations[i] = {\r\n                    sortIndex: i,\r\n                    identifier: op.identifier,\r\n                    range: validatedRange,\r\n                    rangeLength: this.getValueLengthInRange(validatedRange),\r\n                    lines: op.text ? op.text.split(/\\r\\n|\\r|\\n/) : null,\r\n                    forceMoveMarkers: op.forceMoveMarkers,\r\n                    isAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\r\n                };\r\n            }\r\n            // Sort operations ascending\r\n            operations.sort(EditableTextModel._sortOpsAscending);\r\n            for (var i = 0, count = operations.length - 1; i < count; i++) {\r\n                var rangeEnd = operations[i].range.getEndPosition();\r\n                var nextRangeStart = operations[i + 1].range.getStartPosition();\r\n                if (nextRangeStart.isBefore(rangeEnd)) {\r\n                    // overlapping ranges\r\n                    throw new Error('Overlapping ranges are not allowed!');\r\n                }\r\n            }\r\n            operations = this._reduceOperations(operations);\r\n            var editableRange = this.getEditableRange();\r\n            var editableRangeStart = editableRange.getStartPosition();\r\n            var editableRangeEnd = editableRange.getEndPosition();\r\n            for (var i = 0; i < operations.length; i++) {\r\n                var operationRange = operations[i].range;\r\n                if (!editableRangeStart.isBeforeOrEqual(operationRange.getStartPosition()) || !operationRange.getEndPosition().isBeforeOrEqual(editableRangeEnd)) {\r\n                    throw new Error('Editing outside of editable range not allowed!');\r\n                }\r\n            }\r\n            // Delta encode operations\r\n            var reverseRanges = EditableTextModel._getInverseEditRanges(operations);\r\n            var reverseOperations = [];\r\n            var newTrimAutoWhitespaceCandidates = [];\r\n            for (var i = 0; i < operations.length; i++) {\r\n                var op = operations[i];\r\n                var reverseRange = reverseRanges[i];\r\n                reverseOperations[i] = {\r\n                    identifier: op.identifier,\r\n                    range: reverseRange,\r\n                    text: this.getValueInRange(op.range),\r\n                    forceMoveMarkers: op.forceMoveMarkers\r\n                };\r\n                if (this._options.trimAutoWhitespace && op.isAutoWhitespaceEdit && op.range.isEmpty()) {\r\n                    // Record already the future line numbers that might be auto whitespace removal candidates on next edit\r\n                    for (var lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\r\n                        var currentLineContent = '';\r\n                        if (lineNumber === reverseRange.startLineNumber) {\r\n                            currentLineContent = this.getLineContent(op.range.startLineNumber);\r\n                            if (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                        newTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\r\n                    }\r\n                }\r\n            }\r\n            this._applyEdits(operations);\r\n            this._trimAutoWhitespaceLines = null;\r\n            if (this._options.trimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\r\n                // sort line numbers auto whitespace removal candidates for next edit descending\r\n                newTrimAutoWhitespaceCandidates.sort(function (a, b) { return b.lineNumber - a.lineNumber; });\r\n                this._trimAutoWhitespaceLines = [];\r\n                for (var i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\r\n                    var lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\r\n                    if (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\r\n                        // Do not have the same line number twice\r\n                        continue;\r\n                    }\r\n                    var prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\r\n                    var lineContent = this.getLineContent(lineNumber);\r\n                    if (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\r\n                        continue;\r\n                    }\r\n                    this._trimAutoWhitespaceLines.push(lineNumber);\r\n                }\r\n            }\r\n            return reverseOperations;\r\n        };\r\n        /**\r\n         * Assumes `operations` are validated and sorted ascending\r\n         */\r\n        EditableTextModel._getInverseEditRanges = function (operations) {\r\n            var result = [];\r\n            var prevOpEndLineNumber;\r\n            var prevOpEndColumn;\r\n            var prevOp = null;\r\n            for (var i = 0, len = operations.length; i < len; i++) {\r\n                var op = operations[i];\r\n                var startLineNumber = void 0;\r\n                var startColumn = void 0;\r\n                if (prevOp) {\r\n                    if (prevOp.range.endLineNumber === op.range.startLineNumber) {\r\n                        startLineNumber = prevOpEndLineNumber;\r\n                        startColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\r\n                    }\r\n                    else {\r\n                        startLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\r\n                        startColumn = op.range.startColumn;\r\n                    }\r\n                }\r\n                else {\r\n                    startLineNumber = op.range.startLineNumber;\r\n                    startColumn = op.range.startColumn;\r\n                }\r\n                var resultRange = void 0;\r\n                if (op.lines && op.lines.length > 0) {\r\n                    // the operation inserts something\r\n                    var lineCount = op.lines.length;\r\n                    var firstLine = op.lines[0];\r\n                    var lastLine = op.lines[lineCount - 1];\r\n                    if (lineCount === 1) {\r\n                        // single line insert\r\n                        resultRange = new range_1.Range(startLineNumber, startColumn, startLineNumber, startColumn + firstLine.length);\r\n                    }\r\n                    else {\r\n                        // multi line insert\r\n                        resultRange = new range_1.Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, lastLine.length + 1);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is nothing to insert\r\n                    resultRange = new range_1.Range(startLineNumber, startColumn, startLineNumber, startColumn);\r\n                }\r\n                prevOpEndLineNumber = resultRange.endLineNumber;\r\n                prevOpEndColumn = resultRange.endColumn;\r\n                result.push(resultRange);\r\n                prevOp = op;\r\n            }\r\n            return result;\r\n        };\r\n        EditableTextModel.prototype._applyEdits = function (operations) {\r\n            var _this = this;\r\n            // Sort operations descending\r\n            operations.sort(EditableTextModel._sortOpsDescending);\r\n            this._withDeferredEvents(function (deferredEventsBuilder) {\r\n                var contentChangedEvents = [];\r\n                var contentChanged2Events = [];\r\n                var lineEditsQueue = [];\r\n                var queueLineEdit = function (lineEdit) {\r\n                    if (lineEdit.startColumn === lineEdit.endColumn && lineEdit.text.length === 0) {\r\n                        // empty edit => ignore it\r\n                        return;\r\n                    }\r\n                    lineEditsQueue.push(lineEdit);\r\n                };\r\n                var flushLineEdits = function () {\r\n                    if (lineEditsQueue.length === 0) {\r\n                        return;\r\n                    }\r\n                    lineEditsQueue.reverse();\r\n                    // `lineEditsQueue` now contains edits from smaller (line number,column) to larger (line number,column)\r\n                    var currentLineNumber = lineEditsQueue[0].lineNumber;\r\n                    var currentLineNumberStart = 0;\r\n                    for (var i = 1, len = lineEditsQueue.length; i < len; i++) {\r\n                        var lineNumber = lineEditsQueue[i].lineNumber;\r\n                        if (lineNumber === currentLineNumber) {\r\n                            continue;\r\n                        }\r\n                        _this._invalidateLine(currentLineNumber - 1);\r\n                        _this._lines[currentLineNumber - 1].applyEdits(deferredEventsBuilder.changedMarkers, lineEditsQueue.slice(currentLineNumberStart, i));\r\n                        if (_this._lineStarts) {\r\n                            // update prefix sum\r\n                            _this._lineStarts.changeValue(currentLineNumber - 1, _this._lines[currentLineNumber - 1].text.length + _this._EOL.length);\r\n                        }\r\n                        contentChangedEvents.push(_this._createLineChangedEvent(currentLineNumber));\r\n                        currentLineNumber = lineNumber;\r\n                        currentLineNumberStart = i;\r\n                    }\r\n                    _this._invalidateLine(currentLineNumber - 1);\r\n                    _this._lines[currentLineNumber - 1].applyEdits(deferredEventsBuilder.changedMarkers, lineEditsQueue.slice(currentLineNumberStart, lineEditsQueue.length));\r\n                    if (_this._lineStarts) {\r\n                        // update prefix sum\r\n                        _this._lineStarts.changeValue(currentLineNumber - 1, _this._lines[currentLineNumber - 1].text.length + _this._EOL.length);\r\n                    }\r\n                    contentChangedEvents.push(_this._createLineChangedEvent(currentLineNumber));\r\n                    lineEditsQueue = [];\r\n                };\r\n                var minTouchedLineNumber = operations[operations.length - 1].range.startLineNumber;\r\n                var maxTouchedLineNumber = operations[0].range.endLineNumber + 1;\r\n                var totalLinesCountDelta = 0;\r\n                for (var i = 0, len = operations.length; i < len; i++) {\r\n                    var op = operations[i];\r\n                    // console.log();\r\n                    // console.log('-------------------');\r\n                    // console.log('OPERATION #' + (i));\r\n                    // console.log('op: ', op);\r\n                    // console.log('<<<\\n' + this._lines.map(l => l.text).join('\\n') + '\\n>>>');\r\n                    var startLineNumber = op.range.startLineNumber;\r\n                    var startColumn = op.range.startColumn;\r\n                    var endLineNumber = op.range.endLineNumber;\r\n                    var endColumn = op.range.endColumn;\r\n                    if (startLineNumber === endLineNumber && startColumn === endColumn && (!op.lines || op.lines.length === 0)) {\r\n                        // no-op\r\n                        continue;\r\n                    }\r\n                    var deletingLinesCnt = endLineNumber - startLineNumber;\r\n                    var insertingLinesCnt = (op.lines ? op.lines.length - 1 : 0);\r\n                    var editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\r\n                    totalLinesCountDelta += (insertingLinesCnt - deletingLinesCnt);\r\n                    // Iterating descending to overlap with previous op\r\n                    // in case there are common lines being edited in both\r\n                    for (var j = editingLinesCnt; j >= 0; j--) {\r\n                        var editLineNumber = startLineNumber + j;\r\n                        queueLineEdit({\r\n                            lineNumber: editLineNumber,\r\n                            startColumn: (editLineNumber === startLineNumber ? startColumn : 1),\r\n                            endColumn: (editLineNumber === endLineNumber ? endColumn : _this.getLineMaxColumn(editLineNumber)),\r\n                            text: (op.lines ? op.lines[j] : ''),\r\n                            forceMoveMarkers: op.forceMoveMarkers\r\n                        });\r\n                    }\r\n                    if (editingLinesCnt < deletingLinesCnt) {\r\n                        // Must delete some lines\r\n                        // Flush any pending line edits\r\n                        flushLineEdits();\r\n                        var spliceStartLineNumber = startLineNumber + editingLinesCnt;\r\n                        var spliceStartColumn = _this.getLineMaxColumn(spliceStartLineNumber);\r\n                        var endLineRemains = _this._lines[endLineNumber - 1].split(deferredEventsBuilder.changedMarkers, endColumn, false);\r\n                        _this._invalidateLine(spliceStartLineNumber - 1);\r\n                        var spliceCnt = endLineNumber - spliceStartLineNumber;\r\n                        // Collect all these markers\r\n                        var markersOnDeletedLines = [];\r\n                        for (var j = 0; j < spliceCnt; j++) {\r\n                            var deleteLineIndex = spliceStartLineNumber + j;\r\n                            markersOnDeletedLines = markersOnDeletedLines.concat(_this._lines[deleteLineIndex].deleteLine(deferredEventsBuilder.changedMarkers, spliceStartColumn, deleteLineIndex + 1));\r\n                        }\r\n                        _this._lines.splice(spliceStartLineNumber, spliceCnt);\r\n                        if (_this._lineStarts) {\r\n                            // update prefix sum\r\n                            _this._lineStarts.removeValues(spliceStartLineNumber, spliceCnt);\r\n                        }\r\n                        // Reconstruct first line\r\n                        _this._lines[spliceStartLineNumber - 1].append(deferredEventsBuilder.changedMarkers, endLineRemains);\r\n                        if (_this._lineStarts) {\r\n                            // update prefix sum\r\n                            _this._lineStarts.changeValue(spliceStartLineNumber - 1, _this._lines[spliceStartLineNumber - 1].text.length + _this._EOL.length);\r\n                        }\r\n                        _this._lines[spliceStartLineNumber - 1].addMarkers(markersOnDeletedLines);\r\n                        contentChangedEvents.push(_this._createLineChangedEvent(spliceStartLineNumber));\r\n                        contentChangedEvents.push(_this._createLinesDeletedEvent(spliceStartLineNumber + 1, spliceStartLineNumber + spliceCnt));\r\n                    }\r\n                    if (editingLinesCnt < insertingLinesCnt) {\r\n                        // Must insert some lines\r\n                        // Flush any pending line edits\r\n                        flushLineEdits();\r\n                        var spliceLineNumber = startLineNumber + editingLinesCnt;\r\n                        var spliceColumn = (spliceLineNumber === startLineNumber ? startColumn : 1);\r\n                        if (op.lines) {\r\n                            spliceColumn += op.lines[editingLinesCnt].length;\r\n                        }\r\n                        // Split last line\r\n                        var leftoverLine = _this._lines[spliceLineNumber - 1].split(deferredEventsBuilder.changedMarkers, spliceColumn, op.forceMoveMarkers);\r\n                        if (_this._lineStarts) {\r\n                            // update prefix sum\r\n                            _this._lineStarts.changeValue(spliceLineNumber - 1, _this._lines[spliceLineNumber - 1].text.length + _this._EOL.length);\r\n                        }\r\n                        contentChangedEvents.push(_this._createLineChangedEvent(spliceLineNumber));\r\n                        _this._invalidateLine(spliceLineNumber - 1);\r\n                        // Lines in the middle\r\n                        var newLinesContent = [];\r\n                        var newLinesLengths = [];\r\n                        for (var j = editingLinesCnt + 1; j <= insertingLinesCnt; j++) {\r\n                            var newLineNumber = startLineNumber + j;\r\n                            _this._lines.splice(newLineNumber - 1, 0, new modelLine_1.ModelLine(newLineNumber, op.lines[j]));\r\n                            newLinesContent.push(op.lines[j]);\r\n                            newLinesLengths.push(op.lines[j].length + _this._EOL.length);\r\n                        }\r\n                        newLinesContent[newLinesContent.length - 1] += leftoverLine.text;\r\n                        if (_this._lineStarts) {\r\n                            // update prefix sum\r\n                            _this._lineStarts.insertValues(startLineNumber + editingLinesCnt, newLinesLengths);\r\n                        }\r\n                        // Last line\r\n                        _this._lines[startLineNumber + insertingLinesCnt - 1].append(deferredEventsBuilder.changedMarkers, leftoverLine);\r\n                        if (_this._lineStarts) {\r\n                            // update prefix sum\r\n                            _this._lineStarts.changeValue(startLineNumber + insertingLinesCnt - 1, _this._lines[startLineNumber + insertingLinesCnt - 1].text.length + _this._EOL.length);\r\n                        }\r\n                        contentChangedEvents.push(_this._createLinesInsertedEvent(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLinesContent.join('\\n')));\r\n                    }\r\n                    contentChanged2Events.push({\r\n                        range: new range_1.Range(startLineNumber, startColumn, endLineNumber, endColumn),\r\n                        rangeLength: op.rangeLength,\r\n                        text: op.lines ? op.lines.join(_this.getEOL()) : '',\r\n                        eol: _this._EOL,\r\n                        versionId: -1,\r\n                        isUndoing: _this._isUndoing,\r\n                        isRedoing: _this._isRedoing\r\n                    });\r\n                }\r\n                flushLineEdits();\r\n                maxTouchedLineNumber = Math.max(1, Math.min(_this.getLineCount(), maxTouchedLineNumber + totalLinesCountDelta));\r\n                if (totalLinesCountDelta !== 0) {\r\n                    // must update line numbers all the way to the bottom\r\n                    maxTouchedLineNumber = _this.getLineCount();\r\n                }\r\n                for (var lineNumber = minTouchedLineNumber; lineNumber <= maxTouchedLineNumber; lineNumber++) {\r\n                    _this._lines[lineNumber - 1].updateLineNumber(deferredEventsBuilder.changedMarkers, lineNumber);\r\n                }\r\n                if (contentChangedEvents.length !== 0 || contentChanged2Events.length !== 0) {\r\n                    if (contentChangedEvents.length === 0) {\r\n                        // Fabricate a fake line changed event to get an event out\r\n                        // This most likely occurs when there edit operations are no-ops\r\n                        contentChangedEvents.push(_this._createLineChangedEvent(minTouchedLineNumber));\r\n                    }\r\n                    var versionBumps = Math.max(contentChangedEvents.length, contentChanged2Events.length);\r\n                    var finalVersionId = _this.getVersionId() + versionBumps;\r\n                    _this._setVersionId(finalVersionId);\r\n                    for (var i = contentChangedEvents.length - 1, versionId = finalVersionId; i >= 0; i--, versionId--) {\r\n                        contentChangedEvents[i].versionId = versionId;\r\n                    }\r\n                    for (var i = contentChanged2Events.length - 1, versionId = finalVersionId; i >= 0; i--, versionId--) {\r\n                        contentChanged2Events[i].versionId = versionId;\r\n                    }\r\n                    for (var i = 0, len = contentChangedEvents.length; i < len; i++) {\r\n                        _this.emit(editorCommon.EventType.ModelRawContentChanged, contentChangedEvents[i]);\r\n                    }\r\n                    for (var i = 0, len = contentChanged2Events.length; i < len; i++) {\r\n                        _this.emit(editorCommon.EventType.ModelContentChanged2, contentChanged2Events[i]);\r\n                    }\r\n                }\r\n                // this._assertLineNumbersOK();\r\n            });\r\n        };\r\n        EditableTextModel.prototype._assertLineNumbersOK = function () {\r\n            var foundMarkersCnt = 0;\r\n            for (var i = 0, len = this._lines.length; i < len; i++) {\r\n                var line = this._lines[i];\r\n                var lineNumber = i + 1;\r\n                if (line.lineNumber !== lineNumber) {\r\n                    throw new Error('Invalid lineNumber at line: ' + lineNumber + '; text is: ' + this.getValue());\r\n                }\r\n                var markers = line.getMarkers();\r\n                for (var j = 0, lenJ = markers.length; j < lenJ; j++) {\r\n                    foundMarkersCnt++;\r\n                    var markerId = markers[j].id;\r\n                    var marker = this._markerIdToMarker[markerId];\r\n                    if (marker.line !== line) {\r\n                        throw new Error('Misplaced marker with id ' + markerId);\r\n                    }\r\n                }\r\n            }\r\n            var totalMarkersCnt = Object.keys(this._markerIdToMarker).length;\r\n            if (totalMarkersCnt !== foundMarkersCnt) {\r\n                throw new Error('There are misplaced markers!');\r\n            }\r\n        };\r\n        EditableTextModel.prototype.undo = function () {\r\n            var _this = this;\r\n            return this._withDeferredEvents(function () {\r\n                _this._isUndoing = true;\r\n                var r = _this._commandManager.undo();\r\n                _this._isUndoing = false;\r\n                if (!r) {\r\n                    return null;\r\n                }\r\n                _this._overwriteAlternativeVersionId(r.recordedVersionId);\r\n                return r.selections;\r\n            });\r\n        };\r\n        EditableTextModel.prototype.redo = function () {\r\n            var _this = this;\r\n            return this._withDeferredEvents(function () {\r\n                _this._isRedoing = true;\r\n                var r = _this._commandManager.redo();\r\n                _this._isRedoing = false;\r\n                if (!r) {\r\n                    return null;\r\n                }\r\n                _this._overwriteAlternativeVersionId(r.recordedVersionId);\r\n                return r.selections;\r\n            });\r\n        };\r\n        EditableTextModel.prototype.setEditableRange = function (range) {\r\n            this._commandManager.clear();\r\n            if (this._hasEditableRange) {\r\n                this.removeTrackedRange(this._editableRangeId);\r\n                this._editableRangeId = null;\r\n                this._hasEditableRange = false;\r\n            }\r\n            if (range) {\r\n                this._hasEditableRange = true;\r\n                this._editableRangeId = this.addTrackedRange(range, editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\r\n            }\r\n        };\r\n        EditableTextModel.prototype.hasEditableRange = function () {\r\n            return this._hasEditableRange;\r\n        };\r\n        EditableTextModel.prototype.getEditableRange = function () {\r\n            if (this._hasEditableRange) {\r\n                return this.getTrackedRange(this._editableRangeId);\r\n            }\r\n            else {\r\n                return this.getFullModelRange();\r\n            }\r\n        };\r\n        EditableTextModel.prototype._createLineChangedEvent = function (lineNumber) {\r\n            return {\r\n                changeType: editorCommon.EventType.ModelRawContentChangedLineChanged,\r\n                lineNumber: lineNumber,\r\n                detail: this._lines[lineNumber - 1].text,\r\n                versionId: -1,\r\n                isUndoing: this._isUndoing,\r\n                isRedoing: this._isRedoing\r\n            };\r\n        };\r\n        EditableTextModel.prototype._createLinesDeletedEvent = function (fromLineNumber, toLineNumber) {\r\n            return {\r\n                changeType: editorCommon.EventType.ModelRawContentChangedLinesDeleted,\r\n                fromLineNumber: fromLineNumber,\r\n                toLineNumber: toLineNumber,\r\n                versionId: -1,\r\n                isUndoing: this._isUndoing,\r\n                isRedoing: this._isRedoing\r\n            };\r\n        };\r\n        EditableTextModel.prototype._createLinesInsertedEvent = function (fromLineNumber, toLineNumber, newLinesContent) {\r\n            return {\r\n                changeType: editorCommon.EventType.ModelRawContentChangedLinesInserted,\r\n                fromLineNumber: fromLineNumber,\r\n                toLineNumber: toLineNumber,\r\n                detail: newLinesContent,\r\n                versionId: -1,\r\n                isUndoing: this._isUndoing,\r\n                isRedoing: this._isRedoing\r\n            };\r\n        };\r\n        return EditableTextModel;\r\n    }(textModelWithDecorations_1.TextModelWithDecorations));\r\n    exports.EditableTextModel = EditableTextModel;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/model/model\", [\"require\", \"exports\", 'vs/base/common/uri', 'vs/editor/common/editorCommon', 'vs/editor/common/model/editableTextModel', 'vs/editor/common/model/textModel'], function (require, exports, uri_1, editorCommon_1, editableTextModel_1, textModel_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // The hierarchy is:\r\n    // Model -> EditableTextModel -> TextModelWithDecorations -> TextModelWithTrackedRanges -> TextModelWithMarkers -> TextModelWithTokens -> TextModel\r\n    var MODEL_ID = 0;\r\n    var aliveModels = {};\r\n    // var LAST_CNT = 0;\r\n    // setInterval(() => {\r\n    // \tvar cnt = Object.keys(aliveModels).length;\r\n    // \tif (cnt === LAST_CNT) {\r\n    // \t\treturn;\r\n    // \t}\r\n    // \tconsole.warn('ALIVE MODELS:');\r\n    // \tconsole.log(Object.keys(aliveModels).join('\\n'));\r\n    // \tLAST_CNT = cnt;\r\n    // }, 100);\r\n    var Model = (function (_super) {\r\n        __extends(Model, _super);\r\n        /**\r\n         * Instantiates a new model\r\n         * @param rawText\r\n         *   The raw text buffer. It may start with a UTF-16 BOM, which can be\r\n         *   optionally preserved when doing a getValue call. The lines may be\r\n         *   separated by different EOL combinations, such as \\n or \\r\\n. These\r\n         *   can also be preserved when doing a getValue call.\r\n         * @param mode\r\n         *   The language service name this model is bound to.\r\n         * @param associatedResource\r\n         *   The resource associated with this model. If the value is not provided an\r\n         *   unique in memory URL is constructed as the associated resource.\r\n         */\r\n        function Model(rawText, options, modeOrPromise, associatedResource) {\r\n            if (associatedResource === void 0) { associatedResource = null; }\r\n            _super.call(this, [\r\n                editorCommon_1.EventType.ModelDispose\r\n            ], textModel_1.TextModel.toRawText(rawText, options), modeOrPromise);\r\n            // Generate a new unique model id\r\n            MODEL_ID++;\r\n            this.id = '$model' + MODEL_ID;\r\n            if (typeof associatedResource === 'undefined' || associatedResource === null) {\r\n                this._associatedResource = uri_1.default.parse('inmemory://model/' + MODEL_ID);\r\n            }\r\n            else {\r\n                this._associatedResource = associatedResource;\r\n            }\r\n            if (aliveModels[String(this._associatedResource)]) {\r\n                throw new Error('Cannot instantiate a second Model with the same URI!');\r\n            }\r\n            this._attachedEditorCount = 0;\r\n            aliveModels[String(this._associatedResource)] = true;\r\n            // console.log('ALIVE MODELS: ' + Object.keys(aliveModels).join('\\n'));\r\n        }\r\n        Model.prototype.onDidChangeModeSupport = function (listener) {\r\n            return this.addListener2(editorCommon_1.EventType.ModelModeSupportChanged, listener);\r\n        };\r\n        Model.prototype.onDidChangeDecorations = function (listener) {\r\n            return this.addListener2(editorCommon_1.EventType.ModelDecorationsChanged, listener);\r\n        };\r\n        Model.prototype.onDidChangeOptions = function (listener) {\r\n            return this.addListener2(editorCommon_1.EventType.ModelOptionsChanged, listener);\r\n        };\r\n        Model.prototype.onWillDispose = function (listener) {\r\n            return this.addListener2(editorCommon_1.EventType.ModelDispose, listener);\r\n        };\r\n        Model.prototype.onDidChangeMode = function (listener) {\r\n            return this.addListener2(editorCommon_1.EventType.ModelModeChanged, listener);\r\n        };\r\n        Model.prototype.addBulkListener = function (listener) {\r\n            return _super.prototype.addBulkListener.call(this, listener);\r\n        };\r\n        Model.prototype.getModeId = function () {\r\n            return this.getMode().getId();\r\n        };\r\n        Model.prototype.destroy = function () {\r\n            this.dispose();\r\n        };\r\n        Model.prototype.dispose = function () {\r\n            this._isDisposing = true;\r\n            delete aliveModels[String(this._associatedResource)];\r\n            this.emit(editorCommon_1.EventType.ModelDispose);\r\n            _super.prototype.dispose.call(this);\r\n            this._isDisposing = false;\r\n            // console.log('ALIVE MODELS: ' + Object.keys(aliveModels).join('\\n'));\r\n        };\r\n        Model.prototype.onBeforeAttached = function () {\r\n            this._attachedEditorCount++;\r\n            // Warm up tokens for the editor\r\n            this._warmUpTokens();\r\n        };\r\n        Model.prototype.onBeforeDetached = function () {\r\n            this._attachedEditorCount--;\r\n            // Intentional empty (for now)\r\n        };\r\n        Model.prototype.isAttachedToEditor = function () {\r\n            return this._attachedEditorCount > 0;\r\n        };\r\n        Object.defineProperty(Model.prototype, \"uri\", {\r\n            get: function () {\r\n                return this._associatedResource;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Model.DEFAULT_CREATION_OPTIONS = textModel_1.TextModel.DEFAULT_CREATION_OPTIONS;\r\n        return Model;\r\n    }(editableTextModel_1.EditableTextModel));\r\n    exports.Model = Model;\r\n});\r\n\ndefine(\"vs/nls!vs/editor/common/modes/modesRegistry\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/editor/common/modes/modesRegistry\", data); });\ndefine(\"vs/nls!vs/editor/common/modes/supports/suggestSupport\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/editor/common/modes/supports/suggestSupport\", data); });\ndefine(\"vs/nls!vs/editor/common/services/modeServiceImpl\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/editor/common/services/modeServiceImpl\", data); });\ndefine(\"vs/nls!vs/editor/common/services/modelServiceImpl\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/editor/common/services/modelServiceImpl\", data); });\ndefine(\"vs/nls!vs/platform/configuration/common/configurationRegistry\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/platform/configuration/common/configurationRegistry\", data); });\ndefine(\"vs/nls!vs/platform/extensions/common/abstractExtensionService\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/platform/extensions/common/abstractExtensionService\", data); });\ndefine(\"vs/nls!vs/platform/extensions/common/extensionsRegistry\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/platform/extensions/common/extensionsRegistry\", data); });\ndefine(\"vs/nls!vs/platform/jsonschemas/common/jsonContributionRegistry\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/platform/jsonschemas/common/jsonContributionRegistry\", data); });\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/platform/instantiation/common/descriptors\", [\"require\", \"exports\", 'vs/base/common/errors'], function (require, exports, errors_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var AbstractDescriptor = (function () {\r\n        function AbstractDescriptor(_staticArguments) {\r\n            this._staticArguments = _staticArguments;\r\n            // empty\r\n        }\r\n        AbstractDescriptor.prototype.appendStaticArguments = function (more) {\r\n            this._staticArguments.push.apply(this._staticArguments, more);\r\n        };\r\n        AbstractDescriptor.prototype.staticArguments = function (nth) {\r\n            if (isNaN(nth)) {\r\n                return this._staticArguments.slice(0);\r\n            }\r\n            else {\r\n                return this._staticArguments[nth];\r\n            }\r\n        };\r\n        AbstractDescriptor.prototype._validate = function (type) {\r\n            if (!type) {\r\n                throw errors_1.illegalArgument('can not be falsy');\r\n            }\r\n        };\r\n        return AbstractDescriptor;\r\n    }());\r\n    exports.AbstractDescriptor = AbstractDescriptor;\r\n    var SyncDescriptor = (function (_super) {\r\n        __extends(SyncDescriptor, _super);\r\n        function SyncDescriptor(_ctor) {\r\n            var staticArguments = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                staticArguments[_i - 1] = arguments[_i];\r\n            }\r\n            _super.call(this, staticArguments);\r\n            this._ctor = _ctor;\r\n        }\r\n        Object.defineProperty(SyncDescriptor.prototype, \"ctor\", {\r\n            get: function () {\r\n                return this._ctor;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        SyncDescriptor.prototype.bind = function () {\r\n            var moreStaticArguments = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                moreStaticArguments[_i - 0] = arguments[_i];\r\n            }\r\n            var allArgs = [];\r\n            allArgs = allArgs.concat(this.staticArguments());\r\n            allArgs = allArgs.concat(moreStaticArguments);\r\n            return new (SyncDescriptor.bind.apply(SyncDescriptor, [void 0].concat([this._ctor], allArgs)))();\r\n        };\r\n        return SyncDescriptor;\r\n    }(AbstractDescriptor));\r\n    exports.SyncDescriptor = SyncDescriptor;\r\n    exports.createSyncDescriptor = function (ctor) {\r\n        var staticArguments = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            staticArguments[_i - 1] = arguments[_i];\r\n        }\r\n        return new (SyncDescriptor.bind.apply(SyncDescriptor, [void 0].concat([ctor], staticArguments)))();\r\n    };\r\n    var AsyncDescriptor = (function (_super) {\r\n        __extends(AsyncDescriptor, _super);\r\n        function AsyncDescriptor(_moduleName, _ctorName) {\r\n            var staticArguments = [];\r\n            for (var _i = 2; _i < arguments.length; _i++) {\r\n                staticArguments[_i - 2] = arguments[_i];\r\n            }\r\n            _super.call(this, staticArguments);\r\n            this._moduleName = _moduleName;\r\n            this._ctorName = _ctorName;\r\n            if (typeof _moduleName !== 'string') {\r\n                throw new Error('Invalid AsyncDescriptor arguments, expected `moduleName` to be a string!');\r\n            }\r\n        }\r\n        AsyncDescriptor.create = function (moduleName, ctorName) {\r\n            return new AsyncDescriptor(moduleName, ctorName);\r\n        };\r\n        Object.defineProperty(AsyncDescriptor.prototype, \"moduleName\", {\r\n            get: function () {\r\n                return this._moduleName;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(AsyncDescriptor.prototype, \"ctorName\", {\r\n            get: function () {\r\n                return this._ctorName;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        AsyncDescriptor.prototype.bind = function () {\r\n            var moreStaticArguments = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                moreStaticArguments[_i - 0] = arguments[_i];\r\n            }\r\n            var allArgs = [];\r\n            allArgs = allArgs.concat(this.staticArguments());\r\n            allArgs = allArgs.concat(moreStaticArguments);\r\n            return new (AsyncDescriptor.bind.apply(AsyncDescriptor, [void 0].concat([this.moduleName, this.ctorName], allArgs)))();\r\n        };\r\n        return AsyncDescriptor;\r\n    }(AbstractDescriptor));\r\n    exports.AsyncDescriptor = AsyncDescriptor;\r\n    var _createAsyncDescriptor = function (moduleName, ctorName) {\r\n        var staticArguments = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            staticArguments[_i - 2] = arguments[_i];\r\n        }\r\n        return new (AsyncDescriptor.bind.apply(AsyncDescriptor, [void 0].concat([moduleName, ctorName], staticArguments)))();\r\n    };\r\n    exports.createAsyncDescriptor0 = _createAsyncDescriptor;\r\n    exports.createAsyncDescriptor1 = _createAsyncDescriptor;\r\n    exports.createAsyncDescriptor2 = _createAsyncDescriptor;\r\n    exports.createAsyncDescriptor3 = _createAsyncDescriptor;\r\n    exports.createAsyncDescriptor4 = _createAsyncDescriptor;\r\n    exports.createAsyncDescriptor5 = _createAsyncDescriptor;\r\n    exports.createAsyncDescriptor6 = _createAsyncDescriptor;\r\n    exports.createAsyncDescriptor7 = _createAsyncDescriptor;\r\n});\r\n\ndefine(\"vs/platform/instantiation/common/instantiation\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // ------ internal util\r\n    var _util;\r\n    (function (_util) {\r\n        _util.DI_TARGET = '$di$target';\r\n        _util.DI_DEPENDENCIES = '$di$dependencies';\r\n        function getServiceDependencies(ctor) {\r\n            return ctor[_util.DI_DEPENDENCIES] || [];\r\n        }\r\n        _util.getServiceDependencies = getServiceDependencies;\r\n    })(_util = exports._util || (exports._util = {}));\r\n    exports.IInstantiationService = createDecorator('instantiationService');\r\n    function storeServiceDependency(id, target, index, optional) {\r\n        if (target[_util.DI_TARGET] === target) {\r\n            target[_util.DI_DEPENDENCIES].push({ id: id, index: index, optional: optional });\r\n        }\r\n        else {\r\n            target[_util.DI_DEPENDENCIES] = [{ id: id, index: index, optional: optional }];\r\n            target[_util.DI_TARGET] = target;\r\n        }\r\n    }\r\n    /**\r\n     * A *only* valid way to create a {{ServiceIdentifier}}.\r\n     */\r\n    function createDecorator(serviceId) {\r\n        var id = function (target, key, index) {\r\n            if (arguments.length !== 3) {\r\n                throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\r\n            }\r\n            storeServiceDependency(id, target, index, false);\r\n        };\r\n        id.toString = function () { return serviceId; };\r\n        return id;\r\n    }\r\n    exports.createDecorator = createDecorator;\r\n    /**\r\n     * Mark a service dependency as optional.\r\n     */\r\n    function optional(serviceIdentifier) {\r\n        return function (target, key, index) {\r\n            if (arguments.length !== 3) {\r\n                throw new Error('@optional-decorator can only be used to decorate a parameter');\r\n            }\r\n            storeServiceDependency(serviceIdentifier, target, index, true);\r\n        };\r\n    }\r\n    exports.optional = optional;\r\n});\r\n\ndefine(\"vs/editor/common/services/editorWorkerService\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.ID_EDITOR_WORKER_SERVICE = 'editorWorkerService';\r\n    exports.IEditorWorkerService = instantiation_1.createDecorator(exports.ID_EDITOR_WORKER_SERVICE);\r\n});\r\n\ndefine(\"vs/editor/common/services/modeService\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IModeService = instantiation_1.createDecorator('modeService');\r\n});\r\n\ndefine(\"vs/editor/common/services/modelService\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IModelService = instantiation_1.createDecorator('modelService');\r\n});\r\n\ndefine(\"vs/editor/common/services/resourceService\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // Resource Service\r\n    exports.ResourceEvents = {\r\n        ADDED: 'resource.added',\r\n        REMOVED: 'resource.removed',\r\n        CHANGED: 'resource.changed'\r\n    };\r\n    exports.IResourceService = instantiation_1.createDecorator('resourceService');\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/services/resourceServiceImpl\", [\"require\", \"exports\", 'vs/base/common/eventEmitter', 'vs/base/common/lifecycle', 'vs/editor/common/services/resourceService'], function (require, exports, eventEmitter_1, lifecycle_1, resourceService_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var ResourceService = (function (_super) {\r\n        __extends(ResourceService, _super);\r\n        function ResourceService() {\r\n            _super.call(this);\r\n            this.serviceId = resourceService_1.IResourceService;\r\n            this.data = {};\r\n            this.unbinds = {};\r\n        }\r\n        ResourceService.prototype.addListener2_ = function (eventType, listener) {\r\n            return _super.prototype.addListener2.call(this, eventType, listener);\r\n        };\r\n        ResourceService.prototype._anonymousModelId = function (input) {\r\n            var r = '';\r\n            for (var i = 0; i < input.length; i++) {\r\n                var ch = input[i];\r\n                if (ch >= '0' && ch <= '9') {\r\n                    r += '0';\r\n                    continue;\r\n                }\r\n                if (ch >= 'a' && ch <= 'z') {\r\n                    r += 'a';\r\n                    continue;\r\n                }\r\n                if (ch >= 'A' && ch <= 'Z') {\r\n                    r += 'A';\r\n                    continue;\r\n                }\r\n                r += ch;\r\n            }\r\n            return r;\r\n        };\r\n        ResourceService.prototype.insert = function (url, element) {\r\n            var _this = this;\r\n            // console.log('INSERT: ' + url.toString());\r\n            if (this.contains(url)) {\r\n                // There already exists a model with this id => this is a programmer error\r\n                throw new Error('ResourceService: Cannot add model ' + this._anonymousModelId(url.toString()) + ' because it already exists!');\r\n            }\r\n            // add resource\r\n            var key = url.toString();\r\n            this.data[key] = element;\r\n            this.unbinds[key] = [];\r\n            this.unbinds[key].push(element.addBulkListener2(function (value) {\r\n                _this.emit(resourceService_1.ResourceEvents.CHANGED, { url: url, originalEvents: value });\r\n            }));\r\n            // event\r\n            this.emit(resourceService_1.ResourceEvents.ADDED, { url: url, addedElement: element });\r\n        };\r\n        ResourceService.prototype.get = function (url) {\r\n            if (!this.data[url.toString()]) {\r\n                return null;\r\n            }\r\n            return this.data[url.toString()];\r\n        };\r\n        ResourceService.prototype.all = function () {\r\n            var _this = this;\r\n            return Object.keys(this.data).map(function (key) {\r\n                return _this.data[key];\r\n            });\r\n        };\r\n        ResourceService.prototype.contains = function (url) {\r\n            return !!this.data[url.toString()];\r\n        };\r\n        ResourceService.prototype.remove = function (url) {\r\n            // console.log('REMOVE: ' + url.toString());\r\n            if (!this.contains(url)) {\r\n                return;\r\n            }\r\n            var key = url.toString(), element = this.data[key];\r\n            // stop listen\r\n            this.unbinds[key] = lifecycle_1.dispose(this.unbinds[key]);\r\n            // removal\r\n            delete this.unbinds[key];\r\n            delete this.data[key];\r\n            // event\r\n            this.emit(resourceService_1.ResourceEvents.REMOVED, { url: url, removedElement: element });\r\n        };\r\n        return ResourceService;\r\n    }(eventEmitter_1.EventEmitter));\r\n    exports.ResourceService = ResourceService;\r\n});\r\n\ndefine(\"vs/editor/common/worker/validationHelper\", [\"require\", \"exports\", 'vs/base/common/async', 'vs/base/common/lifecycle', 'vs/editor/common/services/resourceService'], function (require, exports, async_1, lifecycle_1, resourceService_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var ValidationModel = (function () {\r\n        function ValidationModel(model, changeCallback) {\r\n            var _this = this;\r\n            this._toDispose = [];\r\n            this._changeCallback = changeCallback;\r\n            this._model = model;\r\n            this._isDirty = false;\r\n            this._toDispose.push(model.addBulkListener2(function (events) { return _this._onModelChanged(events); }));\r\n        }\r\n        ValidationModel.prototype.dispose = function () {\r\n            this._toDispose = lifecycle_1.dispose(this._toDispose);\r\n            this._changeCallback = null;\r\n        };\r\n        ValidationModel.prototype.markAsClean = function () {\r\n            this._isDirty = false;\r\n        };\r\n        ValidationModel.prototype.markAsDirty = function () {\r\n            this._isDirty = true;\r\n        };\r\n        ValidationModel.prototype.isDirty = function () {\r\n            return this._isDirty;\r\n        };\r\n        ValidationModel.prototype.getMirrorModel = function () {\r\n            return this._model;\r\n        };\r\n        ValidationModel.prototype._onModelChanged = function (events) {\r\n            var containsChanged = false;\r\n            for (var i = 0; !containsChanged && i < events.length; i++) {\r\n                if (events[i].getType() === 'changed') {\r\n                    containsChanged = true;\r\n                }\r\n            }\r\n            if (containsChanged) {\r\n                this._changeCallback(this);\r\n            }\r\n        };\r\n        return ValidationModel;\r\n    }());\r\n    var ValidationHelper = (function () {\r\n        function ValidationHelper(resourceService, modeId, callback) {\r\n            var _this = this;\r\n            this._toDispose = [];\r\n            this._resourceService = resourceService;\r\n            this._callback = callback;\r\n            this._filter = function (resource) { return (resource.getMode().getId() === modeId); };\r\n            this._validationDelay = 500;\r\n            this._models = {};\r\n            this._isDueToConfigurationChange = false;\r\n            this._toDispose.push(this._resourceService.addListener2_(resourceService_1.ResourceEvents.ADDED, function (e) {\r\n                _this._onResourceAdded(e);\r\n            }));\r\n            this._toDispose.push(this._resourceService.addListener2_(resourceService_1.ResourceEvents.REMOVED, function (e) {\r\n                _this._onResourceRemoved(e);\r\n            }));\r\n            this._validate = new async_1.RunOnceScheduler(function () { return _this._invokeCallback(); }, this._validationDelay);\r\n            this._toDispose.push(this._validate);\r\n            this._resourceService.all().forEach(function (element) { return _this._addElement(element); });\r\n        }\r\n        ValidationHelper.prototype.dispose = function () {\r\n            var _this = this;\r\n            this._toDispose = lifecycle_1.dispose(this._toDispose);\r\n            lifecycle_1.dispose(Object.keys(this._models).map(function (modelUrl) { return _this._models[modelUrl]; }));\r\n            this._models = null;\r\n        };\r\n        ValidationHelper.prototype.trigger = function () {\r\n            this._validate.schedule();\r\n        };\r\n        ValidationHelper.prototype.triggerDueToConfigurationChange = function () {\r\n            this._isDueToConfigurationChange = true;\r\n            this._validate.schedule();\r\n        };\r\n        ValidationHelper.prototype._addElement = function (element) {\r\n            var _this = this;\r\n            if (!this._filter(element)) {\r\n                return;\r\n            }\r\n            var model = element;\r\n            var validationModel = new ValidationModel(model, function (model) { return _this._onChanged(model); });\r\n            this._models[model.uri.toString()] = validationModel;\r\n            this._onChanged(validationModel);\r\n        };\r\n        ValidationHelper.prototype._onResourceAdded = function (e) {\r\n            var stringUrl = e.url.toString();\r\n            if (this._models.hasOwnProperty(stringUrl)) {\r\n                this._models[stringUrl].dispose();\r\n            }\r\n            this._addElement(e.addedElement);\r\n        };\r\n        ValidationHelper.prototype._onResourceRemoved = function (e) {\r\n            var stringUrl = e.url.toString();\r\n            if (this._models.hasOwnProperty(stringUrl)) {\r\n                this._models[stringUrl].dispose();\r\n                delete this._models[stringUrl];\r\n            }\r\n        };\r\n        ValidationHelper.prototype._onChanged = function (model) {\r\n            model.markAsDirty();\r\n            this._validate.schedule();\r\n        };\r\n        ValidationHelper.prototype._invokeCallback = function () {\r\n            var _this = this;\r\n            if (!this._isEnabled) {\r\n                return;\r\n            }\r\n            var dirtyModels = [];\r\n            var cleanModels = [];\r\n            Object.keys(this._models)\r\n                .map(function (modelUrl) { return _this._models[modelUrl]; })\r\n                .forEach(function (model) {\r\n                if (model.isDirty()) {\r\n                    dirtyModels.push(model.getMirrorModel().uri);\r\n                    model.markAsClean();\r\n                }\r\n                else {\r\n                    cleanModels.push(model.getMirrorModel().uri);\r\n                }\r\n            });\r\n            var isDueToConfigurationChange = this._isDueToConfigurationChange;\r\n            this._isDueToConfigurationChange = false;\r\n            var toValidate = dirtyModels;\r\n            if (isDueToConfigurationChange) {\r\n                toValidate = toValidate.concat(cleanModels);\r\n            }\r\n            this._callback(toValidate);\r\n        };\r\n        ValidationHelper.prototype.enable = function () {\r\n            this._isEnabled = true;\r\n            this.trigger();\r\n        };\r\n        return ValidationHelper;\r\n    }());\r\n    exports.ValidationHelper = ValidationHelper;\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/platform/configuration/common/configuration\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    \"use strict\";\r\n    exports.IConfigurationService = instantiation_1.createDecorator('configurationService');\r\n    function getConfigurationValue(config, settingPath, defaultValue) {\r\n        function accessSetting(config, path) {\r\n            var current = config;\r\n            for (var i = 0; i < path.length; i++) {\r\n                current = current[path[i]];\r\n                if (!current) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            return current;\r\n        }\r\n        var path = settingPath.split('.');\r\n        var result = accessSetting(config, path);\r\n        return typeof result === 'undefined'\r\n            ? defaultValue\r\n            : result;\r\n    }\r\n    exports.getConfigurationValue = getConfigurationValue;\r\n});\r\n\ndefine(\"vs/platform/event/common/event\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IEventService = instantiation_1.createDecorator('eventService');\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/platform/event/common/eventService\", [\"require\", \"exports\", 'vs/base/common/eventEmitter', './event'], function (require, exports, eventEmitter_1, event_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // --- implementation ------------------------------------------\r\n    var EventService = (function (_super) {\r\n        __extends(EventService, _super);\r\n        function EventService() {\r\n            _super.call(this);\r\n            this.serviceId = event_1.IEventService;\r\n        }\r\n        return EventService;\r\n    }(eventEmitter_1.EventEmitter));\r\n    exports.EventService = EventService;\r\n});\r\n\ndefine(\"vs/platform/extensions/common/extensions\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IExtensionService = instantiation_1.createDecorator('extensionService');\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/platform/files/common/files\", [\"require\", \"exports\", 'vs/base/common/paths', 'vs/base/common/events', 'vs/platform/instantiation/common/instantiation'], function (require, exports, paths, events, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IFileService = instantiation_1.createDecorator('fileService');\r\n    /**\r\n     * Possible changes that can occur to a file.\r\n     */\r\n    (function (FileChangeType) {\r\n        FileChangeType[FileChangeType[\"UPDATED\"] = 0] = \"UPDATED\";\r\n        FileChangeType[FileChangeType[\"ADDED\"] = 1] = \"ADDED\";\r\n        FileChangeType[FileChangeType[\"DELETED\"] = 2] = \"DELETED\";\r\n    })(exports.FileChangeType || (exports.FileChangeType = {}));\r\n    var FileChangeType = exports.FileChangeType;\r\n    /**\r\n     * Possible events to subscribe to\r\n     */\r\n    exports.EventType = {\r\n        /**\r\n        * Send on file changes.\r\n        */\r\n        FILE_CHANGES: 'files:fileChanges'\r\n    };\r\n    var FileChangesEvent = (function (_super) {\r\n        __extends(FileChangesEvent, _super);\r\n        function FileChangesEvent(changes) {\r\n            _super.call(this);\r\n            this._changes = changes;\r\n        }\r\n        Object.defineProperty(FileChangesEvent.prototype, \"changes\", {\r\n            get: function () {\r\n                return this._changes;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Returns true if this change event contains the provided file with the given change type. In case of\r\n         * type DELETED, this method will also return true if a folder got deleted that is the parent of the\r\n         * provided file path.\r\n         */\r\n        FileChangesEvent.prototype.contains = function (resource, type) {\r\n            if (!resource) {\r\n                return false;\r\n            }\r\n            return this.containsAny([resource], type);\r\n        };\r\n        /**\r\n         * Returns true if this change event contains any of the provided files with the given change type. In case of\r\n         * type DELETED, this method will also return true if a folder got deleted that is the parent of any of the\r\n         * provided file paths.\r\n         */\r\n        FileChangesEvent.prototype.containsAny = function (resources, type) {\r\n            if (!resources || !resources.length) {\r\n                return false;\r\n            }\r\n            return this._changes.some(function (change) {\r\n                if (change.type !== type) {\r\n                    return false;\r\n                }\r\n                // For deleted also return true when deleted folder is parent of target path\r\n                if (type === FileChangeType.DELETED) {\r\n                    return resources.some(function (a) {\r\n                        if (!a) {\r\n                            return false;\r\n                        }\r\n                        return paths.isEqualOrParent(a.fsPath, change.resource.fsPath);\r\n                    });\r\n                }\r\n                return resources.some(function (a) {\r\n                    if (!a) {\r\n                        return false;\r\n                    }\r\n                    return a.fsPath === change.resource.fsPath;\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Returns the changes that describe added files.\r\n         */\r\n        FileChangesEvent.prototype.getAdded = function () {\r\n            return this.getOfType(FileChangeType.ADDED);\r\n        };\r\n        /**\r\n         * Returns if this event contains added files.\r\n         */\r\n        FileChangesEvent.prototype.gotAdded = function () {\r\n            return this.hasType(FileChangeType.ADDED);\r\n        };\r\n        /**\r\n         * Returns the changes that describe deleted files.\r\n         */\r\n        FileChangesEvent.prototype.getDeleted = function () {\r\n            return this.getOfType(FileChangeType.DELETED);\r\n        };\r\n        /**\r\n         * Returns if this event contains deleted files.\r\n         */\r\n        FileChangesEvent.prototype.gotDeleted = function () {\r\n            return this.hasType(FileChangeType.DELETED);\r\n        };\r\n        /**\r\n         * Returns the changes that describe updated files.\r\n         */\r\n        FileChangesEvent.prototype.getUpdated = function () {\r\n            return this.getOfType(FileChangeType.UPDATED);\r\n        };\r\n        /**\r\n         * Returns if this event contains updated files.\r\n         */\r\n        FileChangesEvent.prototype.gotUpdated = function () {\r\n            return this.hasType(FileChangeType.UPDATED);\r\n        };\r\n        FileChangesEvent.prototype.getOfType = function (type) {\r\n            return this._changes.filter(function (change) { return change.type === type; });\r\n        };\r\n        FileChangesEvent.prototype.hasType = function (type) {\r\n            return this._changes.some(function (change) {\r\n                return change.type === type;\r\n            });\r\n        };\r\n        return FileChangesEvent;\r\n    }(events.Event));\r\n    exports.FileChangesEvent = FileChangesEvent;\r\n    (function (FileOperationResult) {\r\n        FileOperationResult[FileOperationResult[\"FILE_IS_BINARY\"] = 0] = \"FILE_IS_BINARY\";\r\n        FileOperationResult[FileOperationResult[\"FILE_IS_DIRECTORY\"] = 1] = \"FILE_IS_DIRECTORY\";\r\n        FileOperationResult[FileOperationResult[\"FILE_NOT_FOUND\"] = 2] = \"FILE_NOT_FOUND\";\r\n        FileOperationResult[FileOperationResult[\"FILE_NOT_MODIFIED_SINCE\"] = 3] = \"FILE_NOT_MODIFIED_SINCE\";\r\n        FileOperationResult[FileOperationResult[\"FILE_MODIFIED_SINCE\"] = 4] = \"FILE_MODIFIED_SINCE\";\r\n        FileOperationResult[FileOperationResult[\"FILE_MOVE_CONFLICT\"] = 5] = \"FILE_MOVE_CONFLICT\";\r\n        FileOperationResult[FileOperationResult[\"FILE_READ_ONLY\"] = 6] = \"FILE_READ_ONLY\";\r\n        FileOperationResult[FileOperationResult[\"FILE_TOO_LARGE\"] = 7] = \"FILE_TOO_LARGE\";\r\n    })(exports.FileOperationResult || (exports.FileOperationResult = {}));\r\n    var FileOperationResult = exports.FileOperationResult;\r\n    exports.MAX_FILE_SIZE = 50 * 1024 * 1024;\r\n    exports.AutoSaveConfiguration = {\r\n        OFF: 'off',\r\n        AFTER_DELAY: 'afterDelay',\r\n        ON_FOCUS_CHANGE: 'onFocusChange'\r\n    };\r\n    exports.SUPPORTED_ENCODINGS = {\r\n        utf8: {\r\n            labelLong: 'UTF-8',\r\n            labelShort: 'UTF-8',\r\n            order: 1,\r\n            alias: 'utf8bom'\r\n        },\r\n        utf8bom: {\r\n            labelLong: 'UTF-8 with BOM',\r\n            labelShort: 'UTF-8 with BOM',\r\n            encodeOnly: true,\r\n            order: 2,\r\n            alias: 'utf8'\r\n        },\r\n        utf16le: {\r\n            labelLong: 'UTF-16 LE',\r\n            labelShort: 'UTF-16 LE',\r\n            order: 3\r\n        },\r\n        utf16be: {\r\n            labelLong: 'UTF-16 BE',\r\n            labelShort: 'UTF-16 BE',\r\n            order: 4\r\n        },\r\n        windows1252: {\r\n            labelLong: 'Western (Windows 1252)',\r\n            labelShort: 'Windows 1252',\r\n            order: 5\r\n        },\r\n        iso88591: {\r\n            labelLong: 'Western (ISO 8859-1)',\r\n            labelShort: 'ISO 8859-1',\r\n            order: 6\r\n        },\r\n        iso88593: {\r\n            labelLong: 'Western (ISO 8859-3)',\r\n            labelShort: 'ISO 8859-3',\r\n            order: 7\r\n        },\r\n        iso885915: {\r\n            labelLong: 'Western (ISO 8859-15)',\r\n            labelShort: 'ISO 8859-15',\r\n            order: 8\r\n        },\r\n        macroman: {\r\n            labelLong: 'Western (Mac Roman)',\r\n            labelShort: 'Mac Roman',\r\n            order: 9\r\n        },\r\n        cp437: {\r\n            labelLong: 'DOS (CP 437)',\r\n            labelShort: 'CP437',\r\n            order: 10\r\n        },\r\n        windows1256: {\r\n            labelLong: 'Arabic (Windows 1256)',\r\n            labelShort: 'Windows 1256',\r\n            order: 11\r\n        },\r\n        iso88596: {\r\n            labelLong: 'Arabic (ISO 8859-6)',\r\n            labelShort: 'ISO 8859-6',\r\n            order: 12\r\n        },\r\n        windows1257: {\r\n            labelLong: 'Baltic (Windows 1257)',\r\n            labelShort: 'Windows 1257',\r\n            order: 13\r\n        },\r\n        iso88594: {\r\n            labelLong: 'Baltic (ISO 8859-4)',\r\n            labelShort: 'ISO 8859-4',\r\n            order: 14\r\n        },\r\n        iso885914: {\r\n            labelLong: 'Celtic (ISO 8859-14)',\r\n            labelShort: 'ISO 8859-14',\r\n            order: 15\r\n        },\r\n        windows1250: {\r\n            labelLong: 'Central European (Windows 1250)',\r\n            labelShort: 'Windows 1250',\r\n            order: 16\r\n        },\r\n        iso88592: {\r\n            labelLong: 'Central European (ISO 8859-2)',\r\n            labelShort: 'ISO 8859-2',\r\n            order: 17\r\n        },\r\n        windows1251: {\r\n            labelLong: 'Cyrillic (Windows 1251)',\r\n            labelShort: 'Windows 1251',\r\n            order: 18\r\n        },\r\n        cp866: {\r\n            labelLong: 'Cyrillic (CP 866)',\r\n            labelShort: 'CP 866',\r\n            order: 19\r\n        },\r\n        iso88595: {\r\n            labelLong: 'Cyrillic (ISO 8859-5)',\r\n            labelShort: 'ISO 8859-5',\r\n            order: 20\r\n        },\r\n        koi8r: {\r\n            labelLong: 'Cyrillic (KOI8-R)',\r\n            labelShort: 'KOI8-R',\r\n            order: 21\r\n        },\r\n        koi8u: {\r\n            labelLong: 'Cyrillic (KOI8-U)',\r\n            labelShort: 'KOI8-U',\r\n            order: 22\r\n        },\r\n        iso885913: {\r\n            labelLong: 'Estonian (ISO 8859-13)',\r\n            labelShort: 'ISO 8859-13',\r\n            order: 23\r\n        },\r\n        windows1253: {\r\n            labelLong: 'Greek (Windows 1253)',\r\n            labelShort: 'Windows 1253',\r\n            order: 24\r\n        },\r\n        iso88597: {\r\n            labelLong: 'Greek (ISO 8859-7)',\r\n            labelShort: 'ISO 8859-7',\r\n            order: 25\r\n        },\r\n        windows1255: {\r\n            labelLong: 'Hebrew (Windows 1255)',\r\n            labelShort: 'Windows 1255',\r\n            order: 26\r\n        },\r\n        iso88598: {\r\n            labelLong: 'Hebrew (ISO 8859-8)',\r\n            labelShort: 'ISO 8859-8',\r\n            order: 27\r\n        },\r\n        iso885910: {\r\n            labelLong: 'Nordic (ISO 8859-10)',\r\n            labelShort: 'ISO 8859-10',\r\n            order: 28\r\n        },\r\n        iso885916: {\r\n            labelLong: 'Romanian (ISO 8859-16)',\r\n            labelShort: 'ISO 8859-16',\r\n            order: 29\r\n        },\r\n        windows1254: {\r\n            labelLong: 'Turkish (Windows 1254)',\r\n            labelShort: 'Windows 1254',\r\n            order: 30\r\n        },\r\n        iso88599: {\r\n            labelLong: 'Turkish (ISO 8859-9)',\r\n            labelShort: 'ISO 8859-9',\r\n            order: 31\r\n        },\r\n        windows1258: {\r\n            labelLong: 'Vietnamese (Windows 1258)',\r\n            labelShort: 'Windows 1258',\r\n            order: 32\r\n        },\r\n        gbk: {\r\n            labelLong: 'Chinese (GBK)',\r\n            labelShort: 'GBK',\r\n            order: 33\r\n        },\r\n        gb18030: {\r\n            labelLong: 'Chinese (GB18030)',\r\n            labelShort: 'GB18030',\r\n            order: 34\r\n        },\r\n        cp950: {\r\n            labelLong: 'Traditional Chinese (Big5)',\r\n            labelShort: 'Big5',\r\n            order: 35\r\n        },\r\n        big5hkscs: {\r\n            labelLong: 'Traditional Chinese (Big5-HKSCS)',\r\n            labelShort: 'Big5-HKSCS',\r\n            order: 36\r\n        },\r\n        shiftjis: {\r\n            labelLong: 'Japanese (Shift JIS)',\r\n            labelShort: 'Shift JIS',\r\n            order: 37\r\n        },\r\n        eucjp: {\r\n            labelLong: 'Japanese (EUC-JP)',\r\n            labelShort: 'EUC-JP',\r\n            order: 38\r\n        },\r\n        euckr: {\r\n            labelLong: 'Korean (EUC-KR)',\r\n            labelShort: 'EUC-KR',\r\n            order: 39\r\n        },\r\n        windows874: {\r\n            labelLong: 'Thai (Windows 874)',\r\n            labelShort: 'Windows 874',\r\n            order: 40\r\n        },\r\n        iso885911: {\r\n            labelLong: 'Latin/Thai (ISO 8859-11)',\r\n            labelShort: 'ISO 8859-11',\r\n            order: 41\r\n        },\r\n        'koi8-ru': {\r\n            labelLong: 'Cyrillic (KOI8-RU)',\r\n            labelShort: 'KOI8-RU',\r\n            order: 42\r\n        },\r\n        'koi8-t': {\r\n            labelLong: 'Tajik (KOI8-T)',\r\n            labelShort: 'KOI8-T',\r\n            order: 43\r\n        },\r\n        GB2312: {\r\n            labelLong: 'Simplified Chinese (GB 2312)',\r\n            labelShort: 'GB 2312',\r\n            order: 44\r\n        }\r\n    };\r\n});\r\n\ndefine(\"vs/platform/instantiation/common/serviceCollection\", [\"require\", \"exports\", 'vs/base/common/arrays'], function (require, exports, arrays_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var ServiceCollection = (function () {\r\n        function ServiceCollection() {\r\n            var entries = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                entries[_i - 0] = arguments[_i];\r\n            }\r\n            this._entries = [];\r\n            for (var _c = 0, entries_1 = entries; _c < entries_1.length; _c++) {\r\n                var entry = entries_1[_c];\r\n                this.set(entry[0], entry[1]);\r\n            }\r\n        }\r\n        ServiceCollection.prototype.set = function (id, instanceOrDescriptor) {\r\n            var entry = [id, instanceOrDescriptor];\r\n            var idx = arrays_1.binarySearch(this._entries, entry, ServiceCollection._entryCompare);\r\n            if (idx < 0) {\r\n                // new element\r\n                this._entries.splice(~idx, 0, entry);\r\n            }\r\n            else {\r\n                var old = this._entries[idx];\r\n                this._entries[idx] = entry;\r\n                return old[1];\r\n            }\r\n        };\r\n        ServiceCollection.prototype.forEach = function (callback) {\r\n            for (var _i = 0, _c = this._entries; _i < _c.length; _i++) {\r\n                var entry = _c[_i];\r\n                var id = entry[0], instanceOrDescriptor = entry[1];\r\n                callback(id, instanceOrDescriptor);\r\n            }\r\n        };\r\n        ServiceCollection.prototype.has = function (id) {\r\n            return arrays_1.binarySearch(this._entries, ServiceCollection._searchEntry(id), ServiceCollection._entryCompare) >= 0;\r\n        };\r\n        ServiceCollection.prototype.get = function (id) {\r\n            var idx = arrays_1.binarySearch(this._entries, ServiceCollection._searchEntry(id), ServiceCollection._entryCompare);\r\n            if (idx >= 0) {\r\n                return this._entries[idx][1];\r\n            }\r\n        };\r\n        ServiceCollection._searchEntry = function (id) {\r\n            ServiceCollection._dummy[0] = id;\r\n            return ServiceCollection._dummy;\r\n        };\r\n        ServiceCollection._entryCompare = function (a, b) {\r\n            var _a = a[0].toString();\r\n            var _b = b[0].toString();\r\n            if (_a < _b) {\r\n                return -1;\r\n            }\r\n            else if (_a > _b) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        };\r\n        ServiceCollection._dummy = [undefined, undefined];\r\n        return ServiceCollection;\r\n    }());\r\n    exports.ServiceCollection = ServiceCollection;\r\n});\r\n\ndefine(\"vs/platform/instantiation/common/instantiationService\", [\"require\", \"exports\", 'vs/base/common/winjs.base', 'vs/base/common/errors', 'vs/base/common/types', 'vs/base/common/assert', 'vs/base/common/graph', 'vs/platform/instantiation/common/descriptors', 'vs/platform/instantiation/common/instantiation', 'vs/platform/instantiation/common/serviceCollection'], function (require, exports, winjs_base_1, errors_1, types_1, assert, graph_1, descriptors_1, instantiation_1, serviceCollection_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var InstantiationService = (function () {\r\n        function InstantiationService(services, strict) {\r\n            if (services === void 0) { services = new serviceCollection_1.ServiceCollection(); }\r\n            if (strict === void 0) { strict = false; }\r\n            this._services = services;\r\n            this._strict = strict;\r\n            this._services.set(instantiation_1.IInstantiationService, this);\r\n        }\r\n        InstantiationService.prototype.createChild = function (services) {\r\n            this._services.forEach(function (id, thing) {\r\n                if (!services.has(id)) {\r\n                    services.set(id, thing);\r\n                }\r\n            });\r\n            return new InstantiationService(services, this._strict);\r\n        };\r\n        InstantiationService.prototype.invokeFunction = function (signature) {\r\n            var _this = this;\r\n            var args = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                args[_i - 1] = arguments[_i];\r\n            }\r\n            var accessor;\r\n            try {\r\n                accessor = {\r\n                    get: function (id, isOptional) {\r\n                        var result = _this._getOrCreateServiceInstance(id);\r\n                        if (!result && isOptional !== instantiation_1.optional) {\r\n                            throw new Error(\"[invokeFunction] unkown service '\" + id + \"'\");\r\n                        }\r\n                        return result;\r\n                    }\r\n                };\r\n                return signature.apply(undefined, [accessor].concat(args));\r\n            }\r\n            finally {\r\n                accessor.get = function () {\r\n                    throw errors_1.illegalState('service accessor is only valid during the invocation of its target method');\r\n                };\r\n            }\r\n        };\r\n        InstantiationService.prototype.createInstance = function (param) {\r\n            var rest = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                rest[_i - 1] = arguments[_i];\r\n            }\r\n            if (param instanceof descriptors_1.AsyncDescriptor) {\r\n                // async\r\n                return this._createInstanceAsync(param, rest);\r\n            }\r\n            else if (param instanceof descriptors_1.SyncDescriptor) {\r\n                // sync\r\n                return this._createInstance(param, rest);\r\n            }\r\n            else {\r\n                // sync, just ctor\r\n                return this._createInstance(new descriptors_1.SyncDescriptor(param), rest);\r\n            }\r\n        };\r\n        InstantiationService.prototype._createInstanceAsync = function (descriptor, args) {\r\n            var _this = this;\r\n            var canceledError;\r\n            return new winjs_base_1.TPromise(function (c, e, p) {\r\n                require([descriptor.moduleName], function (_module) {\r\n                    if (canceledError) {\r\n                        e(canceledError);\r\n                    }\r\n                    if (!_module) {\r\n                        return e(errors_1.illegalArgument('module not found: ' + descriptor.moduleName));\r\n                    }\r\n                    var ctor;\r\n                    if (!descriptor.ctorName) {\r\n                        ctor = _module;\r\n                    }\r\n                    else {\r\n                        ctor = _module[descriptor.ctorName];\r\n                    }\r\n                    if (typeof ctor !== 'function') {\r\n                        return e(errors_1.illegalArgument('not a function: ' + descriptor.ctorName || descriptor.moduleName));\r\n                    }\r\n                    try {\r\n                        args.unshift.apply(args, descriptor.staticArguments()); // instead of spread in ctor call\r\n                        c(_this._createInstance(new descriptors_1.SyncDescriptor(ctor), args));\r\n                    }\r\n                    catch (error) {\r\n                        return e(error);\r\n                    }\r\n                }, e);\r\n            }, function () {\r\n                canceledError = errors_1.canceled();\r\n            });\r\n        };\r\n        InstantiationService.prototype._createInstance = function (desc, args) {\r\n            var _this = this;\r\n            // arguments given by createInstance-call and/or the descriptor\r\n            var staticArgs = desc.staticArguments().concat(args);\r\n            // arguments defined by service decorators\r\n            var serviceDependencies = instantiation_1._util.getServiceDependencies(desc.ctor).sort(function (a, b) { return a.index - b.index; });\r\n            var serviceArgs = serviceDependencies.map(function (dependency) {\r\n                var service = _this._getOrCreateServiceInstance(dependency.id);\r\n                if (!service && _this._strict && !dependency.optional) {\r\n                    throw new Error(\"[createInstance] \" + desc.ctor.name + \" depends on UNKNOWN service \" + dependency.id + \".\");\r\n                }\r\n                return service;\r\n            });\r\n            var firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : staticArgs.length;\r\n            // check for argument mismatches, adjust static args if needed\r\n            if (staticArgs.length !== firstServiceArgPos) {\r\n                console.warn(\"[createInstance] First service dependency of \" + desc.ctor.name + \" at position \" + (firstServiceArgPos + 1) + \" conflicts with \" + staticArgs.length + \" static arguments\");\r\n                var delta = firstServiceArgPos - staticArgs.length;\r\n                if (delta > 0) {\r\n                    staticArgs = staticArgs.concat(new Array(delta));\r\n                }\r\n                else {\r\n                    staticArgs = staticArgs.slice(0, firstServiceArgPos);\r\n                }\r\n            }\r\n            // // check for missing args\r\n            // for (let i = 0; i < serviceArgs.length; i++) {\r\n            // \tif (!serviceArgs[i]) {\r\n            // \t\tconsole.warn(`${desc.ctor.name} MISSES service dependency ${serviceDependencies[i].id}`, new Error().stack);\r\n            // \t}\r\n            // }\r\n            // now create the instance\r\n            var argArray = [desc.ctor];\r\n            argArray.push.apply(argArray, staticArgs);\r\n            argArray.push.apply(argArray, serviceArgs);\r\n            var instance = types_1.create.apply(null, argArray);\r\n            desc._validate(instance);\r\n            return instance;\r\n        };\r\n        InstantiationService.prototype._getOrCreateServiceInstance = function (id) {\r\n            var thing = this._services.get(id);\r\n            if (thing instanceof descriptors_1.SyncDescriptor) {\r\n                return this._createAndCacheServiceInstance(id, thing);\r\n            }\r\n            else {\r\n                return thing;\r\n            }\r\n        };\r\n        InstantiationService.prototype._createAndCacheServiceInstance = function (id, desc) {\r\n            assert.ok(this._services.get(id) instanceof descriptors_1.SyncDescriptor);\r\n            var graph = new graph_1.Graph(function (data) { return data.id.toString(); });\r\n            function throwCycleError() {\r\n                var err = new Error('[createInstance] cyclic dependency between services');\r\n                err.message = graph.toString();\r\n                throw err;\r\n            }\r\n            var count = 0;\r\n            var stack = [{ id: id, desc: desc }];\r\n            while (stack.length) {\r\n                var item = stack.pop();\r\n                graph.lookupOrInsertNode(item);\r\n                // TODO@joh use the graph to find a cycle\r\n                // a weak heuristic for cycle checks\r\n                if (count++ > 100) {\r\n                    throwCycleError();\r\n                }\r\n                // check all dependencies for existence and if the need to be created first\r\n                var dependencies = instantiation_1._util.getServiceDependencies(item.desc.ctor);\r\n                for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\r\n                    var dependency = dependencies_1[_i];\r\n                    var instanceOrDesc = this._services.get(dependency.id);\r\n                    if (!instanceOrDesc) {\r\n                        console.warn(\"[createInstance] \" + id + \" depends on \" + dependency.id + \" which is NOT registered.\");\r\n                    }\r\n                    if (instanceOrDesc instanceof descriptors_1.SyncDescriptor) {\r\n                        var d = { id: dependency.id, desc: instanceOrDesc };\r\n                        graph.insertEdge(item, d);\r\n                        stack.push(d);\r\n                    }\r\n                }\r\n            }\r\n            while (true) {\r\n                var roots = graph.roots();\r\n                // if there is no more roots but still\r\n                // nodes in the graph we have a cycle\r\n                if (roots.length === 0) {\r\n                    if (graph.length !== 0) {\r\n                        throwCycleError();\r\n                    }\r\n                    break;\r\n                }\r\n                for (var _a = 0, roots_1 = roots; _a < roots_1.length; _a++) {\r\n                    var root = roots_1[_a];\r\n                    // create instance and overwrite the service collections\r\n                    var instance = this._createInstance(root.data.desc, []);\r\n                    this._services.set(root.data.id, instance);\r\n                    graph.removeNode(root.data);\r\n                }\r\n            }\r\n            return this._services.get(id);\r\n        };\r\n        return InstantiationService;\r\n    }());\r\n    exports.InstantiationService = InstantiationService;\r\n});\r\n\ndefine(\"vs/platform/markers/common/markers\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IMarkerService = instantiation_1.createDecorator('markerService');\r\n    (function (MarkerType) {\r\n        MarkerType[MarkerType[\"transient\"] = 1] = \"transient\";\r\n        MarkerType[MarkerType[\"permanent\"] = 2] = \"permanent\";\r\n    })(exports.MarkerType || (exports.MarkerType = {}));\r\n    var MarkerType = exports.MarkerType;\r\n});\r\n\ndefine(\"vs/platform/platform\", [\"require\", \"exports\", 'vs/base/common/types', 'vs/base/common/assert'], function (require, exports, Types, Assert) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var RegistryImpl = (function () {\r\n        function RegistryImpl() {\r\n            this.data = {};\r\n        }\r\n        RegistryImpl.prototype.add = function (id, data) {\r\n            Assert.ok(Types.isString(id));\r\n            Assert.ok(Types.isObject(data));\r\n            Assert.ok(!this.data.hasOwnProperty(id), 'There is already an extension with this id');\r\n            this.data[id] = data;\r\n        };\r\n        RegistryImpl.prototype.knows = function (id) {\r\n            return this.data.hasOwnProperty(id);\r\n        };\r\n        RegistryImpl.prototype.as = function (id) {\r\n            return this.data[id] || null;\r\n        };\r\n        return RegistryImpl;\r\n    }());\r\n    exports.Registry = new RegistryImpl();\r\n    /**\r\n     * A base class for registries that leverage the instantiation service to create instances.\r\n     */\r\n    var BaseRegistry = (function () {\r\n        function BaseRegistry() {\r\n            this.toBeInstantiated = [];\r\n            this.instances = [];\r\n        }\r\n        BaseRegistry.prototype.setInstantiationService = function (service) {\r\n            this.instantiationService = service;\r\n            while (this.toBeInstantiated.length > 0) {\r\n                var entry = this.toBeInstantiated.shift();\r\n                this.instantiate(entry);\r\n            }\r\n        };\r\n        BaseRegistry.prototype.instantiate = function (ctor) {\r\n            var instance = this.instantiationService.createInstance(ctor);\r\n            this.instances.push(instance);\r\n        };\r\n        BaseRegistry.prototype._register = function (ctor) {\r\n            if (this.instantiationService) {\r\n                this.instantiate(ctor);\r\n            }\r\n            else {\r\n                this.toBeInstantiated.push(ctor);\r\n            }\r\n        };\r\n        BaseRegistry.prototype._getInstances = function () {\r\n            return this.instances.slice(0);\r\n        };\r\n        BaseRegistry.prototype._setInstances = function (instances) {\r\n            this.instances = instances;\r\n        };\r\n        return BaseRegistry;\r\n    }());\r\n    exports.BaseRegistry = BaseRegistry;\r\n});\r\n\ndefine(\"vs/editor/common/modes/modesRegistry\", [\"require\", \"exports\", 'vs/nls!vs/editor/common/modes/modesRegistry', 'vs/base/common/event', 'vs/platform/platform'], function (require, exports, nls, event_1, platform_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // Define extension point ids\r\n    exports.Extensions = {\r\n        ModesRegistry: 'editor.modesRegistry'\r\n    };\r\n    var EditorModesRegistry = (function () {\r\n        function EditorModesRegistry() {\r\n            this._onDidAddCompatModes = new event_1.Emitter();\r\n            this.onDidAddCompatModes = this._onDidAddCompatModes.event;\r\n            this._onDidAddLanguages = new event_1.Emitter();\r\n            this.onDidAddLanguages = this._onDidAddLanguages.event;\r\n            this._compatModes = [];\r\n            this._languages = [];\r\n        }\r\n        // --- compat modes\r\n        EditorModesRegistry.prototype.registerCompatModes = function (def) {\r\n            this._compatModes = this._compatModes.concat(def);\r\n            this._onDidAddCompatModes.fire(def);\r\n        };\r\n        EditorModesRegistry.prototype.registerCompatMode = function (def) {\r\n            this._compatModes.push(def);\r\n            this._onDidAddCompatModes.fire([def]);\r\n        };\r\n        EditorModesRegistry.prototype.getCompatModes = function () {\r\n            return this._compatModes.slice(0);\r\n        };\r\n        // --- languages\r\n        EditorModesRegistry.prototype.registerLanguage = function (def) {\r\n            this._languages.push(def);\r\n            this._onDidAddLanguages.fire([def]);\r\n        };\r\n        EditorModesRegistry.prototype.registerLanguages = function (def) {\r\n            this._languages = this._languages.concat(def);\r\n            this._onDidAddLanguages.fire(def);\r\n        };\r\n        EditorModesRegistry.prototype.getLanguages = function () {\r\n            return this._languages.slice(0);\r\n        };\r\n        return EditorModesRegistry;\r\n    }());\r\n    exports.EditorModesRegistry = EditorModesRegistry;\r\n    exports.ModesRegistry = new EditorModesRegistry();\r\n    platform_1.Registry.add(exports.Extensions.ModesRegistry, exports.ModesRegistry);\r\n    exports.ModesRegistry.registerLanguage({\r\n        id: 'plaintext',\r\n        extensions: ['.txt', '.gitignore'],\r\n        aliases: [nls.localize(0, null), 'text'],\r\n        mimetypes: ['text/plain']\r\n    });\r\n});\r\n\ndefine(\"vs/editor/common/services/languagesRegistry\", [\"require\", \"exports\", 'vs/base/common/errors', 'vs/base/common/event', 'vs/base/common/mime', 'vs/base/common/strings', 'vs/editor/common/modes/modesRegistry'], function (require, exports, errors_1, event_1, mime, strings, modesRegistry_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n    var LanguagesRegistry = (function () {\r\n        function LanguagesRegistry(useModesRegistry) {\r\n            var _this = this;\r\n            if (useModesRegistry === void 0) { useModesRegistry = true; }\r\n            this._onDidAddModes = new event_1.Emitter();\r\n            this.onDidAddModes = this._onDidAddModes.event;\r\n            this.knownModeIds = {};\r\n            this.mime2LanguageId = {};\r\n            this.name2LanguageId = {};\r\n            this.id2Name = {};\r\n            this.id2Extensions = {};\r\n            this.compatModes = {};\r\n            this.lowerName2Id = {};\r\n            this.id2ConfigurationFiles = {};\r\n            if (useModesRegistry) {\r\n                this._registerCompatModes(modesRegistry_1.ModesRegistry.getCompatModes());\r\n                modesRegistry_1.ModesRegistry.onDidAddCompatModes(function (m) { return _this._registerCompatModes(m); });\r\n                this._registerLanguages(modesRegistry_1.ModesRegistry.getLanguages());\r\n                modesRegistry_1.ModesRegistry.onDidAddLanguages(function (m) { return _this._registerLanguages(m); });\r\n            }\r\n        }\r\n        LanguagesRegistry.prototype._registerCompatModes = function (defs) {\r\n            var addedModes = [];\r\n            for (var i = 0; i < defs.length; i++) {\r\n                var def = defs[i];\r\n                this._registerLanguage({\r\n                    id: def.id,\r\n                    extensions: def.extensions,\r\n                    filenames: def.filenames,\r\n                    firstLine: def.firstLine,\r\n                    aliases: def.aliases,\r\n                    mimetypes: def.mimetypes\r\n                });\r\n                this.compatModes[def.id] = {\r\n                    moduleId: def.moduleId,\r\n                    ctorName: def.ctorName\r\n                };\r\n                addedModes.push(def.id);\r\n            }\r\n            this._onDidAddModes.fire(addedModes);\r\n        };\r\n        LanguagesRegistry.prototype._registerLanguages = function (desc) {\r\n            var addedModes = [];\r\n            for (var i = 0; i < desc.length; i++) {\r\n                this._registerLanguage(desc[i]);\r\n                addedModes.push(desc[i].id);\r\n            }\r\n            this._onDidAddModes.fire(addedModes);\r\n        };\r\n        LanguagesRegistry.prototype._setLanguageName = function (languageId, languageName, force) {\r\n            var prevName = this.id2Name[languageId];\r\n            if (prevName) {\r\n                if (!force) {\r\n                    return;\r\n                }\r\n                delete this.name2LanguageId[prevName];\r\n            }\r\n            this.name2LanguageId[languageName] = languageId;\r\n            this.id2Name[languageId] = languageName;\r\n        };\r\n        LanguagesRegistry.prototype._registerLanguage = function (lang) {\r\n            this.knownModeIds[lang.id] = true;\r\n            var primaryMime = null;\r\n            if (typeof lang.mimetypes !== 'undefined' && Array.isArray(lang.mimetypes)) {\r\n                for (var i = 0; i < lang.mimetypes.length; i++) {\r\n                    if (!primaryMime) {\r\n                        primaryMime = lang.mimetypes[i];\r\n                    }\r\n                    this.mime2LanguageId[lang.mimetypes[i]] = lang.id;\r\n                }\r\n            }\r\n            if (!primaryMime) {\r\n                primaryMime = 'text/x-' + lang.id;\r\n                this.mime2LanguageId[primaryMime] = lang.id;\r\n            }\r\n            if (Array.isArray(lang.extensions)) {\r\n                this.id2Extensions[lang.id] = this.id2Extensions[lang.id] || [];\r\n                for (var _i = 0, _a = lang.extensions; _i < _a.length; _i++) {\r\n                    var extension = _a[_i];\r\n                    mime.registerTextMime({ mime: primaryMime, extension: extension });\r\n                    this.id2Extensions[lang.id].push(extension);\r\n                }\r\n            }\r\n            if (Array.isArray(lang.filenames)) {\r\n                for (var _b = 0, _c = lang.filenames; _b < _c.length; _b++) {\r\n                    var filename = _c[_b];\r\n                    mime.registerTextMime({ mime: primaryMime, filename: filename });\r\n                }\r\n            }\r\n            if (Array.isArray(lang.filenamePatterns)) {\r\n                for (var _d = 0, _e = lang.filenamePatterns; _d < _e.length; _d++) {\r\n                    var filenamePattern = _e[_d];\r\n                    mime.registerTextMime({ mime: primaryMime, filepattern: filenamePattern });\r\n                }\r\n            }\r\n            if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\r\n                var firstLineRegexStr = lang.firstLine;\r\n                if (firstLineRegexStr.charAt(0) !== '^') {\r\n                    firstLineRegexStr = '^' + firstLineRegexStr;\r\n                }\r\n                try {\r\n                    var firstLineRegex = new RegExp(firstLineRegexStr);\r\n                    if (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\r\n                        mime.registerTextMime({ mime: primaryMime, firstline: firstLineRegex });\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // Most likely, the regex was bad\r\n                    errors_1.onUnexpectedError(err);\r\n                }\r\n            }\r\n            this.lowerName2Id[lang.id.toLowerCase()] = lang.id;\r\n            if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\r\n                for (var i = 0; i < lang.aliases.length; i++) {\r\n                    if (!lang.aliases[i] || lang.aliases[i].length === 0) {\r\n                        continue;\r\n                    }\r\n                    this.lowerName2Id[lang.aliases[i].toLowerCase()] = lang.id;\r\n                }\r\n            }\r\n            var containsAliases = (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases) && lang.aliases.length > 0);\r\n            if (containsAliases && lang.aliases[0] === null) {\r\n            }\r\n            else {\r\n                var bestName = (containsAliases ? lang.aliases[0] : null) || lang.id;\r\n                this._setLanguageName(lang.id, bestName, containsAliases);\r\n            }\r\n            if (typeof lang.configuration === 'string') {\r\n                this.id2ConfigurationFiles[lang.id] = this.id2ConfigurationFiles[lang.id] || [];\r\n                this.id2ConfigurationFiles[lang.id].push(lang.configuration);\r\n            }\r\n        };\r\n        LanguagesRegistry.prototype.isRegisteredMode = function (mimetypeOrModeId) {\r\n            // Is this a known mime type ?\r\n            if (hasOwnProperty.call(this.mime2LanguageId, mimetypeOrModeId)) {\r\n                return true;\r\n            }\r\n            // Is this a known mode id ?\r\n            return hasOwnProperty.call(this.knownModeIds, mimetypeOrModeId);\r\n        };\r\n        LanguagesRegistry.prototype.getRegisteredModes = function () {\r\n            return Object.keys(this.knownModeIds);\r\n        };\r\n        LanguagesRegistry.prototype.getRegisteredLanguageNames = function () {\r\n            return Object.keys(this.name2LanguageId);\r\n        };\r\n        LanguagesRegistry.prototype.getLanguageName = function (modeId) {\r\n            return this.id2Name[modeId] || null;\r\n        };\r\n        LanguagesRegistry.prototype.getModeIdForLanguageNameLowercase = function (languageNameLower) {\r\n            return this.lowerName2Id[languageNameLower] || null;\r\n        };\r\n        LanguagesRegistry.prototype.getConfigurationFiles = function (modeId) {\r\n            return this.id2ConfigurationFiles[modeId] || [];\r\n        };\r\n        LanguagesRegistry.prototype.getMimeForMode = function (theModeId) {\r\n            var keys = Object.keys(this.mime2LanguageId);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var _mime = keys[i];\r\n                var modeId = this.mime2LanguageId[_mime];\r\n                if (modeId === theModeId) {\r\n                    return _mime;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        LanguagesRegistry.prototype.extractModeIds = function (commaSeparatedMimetypesOrCommaSeparatedIdsOrName) {\r\n            var _this = this;\r\n            if (!commaSeparatedMimetypesOrCommaSeparatedIdsOrName) {\r\n                return [];\r\n            }\r\n            return (commaSeparatedMimetypesOrCommaSeparatedIdsOrName.\r\n                split(',').\r\n                map(function (mimeTypeOrIdOrName) { return mimeTypeOrIdOrName.trim(); }).\r\n                map(function (mimeTypeOrIdOrName) {\r\n                return _this.mime2LanguageId[mimeTypeOrIdOrName] || mimeTypeOrIdOrName;\r\n            }).\r\n                filter(function (modeId) {\r\n                return _this.knownModeIds[modeId];\r\n            }));\r\n        };\r\n        LanguagesRegistry.prototype.getModeIdsFromLanguageName = function (languageName) {\r\n            if (!languageName) {\r\n                return [];\r\n            }\r\n            if (hasOwnProperty.call(this.name2LanguageId, languageName)) {\r\n                return [this.name2LanguageId[languageName]];\r\n            }\r\n            return [];\r\n        };\r\n        LanguagesRegistry.prototype.getModeIdsFromFilenameOrFirstLine = function (filename, firstLine) {\r\n            if (!filename && !firstLine) {\r\n                return [];\r\n            }\r\n            var mimeTypes = mime.guessMimeTypes(filename, firstLine);\r\n            return this.extractModeIds(mimeTypes.join(','));\r\n        };\r\n        LanguagesRegistry.prototype.getCompatMode = function (modeId) {\r\n            return this.compatModes[modeId] || null;\r\n        };\r\n        LanguagesRegistry.prototype.getExtensions = function (languageName) {\r\n            var languageId = this.name2LanguageId[languageName];\r\n            if (!languageId) {\r\n                return [];\r\n            }\r\n            return this.id2Extensions[languageId];\r\n        };\r\n        return LanguagesRegistry;\r\n    }());\r\n    exports.LanguagesRegistry = LanguagesRegistry;\r\n});\r\n\ndefine(\"vs/platform/jsonschemas/common/jsonContributionRegistry\", [\"require\", \"exports\", 'vs/nls!vs/platform/jsonschemas/common/jsonContributionRegistry', 'vs/platform/platform', 'vs/base/common/eventEmitter'], function (require, exports, nls, platform, eventEmitter_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.Extensions = {\r\n        JSONContribution: 'base.contributions.json'\r\n    };\r\n    function normalizeId(id) {\r\n        if (id.length > 0 && id.charAt(id.length - 1) === '#') {\r\n            return id.substring(0, id.length - 1);\r\n        }\r\n        return id;\r\n    }\r\n    var JSONContributionRegistry = (function () {\r\n        function JSONContributionRegistry() {\r\n            this.schemasById = {};\r\n            this.eventEmitter = new eventEmitter_1.EventEmitter();\r\n        }\r\n        JSONContributionRegistry.prototype.addRegistryChangedListener = function (callback) {\r\n            return this.eventEmitter.addListener2('registryChanged', callback);\r\n        };\r\n        JSONContributionRegistry.prototype.registerSchema = function (uri, unresolvedSchemaContent) {\r\n            this.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\r\n            this.eventEmitter.emit('registryChanged', {});\r\n        };\r\n        JSONContributionRegistry.prototype.getSchemaContributions = function () {\r\n            return {\r\n                schemas: this.schemasById,\r\n            };\r\n        };\r\n        return JSONContributionRegistry;\r\n    }());\r\n    var jsonContributionRegistry = new JSONContributionRegistry();\r\n    platform.Registry.add(exports.Extensions.JSONContribution, jsonContributionRegistry);\r\n    // preload the schema-schema with a version that contains descriptions.\r\n    jsonContributionRegistry.registerSchema('http://json-schema.org/draft-04/schema#', {\r\n        'id': 'http://json-schema.org/draft-04/schema#',\r\n        'title': nls.localize(0, null),\r\n        '$schema': 'http://json-schema.org/draft-04/schema#',\r\n        'definitions': {\r\n            'schemaArray': {\r\n                'type': 'array',\r\n                'minItems': 1,\r\n                'items': { '$ref': '#' }\r\n            },\r\n            'positiveInteger': {\r\n                'type': 'integer',\r\n                'minimum': 0\r\n            },\r\n            'positiveIntegerDefault0': {\r\n                'allOf': [{ '$ref': '#/definitions/positiveInteger' }, { 'default': 0 }]\r\n            },\r\n            'simpleTypes': {\r\n                'type': 'string',\r\n                'enum': ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']\r\n            },\r\n            'stringArray': {\r\n                'type': 'array',\r\n                'items': { 'type': 'string' },\r\n                'minItems': 1,\r\n                'uniqueItems': true\r\n            }\r\n        },\r\n        'type': 'object',\r\n        'properties': {\r\n            'id': {\r\n                'type': 'string',\r\n                'format': 'uri',\r\n                'description': nls.localize(1, null)\r\n            },\r\n            '$schema': {\r\n                'type': 'string',\r\n                'format': 'uri',\r\n                'description': nls.localize(2, null)\r\n            },\r\n            'title': {\r\n                'type': 'string',\r\n                'description': nls.localize(3, null)\r\n            },\r\n            'description': {\r\n                'type': 'string',\r\n                'description': nls.localize(4, null)\r\n            },\r\n            'default': {\r\n                'description': nls.localize(5, null)\r\n            },\r\n            'multipleOf': {\r\n                'type': 'number',\r\n                'minimum': 0,\r\n                'exclusiveMinimum': true,\r\n                'description': nls.localize(6, null)\r\n            },\r\n            'maximum': {\r\n                'type': 'number',\r\n                'description': nls.localize(7, null)\r\n            },\r\n            'exclusiveMaximum': {\r\n                'type': 'boolean',\r\n                'default': false,\r\n                'description': nls.localize(8, null)\r\n            },\r\n            'minimum': {\r\n                'type': 'number',\r\n                'description': nls.localize(9, null)\r\n            },\r\n            'exclusiveMinimum': {\r\n                'type': 'boolean',\r\n                'default': false,\r\n                'description': nls.localize(10, null)\r\n            },\r\n            'maxLength': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/positiveInteger' }\r\n                ],\r\n                'description': nls.localize(11, null)\r\n            },\r\n            'minLength': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/positiveIntegerDefault0' }\r\n                ],\r\n                'description': nls.localize(12, null)\r\n            },\r\n            'pattern': {\r\n                'type': 'string',\r\n                'format': 'regex',\r\n                'description': nls.localize(13, null)\r\n            },\r\n            'additionalItems': {\r\n                'anyOf': [\r\n                    { 'type': 'boolean' },\r\n                    { '$ref': '#' }\r\n                ],\r\n                'default': {},\r\n                'description': nls.localize(14, null)\r\n            },\r\n            'items': {\r\n                'anyOf': [\r\n                    { '$ref': '#' },\r\n                    { '$ref': '#/definitions/schemaArray' }\r\n                ],\r\n                'default': {},\r\n                'description': nls.localize(15, null)\r\n            },\r\n            'maxItems': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/positiveInteger' }\r\n                ],\r\n                'description': nls.localize(16, null)\r\n            },\r\n            'minItems': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/positiveIntegerDefault0' }\r\n                ],\r\n                'description': nls.localize(17, null)\r\n            },\r\n            'uniqueItems': {\r\n                'type': 'boolean',\r\n                'default': false,\r\n                'description': nls.localize(18, null)\r\n            },\r\n            'maxProperties': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/positiveInteger' }\r\n                ],\r\n                'description': nls.localize(19, null)\r\n            },\r\n            'minProperties': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/positiveIntegerDefault0' },\r\n                ],\r\n                'description': nls.localize(20, null)\r\n            },\r\n            'required': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/stringArray' }\r\n                ],\r\n                'description': nls.localize(21, null)\r\n            },\r\n            'additionalProperties': {\r\n                'anyOf': [\r\n                    { 'type': 'boolean' },\r\n                    { '$ref': '#' }\r\n                ],\r\n                'default': {},\r\n                'description': nls.localize(22, null)\r\n            },\r\n            'definitions': {\r\n                'type': 'object',\r\n                'additionalProperties': { '$ref': '#' },\r\n                'default': {},\r\n                'description': nls.localize(23, null)\r\n            },\r\n            'properties': {\r\n                'type': 'object',\r\n                'additionalProperties': { '$ref': '#' },\r\n                'default': {},\r\n                'description': nls.localize(24, null)\r\n            },\r\n            'patternProperties': {\r\n                'type': 'object',\r\n                'additionalProperties': { '$ref': '#' },\r\n                'default': {},\r\n                'description': nls.localize(25, null)\r\n            },\r\n            'dependencies': {\r\n                'type': 'object',\r\n                'additionalProperties': {\r\n                    'anyOf': [\r\n                        { '$ref': '#' },\r\n                        { '$ref': '#/definitions/stringArray' }\r\n                    ]\r\n                },\r\n                'description': nls.localize(26, null)\r\n            },\r\n            'enum': {\r\n                'type': 'array',\r\n                'minItems': 1,\r\n                'uniqueItems': true,\r\n                'description': nls.localize(27, null)\r\n            },\r\n            'type': {\r\n                'anyOf': [\r\n                    { '$ref': '#/definitions/simpleTypes' },\r\n                    {\r\n                        'type': 'array',\r\n                        'items': { '$ref': '#/definitions/simpleTypes' },\r\n                        'minItems': 1,\r\n                        'uniqueItems': true\r\n                    }\r\n                ],\r\n                'description': nls.localize(28, null)\r\n            },\r\n            'format': {\r\n                'anyOf': [\r\n                    {\r\n                        'type': 'string',\r\n                        'description': nls.localize(29, null),\r\n                        'enum': ['date-time', 'uri', 'email', 'hostname', 'ipv4', 'ipv6', 'regex']\r\n                    }, {\r\n                        'type': 'string'\r\n                    }\r\n                ]\r\n            },\r\n            'allOf': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/schemaArray' }\r\n                ],\r\n                'description': nls.localize(30, null)\r\n            },\r\n            'anyOf': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/schemaArray' }\r\n                ],\r\n                'description': nls.localize(31, null)\r\n            },\r\n            'oneOf': {\r\n                'allOf': [\r\n                    { '$ref': '#/definitions/schemaArray' }\r\n                ],\r\n                'description': nls.localize(32, null)\r\n            },\r\n            'not': {\r\n                'allOf': [\r\n                    { '$ref': '#' }\r\n                ],\r\n                'description': nls.localize(33, null)\r\n            }\r\n        },\r\n        'dependencies': {\r\n            'exclusiveMaximum': ['maximum'],\r\n            'exclusiveMinimum': ['minimum']\r\n        },\r\n        'default': {}\r\n    });\r\n});\r\n\ndefine(\"vs/platform/extensions/common/extensionsRegistry\", [\"require\", \"exports\", 'vs/nls!vs/platform/extensions/common/extensionsRegistry', 'vs/base/common/errors', 'vs/base/common/paths', 'vs/base/common/severity', 'vs/platform/jsonschemas/common/jsonContributionRegistry', 'vs/platform/platform'], function (require, exports, nls, errors_1, paths, severity_1, jsonContributionRegistry_1, platform_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var ExtensionMessageCollector = (function () {\r\n        function ExtensionMessageCollector(messageHandler, source) {\r\n            this._messageHandler = messageHandler;\r\n            this._source = source;\r\n        }\r\n        ExtensionMessageCollector.prototype._msg = function (type, message) {\r\n            this._messageHandler({\r\n                type: type,\r\n                message: message,\r\n                source: this._source\r\n            });\r\n        };\r\n        ExtensionMessageCollector.prototype.error = function (message) {\r\n            this._msg(severity_1.default.Error, message);\r\n        };\r\n        ExtensionMessageCollector.prototype.warn = function (message) {\r\n            this._msg(severity_1.default.Warning, message);\r\n        };\r\n        ExtensionMessageCollector.prototype.info = function (message) {\r\n            this._msg(severity_1.default.Info, message);\r\n        };\r\n        return ExtensionMessageCollector;\r\n    }());\r\n    function isValidExtensionDescription(extensionFolderPath, extensionDescription, notices) {\r\n        if (!extensionDescription) {\r\n            notices.push(nls.localize(0, null));\r\n            return false;\r\n        }\r\n        if (typeof extensionDescription.publisher !== 'string') {\r\n            notices.push(nls.localize(1, null, 'publisher'));\r\n            return false;\r\n        }\r\n        if (typeof extensionDescription.name !== 'string') {\r\n            notices.push(nls.localize(2, null, 'name'));\r\n            return false;\r\n        }\r\n        if (typeof extensionDescription.version !== 'string') {\r\n            notices.push(nls.localize(3, null, 'version'));\r\n            return false;\r\n        }\r\n        if (!extensionDescription.engines) {\r\n            notices.push(nls.localize(4, null, 'engines'));\r\n            return false;\r\n        }\r\n        if (typeof extensionDescription.engines.vscode !== 'string') {\r\n            notices.push(nls.localize(5, null, 'engines.vscode'));\r\n            return false;\r\n        }\r\n        if (typeof extensionDescription.extensionDependencies !== 'undefined') {\r\n            if (!_isStringArray(extensionDescription.extensionDependencies)) {\r\n                notices.push(nls.localize(6, null, 'extensionDependencies'));\r\n                return false;\r\n            }\r\n        }\r\n        if (typeof extensionDescription.activationEvents !== 'undefined') {\r\n            if (!_isStringArray(extensionDescription.activationEvents)) {\r\n                notices.push(nls.localize(7, null, 'activationEvents'));\r\n                return false;\r\n            }\r\n            if (typeof extensionDescription.main === 'undefined') {\r\n                notices.push(nls.localize(8, null, 'activationEvents', 'main'));\r\n                return false;\r\n            }\r\n        }\r\n        if (typeof extensionDescription.main !== 'undefined') {\r\n            if (typeof extensionDescription.main !== 'string') {\r\n                notices.push(nls.localize(9, null, 'main'));\r\n                return false;\r\n            }\r\n            else {\r\n                var normalizedAbsolutePath = paths.normalize(paths.join(extensionFolderPath, extensionDescription.main));\r\n                if (normalizedAbsolutePath.indexOf(extensionFolderPath)) {\r\n                    notices.push(nls.localize(10, null, normalizedAbsolutePath, extensionFolderPath));\r\n                }\r\n            }\r\n            if (typeof extensionDescription.activationEvents === 'undefined') {\r\n                notices.push(nls.localize(11, null, 'activationEvents', 'main'));\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    exports.isValidExtensionDescription = isValidExtensionDescription;\r\n    var hasOwnProperty = Object.hasOwnProperty;\r\n    var schemaRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\r\n    var ExtensionPoint = (function () {\r\n        function ExtensionPoint(name, registry) {\r\n            this.name = name;\r\n            this._registry = registry;\r\n            this._handler = null;\r\n            this._messageHandler = null;\r\n        }\r\n        ExtensionPoint.prototype.setHandler = function (handler) {\r\n            if (this._handler) {\r\n                throw new Error('Handler already set!');\r\n            }\r\n            this._handler = handler;\r\n            this._handle();\r\n        };\r\n        ExtensionPoint.prototype.handle = function (messageHandler) {\r\n            this._messageHandler = messageHandler;\r\n            this._handle();\r\n        };\r\n        ExtensionPoint.prototype._handle = function () {\r\n            var _this = this;\r\n            if (!this._handler || !this._messageHandler) {\r\n                return;\r\n            }\r\n            this._registry.registerPointListener(this.name, function (descriptions) {\r\n                var users = descriptions.map(function (desc) {\r\n                    return {\r\n                        description: desc,\r\n                        value: desc.contributes[_this.name],\r\n                        collector: new ExtensionMessageCollector(_this._messageHandler, desc.extensionFolderPath)\r\n                    };\r\n                });\r\n                _this._handler(users);\r\n            });\r\n        };\r\n        return ExtensionPoint;\r\n    }());\r\n    var schemaId = 'vscode://schemas/vscode-extensions';\r\n    var schema = {\r\n        default: {\r\n            'name': '{{name}}',\r\n            'description': '{{description}}',\r\n            'author': '{{author}}',\r\n            'version': '{{1.0.0}}',\r\n            'main': '{{pathToMain}}',\r\n            'dependencies': {}\r\n        },\r\n        properties: {\r\n            // engines: {\r\n            // \trequired: [ 'vscode' ],\r\n            // \tproperties: {\r\n            // \t\t'vscode': {\r\n            // \t\t\ttype: 'string',\r\n            // \t\t\tdescription: nls.localize('vscode.extension.engines.vscode', 'Specifies that this package only runs inside VSCode of the given version.'),\r\n            // \t\t}\r\n            // \t}\r\n            // },\r\n            displayName: {\r\n                description: nls.localize(12, null),\r\n                type: 'string'\r\n            },\r\n            categories: {\r\n                description: nls.localize(13, null),\r\n                type: 'array',\r\n                items: {\r\n                    type: 'string',\r\n                    enum: ['Languages', 'Snippets', 'Linters', 'Themes', 'Debuggers', 'Other']\r\n                }\r\n            },\r\n            galleryBanner: {\r\n                type: 'object',\r\n                description: nls.localize(14, null),\r\n                properties: {\r\n                    color: {\r\n                        description: nls.localize(15, null),\r\n                        type: 'string'\r\n                    },\r\n                    theme: {\r\n                        description: nls.localize(16, null),\r\n                        type: 'string',\r\n                        enum: ['dark', 'light']\r\n                    }\r\n                }\r\n            },\r\n            publisher: {\r\n                description: nls.localize(17, null),\r\n                type: 'string'\r\n            },\r\n            activationEvents: {\r\n                description: nls.localize(18, null),\r\n                type: 'array',\r\n                items: {\r\n                    type: 'string'\r\n                }\r\n            },\r\n            extensionDependencies: {\r\n                description: nls.localize(19, null),\r\n                type: 'array',\r\n                items: {\r\n                    type: 'string'\r\n                }\r\n            },\r\n            scripts: {\r\n                type: 'object',\r\n                properties: {\r\n                    'vscode:prepublish': {\r\n                        description: nls.localize(20, null),\r\n                        type: 'string'\r\n                    }\r\n                }\r\n            },\r\n            contributes: {\r\n                description: nls.localize(21, null),\r\n                type: 'object',\r\n                properties: {},\r\n                default: {}\r\n            }\r\n        }\r\n    };\r\n    var ExtensionsRegistryImpl = (function () {\r\n        function ExtensionsRegistryImpl() {\r\n            this._extensionsMap = {};\r\n            this._extensionsArr = [];\r\n            this._activationMap = {};\r\n            this._pointListeners = [];\r\n            this._extensionPoints = {};\r\n            this._oneTimeActivationEventListeners = {};\r\n        }\r\n        ExtensionsRegistryImpl.prototype.registerPointListener = function (point, handler) {\r\n            var entry = {\r\n                extensionPoint: point,\r\n                listener: handler\r\n            };\r\n            this._pointListeners.push(entry);\r\n            this._triggerPointListener(entry, ExtensionsRegistryImpl._filterWithExtPoint(this.getAllExtensionDescriptions(), point));\r\n        };\r\n        ExtensionsRegistryImpl.prototype.registerExtensionPoint = function (extensionPoint, jsonSchema) {\r\n            if (hasOwnProperty.call(this._extensionPoints, extensionPoint)) {\r\n                throw new Error('Duplicate extension point: ' + extensionPoint);\r\n            }\r\n            var result = new ExtensionPoint(extensionPoint, this);\r\n            this._extensionPoints[extensionPoint] = result;\r\n            schema.properties['contributes'].properties[extensionPoint] = jsonSchema;\r\n            schemaRegistry.registerSchema(schemaId, schema);\r\n            return result;\r\n        };\r\n        ExtensionsRegistryImpl.prototype.handleExtensionPoints = function (messageHandler) {\r\n            var _this = this;\r\n            Object.keys(this._extensionPoints).forEach(function (extensionPointName) {\r\n                _this._extensionPoints[extensionPointName].handle(messageHandler);\r\n            });\r\n        };\r\n        ExtensionsRegistryImpl.prototype._triggerPointListener = function (handler, desc) {\r\n            // console.log('_triggerPointListeners: ' + desc.length + ' OF ' + handler.extensionPoint);\r\n            if (!desc || desc.length === 0) {\r\n                return;\r\n            }\r\n            try {\r\n                handler.listener(desc);\r\n            }\r\n            catch (e) {\r\n                errors_1.onUnexpectedError(e);\r\n            }\r\n        };\r\n        ExtensionsRegistryImpl.prototype.registerExtensions = function (extensionDescriptions) {\r\n            for (var i = 0, len = extensionDescriptions.length; i < len; i++) {\r\n                var extensionDescription = extensionDescriptions[i];\r\n                if (hasOwnProperty.call(this._extensionsMap, extensionDescription.id)) {\r\n                    // No overwriting allowed!\r\n                    console.error('Extension `' + extensionDescription.id + '` is already registered');\r\n                    continue;\r\n                }\r\n                this._extensionsMap[extensionDescription.id] = extensionDescription;\r\n                this._extensionsArr.push(extensionDescription);\r\n                if (Array.isArray(extensionDescription.activationEvents)) {\r\n                    for (var j = 0, lenJ = extensionDescription.activationEvents.length; j < lenJ; j++) {\r\n                        var activationEvent = extensionDescription.activationEvents[j];\r\n                        this._activationMap[activationEvent] = this._activationMap[activationEvent] || [];\r\n                        this._activationMap[activationEvent].push(extensionDescription);\r\n                    }\r\n                }\r\n            }\r\n            for (var i = 0, len = this._pointListeners.length; i < len; i++) {\r\n                var listenerEntry = this._pointListeners[i];\r\n                var descriptions = ExtensionsRegistryImpl._filterWithExtPoint(extensionDescriptions, listenerEntry.extensionPoint);\r\n                this._triggerPointListener(listenerEntry, descriptions);\r\n            }\r\n        };\r\n        ExtensionsRegistryImpl._filterWithExtPoint = function (input, point) {\r\n            return input.filter(function (desc) {\r\n                return (desc.contributes && hasOwnProperty.call(desc.contributes, point));\r\n            });\r\n        };\r\n        ExtensionsRegistryImpl.prototype.getExtensionDescriptionsForActivationEvent = function (activationEvent) {\r\n            if (!hasOwnProperty.call(this._activationMap, activationEvent)) {\r\n                return [];\r\n            }\r\n            return this._activationMap[activationEvent].slice(0);\r\n        };\r\n        ExtensionsRegistryImpl.prototype.getAllExtensionDescriptions = function () {\r\n            return this._extensionsArr.slice(0);\r\n        };\r\n        ExtensionsRegistryImpl.prototype.getExtensionDescription = function (extensionId) {\r\n            if (!hasOwnProperty.call(this._extensionsMap, extensionId)) {\r\n                return null;\r\n            }\r\n            return this._extensionsMap[extensionId];\r\n        };\r\n        ExtensionsRegistryImpl.prototype.registerOneTimeActivationEventListener = function (activationEvent, listener) {\r\n            if (!hasOwnProperty.call(this._oneTimeActivationEventListeners, activationEvent)) {\r\n                this._oneTimeActivationEventListeners[activationEvent] = [];\r\n            }\r\n            this._oneTimeActivationEventListeners[activationEvent].push(listener);\r\n        };\r\n        ExtensionsRegistryImpl.prototype.triggerActivationEventListeners = function (activationEvent) {\r\n            if (hasOwnProperty.call(this._oneTimeActivationEventListeners, activationEvent)) {\r\n                var listeners = this._oneTimeActivationEventListeners[activationEvent];\r\n                delete this._oneTimeActivationEventListeners[activationEvent];\r\n                for (var i = 0, len = listeners.length; i < len; i++) {\r\n                    var listener = listeners[i];\r\n                    try {\r\n                        listener();\r\n                    }\r\n                    catch (e) {\r\n                        errors_1.onUnexpectedError(e);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return ExtensionsRegistryImpl;\r\n    }());\r\n    function _isStringArray(arr) {\r\n        if (!Array.isArray(arr)) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = arr.length; i < len; i++) {\r\n            if (typeof arr[i] !== 'string') {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    var PRExtensions = {\r\n        ExtensionsRegistry: 'ExtensionsRegistry'\r\n    };\r\n    platform_1.Registry.add(PRExtensions.ExtensionsRegistry, new ExtensionsRegistryImpl());\r\n    exports.ExtensionsRegistry = platform_1.Registry.as(PRExtensions.ExtensionsRegistry);\r\n    schemaRegistry.registerSchema(schemaId, schema);\r\n});\r\n\ndefine(\"vs/platform/configuration/common/configurationRegistry\", [\"require\", \"exports\", 'vs/nls!vs/platform/configuration/common/configurationRegistry', 'vs/base/common/event', 'vs/platform/platform', 'vs/base/common/objects', 'vs/platform/extensions/common/extensionsRegistry', 'vs/platform/jsonschemas/common/jsonContributionRegistry'], function (require, exports, nls, event_1, platform, objects, extensionsRegistry_1, JSONContributionRegistry) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.Extensions = {\r\n        Configuration: 'base.contributions.configuration'\r\n    };\r\n    var schemaId = 'vscode://schemas/settings';\r\n    var contributionRegistry = platform.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\r\n    var ConfigurationRegistry = (function () {\r\n        function ConfigurationRegistry() {\r\n            this.configurationContributors = [];\r\n            this.configurationSchema = { allOf: [] };\r\n            this._onDidRegisterConfiguration = new event_1.Emitter();\r\n            contributionRegistry.registerSchema(schemaId, this.configurationSchema);\r\n        }\r\n        Object.defineProperty(ConfigurationRegistry.prototype, \"onDidRegisterConfiguration\", {\r\n            get: function () {\r\n                return this._onDidRegisterConfiguration.event;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        ConfigurationRegistry.prototype.registerConfiguration = function (configuration) {\r\n            this.configurationContributors.push(configuration);\r\n            this.registerJSONConfiguration(configuration);\r\n            this._onDidRegisterConfiguration.fire(this);\r\n        };\r\n        ConfigurationRegistry.prototype.getConfigurations = function () {\r\n            return this.configurationContributors.slice(0);\r\n        };\r\n        ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {\r\n            var schema = objects.clone(configuration);\r\n            this.configurationSchema.allOf.push(schema);\r\n            contributionRegistry.registerSchema(schemaId, this.configurationSchema);\r\n        };\r\n        return ConfigurationRegistry;\r\n    }());\r\n    var configurationRegistry = new ConfigurationRegistry();\r\n    platform.Registry.add(exports.Extensions.Configuration, configurationRegistry);\r\n    var configurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('configuration', {\r\n        description: nls.localize(0, null),\r\n        type: 'object',\r\n        defaultSnippets: [{ body: { title: '', properties: {} } }],\r\n        properties: {\r\n            title: {\r\n                description: nls.localize(1, null),\r\n                type: 'string'\r\n            },\r\n            properties: {\r\n                description: nls.localize(2, null),\r\n                type: 'object',\r\n                additionalProperties: {\r\n                    $ref: 'http://json-schema.org/draft-04/schema#'\r\n                }\r\n            }\r\n        }\r\n    });\r\n    configurationExtPoint.setHandler(function (extensions) {\r\n        for (var i = 0; i < extensions.length; i++) {\r\n            var configuration = extensions[i].value;\r\n            var collector = extensions[i].collector;\r\n            if (configuration.type && configuration.type !== 'object') {\r\n                collector.warn(nls.localize(3, null));\r\n            }\r\n            else {\r\n                configuration.type = 'object';\r\n            }\r\n            if (configuration.title && (typeof configuration.title !== 'string')) {\r\n                collector.error(nls.localize(4, null));\r\n            }\r\n            if (configuration.properties && (typeof configuration.properties !== 'object')) {\r\n                collector.error(nls.localize(5, null));\r\n                return;\r\n            }\r\n            var clonedConfiguration = objects.clone(configuration);\r\n            clonedConfiguration.id = extensions[i].description.id;\r\n            configurationRegistry.registerConfiguration(clonedConfiguration);\r\n        }\r\n    });\r\n});\r\n\ndefine(\"vs/editor/common/modes/supports/suggestSupport\", [\"require\", \"exports\", 'vs/base/common/filters', 'vs/platform/configuration/common/configurationRegistry', 'vs/platform/platform', 'vs/nls!vs/editor/common/modes/supports/suggestSupport', 'vs/base/common/async'], function (require, exports, filters_1, configurationRegistry_1, platform_1, nls_1, async_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var TextualSuggestSupport = (function () {\r\n        function TextualSuggestSupport(editorWorkerService, configurationService) {\r\n            this._editorWorkerService = editorWorkerService;\r\n            this._configurationService = configurationService;\r\n        }\r\n        Object.defineProperty(TextualSuggestSupport.prototype, \"triggerCharacters\", {\r\n            /* tslint:enable */\r\n            get: function () {\r\n                return [];\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TextualSuggestSupport.prototype, \"shouldAutotriggerSuggest\", {\r\n            get: function () {\r\n                return true;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TextualSuggestSupport.prototype, \"filter\", {\r\n            get: function () {\r\n                return filters_1.matchesStrictPrefix;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        TextualSuggestSupport.prototype.provideCompletionItems = function (model, position, token) {\r\n            var config = this._configurationService.getConfiguration('editor');\r\n            if (!config || config.wordBasedSuggestions) {\r\n                return async_1.wireCancellationToken(token, this._editorWorkerService.textualSuggest(model.uri, position));\r\n            }\r\n            return [];\r\n        };\r\n        /* tslint:disable */\r\n        TextualSuggestSupport._c = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\r\n            type: 'object',\r\n            properties: {\r\n                'editor.wordBasedSuggestions': {\r\n                    'type': 'boolean',\r\n                    'description': nls_1.localize(0, null),\r\n                    'default': true\r\n                }\r\n            }\r\n        });\r\n        return TextualSuggestSupport;\r\n    }());\r\n    exports.TextualSuggestSupport = TextualSuggestSupport;\r\n    function filterSuggestions(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        // filter suggestions\r\n        var accept = filters_1.fuzzyContiguousFilter, result = [];\r\n        result.push({\r\n            currentWord: value.currentWord,\r\n            suggestions: value.suggestions.filter(function (element) { return !!accept(value.currentWord, element.label); }),\r\n            incomplete: value.incomplete\r\n        });\r\n        return result;\r\n    }\r\n    exports.filterSuggestions = filterSuggestions;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\ndefine(\"vs/editor/common/modes/abstractMode\", [\"require\", \"exports\", 'vs/base/common/eventEmitter', 'vs/base/common/winjs.base', 'vs/platform/instantiation/common/descriptors', 'vs/platform/instantiation/common/instantiation', 'vs/platform/configuration/common/configuration', 'vs/editor/common/modes', 'vs/editor/common/modes/nullMode', 'vs/editor/common/modes/supports/suggestSupport', 'vs/editor/common/services/editorWorkerService'], function (require, exports, eventEmitter_1, winjs_base_1, descriptors_1, instantiation_1, configuration_1, modes, nullMode_1, suggestSupport_1, editorWorkerService_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    function createWordRegExp(allowInWords) {\r\n        if (allowInWords === void 0) { allowInWords = ''; }\r\n        return nullMode_1.NullMode.createWordRegExp(allowInWords);\r\n    }\r\n    exports.createWordRegExp = createWordRegExp;\r\n    var ModeWorkerManager = (function () {\r\n        function ModeWorkerManager(descriptor, workerModuleId, workerClassName, superWorkerModuleId, instantiationService) {\r\n            this._descriptor = descriptor;\r\n            this._workerDescriptor = descriptors_1.createAsyncDescriptor1(workerModuleId, workerClassName);\r\n            this._superWorkerModuleId = superWorkerModuleId;\r\n            this._instantiationService = instantiationService;\r\n            this._workerPiecePromise = null;\r\n        }\r\n        ModeWorkerManager.prototype.worker = function (runner) {\r\n            return this._getOrCreateWorker().then(runner);\r\n        };\r\n        ModeWorkerManager.prototype._getOrCreateWorker = function () {\r\n            var _this = this;\r\n            if (!this._workerPiecePromise) {\r\n                // TODO@Alex: workaround for missing `bundles` config\r\n                // First, load the code of the worker super class\r\n                var superWorkerCodePromise = (this._superWorkerModuleId ? ModeWorkerManager._loadModule(this._superWorkerModuleId) : winjs_base_1.TPromise.as(null));\r\n                this._workerPiecePromise = superWorkerCodePromise.then(function () {\r\n                    // Second, load the code of the worker (without instantiating it)\r\n                    return ModeWorkerManager._loadModule(_this._workerDescriptor.moduleName);\r\n                }).then(function () {\r\n                    // Finally, create the mode worker instance\r\n                    return _this._instantiationService.createInstance(_this._workerDescriptor, _this._descriptor.id);\r\n                });\r\n            }\r\n            return this._workerPiecePromise;\r\n        };\r\n        ModeWorkerManager._loadModule = function (moduleName) {\r\n            return new winjs_base_1.TPromise(function (c, e, p) {\r\n                require([moduleName], c, e);\r\n            }, function () {\r\n                // Cannot cancel loading code\r\n            });\r\n        };\r\n        return ModeWorkerManager;\r\n    }());\r\n    exports.ModeWorkerManager = ModeWorkerManager;\r\n    var AbstractMode = (function () {\r\n        function AbstractMode(modeId) {\r\n            this._modeId = modeId;\r\n            this._eventEmitter = new eventEmitter_1.EventEmitter();\r\n            this._simplifiedMode = null;\r\n        }\r\n        AbstractMode.prototype.getId = function () {\r\n            return this._modeId;\r\n        };\r\n        AbstractMode.prototype.toSimplifiedMode = function () {\r\n            if (!this._simplifiedMode) {\r\n                this._simplifiedMode = new SimplifiedMode(this);\r\n            }\r\n            return this._simplifiedMode;\r\n        };\r\n        AbstractMode.prototype.addSupportChangedListener = function (callback) {\r\n            return this._eventEmitter.addListener2('modeSupportChanged', callback);\r\n        };\r\n        AbstractMode.prototype.registerSupport = function (supportEnum, callback) {\r\n            var _this = this;\r\n            var supportStr = modes.mutableSupportToString(supportEnum);\r\n            var supportImpl = callback(this);\r\n            this[supportStr] = supportImpl;\r\n            this._eventEmitter.emit('modeSupportChanged', _createModeSupportChangedEvent(supportEnum));\r\n            return {\r\n                dispose: function () {\r\n                    if (_this[supportStr] === supportImpl) {\r\n                        delete _this[supportStr];\r\n                        _this._eventEmitter.emit('modeSupportChanged', _createModeSupportChangedEvent(supportEnum));\r\n                    }\r\n                }\r\n            };\r\n        };\r\n        return AbstractMode;\r\n    }());\r\n    exports.AbstractMode = AbstractMode;\r\n    var SimplifiedMode = (function () {\r\n        function SimplifiedMode(sourceMode) {\r\n            var _this = this;\r\n            this._sourceMode = sourceMode;\r\n            this._eventEmitter = new eventEmitter_1.EventEmitter();\r\n            this._id = 'vs.editor.modes.simplifiedMode:' + sourceMode.getId();\r\n            this._assignSupports();\r\n            if (this._sourceMode.addSupportChangedListener) {\r\n                this._sourceMode.addSupportChangedListener(function (e) {\r\n                    _this._assignSupports();\r\n                    _this._eventEmitter.emit('modeSupportChanged', e);\r\n                });\r\n            }\r\n        }\r\n        SimplifiedMode.prototype.getId = function () {\r\n            return this._id;\r\n        };\r\n        SimplifiedMode.prototype.toSimplifiedMode = function () {\r\n            return this;\r\n        };\r\n        SimplifiedMode.prototype._assignSupports = function () {\r\n            this.tokenizationSupport = this._sourceMode.tokenizationSupport;\r\n            this.richEditSupport = this._sourceMode.richEditSupport;\r\n        };\r\n        return SimplifiedMode;\r\n    }());\r\n    exports.isDigit = (function () {\r\n        var _0 = '0'.charCodeAt(0), _1 = '1'.charCodeAt(0), _2 = '2'.charCodeAt(0), _3 = '3'.charCodeAt(0), _4 = '4'.charCodeAt(0), _5 = '5'.charCodeAt(0), _6 = '6'.charCodeAt(0), _7 = '7'.charCodeAt(0), _8 = '8'.charCodeAt(0), _9 = '9'.charCodeAt(0), _a = 'a'.charCodeAt(0), _b = 'b'.charCodeAt(0), _c = 'c'.charCodeAt(0), _d = 'd'.charCodeAt(0), _e = 'e'.charCodeAt(0), _f = 'f'.charCodeAt(0), _A = 'A'.charCodeAt(0), _B = 'B'.charCodeAt(0), _C = 'C'.charCodeAt(0), _D = 'D'.charCodeAt(0), _E = 'E'.charCodeAt(0), _F = 'F'.charCodeAt(0);\r\n        return function isDigit(character, base) {\r\n            var c = character.charCodeAt(0);\r\n            switch (base) {\r\n                case 1:\r\n                    return c === _0;\r\n                case 2:\r\n                    return c >= _0 && c <= _1;\r\n                case 3:\r\n                    return c >= _0 && c <= _2;\r\n                case 4:\r\n                    return c >= _0 && c <= _3;\r\n                case 5:\r\n                    return c >= _0 && c <= _4;\r\n                case 6:\r\n                    return c >= _0 && c <= _5;\r\n                case 7:\r\n                    return c >= _0 && c <= _6;\r\n                case 8:\r\n                    return c >= _0 && c <= _7;\r\n                case 9:\r\n                    return c >= _0 && c <= _8;\r\n                case 10:\r\n                    return c >= _0 && c <= _9;\r\n                case 11:\r\n                    return (c >= _0 && c <= _9) || (c === _a) || (c === _A);\r\n                case 12:\r\n                    return (c >= _0 && c <= _9) || (c >= _a && c <= _b) || (c >= _A && c <= _B);\r\n                case 13:\r\n                    return (c >= _0 && c <= _9) || (c >= _a && c <= _c) || (c >= _A && c <= _C);\r\n                case 14:\r\n                    return (c >= _0 && c <= _9) || (c >= _a && c <= _d) || (c >= _A && c <= _D);\r\n                case 15:\r\n                    return (c >= _0 && c <= _9) || (c >= _a && c <= _e) || (c >= _A && c <= _E);\r\n                default:\r\n                    return (c >= _0 && c <= _9) || (c >= _a && c <= _f) || (c >= _A && c <= _F);\r\n            }\r\n        };\r\n    })();\r\n    var FrankensteinMode = (function (_super) {\r\n        __extends(FrankensteinMode, _super);\r\n        function FrankensteinMode(descriptor, configurationService, editorWorkerService) {\r\n            _super.call(this, descriptor.id);\r\n            if (editorWorkerService) {\r\n                modes.SuggestRegistry.register(this.getId(), new suggestSupport_1.TextualSuggestSupport(editorWorkerService, configurationService), true);\r\n            }\r\n        }\r\n        FrankensteinMode = __decorate([\r\n            __param(1, configuration_1.IConfigurationService),\r\n            __param(2, instantiation_1.optional(editorWorkerService_1.IEditorWorkerService))\r\n        ], FrankensteinMode);\r\n        return FrankensteinMode;\r\n    }(AbstractMode));\r\n    exports.FrankensteinMode = FrankensteinMode;\r\n    function _createModeSupportChangedEvent(supportEnum) {\r\n        var e = {\r\n            richEditSupport: false,\r\n            tokenizationSupport: false\r\n        };\r\n        if (supportEnum === modes.MutableSupport.RichEditSupport) {\r\n            e.richEditSupport = true;\r\n            return e;\r\n        }\r\n        else if (supportEnum === modes.MutableSupport.TokenizationSupport) {\r\n            e.tokenizationSupport = true;\r\n            return e;\r\n        }\r\n        throw new Error('Illegal argument!');\r\n    }\r\n});\r\n\ndefine(\"vs/platform/extensions/common/abstractExtensionService\", [\"require\", \"exports\", 'vs/nls!vs/platform/extensions/common/abstractExtensionService', 'vs/base/common/severity', 'vs/base/common/winjs.base', 'vs/platform/extensions/common/extensions', 'vs/platform/extensions/common/extensionsRegistry'], function (require, exports, nls, severity_1, winjs_base_1, extensions_1, extensionsRegistry_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var hasOwnProperty = Object.hasOwnProperty;\r\n    var ActivatedExtension = (function () {\r\n        function ActivatedExtension(activationFailed) {\r\n            this.activationFailed = activationFailed;\r\n        }\r\n        return ActivatedExtension;\r\n    }());\r\n    exports.ActivatedExtension = ActivatedExtension;\r\n    var AbstractExtensionService = (function () {\r\n        function AbstractExtensionService(isReadyByDefault) {\r\n            var _this = this;\r\n            this.serviceId = extensions_1.IExtensionService;\r\n            if (isReadyByDefault) {\r\n                this._onReady = winjs_base_1.TPromise.as(true);\r\n                this._onReadyC = function (v) { };\r\n            }\r\n            else {\r\n                this._onReady = new winjs_base_1.TPromise(function (c, e, p) {\r\n                    _this._onReadyC = c;\r\n                }, function () {\r\n                    console.warn('You should really not try to cancel this ready promise!');\r\n                });\r\n            }\r\n            this._activatingExtensions = {};\r\n            this._activatedExtensions = {};\r\n        }\r\n        AbstractExtensionService.prototype._triggerOnReady = function () {\r\n            this._onReadyC(true);\r\n        };\r\n        AbstractExtensionService.prototype.onReady = function () {\r\n            return this._onReady;\r\n        };\r\n        AbstractExtensionService.prototype.getExtensionsStatus = function () {\r\n            return null;\r\n        };\r\n        AbstractExtensionService.prototype.isActivated = function (extensionId) {\r\n            return hasOwnProperty.call(this._activatedExtensions, extensionId);\r\n        };\r\n        AbstractExtensionService.prototype.activateByEvent = function (activationEvent) {\r\n            var _this = this;\r\n            return this._onReady.then(function () {\r\n                extensionsRegistry_1.ExtensionsRegistry.triggerActivationEventListeners(activationEvent);\r\n                var activateExtensions = extensionsRegistry_1.ExtensionsRegistry.getExtensionDescriptionsForActivationEvent(activationEvent);\r\n                return _this._activateExtensions(activateExtensions, 0);\r\n            });\r\n        };\r\n        AbstractExtensionService.prototype.activateById = function (extensionId) {\r\n            var _this = this;\r\n            return this._onReady.then(function () {\r\n                var desc = extensionsRegistry_1.ExtensionsRegistry.getExtensionDescription(extensionId);\r\n                if (!desc) {\r\n                    throw new Error('Extension `' + extensionId + '` is not known');\r\n                }\r\n                return _this._activateExtensions([desc], 0);\r\n            });\r\n        };\r\n        /**\r\n         * Handle semantics related to dependencies for `currentExtension`.\r\n         * semantics: `redExtensions` must wait for `greenExtensions`.\r\n         */\r\n        AbstractExtensionService.prototype._handleActivateRequest = function (currentExtension, greenExtensions, redExtensions) {\r\n            var depIds = (typeof currentExtension.extensionDependencies === 'undefined' ? [] : currentExtension.extensionDependencies);\r\n            var currentExtensionGetsGreenLight = true;\r\n            for (var j = 0, lenJ = depIds.length; j < lenJ; j++) {\r\n                var depId = depIds[j];\r\n                var depDesc = extensionsRegistry_1.ExtensionsRegistry.getExtensionDescription(depId);\r\n                if (!depDesc) {\r\n                    // Error condition 1: unknown dependency\r\n                    this._showMessage(severity_1.default.Error, nls.localize(0, null, depId, currentExtension.id));\r\n                    this._activatedExtensions[currentExtension.id] = this._createFailedExtension();\r\n                    return;\r\n                }\r\n                if (hasOwnProperty.call(this._activatedExtensions, depId)) {\r\n                    var dep = this._activatedExtensions[depId];\r\n                    if (dep.activationFailed) {\r\n                        // Error condition 2: a dependency has already failed activation\r\n                        this._showMessage(severity_1.default.Error, nls.localize(1, null, depId, currentExtension.id));\r\n                        this._activatedExtensions[currentExtension.id] = this._createFailedExtension();\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    // must first wait for the dependency to activate\r\n                    currentExtensionGetsGreenLight = false;\r\n                    greenExtensions[depId] = depDesc;\r\n                }\r\n            }\r\n            if (currentExtensionGetsGreenLight) {\r\n                greenExtensions[currentExtension.id] = currentExtension;\r\n            }\r\n            else {\r\n                redExtensions.push(currentExtension);\r\n            }\r\n        };\r\n        AbstractExtensionService.prototype._activateExtensions = function (extensionDescriptions, recursionLevel) {\r\n            var _this = this;\r\n            // console.log(recursionLevel, '_activateExtensions: ', extensionDescriptions.map(p => p.id));\r\n            if (extensionDescriptions.length === 0) {\r\n                return winjs_base_1.TPromise.as(void 0);\r\n            }\r\n            extensionDescriptions = extensionDescriptions.filter(function (p) { return !hasOwnProperty.call(_this._activatedExtensions, p.id); });\r\n            if (extensionDescriptions.length === 0) {\r\n                return winjs_base_1.TPromise.as(void 0);\r\n            }\r\n            if (recursionLevel > 10) {\r\n                // More than 10 dependencies deep => most likely a dependency loop\r\n                for (var i = 0, len = extensionDescriptions.length; i < len; i++) {\r\n                    // Error condition 3: dependency loop\r\n                    this._showMessage(severity_1.default.Error, nls.localize(2, null, extensionDescriptions[i].id));\r\n                    this._activatedExtensions[extensionDescriptions[i].id] = this._createFailedExtension();\r\n                }\r\n                return winjs_base_1.TPromise.as(void 0);\r\n            }\r\n            var greenMap = Object.create(null), red = [];\r\n            for (var i = 0, len = extensionDescriptions.length; i < len; i++) {\r\n                this._handleActivateRequest(extensionDescriptions[i], greenMap, red);\r\n            }\r\n            // Make sure no red is also green\r\n            for (var i = 0, len = red.length; i < len; i++) {\r\n                if (greenMap[red[i].id]) {\r\n                    delete greenMap[red[i].id];\r\n                }\r\n            }\r\n            var green = Object.keys(greenMap).map(function (id) { return greenMap[id]; });\r\n            // console.log('greenExtensions: ', green.map(p => p.id));\r\n            // console.log('redExtensions: ', red.map(p => p.id));\r\n            if (red.length === 0) {\r\n                // Finally reached only leafs!\r\n                return winjs_base_1.TPromise.join(green.map(function (p) { return _this._activateExtension(p); })).then(function (_) { return void 0; });\r\n            }\r\n            return this._activateExtensions(green, recursionLevel + 1).then(function (_) {\r\n                return _this._activateExtensions(red, recursionLevel + 1);\r\n            });\r\n        };\r\n        AbstractExtensionService.prototype._activateExtension = function (extensionDescription) {\r\n            var _this = this;\r\n            if (hasOwnProperty.call(this._activatedExtensions, extensionDescription.id)) {\r\n                return winjs_base_1.TPromise.as(void 0);\r\n            }\r\n            if (hasOwnProperty.call(this._activatingExtensions, extensionDescription.id)) {\r\n                return this._activatingExtensions[extensionDescription.id];\r\n            }\r\n            this._activatingExtensions[extensionDescription.id] = this._actualActivateExtension(extensionDescription).then(null, function (err) {\r\n                _this._showMessage(severity_1.default.Error, nls.localize(3, null, extensionDescription.id, err.message));\r\n                console.error('Activating extension `' + extensionDescription.id + '` failed: ', err.message);\r\n                console.log('Here is the error stack: ', err.stack);\r\n                // Treat the extension as being empty\r\n                return _this._createFailedExtension();\r\n            }).then(function (x) {\r\n                _this._activatedExtensions[extensionDescription.id] = x;\r\n                delete _this._activatingExtensions[extensionDescription.id];\r\n            });\r\n            return this._activatingExtensions[extensionDescription.id];\r\n        };\r\n        return AbstractExtensionService;\r\n    }());\r\n    exports.AbstractExtensionService = AbstractExtensionService;\r\n});\r\n\ndefine(\"vs/platform/request/common/request\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IRequestService = instantiation_1.createDecorator('requestService');\r\n});\r\n\ndefine(\"vs/platform/telemetry/common/telemetry\", [\"require\", \"exports\", 'vs/base/common/winjs.base', 'vs/base/common/timer', 'vs/platform/instantiation/common/instantiation'], function (require, exports, winjs_base_1, timer_1, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.ITelemetryService = instantiation_1.createDecorator('telemetryService');\r\n    exports.NullTelemetryService = {\r\n        serviceId: undefined,\r\n        timedPublicLog: function (name, data) { return timer_1.nullEvent; },\r\n        publicLog: function (eventName, data) { },\r\n        isOptedIn: true,\r\n        getTelemetryInfo: function () {\r\n            return winjs_base_1.TPromise.as({\r\n                instanceId: 'someValue.instanceId',\r\n                sessionId: 'someValue.sessionId',\r\n                machineId: 'someValue.machineId'\r\n            });\r\n        }\r\n    };\r\n    // --- util\r\n    function anonymize(input) {\r\n        if (!input) {\r\n            return input;\r\n        }\r\n        var r = '';\r\n        for (var i = 0; i < input.length; i++) {\r\n            var ch = input[i];\r\n            if (ch >= '0' && ch <= '9') {\r\n                r += '0';\r\n                continue;\r\n            }\r\n            if (ch >= 'a' && ch <= 'z') {\r\n                r += 'a';\r\n                continue;\r\n            }\r\n            if (ch >= 'A' && ch <= 'Z') {\r\n                r += 'A';\r\n                continue;\r\n            }\r\n            r += ch;\r\n        }\r\n        return r;\r\n    }\r\n    exports.anonymize = anonymize;\r\n});\r\n\ndefine(\"vs/platform/request/common/baseRequestService\", [\"require\", \"exports\", 'vs/base/common/uri', 'vs/base/common/winjs.base', 'vs/base/common/strings', 'vs/base/common/timer', 'vs/base/common/async', 'vs/base/common/objects', 'vs/platform/request/common/request', 'vs/platform/telemetry/common/telemetry'], function (require, exports, uri_1, winjs_base_1, strings, Timer, Async, objects, request_1, telemetry_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * Simple IRequestService implementation to allow sharing of this service implementation\r\n     * between different layers of the platform.\r\n     */\r\n    var BaseRequestService = (function () {\r\n        function BaseRequestService(contextService, telemetryService) {\r\n            if (telemetryService === void 0) { telemetryService = telemetry_1.NullTelemetryService; }\r\n            this.serviceId = request_1.IRequestService;\r\n            var workspaceUri = null;\r\n            var workspace = contextService.getWorkspace();\r\n            this._serviceMap = workspace || Object.create(null);\r\n            this._telemetryService = telemetryService;\r\n            if (workspace) {\r\n                workspaceUri = strings.rtrim(workspace.resource.toString(), '/') + '/';\r\n            }\r\n            this.computeOrigin(workspaceUri);\r\n        }\r\n        BaseRequestService.prototype.computeOrigin = function (workspaceUri) {\r\n            if (workspaceUri) {\r\n                // Find root server URL from configuration\r\n                this._origin = workspaceUri;\r\n                var urlPath = uri_1.default.parse(this._origin).path;\r\n                if (urlPath && urlPath.length > 0) {\r\n                    this._origin = this._origin.substring(0, this._origin.length - urlPath.length + 1);\r\n                }\r\n                if (!strings.endsWith(this._origin, '/')) {\r\n                    this._origin += '/';\r\n                }\r\n            }\r\n            else {\r\n                this._origin = '/'; // Configuration not provided, fallback to default\r\n            }\r\n        };\r\n        BaseRequestService.prototype.makeCrossOriginRequest = function (options) {\r\n            return null;\r\n        };\r\n        BaseRequestService.prototype.makeRequest = function (options) {\r\n            var timer = Timer.nullEvent;\r\n            var isXhrRequestCORS = false;\r\n            var url = options.url;\r\n            if (!url) {\r\n                throw new Error('IRequestService.makeRequest: Url is required');\r\n            }\r\n            if ((strings.startsWith(url, 'http://') || strings.startsWith(url, 'https://')) && this._origin && !strings.startsWith(url, this._origin)) {\r\n                var coPromise = this.makeCrossOriginRequest(options);\r\n                if (coPromise) {\r\n                    return coPromise;\r\n                }\r\n                isXhrRequestCORS = true;\r\n            }\r\n            var xhrOptions = options;\r\n            var xhrOptionsPromise = winjs_base_1.TPromise.as(undefined);\r\n            if (!isXhrRequestCORS) {\r\n                xhrOptions = this._telemetryService.getTelemetryInfo().then(function (info) {\r\n                    var additionalHeaders = {};\r\n                    additionalHeaders['X-TelemetrySession'] = info.sessionId;\r\n                    additionalHeaders['X-Requested-With'] = 'XMLHttpRequest';\r\n                    xhrOptions.headers = objects.mixin(xhrOptions.headers, additionalHeaders);\r\n                });\r\n            }\r\n            if (options.timeout) {\r\n                xhrOptions.customRequestInitializer = function (xhrRequest) {\r\n                    xhrRequest.timeout = options.timeout;\r\n                };\r\n            }\r\n            return xhrOptionsPromise.then(function () {\r\n                return Async.always(winjs_base_1.xhr(xhrOptions), (function (xhr) {\r\n                    if (timer.data) {\r\n                        timer.data.status = xhr.status;\r\n                    }\r\n                    timer.stop();\r\n                }));\r\n            });\r\n        };\r\n        return BaseRequestService;\r\n    }());\r\n    exports.BaseRequestService = BaseRequestService;\r\n});\r\n\ndefine(\"vs/platform/thread/common/thread\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // --- thread service (web workers)\r\n    exports.IThreadService = instantiation.createDecorator('threadService');\r\n    var IRemotableCtorMap = (function () {\r\n        function IRemotableCtorMap() {\r\n        }\r\n        return IRemotableCtorMap;\r\n    }());\r\n    exports.IRemotableCtorMap = IRemotableCtorMap;\r\n    var IRemotableCtorAffinityMap = (function () {\r\n        function IRemotableCtorAffinityMap() {\r\n        }\r\n        return IRemotableCtorAffinityMap;\r\n    }());\r\n    exports.IRemotableCtorAffinityMap = IRemotableCtorAffinityMap;\r\n    var Remotable = (function () {\r\n        function Remotable() {\r\n        }\r\n        Remotable.getId = function (ctor) {\r\n            return (ctor[Remotable.PROP_NAME] || null);\r\n        };\r\n        Remotable.MainContext = function (identifier) {\r\n            return function (target) {\r\n                Remotable._ensureUnique(identifier);\r\n                Remotable.Registry.MainContext[identifier] = target;\r\n                target[Remotable.PROP_NAME] = identifier;\r\n            };\r\n        };\r\n        Remotable.ExtHostContext = function (identifier) {\r\n            return function (target) {\r\n                Remotable._ensureUnique(identifier);\r\n                Remotable.Registry.ExtHostContext[identifier] = target;\r\n                target[Remotable.PROP_NAME] = identifier;\r\n            };\r\n        };\r\n        Remotable.WorkerContext = function (identifier, whichWorker) {\r\n            return function (target) {\r\n                Remotable._ensureUnique(identifier);\r\n                Remotable.Registry.WorkerContext[identifier] = {\r\n                    ctor: target,\r\n                    affinity: whichWorker\r\n                };\r\n                target[Remotable.PROP_NAME] = identifier;\r\n            };\r\n        };\r\n        Remotable._ensureUnique = function (identifier) {\r\n            if (Remotable.Registry.MainContext[identifier] || Remotable.Registry.ExtHostContext[identifier] || Remotable.Registry.WorkerContext[identifier]) {\r\n                throw new Error('Duplicate Remotable identifier found');\r\n            }\r\n        };\r\n        Remotable.PROP_NAME = '$__REMOTABLE_ID';\r\n        Remotable.Registry = {\r\n            MainContext: Object.create(null),\r\n            ExtHostContext: Object.create(null),\r\n            WorkerContext: Object.create(null),\r\n        };\r\n        return Remotable;\r\n    }());\r\n    exports.Remotable = Remotable;\r\n    (function (ThreadAffinity) {\r\n        ThreadAffinity[ThreadAffinity[\"None\"] = 0] = \"None\";\r\n        ThreadAffinity[ThreadAffinity[\"Group1\"] = 1] = \"Group1\";\r\n        ThreadAffinity[ThreadAffinity[\"Group2\"] = 2] = \"Group2\";\r\n        ThreadAffinity[ThreadAffinity[\"Group3\"] = 3] = \"Group3\";\r\n        ThreadAffinity[ThreadAffinity[\"Group4\"] = 4] = \"Group4\";\r\n        ThreadAffinity[ThreadAffinity[\"Group5\"] = 5] = \"Group5\";\r\n        ThreadAffinity[ThreadAffinity[\"Group6\"] = 6] = \"Group6\";\r\n        ThreadAffinity[ThreadAffinity[\"Group7\"] = 7] = \"Group7\";\r\n        ThreadAffinity[ThreadAffinity[\"Group8\"] = 8] = \"Group8\";\r\n        ThreadAffinity[ThreadAffinity[\"Group9\"] = 9] = \"Group9\";\r\n        ThreadAffinity[ThreadAffinity[\"All\"] = 10] = \"All\";\r\n    })(exports.ThreadAffinity || (exports.ThreadAffinity = {}));\r\n    var ThreadAffinity = exports.ThreadAffinity;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\ndefine(\"vs/editor/common/services/modeServiceImpl\", [\"require\", \"exports\", 'vs/nls!vs/editor/common/services/modeServiceImpl', 'vs/base/common/errors', 'vs/base/common/event', 'vs/base/common/lifecycle', 'vs/base/common/objects', 'vs/base/common/paths', 'vs/base/common/winjs.base', 'vs/base/common/mime', 'vs/platform/instantiation/common/descriptors', 'vs/platform/extensions/common/extensionsRegistry', 'vs/platform/thread/common/thread', 'vs/editor/common/modes', 'vs/editor/common/modes/abstractMode', 'vs/editor/common/modes/modesRegistry', 'vs/editor/common/modes/monarch/monarchCompile', 'vs/editor/common/modes/monarch/monarchDefinition', 'vs/editor/common/modes/monarch/monarchLexer', 'vs/editor/common/modes/supports/richEditSupport', 'vs/editor/common/services/languagesRegistry', 'vs/editor/common/services/modeService', 'vs/editor/common/modes/abstractState', 'vs/editor/common/modes/supports'], function (require, exports, nls, errors_1, event_1, lifecycle_1, objects, paths, winjs_base_1, mime, descriptors_1, extensionsRegistry_1, thread_1, modes, abstractMode_1, modesRegistry_1, monarchCompile_1, monarchDefinition_1, monarchLexer_1, richEditSupport_1, languagesRegistry_1, modeService_1, abstractState_1, supports_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var languagesExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('languages', {\r\n        description: nls.localize(0, null),\r\n        type: 'array',\r\n        defaultSnippets: [{ body: [{ id: '', aliases: [], extensions: [] }] }],\r\n        items: {\r\n            type: 'object',\r\n            defaultSnippets: [{ body: { id: '', extensions: [] } }],\r\n            properties: {\r\n                id: {\r\n                    description: nls.localize(1, null),\r\n                    type: 'string'\r\n                },\r\n                aliases: {\r\n                    description: nls.localize(2, null),\r\n                    type: 'array',\r\n                    items: {\r\n                        type: 'string'\r\n                    }\r\n                },\r\n                extensions: {\r\n                    description: nls.localize(3, null),\r\n                    default: ['.foo'],\r\n                    type: 'array',\r\n                    items: {\r\n                        type: 'string'\r\n                    }\r\n                },\r\n                filenames: {\r\n                    description: nls.localize(4, null),\r\n                    type: 'array',\r\n                    items: {\r\n                        type: 'string'\r\n                    }\r\n                },\r\n                filenamePatterns: {\r\n                    description: nls.localize(5, null),\r\n                    type: 'array',\r\n                    items: {\r\n                        type: 'string'\r\n                    }\r\n                },\r\n                mimetypes: {\r\n                    description: nls.localize(6, null),\r\n                    type: 'array',\r\n                    items: {\r\n                        type: 'string'\r\n                    }\r\n                },\r\n                firstLine: {\r\n                    description: nls.localize(7, null),\r\n                    type: 'string'\r\n                },\r\n                configuration: {\r\n                    description: nls.localize(8, null),\r\n                    type: 'string'\r\n                }\r\n            }\r\n        }\r\n    });\r\n    function isUndefinedOrStringArray(value) {\r\n        if (typeof value === 'undefined') {\r\n            return true;\r\n        }\r\n        if (!Array.isArray(value)) {\r\n            return false;\r\n        }\r\n        return value.every(function (item) { return typeof item === 'string'; });\r\n    }\r\n    function isValidLanguageExtensionPoint(value, collector) {\r\n        if (!value) {\r\n            collector.error(nls.localize(9, null, languagesExtPoint.name));\r\n            return false;\r\n        }\r\n        if (typeof value.id !== 'string') {\r\n            collector.error(nls.localize(10, null, 'id'));\r\n            return false;\r\n        }\r\n        if (!isUndefinedOrStringArray(value.extensions)) {\r\n            collector.error(nls.localize(11, null, 'extensions'));\r\n            return false;\r\n        }\r\n        if (!isUndefinedOrStringArray(value.filenames)) {\r\n            collector.error(nls.localize(12, null, 'filenames'));\r\n            return false;\r\n        }\r\n        if (typeof value.firstLine !== 'undefined' && typeof value.firstLine !== 'string') {\r\n            collector.error(nls.localize(13, null, 'firstLine'));\r\n            return false;\r\n        }\r\n        if (typeof value.configuration !== 'undefined' && typeof value.configuration !== 'string') {\r\n            collector.error(nls.localize(14, null, 'configuration'));\r\n            return false;\r\n        }\r\n        if (!isUndefinedOrStringArray(value.aliases)) {\r\n            collector.error(nls.localize(15, null, 'aliases'));\r\n            return false;\r\n        }\r\n        if (!isUndefinedOrStringArray(value.mimetypes)) {\r\n            collector.error(nls.localize(16, null, 'mimetypes'));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    var ModeServiceImpl = (function () {\r\n        function ModeServiceImpl(threadService, extensionService) {\r\n            var _this = this;\r\n            this.serviceId = modeService_1.IModeService;\r\n            this._onDidAddModes = new event_1.Emitter();\r\n            this.onDidAddModes = this._onDidAddModes.event;\r\n            this._onDidCreateMode = new event_1.Emitter();\r\n            this.onDidCreateMode = this._onDidCreateMode.event;\r\n            this._threadService = threadService;\r\n            this._extensionService = extensionService;\r\n            this._activationPromises = {};\r\n            this._instantiatedModes = {};\r\n            this._config = {};\r\n            this._registry = new languagesRegistry_1.LanguagesRegistry();\r\n            this._registry.onDidAddModes(function (modes) { return _this._onDidAddModes.fire(modes); });\r\n        }\r\n        ModeServiceImpl.prototype.getConfigurationForMode = function (modeId) {\r\n            return this._config[modeId] || {};\r\n        };\r\n        ModeServiceImpl.prototype.configureMode = function (mimetype, options) {\r\n            var modeId = this.getModeId(mimetype);\r\n            if (modeId) {\r\n                this.configureModeById(modeId, options);\r\n            }\r\n        };\r\n        ModeServiceImpl.prototype.configureModeById = function (modeId, options) {\r\n            var previousOptions = this._config[modeId] || {};\r\n            var newOptions = objects.mixin(objects.clone(previousOptions), options);\r\n            if (objects.equals(previousOptions, newOptions)) {\r\n                // This configure call is a no-op\r\n                return;\r\n            }\r\n            this._config[modeId] = newOptions;\r\n            var mode = this.getMode(modeId);\r\n            if (mode && mode.configSupport) {\r\n                mode.configSupport.configure(this.getConfigurationForMode(modeId));\r\n            }\r\n        };\r\n        ModeServiceImpl.prototype.configureAllModes = function (config) {\r\n            var _this = this;\r\n            if (!config) {\r\n                return;\r\n            }\r\n            var modes = this._registry.getRegisteredModes();\r\n            modes.forEach(function (modeIdentifier) {\r\n                var configuration = config[modeIdentifier];\r\n                _this.configureModeById(modeIdentifier, configuration);\r\n            });\r\n        };\r\n        ModeServiceImpl.prototype.isRegisteredMode = function (mimetypeOrModeId) {\r\n            return this._registry.isRegisteredMode(mimetypeOrModeId);\r\n        };\r\n        ModeServiceImpl.prototype.isCompatMode = function (modeId) {\r\n            var compatModeData = this._registry.getCompatMode(modeId);\r\n            return (compatModeData ? true : false);\r\n        };\r\n        ModeServiceImpl.prototype.getRegisteredModes = function () {\r\n            return this._registry.getRegisteredModes();\r\n        };\r\n        ModeServiceImpl.prototype.getRegisteredLanguageNames = function () {\r\n            return this._registry.getRegisteredLanguageNames();\r\n        };\r\n        ModeServiceImpl.prototype.getExtensions = function (alias) {\r\n            return this._registry.getExtensions(alias);\r\n        };\r\n        ModeServiceImpl.prototype.getMimeForMode = function (modeId) {\r\n            return this._registry.getMimeForMode(modeId);\r\n        };\r\n        ModeServiceImpl.prototype.getLanguageName = function (modeId) {\r\n            return this._registry.getLanguageName(modeId);\r\n        };\r\n        ModeServiceImpl.prototype.getModeIdForLanguageName = function (alias) {\r\n            return this._registry.getModeIdForLanguageNameLowercase(alias);\r\n        };\r\n        ModeServiceImpl.prototype.getModeId = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n            var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n            if (modeIds.length > 0) {\r\n                return modeIds[0];\r\n            }\r\n            return null;\r\n        };\r\n        ModeServiceImpl.prototype.getConfigurationFiles = function (modeId) {\r\n            return this._registry.getConfigurationFiles(modeId);\r\n        };\r\n        // --- instantiation\r\n        ModeServiceImpl.prototype.lookup = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n            var r = [];\r\n            var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n            for (var i = 0; i < modeIds.length; i++) {\r\n                var modeId = modeIds[i];\r\n                r.push({\r\n                    modeId: modeId,\r\n                    isInstantiated: this._instantiatedModes.hasOwnProperty(modeId)\r\n                });\r\n            }\r\n            return r;\r\n        };\r\n        ModeServiceImpl.prototype.getMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n            var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n            var isPlainText = false;\r\n            for (var i = 0; i < modeIds.length; i++) {\r\n                if (this._instantiatedModes.hasOwnProperty(modeIds[i])) {\r\n                    return this._instantiatedModes[modeIds[i]];\r\n                }\r\n                isPlainText = isPlainText || (modeIds[i] === 'plaintext');\r\n            }\r\n            if (isPlainText) {\r\n                // Try to do it synchronously\r\n                var r = null;\r\n                this.getOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds).then(function (mode) {\r\n                    r = mode;\r\n                }).done(null, errors_1.onUnexpectedError);\r\n                return r;\r\n            }\r\n        };\r\n        ModeServiceImpl.prototype.getModeIdByLanguageName = function (languageName) {\r\n            var modeIds = this._registry.getModeIdsFromLanguageName(languageName);\r\n            if (modeIds.length > 0) {\r\n                return modeIds[0];\r\n            }\r\n            return null;\r\n        };\r\n        ModeServiceImpl.prototype.getModeIdByFilenameOrFirstLine = function (filename, firstLine) {\r\n            var modeIds = this._registry.getModeIdsFromFilenameOrFirstLine(filename, firstLine);\r\n            if (modeIds.length > 0) {\r\n                return modeIds[0];\r\n            }\r\n            return null;\r\n        };\r\n        ModeServiceImpl.prototype.onReady = function () {\r\n            return this._extensionService.onReady();\r\n        };\r\n        ModeServiceImpl.prototype.getOrCreateMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n            var _this = this;\r\n            return this.onReady().then(function () {\r\n                var modeId = _this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n                // Fall back to plain text if no mode was found\r\n                return _this._getOrCreateMode(modeId || 'plaintext');\r\n            });\r\n        };\r\n        ModeServiceImpl.prototype.getOrCreateModeByLanguageName = function (languageName) {\r\n            var _this = this;\r\n            return this.onReady().then(function () {\r\n                var modeId = _this.getModeIdByLanguageName(languageName);\r\n                // Fall back to plain text if no mode was found\r\n                return _this._getOrCreateMode(modeId || 'plaintext');\r\n            });\r\n        };\r\n        ModeServiceImpl.prototype.getOrCreateModeByFilenameOrFirstLine = function (filename, firstLine) {\r\n            var _this = this;\r\n            return this.onReady().then(function () {\r\n                var modeId = _this.getModeIdByFilenameOrFirstLine(filename, firstLine);\r\n                // Fall back to plain text if no mode was found\r\n                return _this._getOrCreateMode(modeId || 'plaintext');\r\n            });\r\n        };\r\n        ModeServiceImpl.prototype._getOrCreateMode = function (modeId) {\r\n            var _this = this;\r\n            if (this._instantiatedModes.hasOwnProperty(modeId)) {\r\n                return winjs_base_1.TPromise.as(this._instantiatedModes[modeId]);\r\n            }\r\n            if (this._activationPromises.hasOwnProperty(modeId)) {\r\n                return this._activationPromises[modeId];\r\n            }\r\n            var c, e;\r\n            var promise = new winjs_base_1.TPromise(function (cc, ee, pp) { c = cc; e = ee; });\r\n            this._activationPromises[modeId] = promise;\r\n            this._createMode(modeId).then(function (mode) {\r\n                _this._instantiatedModes[modeId] = mode;\r\n                delete _this._activationPromises[modeId];\r\n                _this._onDidCreateMode.fire(mode);\r\n                _this._extensionService.activateByEvent(\"onLanguage:\" + modeId).done(null, errors_1.onUnexpectedError);\r\n                return _this._instantiatedModes[modeId];\r\n            }).then(c, e);\r\n            return promise;\r\n        };\r\n        ModeServiceImpl.prototype._createMode = function (modeId) {\r\n            var _this = this;\r\n            var modeDescriptor = this._createModeDescriptor(modeId);\r\n            var compatModeData = this._registry.getCompatMode(modeId);\r\n            if (compatModeData) {\r\n                // This is a compatibility mode\r\n                var compatModeAsyncDescriptor = descriptors_1.createAsyncDescriptor1(compatModeData.moduleId, compatModeData.ctorName);\r\n                return this._threadService.createInstance(compatModeAsyncDescriptor, modeDescriptor).then(function (compatMode) {\r\n                    if (compatMode.configSupport) {\r\n                        compatMode.configSupport.configure(_this.getConfigurationForMode(modeId));\r\n                    }\r\n                    return compatMode;\r\n                });\r\n            }\r\n            return winjs_base_1.TPromise.as(this._threadService.createInstance(abstractMode_1.FrankensteinMode, modeDescriptor));\r\n        };\r\n        ModeServiceImpl.prototype._createModeDescriptor = function (modeId) {\r\n            return {\r\n                id: modeId\r\n            };\r\n        };\r\n        ModeServiceImpl.prototype._registerModeSupport = function (mode, support, callback) {\r\n            if (mode.registerSupport) {\r\n                return mode.registerSupport(support, callback);\r\n            }\r\n            else {\r\n                console.warn('Cannot register support ' + modes.mutableSupportToString(support) + ' on mode ' + mode.getId() + ' because it does not support it.');\r\n                return lifecycle_1.empty;\r\n            }\r\n        };\r\n        ModeServiceImpl.prototype.registerModeSupport = function (modeId, support, callback) {\r\n            var _this = this;\r\n            if (this._instantiatedModes.hasOwnProperty(modeId)) {\r\n                return this._registerModeSupport(this._instantiatedModes[modeId], support, callback);\r\n            }\r\n            var cc;\r\n            var promise = new winjs_base_1.TPromise(function (c, e) { cc = c; });\r\n            var disposable = this.onDidCreateMode(function (mode) {\r\n                if (mode.getId() !== modeId) {\r\n                    return;\r\n                }\r\n                cc(_this._registerModeSupport(mode, support, callback));\r\n                disposable.dispose();\r\n            });\r\n            return {\r\n                dispose: function () {\r\n                    promise.done(function (disposable) { return disposable.dispose(); }, null);\r\n                }\r\n            };\r\n        };\r\n        ModeServiceImpl.prototype.doRegisterMonarchDefinition = function (modeId, lexer) {\r\n            var _this = this;\r\n            return lifecycle_1.combinedDisposable(this.registerTokenizationSupport(modeId, function (mode) {\r\n                return monarchLexer_1.createTokenizationSupport(_this, mode, lexer);\r\n            }), this.registerRichEditSupport(modeId, monarchDefinition_1.createRichEditSupport(lexer)));\r\n        };\r\n        ModeServiceImpl.prototype.registerMonarchDefinition = function (modelService, editorWorkerService, modeId, language) {\r\n            var lexer = monarchCompile_1.compile(objects.clone(language));\r\n            return this.doRegisterMonarchDefinition(modeId, lexer);\r\n        };\r\n        ModeServiceImpl.prototype.registerRichEditSupport = function (modeId, support) {\r\n            return this.registerModeSupport(modeId, modes.MutableSupport.RichEditSupport, function (mode) { return new richEditSupport_1.RichEditSupport(modeId, mode.richEditSupport, support); });\r\n        };\r\n        ModeServiceImpl.prototype.registerTokenizationSupport = function (modeId, callback) {\r\n            return this.registerModeSupport(modeId, modes.MutableSupport.TokenizationSupport, callback);\r\n        };\r\n        ModeServiceImpl.prototype.registerTokenizationSupport2 = function (modeId, support) {\r\n            return this.registerModeSupport(modeId, modes.MutableSupport.TokenizationSupport, function (mode) {\r\n                return new TokenizationSupport2Adapter(mode, support);\r\n            });\r\n        };\r\n        return ModeServiceImpl;\r\n    }());\r\n    exports.ModeServiceImpl = ModeServiceImpl;\r\n    var TokenizationState2Adapter = (function () {\r\n        function TokenizationState2Adapter(mode, actual, stateData) {\r\n            this._mode = mode;\r\n            this._actual = actual;\r\n            this._stateData = stateData;\r\n        }\r\n        Object.defineProperty(TokenizationState2Adapter.prototype, \"actual\", {\r\n            get: function () { return this._actual; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        TokenizationState2Adapter.prototype.clone = function () {\r\n            return new TokenizationState2Adapter(this._mode, this._actual.clone(), abstractState_1.AbstractState.safeClone(this._stateData));\r\n        };\r\n        TokenizationState2Adapter.prototype.equals = function (other) {\r\n            if (other instanceof TokenizationState2Adapter) {\r\n                if (!this._actual.equals(other._actual)) {\r\n                    return false;\r\n                }\r\n                return abstractState_1.AbstractState.safeEquals(this._stateData, other._stateData);\r\n            }\r\n            return false;\r\n        };\r\n        TokenizationState2Adapter.prototype.getMode = function () {\r\n            return this._mode;\r\n        };\r\n        TokenizationState2Adapter.prototype.tokenize = function (stream) {\r\n            throw new Error('Unexpected tokenize call!');\r\n        };\r\n        TokenizationState2Adapter.prototype.getStateData = function () {\r\n            return this._stateData;\r\n        };\r\n        TokenizationState2Adapter.prototype.setStateData = function (stateData) {\r\n            this._stateData = stateData;\r\n        };\r\n        return TokenizationState2Adapter;\r\n    }());\r\n    exports.TokenizationState2Adapter = TokenizationState2Adapter;\r\n    var TokenizationSupport2Adapter = (function () {\r\n        function TokenizationSupport2Adapter(mode, actual) {\r\n            this.shouldGenerateEmbeddedModels = false;\r\n            this._mode = mode;\r\n            this._actual = actual;\r\n        }\r\n        TokenizationSupport2Adapter.prototype.getInitialState = function () {\r\n            return new TokenizationState2Adapter(this._mode, this._actual.getInitialState(), null);\r\n        };\r\n        TokenizationSupport2Adapter.prototype.tokenize = function (line, state, offsetDelta, stopAtOffset) {\r\n            if (offsetDelta === void 0) { offsetDelta = 0; }\r\n            if (state instanceof TokenizationState2Adapter) {\r\n                var actualResult = this._actual.tokenize(line, state.actual);\r\n                var tokens_1 = [];\r\n                actualResult.tokens.forEach(function (t) {\r\n                    if (typeof t.scopes === 'string') {\r\n                        tokens_1.push(new supports_1.Token(t.startIndex + offsetDelta, t.scopes));\r\n                    }\r\n                    else if (Array.isArray(t.scopes) && t.scopes.length === 1) {\r\n                        tokens_1.push(new supports_1.Token(t.startIndex + offsetDelta, t.scopes[0]));\r\n                    }\r\n                    else {\r\n                        throw new Error('Only token scopes as strings or of precisely 1 length are supported at this time!');\r\n                    }\r\n                });\r\n                return {\r\n                    tokens: tokens_1,\r\n                    actualStopOffset: offsetDelta + line.length,\r\n                    endState: new TokenizationState2Adapter(state.getMode(), actualResult.endState, state.getStateData()),\r\n                    modeTransitions: [{ startIndex: offsetDelta, mode: state.getMode() }],\r\n                };\r\n            }\r\n            throw new Error('Unexpected state to tokenize with!');\r\n        };\r\n        return TokenizationSupport2Adapter;\r\n    }());\r\n    exports.TokenizationSupport2Adapter = TokenizationSupport2Adapter;\r\n    var MainThreadModeServiceImpl = (function (_super) {\r\n        __extends(MainThreadModeServiceImpl, _super);\r\n        function MainThreadModeServiceImpl(threadService, extensionService, configurationService) {\r\n            var _this = this;\r\n            _super.call(this, threadService, extensionService);\r\n            this._configurationService = configurationService;\r\n            this._hasInitialized = false;\r\n            languagesExtPoint.setHandler(function (extensions) {\r\n                var allValidLanguages = [];\r\n                for (var i = 0, len = extensions.length; i < len; i++) {\r\n                    var extension = extensions[i];\r\n                    if (!Array.isArray(extension.value)) {\r\n                        extension.collector.error(nls.localize(17, null, languagesExtPoint.name));\r\n                        continue;\r\n                    }\r\n                    for (var j = 0, lenJ = extension.value.length; j < lenJ; j++) {\r\n                        var ext = extension.value[j];\r\n                        if (isValidLanguageExtensionPoint(ext, extension.collector)) {\r\n                            var configuration = (ext.configuration ? paths.join(extension.description.extensionFolderPath, ext.configuration) : ext.configuration);\r\n                            allValidLanguages.push({\r\n                                id: ext.id,\r\n                                extensions: ext.extensions,\r\n                                filenames: ext.filenames,\r\n                                filenamePatterns: ext.filenamePatterns,\r\n                                firstLine: ext.firstLine,\r\n                                aliases: ext.aliases,\r\n                                mimetypes: ext.mimetypes,\r\n                                configuration: configuration\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                modesRegistry_1.ModesRegistry.registerLanguages(allValidLanguages);\r\n            });\r\n            this._configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationChange(e.config); });\r\n        }\r\n        MainThreadModeServiceImpl.prototype.onReady = function () {\r\n            var _this = this;\r\n            if (!this._onReadyPromise) {\r\n                var configuration_1 = this._configurationService.getConfiguration();\r\n                this._onReadyPromise = this._extensionService.onReady().then(function () {\r\n                    _this.onConfigurationChange(configuration_1);\r\n                    return true;\r\n                });\r\n            }\r\n            return this._onReadyPromise;\r\n        };\r\n        MainThreadModeServiceImpl.prototype.onConfigurationChange = function (configuration) {\r\n            var _this = this;\r\n            // Clear user configured mime associations\r\n            mime.clearTextMimes(true /* user configured */);\r\n            // Register based on settings\r\n            if (configuration.files && configuration.files.associations) {\r\n                Object.keys(configuration.files.associations).forEach(function (pattern) {\r\n                    mime.registerTextMime({ mime: _this.getMimeForMode(configuration.files.associations[pattern]), filepattern: pattern, userConfigured: true });\r\n                });\r\n            }\r\n        };\r\n        MainThreadModeServiceImpl.prototype._getModeServiceWorkerHelper = function () {\r\n            var r = this._threadService.getRemotable(ModeServiceWorkerHelper);\r\n            if (!this._hasInitialized) {\r\n                this._hasInitialized = true;\r\n                var initData = {\r\n                    compatModes: modesRegistry_1.ModesRegistry.getCompatModes(),\r\n                    languages: modesRegistry_1.ModesRegistry.getLanguages()\r\n                };\r\n                r._initialize(initData);\r\n                modesRegistry_1.ModesRegistry.onDidAddCompatModes(function (m) { return r._acceptCompatModes(m); });\r\n                modesRegistry_1.ModesRegistry.onDidAddLanguages(function (m) { return r._acceptLanguages(m); });\r\n            }\r\n            return r;\r\n        };\r\n        MainThreadModeServiceImpl.prototype.configureModeById = function (modeId, options) {\r\n            this._getModeServiceWorkerHelper().configureModeById(modeId, options);\r\n            _super.prototype.configureModeById.call(this, modeId, options);\r\n        };\r\n        MainThreadModeServiceImpl.prototype._createMode = function (modeId) {\r\n            // Instantiate mode also in worker\r\n            this._getModeServiceWorkerHelper().instantiateMode(modeId);\r\n            return _super.prototype._createMode.call(this, modeId);\r\n        };\r\n        MainThreadModeServiceImpl.prototype.registerMonarchDefinition = function (modelService, editorWorkerService, modeId, language) {\r\n            this._getModeServiceWorkerHelper().registerMonarchDefinition(modeId, language);\r\n            var lexer = monarchCompile_1.compile(objects.clone(language));\r\n            return _super.prototype.doRegisterMonarchDefinition.call(this, modeId, lexer);\r\n        };\r\n        return MainThreadModeServiceImpl;\r\n    }(ModeServiceImpl));\r\n    exports.MainThreadModeServiceImpl = MainThreadModeServiceImpl;\r\n    var ModeServiceWorkerHelper = (function () {\r\n        function ModeServiceWorkerHelper(modeService) {\r\n            this._modeService = modeService;\r\n        }\r\n        ModeServiceWorkerHelper.prototype._initialize = function (initData) {\r\n            modesRegistry_1.ModesRegistry.registerCompatModes(initData.compatModes);\r\n            modesRegistry_1.ModesRegistry.registerLanguages(initData.languages);\r\n        };\r\n        ModeServiceWorkerHelper.prototype._acceptCompatModes = function (modes) {\r\n            modesRegistry_1.ModesRegistry.registerCompatModes(modes);\r\n        };\r\n        ModeServiceWorkerHelper.prototype._acceptLanguages = function (languages) {\r\n            modesRegistry_1.ModesRegistry.registerLanguages(languages);\r\n        };\r\n        ModeServiceWorkerHelper.prototype.instantiateMode = function (modeId) {\r\n            this._modeService.getOrCreateMode(modeId).done(null, errors_1.onUnexpectedError);\r\n        };\r\n        ModeServiceWorkerHelper.prototype.configureModeById = function (modeId, options) {\r\n            this._modeService.configureMode(modeId, options);\r\n        };\r\n        ModeServiceWorkerHelper.prototype.registerMonarchDefinition = function (modeId, language) {\r\n            this._modeService.registerMonarchDefinition(null, null, modeId, language);\r\n        };\r\n        ModeServiceWorkerHelper = __decorate([\r\n            thread_1.Remotable.WorkerContext('ModeServiceWorkerHelper', thread_1.ThreadAffinity.All),\r\n            __param(0, modeService_1.IModeService)\r\n        ], ModeServiceWorkerHelper);\r\n        return ModeServiceWorkerHelper;\r\n    }());\r\n    exports.ModeServiceWorkerHelper = ModeServiceWorkerHelper;\r\n});\r\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\ndefine(\"vs/editor/common/services/modelServiceImpl\", [\"require\", \"exports\", 'vs/nls!vs/editor/common/services/modelServiceImpl', 'vs/base/common/errors', 'vs/base/common/event', 'vs/base/common/severity', 'vs/base/common/uri', 'vs/platform/telemetry/common/telemetry', 'vs/platform/thread/common/thread', 'vs/editor/common/core/range', 'vs/editor/common/editorCommon', 'vs/editor/common/model/mirrorModel', 'vs/editor/common/model/model', 'vs/editor/common/services/modeService', 'vs/editor/common/services/modelService', 'vs/editor/common/services/resourceService', 'vs/base/common/platform', 'vs/editor/common/config/defaultConfig'], function (require, exports, nls, errors_1, event_1, severity_1, uri_1, telemetry_1, thread_1, range_1, editorCommon, mirrorModel_1, model_1, modeService_1, modelService_1, resourceService_1, platform, defaultConfig_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    function MODEL_ID(resource) {\r\n        return resource.toString();\r\n    }\r\n    var ModelData = (function () {\r\n        function ModelData(model, eventsHandler) {\r\n            var _this = this;\r\n            this.model = model;\r\n            this.isSyncedToWorkers = false;\r\n            this._markerDecorations = [];\r\n            this._modelEventsListener = model.addBulkListener(function (events) { return eventsHandler(_this, events); });\r\n        }\r\n        ModelData.prototype.dispose = function () {\r\n            this._markerDecorations = this.model.deltaDecorations(this._markerDecorations, []);\r\n            this._modelEventsListener.dispose();\r\n            this._modelEventsListener = null;\r\n            this.model = null;\r\n        };\r\n        ModelData.prototype.getModelId = function () {\r\n            return MODEL_ID(this.model.uri);\r\n        };\r\n        ModelData.prototype.acceptMarkerDecorations = function (newDecorations) {\r\n            this._markerDecorations = this.model.deltaDecorations(this._markerDecorations, newDecorations);\r\n        };\r\n        return ModelData;\r\n    }());\r\n    var ModelMarkerHandler = (function () {\r\n        function ModelMarkerHandler() {\r\n        }\r\n        ModelMarkerHandler.setMarkers = function (modelData, markers) {\r\n            var _this = this;\r\n            // Limit to the first 500 errors/warnings\r\n            markers = markers.slice(0, 500);\r\n            var newModelDecorations = markers.map(function (marker) {\r\n                return {\r\n                    range: _this._createDecorationRange(modelData.model, marker),\r\n                    options: _this._createDecorationOption(marker)\r\n                };\r\n            });\r\n            modelData.acceptMarkerDecorations(newModelDecorations);\r\n        };\r\n        ModelMarkerHandler._createDecorationRange = function (model, rawMarker) {\r\n            var marker = model.validateRange(new range_1.Range(rawMarker.startLineNumber, rawMarker.startColumn, rawMarker.endLineNumber, rawMarker.endColumn));\r\n            var ret = new range_1.Range(marker.startLineNumber, marker.startColumn, marker.endLineNumber, marker.endColumn);\r\n            if (ret.isEmpty()) {\r\n                var word = model.getWordAtPosition(ret.getStartPosition());\r\n                if (word) {\r\n                    ret.startColumn = word.startColumn;\r\n                    ret.endColumn = word.endColumn;\r\n                }\r\n                else {\r\n                    var maxColumn = model.getLineLastNonWhitespaceColumn(marker.startLineNumber) ||\r\n                        model.getLineMaxColumn(marker.startLineNumber);\r\n                    if (maxColumn === 1) {\r\n                    }\r\n                    else if (ret.endColumn >= maxColumn) {\r\n                        // behind eol\r\n                        ret.endColumn = maxColumn;\r\n                        ret.startColumn = maxColumn - 1;\r\n                    }\r\n                    else {\r\n                        // extend marker to width = 1\r\n                        ret.endColumn += 1;\r\n                    }\r\n                }\r\n            }\r\n            else if (rawMarker.endColumn === Number.MAX_VALUE && rawMarker.startColumn === 1 && ret.startLineNumber === ret.endLineNumber) {\r\n                var minColumn = model.getLineFirstNonWhitespaceColumn(rawMarker.startLineNumber);\r\n                if (minColumn < ret.endColumn) {\r\n                    ret.startColumn = minColumn;\r\n                    rawMarker.startColumn = minColumn;\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n        ModelMarkerHandler._createDecorationOption = function (marker) {\r\n            var className;\r\n            var color;\r\n            var darkColor;\r\n            var htmlMessage = null;\r\n            switch (marker.severity) {\r\n                case severity_1.default.Ignore:\r\n                    // do something\r\n                    break;\r\n                case severity_1.default.Warning:\r\n                case severity_1.default.Info:\r\n                    className = editorCommon.ClassName.EditorWarningDecoration;\r\n                    color = 'rgba(18,136,18,0.7)';\r\n                    darkColor = 'rgba(18,136,18,0.7)';\r\n                    break;\r\n                case severity_1.default.Error:\r\n                default:\r\n                    className = editorCommon.ClassName.EditorErrorDecoration;\r\n                    color = 'rgba(255,18,18,0.7)';\r\n                    darkColor = 'rgba(255,18,18,0.7)';\r\n                    break;\r\n            }\r\n            if (typeof marker.message === 'string') {\r\n                htmlMessage = [{ isText: true, text: marker.message }];\r\n            }\r\n            else if (Array.isArray(marker.message)) {\r\n                htmlMessage = marker.message;\r\n            }\r\n            else if (marker.message) {\r\n                htmlMessage = [marker.message];\r\n            }\r\n            if (htmlMessage && marker.source) {\r\n                htmlMessage.unshift({ isText: true, text: \"[\" + marker.source + \"] \" });\r\n            }\r\n            return {\r\n                stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\r\n                className: className,\r\n                htmlMessage: htmlMessage,\r\n                overviewRuler: {\r\n                    color: color,\r\n                    darkColor: darkColor,\r\n                    position: editorCommon.OverviewRulerLane.Right\r\n                }\r\n            };\r\n        };\r\n        return ModelMarkerHandler;\r\n    }());\r\n    var ModelServiceImpl = (function () {\r\n        function ModelServiceImpl(threadService, markerService, modeService, configurationService, messageService) {\r\n            var _this = this;\r\n            this.serviceId = modelService_1.IModelService;\r\n            this._modelCreationOptions = {\r\n                tabSize: defaultConfig_1.DEFAULT_INDENTATION.tabSize,\r\n                insertSpaces: defaultConfig_1.DEFAULT_INDENTATION.insertSpaces,\r\n                detectIndentation: defaultConfig_1.DEFAULT_INDENTATION.detectIndentation,\r\n                defaultEOL: (platform.isLinux || platform.isMacintosh) ? editorCommon.DefaultEndOfLine.LF : editorCommon.DefaultEndOfLine.CRLF,\r\n                trimAutoWhitespace: defaultConfig_1.DEFAULT_TRIM_AUTO_WHITESPACE\r\n            };\r\n            this._threadService = threadService;\r\n            this._markerService = markerService;\r\n            this._modeService = modeService;\r\n            this._workerHelper = this._threadService.getRemotable(ModelServiceWorkerHelper);\r\n            this._configurationService = configurationService;\r\n            this._messageService = messageService;\r\n            this._hasShownMigrationMessage = false;\r\n            this._models = {};\r\n            this._onModelAdded = new event_1.Emitter();\r\n            this._onModelRemoved = new event_1.Emitter();\r\n            this._onModelModeChanged = new event_1.Emitter();\r\n            if (this._markerService) {\r\n                this._markerServiceSubscription = this._markerService.onMarkerChanged(this._handleMarkerChange, this);\r\n            }\r\n            var readConfig = function (config) {\r\n                var shouldShowMigrationMessage = false;\r\n                var tabSize = defaultConfig_1.DEFAULT_INDENTATION.tabSize;\r\n                if (config.editor && typeof config.editor.tabSize !== 'undefined') {\r\n                    var parsedTabSize = parseInt(config.editor.tabSize, 10);\r\n                    if (!isNaN(parsedTabSize)) {\r\n                        tabSize = parsedTabSize;\r\n                    }\r\n                    shouldShowMigrationMessage = shouldShowMigrationMessage || (config.editor.tabSize === 'auto');\r\n                }\r\n                var insertSpaces = defaultConfig_1.DEFAULT_INDENTATION.insertSpaces;\r\n                if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\r\n                    insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\r\n                    shouldShowMigrationMessage = shouldShowMigrationMessage || (config.editor.insertSpaces === 'auto');\r\n                }\r\n                var newDefaultEOL = _this._modelCreationOptions.defaultEOL;\r\n                var eol = config.files && config.files.eol;\r\n                if (eol === '\\r\\n') {\r\n                    newDefaultEOL = editorCommon.DefaultEndOfLine.CRLF;\r\n                }\r\n                else if (eol === '\\n') {\r\n                    newDefaultEOL = editorCommon.DefaultEndOfLine.LF;\r\n                }\r\n                var trimAutoWhitespace = _this._modelCreationOptions.trimAutoWhitespace;\r\n                if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\r\n                    trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\r\n                }\r\n                var detectIndentation = defaultConfig_1.DEFAULT_INDENTATION.detectIndentation;\r\n                if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\r\n                    detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\r\n                }\r\n                _this._setModelOptions({\r\n                    tabSize: tabSize,\r\n                    insertSpaces: insertSpaces,\r\n                    detectIndentation: detectIndentation,\r\n                    defaultEOL: newDefaultEOL,\r\n                    trimAutoWhitespace: trimAutoWhitespace\r\n                });\r\n                if (shouldShowMigrationMessage && !_this._hasShownMigrationMessage) {\r\n                    _this._hasShownMigrationMessage = true;\r\n                    _this._messageService.show(severity_1.default.Info, nls.localize(0, null));\r\n                }\r\n            };\r\n            this._configurationServiceSubscription = this._configurationService.onDidUpdateConfiguration(function (e) {\r\n                readConfig(e.config);\r\n            });\r\n            readConfig(this._configurationService.getConfiguration());\r\n        }\r\n        ModelServiceImpl.prototype.getCreationOptions = function () {\r\n            return this._modelCreationOptions;\r\n        };\r\n        ModelServiceImpl.prototype._setModelOptions = function (newOpts) {\r\n            if ((this._modelCreationOptions.detectIndentation === newOpts.detectIndentation)\r\n                && (this._modelCreationOptions.insertSpaces === newOpts.insertSpaces)\r\n                && (this._modelCreationOptions.tabSize === newOpts.tabSize)\r\n                && (this._modelCreationOptions.trimAutoWhitespace === newOpts.trimAutoWhitespace)) {\r\n                // Same indent opts, no need to touch created models\r\n                this._modelCreationOptions = newOpts;\r\n                return;\r\n            }\r\n            this._modelCreationOptions = newOpts;\r\n            // Update options on all models\r\n            var keys = Object.keys(this._models);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var modelId = keys[i];\r\n                var modelData = this._models[modelId];\r\n                if (this._modelCreationOptions.detectIndentation) {\r\n                    modelData.model.detectIndentation(this._modelCreationOptions.insertSpaces, this._modelCreationOptions.tabSize);\r\n                    modelData.model.updateOptions({\r\n                        trimAutoWhitespace: this._modelCreationOptions.trimAutoWhitespace\r\n                    });\r\n                }\r\n                else {\r\n                    modelData.model.updateOptions({\r\n                        insertSpaces: this._modelCreationOptions.insertSpaces,\r\n                        tabSize: this._modelCreationOptions.tabSize,\r\n                        trimAutoWhitespace: this._modelCreationOptions.trimAutoWhitespace\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        ModelServiceImpl.prototype.dispose = function () {\r\n            if (this._markerServiceSubscription) {\r\n                this._markerServiceSubscription.dispose();\r\n            }\r\n            this._configurationServiceSubscription.dispose();\r\n        };\r\n        ModelServiceImpl.prototype._handleMarkerChange = function (changedResources) {\r\n            var _this = this;\r\n            changedResources.forEach(function (resource) {\r\n                var modelId = MODEL_ID(resource);\r\n                var modelData = _this._models[modelId];\r\n                if (!modelData) {\r\n                    return;\r\n                }\r\n                ModelMarkerHandler.setMarkers(modelData, _this._markerService.read({ resource: resource, take: 500 }));\r\n            });\r\n        };\r\n        // --- begin IModelService\r\n        ModelServiceImpl.prototype._shouldSyncModelToWorkers = function (model) {\r\n            if (model.isTooLargeForHavingARichMode()) {\r\n                return false;\r\n            }\r\n            // Only sync models with compat modes to the workers\r\n            return this._modeService.isCompatMode(model.getMode().getId());\r\n        };\r\n        ModelServiceImpl.prototype._createModelData = function (value, modeOrPromise, resource) {\r\n            var _this = this;\r\n            // create & save the model\r\n            var model = new model_1.Model(value, this._modelCreationOptions, modeOrPromise, resource);\r\n            var modelId = MODEL_ID(model.uri);\r\n            if (this._models[modelId]) {\r\n                // There already exists a model with this id => this is a programmer error\r\n                throw new Error('ModelService: Cannot add model ' + telemetry_1.anonymize(modelId) + ' because it already exists!');\r\n            }\r\n            var modelData = new ModelData(model, function (modelData, events) { return _this._onModelEvents(modelData, events); });\r\n            this._models[modelId] = modelData;\r\n            return modelData;\r\n        };\r\n        ModelServiceImpl.prototype.createModel = function (value, modeOrPromise, resource) {\r\n            var modelData = this._createModelData(value, modeOrPromise, resource);\r\n            // handle markers (marker service => model)\r\n            if (this._markerService) {\r\n                ModelMarkerHandler.setMarkers(modelData, this._markerService.read({ resource: modelData.model.uri }));\r\n            }\r\n            if (this._shouldSyncModelToWorkers(modelData.model)) {\r\n                // send this model to the workers\r\n                this._beginWorkerSync(modelData);\r\n            }\r\n            this._onModelAdded.fire(modelData.model);\r\n            return modelData.model;\r\n        };\r\n        ModelServiceImpl.prototype.destroyModel = function (resource) {\r\n            // We need to support that not all models get disposed through this service (i.e. model.dispose() should work!)\r\n            var modelData = this._models[MODEL_ID(resource)];\r\n            if (!modelData) {\r\n                return;\r\n            }\r\n            modelData.model.dispose();\r\n        };\r\n        ModelServiceImpl.prototype.getModels = function () {\r\n            var ret = [];\r\n            var keys = Object.keys(this._models);\r\n            for (var i = 0, len = keys.length; i < len; i++) {\r\n                var modelId = keys[i];\r\n                ret.push(this._models[modelId].model);\r\n            }\r\n            return ret;\r\n        };\r\n        ModelServiceImpl.prototype.getModel = function (resource) {\r\n            var modelId = MODEL_ID(resource);\r\n            var modelData = this._models[modelId];\r\n            if (!modelData) {\r\n                return null;\r\n            }\r\n            return modelData.model;\r\n        };\r\n        Object.defineProperty(ModelServiceImpl.prototype, \"onModelAdded\", {\r\n            get: function () {\r\n                return this._onModelAdded ? this._onModelAdded.event : null;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ModelServiceImpl.prototype, \"onModelRemoved\", {\r\n            get: function () {\r\n                return this._onModelRemoved ? this._onModelRemoved.event : null;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(ModelServiceImpl.prototype, \"onModelModeChanged\", {\r\n            get: function () {\r\n                return this._onModelModeChanged ? this._onModelModeChanged.event : null;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        // --- end IModelService\r\n        ModelServiceImpl.prototype._beginWorkerSync = function (modelData) {\r\n            if (modelData.isSyncedToWorkers) {\r\n                throw new Error('Model is already being synced to workers!');\r\n            }\r\n            modelData.isSyncedToWorkers = true;\r\n            this._workerHelper.$_acceptNewModel(ModelServiceImpl._getBoundModelData(modelData.model));\r\n        };\r\n        ModelServiceImpl.prototype._stopWorkerSync = function (modelData) {\r\n            if (!modelData.isSyncedToWorkers) {\r\n                throw new Error('Model is already not being synced to workers!');\r\n            }\r\n            modelData.isSyncedToWorkers = false;\r\n            this._workerHelper.$_acceptDidDisposeModel(modelData.model.uri);\r\n        };\r\n        ModelServiceImpl.prototype._onModelDisposing = function (model) {\r\n            var modelId = MODEL_ID(model.uri);\r\n            var modelData = this._models[modelId];\r\n            if (modelData.isSyncedToWorkers) {\r\n                // Dispose model in workers\r\n                this._stopWorkerSync(modelData);\r\n            }\r\n            delete this._models[modelId];\r\n            modelData.dispose();\r\n            this._onModelRemoved.fire(model);\r\n        };\r\n        ModelServiceImpl._getBoundModelData = function (model) {\r\n            return {\r\n                url: model.uri,\r\n                versionId: model.getVersionId(),\r\n                value: model.toRawText(),\r\n                modeId: model.getMode().getId()\r\n            };\r\n        };\r\n        ModelServiceImpl.prototype._onModelEvents = function (modelData, events) {\r\n            // First look for dispose\r\n            for (var i = 0, len = events.length; i < len; i++) {\r\n                var e = events[i];\r\n                if (e.getType() === editorCommon.EventType.ModelDispose) {\r\n                    this._onModelDisposing(modelData.model);\r\n                    // no more processing since model got disposed\r\n                    return;\r\n                }\r\n            }\r\n            // Second, look for mode change\r\n            for (var i = 0, len = events.length; i < len; i++) {\r\n                var e = events[i];\r\n                if (e.getType() === editorCommon.EventType.ModelModeChanged) {\r\n                    var wasSyncedToWorkers = modelData.isSyncedToWorkers;\r\n                    var shouldSyncToWorkers = this._shouldSyncModelToWorkers(modelData.model);\r\n                    this._onModelModeChanged.fire({\r\n                        model: modelData.model,\r\n                        oldModeId: e.getData().oldMode.getId()\r\n                    });\r\n                    if (wasSyncedToWorkers) {\r\n                        if (shouldSyncToWorkers) {\r\n                            // true -> true\r\n                            // Forward mode change to all the workers\r\n                            this._workerHelper.$_acceptDidChangeModelMode(modelData.getModelId(), modelData.model.getMode().getId());\r\n                        }\r\n                        else {\r\n                            // true -> false\r\n                            // Stop worker sync for this model\r\n                            this._stopWorkerSync(modelData);\r\n                            // no more processing since we have removed the model from the workers\r\n                            return;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (shouldSyncToWorkers) {\r\n                            // false -> true\r\n                            // Begin syncing this model to the workers\r\n                            this._beginWorkerSync(modelData);\r\n                            // no more processing since we are sending the latest state\r\n                            return;\r\n                        }\r\n                        else {\r\n                            // false -> false\r\n                            // no more processing since this model was not synced and will not be synced\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!modelData.isSyncedToWorkers) {\r\n                return;\r\n            }\r\n            // Finally, look for model content changes\r\n            var eventsForWorkers = { contentChanged: [] };\r\n            for (var i = 0, len = events.length; i < len; i++) {\r\n                var e = events[i];\r\n                if (e.getType() === editorCommon.EventType.ModelRawContentChanged) {\r\n                    eventsForWorkers.contentChanged.push(e.getData());\r\n                }\r\n            }\r\n            if (eventsForWorkers.contentChanged.length > 0) {\r\n                // Forward events to all the workers\r\n                this._workerHelper.$_acceptModelEvents(modelData.getModelId(), eventsForWorkers);\r\n            }\r\n        };\r\n        return ModelServiceImpl;\r\n    }());\r\n    exports.ModelServiceImpl = ModelServiceImpl;\r\n    var ModelServiceWorkerHelper = (function () {\r\n        function ModelServiceWorkerHelper(resourceService, modeService) {\r\n            this._resourceService = resourceService;\r\n            this._modeService = modeService;\r\n        }\r\n        ModelServiceWorkerHelper.prototype.$_acceptNewModel = function (data) {\r\n            var _this = this;\r\n            // Create & insert the mirror model eagerly in the resource service\r\n            var mirrorModel = new mirrorModel_1.MirrorModel(this._resourceService, data.versionId, data.value, null, data.url);\r\n            this._resourceService.insert(mirrorModel.uri, mirrorModel);\r\n            // Block worker execution until the mode is instantiated\r\n            return this._modeService.getOrCreateMode(data.modeId).then(function (mode) {\r\n                // Changing mode should trigger a remove & an add, therefore:\r\n                // (1) Remove from resource service\r\n                _this._resourceService.remove(mirrorModel.uri);\r\n                // (2) Change mode\r\n                mirrorModel.setMode(mode);\r\n                // (3) Insert again to resource service (it will have the new mode)\r\n                _this._resourceService.insert(mirrorModel.uri, mirrorModel);\r\n            });\r\n        };\r\n        ModelServiceWorkerHelper.prototype.$_acceptDidChangeModelMode = function (modelId, newModeId) {\r\n            var _this = this;\r\n            var mirrorModel = this._resourceService.get(uri_1.default.parse(modelId));\r\n            // Block worker execution until the mode is instantiated\r\n            return this._modeService.getOrCreateMode(newModeId).then(function (mode) {\r\n                // Changing mode should trigger a remove & an add, therefore:\r\n                // (1) Remove from resource service\r\n                _this._resourceService.remove(mirrorModel.uri);\r\n                // (2) Change mode\r\n                mirrorModel.setMode(mode);\r\n                // (3) Insert again to resource service (it will have the new mode)\r\n                _this._resourceService.insert(mirrorModel.uri, mirrorModel);\r\n            });\r\n        };\r\n        ModelServiceWorkerHelper.prototype.$_acceptDidDisposeModel = function (url) {\r\n            var model = this._resourceService.get(url);\r\n            this._resourceService.remove(url);\r\n            if (model) {\r\n                model.dispose();\r\n            }\r\n        };\r\n        ModelServiceWorkerHelper.prototype.$_acceptModelEvents = function (modelId, events) {\r\n            var model = this._resourceService.get(uri_1.default.parse(modelId));\r\n            if (!model) {\r\n                throw new Error('Received model events for missing model ' + telemetry_1.anonymize(modelId));\r\n            }\r\n            try {\r\n                model.onEvents(events);\r\n            }\r\n            catch (err) {\r\n                errors_1.onUnexpectedError(err);\r\n            }\r\n        };\r\n        ModelServiceWorkerHelper = __decorate([\r\n            thread_1.Remotable.WorkerContext('ModelServiceWorkerHelper', thread_1.ThreadAffinity.All),\r\n            __param(0, resourceService_1.IResourceService),\r\n            __param(1, modeService_1.IModeService)\r\n        ], ModelServiceWorkerHelper);\r\n        return ModelServiceWorkerHelper;\r\n    }());\r\n    exports.ModelServiceWorkerHelper = ModelServiceWorkerHelper;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\ndefine(\"vs/platform/markers/common/markerService\", [\"require\", \"exports\", 'vs/base/common/arrays', 'vs/base/common/network', 'vs/base/common/strings', 'vs/base/common/collections', 'vs/base/common/uri', 'vs/base/common/event', 'vs/base/common/severity', 'vs/platform/thread/common/thread', './markers'], function (require, exports, arrays, network, strings, collections, uri_1, event_1, severity_1, thread_1, markers_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Key;\r\n    (function (Key) {\r\n        function fromValue(value) {\r\n            var regexp = /^(.*)→(.*)$/.exec(value);\r\n            return {\r\n                owner: regexp[1],\r\n                resource: uri_1.default.parse(regexp[2])\r\n            };\r\n        }\r\n        Key.fromValue = fromValue;\r\n        function valueOf(k) {\r\n            return k.owner + '→' + k.resource;\r\n        }\r\n        Key.valueOf = valueOf;\r\n        var _selectorPattern = '^({0})→({1})$';\r\n        function selector(owner, resource) {\r\n            return new RegExp(strings.format(_selectorPattern, owner ? strings.escapeRegExpCharacters(owner) : '.*', resource ? strings.escapeRegExpCharacters(resource.toString()) : '.*'));\r\n        }\r\n        Key.selector = selector;\r\n        function raw(owner, resource) {\r\n            return owner + '→' + resource;\r\n        }\r\n        Key.raw = raw;\r\n    })(Key || (Key = {}));\r\n    var MarkerService = (function () {\r\n        function MarkerService() {\r\n            this.serviceId = markers_1.IMarkerService;\r\n            this._data = Object.create(null);\r\n            this._stats = this._emptyStats();\r\n            this._onMarkerChanged = new event_1.Emitter();\r\n        }\r\n        MarkerService.prototype.getStatistics = function () {\r\n            return this._stats;\r\n        };\r\n        Object.defineProperty(MarkerService.prototype, \"onMarkerChanged\", {\r\n            // ---- IMarkerService ------------------------------------------\r\n            get: function () {\r\n                return this._onMarkerChanged ? this._onMarkerChanged.event : null;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        MarkerService.prototype.changeOne = function (owner, resource, markers) {\r\n            if (this._doChangeOne(owner, resource, markers)) {\r\n                this._onMarkerChanged.fire([resource]);\r\n            }\r\n        };\r\n        MarkerService.prototype.remove = function (owner, resources) {\r\n            if (arrays.isFalsyOrEmpty(resources)) {\r\n                return;\r\n            }\r\n            var changedResources;\r\n            for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\r\n                var resource = resources_1[_i];\r\n                if (this._doChangeOne(owner, resource, undefined)) {\r\n                    if (!changedResources) {\r\n                        changedResources = [];\r\n                    }\r\n                    changedResources.push(resource);\r\n                }\r\n            }\r\n            if (changedResources) {\r\n                this._onMarkerChanged.fire(changedResources);\r\n            }\r\n        };\r\n        MarkerService.prototype._doChangeOne = function (owner, resource, markers) {\r\n            var key = Key.raw(owner, resource), oldMarkers = this._data[key], hasOldMarkers = !arrays.isFalsyOrEmpty(oldMarkers), getsNewMarkers = !arrays.isFalsyOrEmpty(markers), oldStats = this._computeStats(oldMarkers), newStats = this._computeStats(markers);\r\n            if (!hasOldMarkers && !getsNewMarkers) {\r\n                return;\r\n            }\r\n            if (getsNewMarkers) {\r\n                this._data[key] = markers;\r\n            }\r\n            else if (hasOldMarkers) {\r\n                delete this._data[key];\r\n            }\r\n            if (this._isStatRelevant(resource)) {\r\n                this._updateStatsMinus(oldStats);\r\n                this._updateStatsPlus(newStats);\r\n            }\r\n            return true;\r\n        };\r\n        MarkerService.prototype.changeAll = function (owner, data) {\r\n            var _this = this;\r\n            var changedResources = Object.create(null);\r\n            // remove and record old markers\r\n            var oldStats = this._emptyStats();\r\n            this._forEach(owner, undefined, undefined, -1, function (e, r) {\r\n                var resource = Key.fromValue(e.key).resource;\r\n                if (_this._isStatRelevant(resource)) {\r\n                    _this._updateStatsPlus(oldStats, _this._computeStats(e.value));\r\n                }\r\n                changedResources[resource.toString()] = resource;\r\n                r();\r\n            });\r\n            this._updateStatsMinus(oldStats);\r\n            // add and record new markers\r\n            if (!arrays.isFalsyOrEmpty(data)) {\r\n                var newStats_1 = this._emptyStats();\r\n                data.forEach(function (d) {\r\n                    changedResources[d.resource.toString()] = d.resource;\r\n                    collections.lookupOrInsert(_this._data, Key.raw(owner, d.resource), []).push(d.marker);\r\n                    if (_this._isStatRelevant(d.resource)) {\r\n                        _this._updateStatsMarker(newStats_1, d.marker);\r\n                    }\r\n                });\r\n                this._updateStatsPlus(newStats_1);\r\n            }\r\n            this._onMarkerChanged.fire(collections.values(changedResources));\r\n        };\r\n        MarkerService.prototype.read = function (filter) {\r\n            var _this = this;\r\n            if (filter === void 0) { filter = Object.create(null); }\r\n            var ret = [];\r\n            this._forEach(filter.owner, filter.resource, filter.selector, filter.take, function (entry) { return _this._fromEntry(entry, ret); });\r\n            return ret;\r\n        };\r\n        MarkerService.prototype._isStatRelevant = function (resource) {\r\n            //TODO@Dirk this is a hack\r\n            return resource.scheme !== network.Schemas.inMemory;\r\n        };\r\n        MarkerService.prototype._forEach = function (owner, resource, regexp, take, callback) {\r\n            //TODO@Joh: be smart and use an index\r\n            var selector = regexp || Key.selector(owner, resource), took = 0;\r\n            collections.forEach(this._data, function (entry, remove) {\r\n                if (selector.test(entry.key)) {\r\n                    callback(entry, remove);\r\n                    if (take > 0 && took++ >= take) {\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        MarkerService.prototype._fromEntry = function (entry, bucket) {\r\n            var key = Key.fromValue(entry.key);\r\n            entry.value.forEach(function (data) {\r\n                // before reading, we sanitize the data\r\n                // skip entry if not sanitizable\r\n                var ok = MarkerService._sanitize(data);\r\n                if (!ok) {\r\n                    return;\r\n                }\r\n                bucket.push({\r\n                    owner: key.owner,\r\n                    resource: key.resource,\r\n                    code: data.code,\r\n                    message: data.message,\r\n                    source: data.source,\r\n                    severity: data.severity,\r\n                    startLineNumber: data.startLineNumber,\r\n                    startColumn: data.startColumn,\r\n                    endLineNumber: data.endLineNumber,\r\n                    endColumn: data.endColumn\r\n                });\r\n            });\r\n        };\r\n        MarkerService.prototype._computeStats = function (markers) {\r\n            var errors = 0, warnings = 0, infos = 0, unknwons = 0;\r\n            if (markers) {\r\n                for (var i = 0; i < markers.length; i++) {\r\n                    var marker = markers[i];\r\n                    if (marker.severity) {\r\n                        switch (marker.severity) {\r\n                            case severity_1.default.Error:\r\n                                errors++;\r\n                                break;\r\n                            case severity_1.default.Warning:\r\n                                warnings++;\r\n                                break;\r\n                            case severity_1.default.Info:\r\n                                infos++;\r\n                                break;\r\n                            default:\r\n                                unknwons++;\r\n                                break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        unknwons++;\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                errors: errors,\r\n                warnings: warnings,\r\n                infos: infos,\r\n                unknwons: unknwons\r\n            };\r\n        };\r\n        MarkerService.prototype._emptyStats = function () {\r\n            return { errors: 0, warnings: 0, infos: 0, unknwons: 0 };\r\n        };\r\n        MarkerService.prototype._updateStatsPlus = function (toUpdate, toAdd) {\r\n            if (!toAdd) {\r\n                toAdd = toUpdate;\r\n                toUpdate = this._stats;\r\n            }\r\n            toUpdate.errors += toAdd.errors;\r\n            toUpdate.warnings += toAdd.warnings;\r\n            toUpdate.infos += toAdd.infos;\r\n            toUpdate.unknwons += toAdd.unknwons;\r\n        };\r\n        MarkerService.prototype._updateStatsMinus = function (toUpdate, toSubtract) {\r\n            if (!toSubtract) {\r\n                toSubtract = toUpdate;\r\n                toUpdate = this._stats;\r\n            }\r\n            toUpdate.errors -= toSubtract.errors;\r\n            toUpdate.warnings -= toSubtract.warnings;\r\n            toUpdate.infos -= toSubtract.infos;\r\n            toUpdate.unknwons -= toSubtract.unknwons;\r\n        };\r\n        MarkerService.prototype._updateStatsMarker = function (toUpdate, marker) {\r\n            switch (marker.severity) {\r\n                case severity_1.default.Error:\r\n                    toUpdate.errors++;\r\n                    break;\r\n                case severity_1.default.Warning:\r\n                    toUpdate.warnings++;\r\n                    break;\r\n                case severity_1.default.Info:\r\n                    toUpdate.infos++;\r\n                    break;\r\n                default:\r\n                    toUpdate.unknwons++;\r\n                    break;\r\n            }\r\n        };\r\n        MarkerService._sanitize = function (data) {\r\n            if (!data.message) {\r\n                return false;\r\n            }\r\n            data.code = data.code || null;\r\n            data.startLineNumber = data.startLineNumber > 0 ? data.startLineNumber : 1;\r\n            data.startColumn = data.startColumn > 0 ? data.startColumn : 1;\r\n            data.endLineNumber = data.endLineNumber >= data.startLineNumber ? data.endLineNumber : data.startLineNumber;\r\n            data.endColumn = data.endColumn > 0 ? data.endColumn : data.startColumn;\r\n            return true;\r\n        };\r\n        return MarkerService;\r\n    }());\r\n    exports.MarkerService = MarkerService;\r\n    var SecondaryMarkerService = (function (_super) {\r\n        __extends(SecondaryMarkerService, _super);\r\n        function SecondaryMarkerService(threadService) {\r\n            _super.call(this);\r\n            this._proxy = threadService.getRemotable(MainProcessMarkerService);\r\n        }\r\n        SecondaryMarkerService.prototype.changeOne = function (owner, resource, markers) {\r\n            _super.prototype.changeOne.call(this, owner, resource, markers);\r\n            this._proxy.changeOne(owner, resource, markers);\r\n        };\r\n        SecondaryMarkerService.prototype.changeAll = function (owner, data) {\r\n            _super.prototype.changeAll.call(this, owner, data);\r\n            this._proxy.changeAll(owner, data);\r\n        };\r\n        return SecondaryMarkerService;\r\n    }(MarkerService));\r\n    exports.SecondaryMarkerService = SecondaryMarkerService;\r\n    var MainProcessMarkerService = (function (_super) {\r\n        __extends(MainProcessMarkerService, _super);\r\n        function MainProcessMarkerService(threadService) {\r\n            _super.call(this);\r\n            threadService.registerRemotableInstance(MainProcessMarkerService, this);\r\n        }\r\n        MainProcessMarkerService.prototype.changeOne = function (owner, resource, markers) {\r\n            _super.prototype.changeOne.call(this, owner, resource, markers);\r\n        };\r\n        MainProcessMarkerService.prototype.changeAll = function (owner, data) {\r\n            _super.prototype.changeAll.call(this, owner, data);\r\n        };\r\n        MainProcessMarkerService = __decorate([\r\n            thread_1.Remotable.MainContext('MainProcessMarkerService')\r\n        ], MainProcessMarkerService);\r\n        return MainProcessMarkerService;\r\n    }(MarkerService));\r\n    exports.MainProcessMarkerService = MainProcessMarkerService;\r\n});\r\n\ndefine(\"vs/platform/thread/common/threadService\", [\"require\", \"exports\", 'vs/base/common/winjs.base', './thread'], function (require, exports, winjs_base_1, thread) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.THREAD_SERVICE_PROPERTY_NAME = '__$$__threadService';\r\n    function findMember(proto, target) {\r\n        for (var i in proto) {\r\n            if (proto[i] === target) {\r\n                return i;\r\n            }\r\n        }\r\n        throw new Error('Member not found in prototype');\r\n    }\r\n    function findThreadService(obj) {\r\n        var threadService = obj[exports.THREAD_SERVICE_PROPERTY_NAME];\r\n        if (!threadService) {\r\n            throw new Error('Objects that use thread attributes must be instantiated with the thread service');\r\n        }\r\n        return threadService;\r\n    }\r\n    function OneWorkerFn(type, target, conditionOrAffinity, affinity) {\r\n        if (affinity === void 0) { affinity = thread.ThreadAffinity.None; }\r\n        var methodName = findMember(type.prototype, target), condition;\r\n        if (typeof conditionOrAffinity === 'function') {\r\n            condition = conditionOrAffinity;\r\n        }\r\n        else if (typeof conditionOrAffinity !== 'undefined') {\r\n            affinity = conditionOrAffinity;\r\n        }\r\n        type.prototype[methodName] = function () {\r\n            var param = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                param[_i - 0] = arguments[_i];\r\n            }\r\n            if (!condition) {\r\n                return findThreadService(this).OneWorker(this, methodName, target, param, affinity);\r\n            }\r\n            else {\r\n                var that_1 = this, promise = condition.call(that_1);\r\n                if (!winjs_base_1.TPromise.is(promise)) {\r\n                    promise = winjs_base_1.TPromise.as(promise);\r\n                }\r\n                return promise.then(function () {\r\n                    return findThreadService(that_1).OneWorker(that_1, methodName, target, param, affinity);\r\n                });\r\n            }\r\n        };\r\n    }\r\n    exports.OneWorkerAttr = OneWorkerFn;\r\n    function AllWorkersAttr(type, target) {\r\n        var methodName = findMember(type.prototype, target);\r\n        type.prototype[methodName] = function () {\r\n            var param = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                param[_i - 0] = arguments[_i];\r\n            }\r\n            return findThreadService(this).AllWorkers(this, methodName, target, param);\r\n        };\r\n    }\r\n    exports.AllWorkersAttr = AllWorkersAttr;\r\n});\r\n\ndefine(\"vs/platform/thread/common/abstractThreadService\", [\"require\", \"exports\", 'vs/base/common/winjs.base', 'vs/platform/thread/common/thread', 'vs/platform/thread/common/threadService', 'vs/platform/instantiation/common/descriptors'], function (require, exports, winjs_base_1, thread_1, threadService_1, descriptors_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var AbstractThreadService = (function () {\r\n        function AbstractThreadService(isInMainThread) {\r\n            this.isInMainThread = isInMainThread;\r\n            this._boundObjects = {};\r\n            this._pendingObjects = [];\r\n            this._localObjMap = Object.create(null);\r\n            this._proxyObjMap = Object.create(null);\r\n        }\r\n        AbstractThreadService.prototype.setInstantiationService = function (service) {\r\n            this._instantiationService = service;\r\n        };\r\n        AbstractThreadService.prototype.createInstance = function () {\r\n            var params = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                params[_i - 0] = arguments[_i];\r\n            }\r\n            return this._doCreateInstance(params);\r\n        };\r\n        AbstractThreadService.prototype._doCreateInstance = function (params) {\r\n            var _this = this;\r\n            var instanceOrPromise = this._instantiationService.createInstance.apply(this._instantiationService, params);\r\n            if (winjs_base_1.TPromise.is(instanceOrPromise)) {\r\n                var objInstantiated_1;\r\n                objInstantiated_1 = instanceOrPromise.then(function (instance) {\r\n                    if (instance.asyncCtor) {\r\n                        var initPromise = instance.asyncCtor();\r\n                        if (winjs_base_1.TPromise.is(initPromise)) {\r\n                            return initPromise.then(function () {\r\n                                return instance;\r\n                            });\r\n                        }\r\n                    }\r\n                    return instance;\r\n                });\r\n                this._pendingObjects.push(objInstantiated_1);\r\n                return objInstantiated_1.then(function (instance) {\r\n                    var r = _this._finishInstance(instance);\r\n                    for (var i = 0; i < _this._pendingObjects.length; i++) {\r\n                        if (_this._pendingObjects[i] === objInstantiated_1) {\r\n                            _this._pendingObjects.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                    return r;\r\n                });\r\n            }\r\n            return this._finishInstance(instanceOrPromise);\r\n        };\r\n        AbstractThreadService.prototype._finishInstance = function (instance) {\r\n            instance[threadService_1.THREAD_SERVICE_PROPERTY_NAME] = this;\r\n            this._boundObjects[instance.getId()] = instance;\r\n            if (instance.creationDone) {\r\n                instance.creationDone();\r\n            }\r\n            return instance;\r\n        };\r\n        AbstractThreadService.prototype.handle = function (rpcId, methodName, args) {\r\n            if (!this._localObjMap[rpcId]) {\r\n                throw new Error('Unknown actor ' + rpcId);\r\n            }\r\n            var actor = this._localObjMap[rpcId];\r\n            var method = actor[methodName];\r\n            if (typeof method !== 'function') {\r\n                throw new Error('Unknown method ' + methodName + ' on actor ' + rpcId);\r\n            }\r\n            return method.apply(actor, args);\r\n        };\r\n        AbstractThreadService.prototype._getOrCreateProxyInstance = function (remoteCom, id, descriptor) {\r\n            if (this._proxyObjMap[id]) {\r\n                return this._proxyObjMap[id];\r\n            }\r\n            var result = createProxyFromCtor(remoteCom, id, descriptor.ctor);\r\n            this._proxyObjMap[id] = result;\r\n            return result;\r\n        };\r\n        AbstractThreadService.prototype._registerLocalInstance = function (id, obj) {\r\n            this._localObjMap[id] = obj;\r\n        };\r\n        AbstractThreadService.prototype._getOrCreateLocalInstance = function (id, descriptor) {\r\n            if (this._localObjMap[id]) {\r\n                return this._localObjMap[id];\r\n            }\r\n            var result = this._instantiationService.createInstance(descriptor);\r\n            this._registerLocalInstance(id, result);\r\n            return result;\r\n        };\r\n        AbstractThreadService.prototype.getRemotable = function (ctor) {\r\n            var id = thread_1.Remotable.getId(ctor);\r\n            if (!id) {\r\n                throw new Error('Unknown Remotable: <<' + id + '>>');\r\n            }\r\n            var desc = descriptors_1.createSyncDescriptor(ctor);\r\n            if (thread_1.Remotable.Registry.MainContext[id]) {\r\n                return this._registerAndInstantiateMainProcessActor(id, desc);\r\n            }\r\n            if (thread_1.Remotable.Registry.ExtHostContext[id]) {\r\n                return this._registerAndInstantiateExtHostActor(id, desc);\r\n            }\r\n            if (thread_1.Remotable.Registry.WorkerContext[id]) {\r\n                return this._registerAndInstantiateWorkerActor(id, desc, thread_1.Remotable.Registry.WorkerContext[id].affinity);\r\n            }\r\n            throw new Error('Unknown Remotable: <<' + id + '>>');\r\n        };\r\n        AbstractThreadService.prototype.registerRemotableInstance = function (ctor, instance) {\r\n            var id = thread_1.Remotable.getId(ctor);\r\n            if (!id) {\r\n                throw new Error('Unknown Remotable: <<' + id + '>>');\r\n            }\r\n            if (thread_1.Remotable.Registry.MainContext[id]) {\r\n                return this._registerMainProcessActor(id, instance);\r\n            }\r\n            if (thread_1.Remotable.Registry.ExtHostContext[id]) {\r\n                return this._registerExtHostActor(id, instance);\r\n            }\r\n            if (thread_1.Remotable.Registry.WorkerContext[id]) {\r\n                return this._registerWorkerActor(id, instance);\r\n            }\r\n            throw new Error('Unknown Remotable: <<' + id + '>>');\r\n        };\r\n        return AbstractThreadService;\r\n    }());\r\n    exports.AbstractThreadService = AbstractThreadService;\r\n    function createProxyFromCtor(remote, id, ctor) {\r\n        var result = {\r\n            $__IS_REMOTE_OBJ: true\r\n        };\r\n        for (var prop in ctor.prototype) {\r\n            if (typeof ctor.prototype[prop] === 'function') {\r\n                result[prop] = createMethodProxy(remote, id, prop);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function createMethodProxy(remote, proxyId, path) {\r\n        return function () {\r\n            var myArgs = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                myArgs[_i - 0] = arguments[_i];\r\n            }\r\n            return remote.callOnRemote(proxyId, path, myArgs);\r\n        };\r\n    }\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/platform/thread/common/workerThreadService\", [\"require\", \"exports\", 'vs/base/common/winjs.base', 'vs/platform/thread/common/abstractThreadService', 'vs/platform/thread/common/thread'], function (require, exports, winjs_base_1, abstractThreadService, thread_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var WorkerThreadService = (function (_super) {\r\n        __extends(WorkerThreadService, _super);\r\n        function WorkerThreadService(remoteCom) {\r\n            _super.call(this, false);\r\n            this.serviceId = thread_1.IThreadService;\r\n            this._remoteCom = remoteCom;\r\n            this._remoteCom.setManyHandler(this);\r\n        }\r\n        WorkerThreadService.prototype._handleRequest = function (identifier, memberName, args) {\r\n            var _this = this;\r\n            if (!this._boundObjects.hasOwnProperty(identifier)) {\r\n                // Wait until all objects are constructed\r\n                return winjs_base_1.TPromise.join(this._pendingObjects.slice(0)).then(function () {\r\n                    if (!_this._boundObjects.hasOwnProperty(identifier)) {\r\n                        return winjs_base_1.TPromise.wrapError(new Error('Bound object `' + identifier + '` was not found.'));\r\n                    }\r\n                    //\t\t\t\t\tconsole.log(identifier + ' > ' + memberName);\r\n                    var obj = _this._boundObjects[identifier];\r\n                    return winjs_base_1.TPromise.as(obj[memberName].apply(obj, args));\r\n                });\r\n            }\r\n            //\t\t\tconsole.log(identifier + ' > ' + memberName);\r\n            var obj = this._boundObjects[identifier];\r\n            return winjs_base_1.TPromise.as(obj[memberName].apply(obj, args));\r\n        };\r\n        WorkerThreadService.prototype.dispatch = function (data) {\r\n            try {\r\n                var args = data.payload;\r\n                var result = this._handleRequest(args[0], args[1], args[2]);\r\n                return winjs_base_1.TPromise.is(result) ? result : winjs_base_1.TPromise.as(result);\r\n            }\r\n            catch (e) {\r\n                // handler error\r\n                return winjs_base_1.TPromise.wrapError(e);\r\n            }\r\n        };\r\n        WorkerThreadService.prototype.OneWorker = function (obj, methodName, target, params, affinity) {\r\n            return target.apply(obj, params);\r\n        };\r\n        WorkerThreadService.prototype.AllWorkers = function (obj, methodName, target, params) {\r\n            return target.apply(obj, params);\r\n        };\r\n        WorkerThreadService.prototype._registerAndInstantiateMainProcessActor = function (id, descriptor) {\r\n            return this._getOrCreateProxyInstance(this._remoteCom, id, descriptor);\r\n        };\r\n        WorkerThreadService.prototype._registerMainProcessActor = function (id, actor) {\r\n            throw new Error('Not supported in this runtime context!');\r\n        };\r\n        WorkerThreadService.prototype._registerAndInstantiateExtHostActor = function (id, descriptor) {\r\n            throw new Error('Not supported in this runtime context: Cannot communicate from Worker directly to Extension Host!');\r\n        };\r\n        WorkerThreadService.prototype._registerExtHostActor = function (id, actor) {\r\n            throw new Error('Not supported in this runtime context!');\r\n        };\r\n        WorkerThreadService.prototype._registerAndInstantiateWorkerActor = function (id, descriptor, whichWorker) {\r\n            return this._getOrCreateLocalInstance(id, descriptor);\r\n        };\r\n        WorkerThreadService.prototype._registerWorkerActor = function (id, actor) {\r\n            this._registerLocalInstance(id, actor);\r\n        };\r\n        return WorkerThreadService;\r\n    }(abstractThreadService.AbstractThreadService));\r\n    exports.WorkerThreadService = WorkerThreadService;\r\n});\r\n\ndefine(\"vs/platform/workspace/common/workspace\", [\"require\", \"exports\", 'vs/platform/instantiation/common/instantiation'], function (require, exports, instantiation_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.IWorkspaceContextService = instantiation_1.createDecorator('contextService');\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/common/languages.common\", [\"require\", \"exports\", 'vs/base/common/assert', 'vs/base/common/async', 'vs/base/common/callbackList', 'vs/base/common/cancellation', 'vs/base/common/collections', 'vs/base/common/event', 'vs/base/common/events', 'vs/base/common/lifecycle', 'vs/base/common/paths', 'vs/base/common/uri', 'vs/platform/platform', 'vs/platform/jsonschemas/common/jsonContributionRegistry', 'vs/platform/files/common/files', 'vs/platform/request/common/request', 'vs/platform/workspace/common/workspace', 'vs/platform/telemetry/common/telemetry', 'vs/platform/thread/common/thread', 'vs/platform/thread/common/threadService', 'vs/editor/common/editorCommon', 'vs/editor/common/modes', 'vs/editor/common/modes/abstractMode', 'vs/editor/common/modes/abstractState', 'vs/editor/common/modes/monarch/monarchCommon', 'vs/editor/common/modes/monarch/monarchDefinition', 'vs/editor/common/modes/monarch/monarchLexer', 'vs/editor/common/modes/monarch/monarchCompile', 'vs/editor/common/modes/supports/richEditSupport', 'vs/editor/common/modes/supports/suggestSupport', 'vs/editor/common/modes/supports/tokenizationSupport', 'vs/editor/common/services/modelService', 'vs/editor/common/services/modeService'], function (require, exports) {\r\n    'use strict';\r\n});\r\n\ndefine(\"vs/platform/workspace/common/baseWorkspaceContextService\", [\"require\", \"exports\", 'vs/base/common/uri', 'vs/base/common/paths', './workspace'], function (require, exports, uri_1, paths, workspace_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /**\r\n     * Simple IWorkspaceContextService implementation to allow sharing of this service implementation\r\n     * between different layers of the platform.\r\n     */\r\n    var BaseWorkspaceContextService = (function () {\r\n        function BaseWorkspaceContextService(workspace, configuration, options) {\r\n            if (options === void 0) { options = {}; }\r\n            this.serviceId = workspace_1.IWorkspaceContextService;\r\n            this.workspace = workspace;\r\n            this.configuration = configuration;\r\n            this.options = options;\r\n        }\r\n        BaseWorkspaceContextService.prototype.getWorkspace = function () {\r\n            return this.workspace;\r\n        };\r\n        BaseWorkspaceContextService.prototype.getConfiguration = function () {\r\n            return this.configuration;\r\n        };\r\n        BaseWorkspaceContextService.prototype.getOptions = function () {\r\n            return this.options;\r\n        };\r\n        BaseWorkspaceContextService.prototype.isInsideWorkspace = function (resource) {\r\n            if (resource && this.workspace) {\r\n                return paths.isEqualOrParent(resource.fsPath, this.workspace.resource.fsPath);\r\n            }\r\n            return false;\r\n        };\r\n        BaseWorkspaceContextService.prototype.toWorkspaceRelativePath = function (resource) {\r\n            if (this.isInsideWorkspace(resource)) {\r\n                return paths.normalize(paths.relative(this.workspace.resource.fsPath, resource.fsPath));\r\n            }\r\n            return null;\r\n        };\r\n        BaseWorkspaceContextService.prototype.toResource = function (workspaceRelativePath) {\r\n            if (typeof workspaceRelativePath === 'string' && this.workspace) {\r\n                return uri_1.default.file(paths.join(this.workspace.resource.fsPath, workspaceRelativePath));\r\n            }\r\n            return null;\r\n        };\r\n        return BaseWorkspaceContextService;\r\n    }());\r\n    exports.BaseWorkspaceContextService = BaseWorkspaceContextService;\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/editor/common/worker/editorWorkerServer\", [\"require\", \"exports\", 'vs/base/common/severity', 'vs/platform/event/common/eventService', 'vs/platform/event/common/event', 'vs/platform/extensions/common/abstractExtensionService', 'vs/platform/extensions/common/extensions', 'vs/platform/instantiation/common/serviceCollection', 'vs/platform/instantiation/common/instantiationService', 'vs/platform/markers/common/markerService', 'vs/platform/markers/common/markers', 'vs/platform/request/common/baseRequestService', 'vs/platform/request/common/request', 'vs/platform/telemetry/common/telemetry', 'vs/platform/thread/common/workerThreadService', 'vs/platform/thread/common/thread', 'vs/platform/workspace/common/baseWorkspaceContextService', 'vs/platform/workspace/common/workspace', 'vs/editor/common/services/modeServiceImpl', 'vs/editor/common/services/modeService', 'vs/editor/common/services/modelServiceImpl', 'vs/editor/common/services/resourceServiceImpl', 'vs/editor/common/services/resourceService', 'vs/editor/common/languages.common', 'vs/editor/common/worker/validationHelper'], function (require, exports, severity_1, eventService_1, event_1, abstractExtensionService_1, extensions_1, serviceCollection_1, instantiationService_1, markerService_1, markers_1, baseRequestService_1, request_1, telemetry_1, workerThreadService_1, thread_1, baseWorkspaceContextService_1, workspace_1, modeServiceImpl_1, modeService_1, modelServiceImpl_1, resourceServiceImpl_1, resourceService_1) {\r\n    'use strict';\r\n    var WorkerExtensionService = (function (_super) {\r\n        __extends(WorkerExtensionService, _super);\r\n        function WorkerExtensionService() {\r\n            _super.call(this, true);\r\n        }\r\n        WorkerExtensionService.prototype._showMessage = function (severity, msg) {\r\n            switch (severity) {\r\n                case severity_1.default.Error:\r\n                    console.error(msg);\r\n                    break;\r\n                case severity_1.default.Warning:\r\n                    console.warn(msg);\r\n                    break;\r\n                case severity_1.default.Info:\r\n                    console.info(msg);\r\n                    break;\r\n                default:\r\n                    console.log(msg);\r\n            }\r\n        };\r\n        WorkerExtensionService.prototype._createFailedExtension = function () {\r\n            throw new Error('unexpected');\r\n        };\r\n        WorkerExtensionService.prototype._actualActivateExtension = function (extensionDescription) {\r\n            throw new Error('unexpected');\r\n        };\r\n        return WorkerExtensionService;\r\n    }(abstractExtensionService_1.AbstractExtensionService));\r\n    var EditorWorkerServer = (function () {\r\n        function EditorWorkerServer() {\r\n        }\r\n        EditorWorkerServer.prototype.initialize = function (mainThread, complete, error, progress, initData) {\r\n            var services = new serviceCollection_1.ServiceCollection();\r\n            var extensionService = new WorkerExtensionService();\r\n            var contextService = new baseWorkspaceContextService_1.BaseWorkspaceContextService(initData.contextService.workspace, initData.contextService.configuration, initData.contextService.options);\r\n            this.threadService = new workerThreadService_1.WorkerThreadService(mainThread.getRemoteCom());\r\n            this.threadService.setInstantiationService(new instantiationService_1.InstantiationService(new serviceCollection_1.ServiceCollection([thread_1.IThreadService, this.threadService])));\r\n            var resourceService = new resourceServiceImpl_1.ResourceService();\r\n            var markerService = new markerService_1.SecondaryMarkerService(this.threadService);\r\n            var modeService = new modeServiceImpl_1.ModeServiceImpl(this.threadService, extensionService);\r\n            var requestService = new baseRequestService_1.BaseRequestService(contextService, telemetry_1.NullTelemetryService);\r\n            services.set(extensions_1.IExtensionService, extensionService);\r\n            services.set(thread_1.IThreadService, this.threadService);\r\n            services.set(modeService_1.IModeService, modeService);\r\n            services.set(workspace_1.IWorkspaceContextService, contextService);\r\n            services.set(event_1.IEventService, new eventService_1.EventService());\r\n            services.set(resourceService_1.IResourceService, resourceService);\r\n            services.set(markers_1.IMarkerService, markerService);\r\n            services.set(request_1.IRequestService, requestService);\r\n            var instantiationService = new instantiationService_1.InstantiationService(services);\r\n            this.threadService.setInstantiationService(instantiationService);\r\n            // Instantiate thread actors\r\n            this.threadService.getRemotable(modeServiceImpl_1.ModeServiceWorkerHelper);\r\n            this.threadService.getRemotable(modelServiceImpl_1.ModelServiceWorkerHelper);\r\n            complete(undefined);\r\n        };\r\n        EditorWorkerServer.prototype.request = function (mainThread, complete, error, progress, data) {\r\n            this.threadService.dispatch(data).then(complete, error, progress);\r\n        };\r\n        return EditorWorkerServer;\r\n    }());\r\n    exports.EditorWorkerServer = EditorWorkerServer;\r\n    exports.value = new EditorWorkerServer();\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.\n */\nexport function ok(value?: any, message?: string) {\n\tif (!value || value === null) {\n\t\tthrow new Error(message ? 'Assertion failed (' + message + ')' : 'Assertion Failed');\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are strings.\n */\nexport interface IStringDictionary<V> {\n\t[name: string]: V;\n}\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are numbers.\n */\nexport interface INumberDictionary<V> {\n\t[idx: number]: V;\n}\n\nexport function createStringDictionary<V>(): IStringDictionary<V> {\n\treturn Object.create(null);\n}\n\nexport function createNumberDictionary<V>(): INumberDictionary<V> {\n\treturn Object.create(null);\n}\n\n/**\n * Looks up and returns a property that is owned\n * by the provided map object.\n * @param what The key.\n * @param from A native JavaScript object that stores items.\n * @param alternate A default value this is return in case an item with\n * \tthe key isn't found.\n */\nexport function lookup<T>(from: IStringDictionary<T>, what: string, alternate?: T): T;\nexport function lookup<T>(from: INumberDictionary<T>, what: number, alternate?: T): T;\nexport function lookup<T>(from: any, what: any, alternate: T = null): T {\n\tconst key = String(what);\n\tif (contains(from, key)) {\n\t\treturn from[key];\n\t}\n\treturn alternate;\n}\n\n\n/**\n * Looks up a value from the set. If the set doesn't contain the\n * value it inserts and returns the given alternate value.\n */\nexport function lookupOrInsert<T>(from: IStringDictionary<T>, key: string, alternate: T): T;\nexport function lookupOrInsert<T>(from: IStringDictionary<T>, key: string, alternateFn: () => T): T;\nexport function lookupOrInsert<T>(from: INumberDictionary<T>, key: number, alternate: T): T;\nexport function lookupOrInsert<T>(from: INumberDictionary<T>, key: number, alternateFn: () => T): T;\nexport function lookupOrInsert<T>(from: any, stringOrNumber: any, alternate: any): T {\n\tconst key = String(stringOrNumber);\n\tif (contains(from, key)) {\n\t\treturn from[key];\n\t} else {\n\t\tif (typeof alternate === 'function') {\n\t\t\talternate = alternate();\n\t\t}\n\t\tfrom[key] = alternate;\n\t\treturn alternate;\n\t}\n}\n\n/**\n * Inserts\n */\nexport function insert<T>(into: IStringDictionary<T>, data: T, hashFn: (data: T) => string): void;\nexport function insert<T>(into: INumberDictionary<T>, data: T, hashFn: (data: T) => string): void;\nexport function insert<T>(into: any, data: T, hashFn: (data: T) => string): void {\n\tinto[hashFn(data)] = data;\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Returns {{true}} iff the provided object contains a property\n * with the given name.\n */\nexport function contains<T>(from: IStringDictionary<T>, what: string): boolean;\nexport function contains<T>(from: INumberDictionary<T>, what: number): boolean;\nexport function contains<T>(from: any, what: any): boolean {\n\treturn hasOwnProperty.call(from, what);\n}\n\n/**\n * Returns an array which contains all values that reside\n * in the given set.\n */\nexport function values<T>(from: IStringDictionary<T>): T[];\nexport function values<T>(from: INumberDictionary<T>): T[];\nexport function values<T>(from: any): any[] {\n\tconst result: T[] = [];\n\tfor (var key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tresult.push(from[key]);\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Iterates over each entry in the provided set. The iterator allows\n * to remove elements and will stop when the callback returns {{false}}.\n */\nexport function forEach<T>(from: IStringDictionary<T>, callback: (entry: { key: string; value: T; }, remove: Function) => any): void;\nexport function forEach<T>(from: INumberDictionary<T>, callback: (entry: { key: number; value: T; }, remove: Function) => any): void;\nexport function forEach<T>(from: any, callback: (entry: { key: any; value: T; }, remove: Function) => any): void {\n\tfor (var key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tconst result = callback({ key: key, value: from[key] }, function() {\n\t\t\t\tdelete from[key];\n\t\t\t});\n\t\t\tif (result === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Removes an element from the dictionary. Returns {{false}} if the property\n * does not exists.\n */\nexport function remove<T>(from: IStringDictionary<T>, key: string): boolean;\nexport function remove<T>(from: INumberDictionary<T>, key: string): boolean;\nexport function remove<T>(from: any, key: string): boolean {\n\tif (!hasOwnProperty.call(from, key)) {\n\t\treturn false;\n\t}\n\tdelete from[key];\n\treturn true;\n}\n\n/**\n * Groups the collection into a dictionary based on the provided\n * group function.\n */\nexport function groupBy<T>(data: T[], groupFn: (element: T) => string): IStringDictionary<T[]> {\n\tconst result = createStringDictionary<T[]>();\n\tdata.forEach(element => lookupOrInsert(result, groupFn(element), []).push(element));\n\treturn result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport class Event {\n\tpublic time: number;\n\tpublic originalEvent: Event;\n\tpublic source: any;\n\n\tconstructor(originalEvent?: Event) {\n\t\tthis.time = (new Date()).getTime();\n\t\tthis.originalEvent = originalEvent;\n\t\tthis.source = null;\n\t}\n}\n\nexport class PropertyChangeEvent extends Event {\n\tpublic key: string;\n\tpublic oldValue: any;\n\tpublic newValue: any;\n\n\tconstructor(key?: string, oldValue?: any, newValue?: any, originalEvent?: Event) {\n\t\tsuper(originalEvent);\n\n\t\tthis.key = key;\n\t\tthis.oldValue = oldValue;\n\t\tthis.newValue = newValue;\n\t}\n}\n\nexport class ViewerEvent extends Event {\n\tpublic element: any;\n\n\tconstructor(element: any, originalEvent?: Event) {\n\t\tsuper(originalEvent);\n\n\t\tthis.element = element;\n\t}\n}\n\nexport interface ISelectionEvent {\n\tselection: any[];\n\tpayload?: any;\n\tsource: any;\n}\n\nexport interface IFocusEvent {\n\tfocus: any;\n\tpayload?: any;\n\tsource: any;\n}\n\nexport interface IHighlightEvent {\n\thighlight: any;\n\tpayload?: any;\n\tsource: any;\n}\n\nexport var EventType = {\n\tPROPERTY_CHANGED: 'propertyChanged',\n\tSELECTION: 'selection',\n\tFOCUS: 'focus',\n\tBLUR: 'blur',\n\tHIGHLIGHT: 'highlight',\n\tEXPAND: 'expand',\n\tCOLLAPSE: 'collapse',\n\tTOGGLE: 'toggle',\n\tCONTENTS_CHANGED: 'contentsChanged',\n\tBEFORE_RUN: 'beforeRun',\n\tRUN: 'run',\n\tEDIT: 'edit',\n\tSAVE: 'save',\n\tCANCEL: 'cancel',\n\tCHANGE: 'change',\n\tDISPOSE: 'dispose',\n};\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nexport interface IHTMLContentElementCode {\n\tlanguage: string;\n\tvalue: string;\n}\n\nexport interface IHTMLContentElement {\n\t/**\n\t * supports **bold**, __italics__, and [[actions]]\n\t */\n\tformattedText?:string;\n\ttext?: string;\n\tclassName?: string;\n\tstyle?: string;\n\tcustomStyle?: any;\n\ttagName?: string;\n\tchildren?: IHTMLContentElement[];\n\tisText?: boolean;\n\trole?: string;\n\tmarkdown?: string;\n\tcode?: IHTMLContentElementCode;\n}\n\nfunction htmlContentElementCodeEqual(a:IHTMLContentElementCode, b:IHTMLContentElementCode): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\treturn (\n\t\ta.language === b.language\n\t\t&& a.value === b.value\n\t);\n}\n\nfunction htmlContentElementEqual(a:IHTMLContentElement, b:IHTMLContentElement): boolean {\n\treturn (\n\t\ta.formattedText === b.formattedText\n\t\t&& a.text === b.text\n\t\t&& a.className === b.className\n\t\t&& a.style === b.style\n\t\t&& a.customStyle === b.customStyle\n\t\t&& a.tagName === b.tagName\n\t\t&& a.isText === b.isText\n\t\t&& a.role === b.role\n\t\t&& a.markdown === b.markdown\n\t\t&& htmlContentElementCodeEqual(a.code, b.code)\n\t\t&& htmlContentElementArrEquals(a.children, b.children)\n\t);\n}\n\nexport function htmlContentElementArrEquals(a:IHTMLContentElement[], b:IHTMLContentElement[]): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\n\tlet aLen = a.length,\n\t\tbLen = b.length;\n\n\tif (aLen !== bLen) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < aLen; i++) {\n\t\tif (!htmlContentElementEqual(a[i], b[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport class IdGenerator {\n\n\tprivate _prefix: string;\n\tprivate _lastId: number;\n\n\tconstructor(prefix:string) {\n\t\tthis._prefix = prefix;\n\t\tthis._lastId = 0;\n\t}\n\n\tpublic nextId(): string {\n\t\treturn this._prefix + (++this._lastId);\n\t}\n}\n\nexport const defaultGenerator = new IdGenerator('id#');","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport namespace Schemas {\n\n\t/**\n\t * A schema that is used for models that exist in memory\n\t * only and that have no correspondence on a server or such.\n\t */\n\texport var inMemory:string = 'inmemory';\n\n\texport var http:string = 'http';\n\n\texport var https:string = 'https';\n\n\texport var file:string = 'file';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {isLinux, isWindows} from 'vs/base/common/platform';\n\n/**\n * The forward slash path separator.\n */\nexport var sep = '/';\n\n/**\n * The native path separator depending on the OS.\n */\nexport var nativeSep = isWindows ? '\\\\' : '/';\n\nexport function relative(from: string, to: string): string {\n\n\tfrom = normalize(from);\n\tto = normalize(to);\n\n\tvar fromParts = from.split(sep),\n\t\ttoParts = to.split(sep);\n\n\twhile (fromParts.length > 0 && toParts.length > 0) {\n\t\tif (fromParts[0] === toParts[0]) {\n\t\t\tfromParts.shift();\n\t\t\ttoParts.shift();\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor (var i = 0, len = fromParts.length; i < len; i++) {\n\t\ttoParts.unshift('..');\n\t}\n\n\treturn toParts.join(sep);\n}\n\n/**\n * @returns the directory name of a path.\n */\nexport function dirname(path: string): string {\n\tvar idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\n\tif (idx === 0) {\n\t\treturn '.';\n\t} else if (~idx === 0) {\n\t\treturn path[0];\n\t} else {\n\t\treturn path.substring(0, ~idx);\n\t}\n}\n\n/**\n * @returns the base name of a path.\n */\nexport function basename(path: string): string {\n\tvar idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\\\');\n\tif (idx === 0) {\n\t\treturn path;\n\t} else if (~idx === path.length - 1) {\n\t\treturn basename(path.substring(0, path.length - 1));\n\t} else {\n\t\treturn path.substr(~idx + 1);\n\t}\n}\n\n/**\n * @returns {{.far}} from boo.far or the empty string.\n */\nexport function extname(path: string): string {\n\tpath = basename(path);\n\tvar idx = ~path.lastIndexOf('.');\n\treturn idx ? path.substring(~idx) : '';\n}\n\nexport function normalize(path: string, toOSPath?: boolean): string {\n\n\tif (path === null || path === void 0) {\n\t\treturn path;\n\t}\n\n\tlet len = path.length;\n\tif (len === 0) {\n\t\treturn '.';\n\t}\n\n\tconst sep = isWindows && toOSPath ? '\\\\' : '/';\n\tconst root = getRoot(path, sep);\n\n\t// operate on the 'path-portion' only\n\tpath = path.slice(root.length);\n\tlen -= root.length;\n\n\tlet res = '';\n\tlet start = 0;\n\n\tfor (let end = 0; end <= len; end++) {\n\n\t\t// either at the end or at a path-separator character\n\t\tif (end === len || path.charCodeAt(end) === _slash || path.charCodeAt(end) === _backslash) {\n\n\t\t\tlet part = path.slice(start, end);\n\t\t\tstart = end + 1;\n\n\t\t\tif (part === '.' && (root || res || end < len - 1)) {\n\t\t\t\t// skip current (if there is already something or if there is more to come)\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (part === '..') {\n\t\t\t\t// skip current and remove parent (if there is already something)\n\t\t\t\tlet prev_start = res.lastIndexOf(sep);\n\t\t\t\tlet prev_part = res.slice(prev_start + 1);\n\t\t\t\tif ((root || prev_part.length > 0) && prev_part !== '..') {\n\t\t\t\t\tres = prev_start === -1 ? '' : res.slice(0, prev_start);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (res !== '' && res[res.length - 1] !== sep) {\n\t\t\t\tres += sep;\n\t\t\t}\n\t\t\tres += part;\n\t\t}\n\t}\n\n\treturn root + res;\n}\n\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path: string, sep: string = '/'): string {\n\n\tif (!path) {\n\t\treturn '';\n\t}\n\n\tlet len = path.length;\n\tlet code = path.charCodeAt(0);\n\tif (code === _slash || code === _backslash) {\n\n\t\tcode = path.charCodeAt(1);\n\t\tif (code === _slash || code === _backslash) {\n\t\t\t// UNC candidate \\\\localhost\\shares\\ddd\n\t\t\t//               ^^^^^^^^^^^^^^^^^^^\n\t\t\tcode = path.charCodeAt(2);\n\t\t\tif (code !== _slash && code !== _backslash) {\n\t\t\t\tlet pos = 3;\n\t\t\t\tlet start = pos;\n\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\tcode = path.charCodeAt(pos);\n\t\t\t\t\tif (code === _slash || code === _backslash) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcode = path.charCodeAt(pos + 1);\n\t\t\t\tif (start !== pos && code !== _slash && code !== _backslash) {\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\t\tcode = path.charCodeAt(pos);\n\t\t\t\t\t\tif (code === _slash || code === _backslash) {\n\t\t\t\t\t\t\treturn path.slice(0, pos + 1) // consume this separator\n\t\t\t\t\t\t\t\t.replace(/[\\\\/]/g, sep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// /user/far\n\t\t// ^\n\t\treturn sep;\n\n\t} else if ((code >= _A && code <= _Z) || (code >= _a && code <= _z)) {\n\t\t// check for windows drive letter c:\\ or c:\n\n\t\tif (path.charCodeAt(1) === _colon) {\n\t\t\tcode = path.charCodeAt(2);\n\t\t\tif (code === _slash || code === _backslash) {\n\t\t\t\t// C:\\fff\n\t\t\t\t// ^^^\n\t\t\t\treturn path.slice(0, 2) + sep;\n\t\t\t} else {\n\t\t\t\t// C:\n\t\t\t\t// ^^\n\t\t\t\treturn path.slice(0, 2);\n\t\t\t}\n\t\t}\n\t}\n\n\t// check for URI\n\t// scheme://authority/path\n\t// ^^^^^^^^^^^^^^^^^^^\n\tlet pos = path.indexOf('://');\n\tif (pos !== -1) {\n\t\tpos += 3; // 3 -> \"://\".length\n\t\tfor (; pos < len; pos++) {\n\t\t\tcode = path.charCodeAt(pos);\n\t\t\tif (code === _slash || code === _backslash) {\n\t\t\t\treturn path.slice(0, pos + 1); // consume this separator\n\t\t\t}\n\t\t}\n\t}\n\n\treturn '';\n}\n\nexport const join: (...parts: string[]) => string = function () {\n\n\tlet value = '';\n\tfor (let i = 0; i < arguments.length; i++) {\n\t\tlet part = arguments[i];\n\t\tif (i > 0) {\n\t\t\t// add the separater between two parts unless\n\t\t\t// there already is one\n\t\t\tlet last = value.charCodeAt(value.length - 1);\n\t\t\tif (last !== _slash && last !== _backslash) {\n\t\t\t\tlet next = part.charCodeAt(0);\n\t\t\t\tif (next !== _slash && next !== _backslash) {\n\n\t\t\t\t\tvalue += sep;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvalue += part;\n\t}\n\n\treturn normalize(value);\n};\n\n\n/**\n * Check if the path follows this pattern: `\\\\hostname\\sharename`.\n *\n * @see https://msdn.microsoft.com/en-us/library/gg465305.aspx\n * @return A boolean indication if the path is a UNC path, on none-windows\n * always false.\n */\nexport function isUNC(path: string): boolean {\n\tif (!isWindows) {\n\t\t// UNC is a windows concept\n\t\treturn false;\n\t}\n\n\tif (!path || path.length < 5) {\n\t\t// at least \\\\a\\b\n\t\treturn false;\n\t}\n\n\tlet code = path.charCodeAt(0);\n\tif (code !== _backslash) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(1);\n\tif (code !== _backslash) {\n\t\treturn false;\n\t}\n\tlet pos = 2;\n\tlet start = pos;\n\tfor (; pos < path.length; pos++) {\n\t\tcode = path.charCodeAt(pos);\n\t\tif (code === _backslash) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (start === pos) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(pos + 1);\n\tif (isNaN(code) || code === _backslash) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction isPosixAbsolute(path: string): boolean {\n\treturn path && path[0] === '/';\n}\n\nexport function makeAbsolute(path: string, isPathNormalized?: boolean): string {\n\treturn isPosixAbsolute(!isPathNormalized ? normalize(path) : path) ? path : sep + path;\n}\n\nexport function isRelative(path: string): boolean {\n\treturn path && path.length > 1 && path[0] === '.';\n}\n\nconst _slash = '/'.charCodeAt(0);\nconst _backslash = '\\\\'.charCodeAt(0);\nconst _colon = ':'.charCodeAt(0);\nconst _a = 'a'.charCodeAt(0);\nconst _A = 'A'.charCodeAt(0);\nconst _z = 'z'.charCodeAt(0);\nconst _Z = 'Z'.charCodeAt(0);\n\nexport function isEqualOrParent(path: string, candidate: string): boolean {\n\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tpath = normalize(path);\n\tcandidate = normalize(candidate);\n\n\tlet candidateLen = candidate.length;\n\tlet lastCandidateChar = candidate.charCodeAt(candidateLen - 1);\n\tif (lastCandidateChar === _slash) {\n\t\tcandidate = candidate.substring(0, candidateLen - 1);\n\t\tcandidateLen -= 1;\n\t}\n\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tif (!isLinux) {\n\t\t// case insensitive\n\t\tpath = path.toLowerCase();\n\t\tcandidate = candidate.toLowerCase();\n\t}\n\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tif (path.indexOf(candidate) !== 0) {\n\t\treturn false;\n\t}\n\n\tlet char = path.charCodeAt(candidateLen);\n\treturn char === _slash;\n}\n\n// Reference: https://en.wikipedia.org/wiki/Filename\nconst INVALID_FILE_CHARS = isWindows ? /[\\\\/:\\*\\?\"<>\\|]/g : /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])$/i;\nexport function isValidBasename(name: string): boolean {\n\tif (!name || name.length === 0 || /^\\s+$/.test(name)) {\n\t\treturn false; // require a name that is not just whitespace\n\t}\n\n\tINVALID_FILE_CHARS.lastIndex = 0; // the holy grail of software development\n\tif (INVALID_FILE_CHARS.test(name)) {\n\t\treturn false; // check for certain invalid file characters\n\t}\n\n\tif (isWindows && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n\t\treturn false; // check for certain invalid file names\n\t}\n\n\tif (name === '.' || name === '..') {\n\t\treturn false; // check for reserved values\n\t}\n\n\tif (isWindows && name[name.length - 1] === '.') {\n\t\treturn false; // Windows: file cannot end with a \".\"\n\t}\n\n\tif (isWindows && name.length !== name.trim().length) {\n\t\treturn false; // Windows: file cannot end with a whitespace\n\t}\n\n\treturn true;\n}\n\nexport const isAbsoluteRegex = /^((\\/|[a-zA-Z]:\\\\)[^\\(\\)<>\\\\'\\\"\\[\\]]+)/;\n\n/**\n * If you have access to node, it is recommended to use node's path.isAbsolute().\n * This is a simple regex based approach.\n */\nexport function isAbsolute(path: string): boolean {\n\treturn isAbsoluteRegex.test(path);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { globals } from 'vs/base/common/platform';\n\nvar hasPerformanceNow = (globals.performance && typeof globals.performance.now === 'function');\n\nexport class StopWatch {\n\n\tprivate _highResolution: boolean;\n\tprivate _startTime: number;\n\tprivate _stopTime: number;\n\n\tpublic static create(highResolution:boolean = true): StopWatch {\n\t\treturn new StopWatch(highResolution);\n\t}\n\n\tconstructor(highResolution: boolean) {\n\t\tthis._highResolution = hasPerformanceNow && highResolution;\n\t\tthis._startTime = this._now();\n\t\tthis._stopTime = -1;\n\t}\n\n\tpublic stop(): void {\n\t\tthis._stopTime = this._now();\n\t}\n\n\tpublic elapsed(): number {\n\t\tif (this._stopTime !== -1) {\n\t\t\treturn this._stopTime - this._startTime;\n\t\t}\n\t\treturn this._now() - this._startTime;\n\t}\n\n\tprivate _now(): number {\n\t\treturn this._highResolution ? globals.performance.now() : new Date().getTime();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport strings = require('vs/base/common/strings');\nimport {LinkedMap} from 'vs/base/common/map';\n\nexport interface IFilter {\n\t// Returns null if word doesn't match.\n\t(word: string, wordToMatchAgainst: string): IMatch[];\n}\n\nexport interface IMatch {\n\tstart: number;\n\tend: number;\n}\n\n// Combined filters\n\n/**\n * @returns A filter which combines the provided set\n * of filters with an or. The *first* filters that\n * matches defined the return value of the returned\n * filter.\n */\nexport function or(...filter: IFilter[]): IFilter {\n\treturn function (word: string, wordToMatchAgainst: string): IMatch[] {\n\t\tfor (let i = 0, len = filter.length; i < len; i++) {\n\t\t\tlet match = filter[i](word, wordToMatchAgainst);\n\t\t\tif (match) {\n\t\t\t\treturn match;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n}\n\n/**\n * @returns A filter which combines the provided set\n * of filters with an and. The combines matches are\n * returned if *all* filters match.\n */\nexport function and(...filter: IFilter[]): IFilter {\n\treturn function (word: string, wordToMatchAgainst: string): IMatch[] {\n\t\tlet result: IMatch[] = [];\n\t\tfor (let i = 0, len = filter.length; i < len; i++) {\n\t\t\tlet match = filter[i](word, wordToMatchAgainst);\n\t\t\tif (!match) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresult = result.concat(match);\n\t\t}\n\t\treturn result;\n\t};\n}\n\n// Prefix\n\nexport let matchesStrictPrefix: IFilter = (word: string, wordToMatchAgainst: string): IMatch[] => { return _matchesPrefix(false, word, wordToMatchAgainst); };\nexport let matchesPrefix: IFilter = (word: string, wordToMatchAgainst: string): IMatch[] => { return _matchesPrefix(true, word, wordToMatchAgainst); };\n\nfunction _matchesPrefix(ignoreCase: boolean, word: string, wordToMatchAgainst: string): IMatch[] {\n\tif (!wordToMatchAgainst || wordToMatchAgainst.length === 0 || wordToMatchAgainst.length < word.length) {\n\t\treturn null;\n\t}\n\tif (ignoreCase) {\n\t\tword = word.toLowerCase();\n\t\twordToMatchAgainst = wordToMatchAgainst.toLowerCase();\n\t}\n\tfor (let i = 0; i < word.length; i++) {\n\t\tif (word[i] !== wordToMatchAgainst[i]) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn word.length > 0 ? [{ start: 0, end: word.length }] : [];\n}\n\n// Contiguous Substring\n\nexport function matchesContiguousSubString(word: string, wordToMatchAgainst: string): IMatch[] {\n\tlet index = wordToMatchAgainst.toLowerCase().indexOf(word.toLowerCase());\n\tif (index === -1) {\n\t\treturn null;\n\t}\n\n\treturn [{ start: index, end: index + word.length }];\n}\n\n// Substring\n\nexport function matchesSubString(word: string, wordToMatchAgainst: string): IMatch[] {\n\treturn _matchesSubString(word.toLowerCase(), wordToMatchAgainst.toLowerCase(), 0, 0);\n}\n\nfunction _matchesSubString(word: string, wordToMatchAgainst: string, i: number, j: number): IMatch[] {\n\tif (i === word.length) {\n\t\treturn [];\n\t} else if (j === wordToMatchAgainst.length) {\n\t\treturn null;\n\t} else {\n\t\tif (word[i] === wordToMatchAgainst[j]) {\n\t\t\tlet result: IMatch[] = null;\n\t\t\tif (result = _matchesSubString(word, wordToMatchAgainst, i + 1, j + 1)) {\n\t\t\t\treturn join({ start: j, end: j + 1 }, result);\n\t\t\t}\n\t\t}\n\n\t\treturn _matchesSubString(word, wordToMatchAgainst, i, j + 1);\n\t}\n}\n\n// CamelCase\n\nfunction isLower(code: number): boolean {\n\treturn 97 <= code && code <= 122;\n}\n\nfunction isUpper(code: number): boolean {\n\treturn 65 <= code && code <= 90;\n}\n\nfunction isNumber(code: number): boolean {\n\treturn 48 <= code && code <= 57;\n}\n\nfunction isWhitespace(code: number): boolean {\n\treturn [32, 9, 10, 13].indexOf(code) > -1;\n}\n\nfunction isAlphanumeric(code: number): boolean {\n\treturn isLower(code) || isUpper(code) || isNumber(code);\n}\n\nfunction join(head: IMatch, tail: IMatch[]): IMatch[] {\n\tif (tail.length === 0) {\n\t\ttail = [head];\n\t} else if (head.end === tail[0].start) {\n\t\ttail[0].start = head.start;\n\t} else {\n\t\ttail.unshift(head);\n\t}\n\treturn tail;\n}\n\nfunction nextAnchor(camelCaseWord: string, start: number): number {\n\tfor (let i = start; i < camelCaseWord.length; i++) {\n\t\tlet c = camelCaseWord.charCodeAt(i);\n\t\tif (isUpper(c) || isNumber(c) || (i > 0 && !isAlphanumeric(camelCaseWord.charCodeAt(i - 1)))) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn camelCaseWord.length;\n}\n\nfunction _matchesCamelCase(word: string, camelCaseWord: string, i: number, j: number): IMatch[] {\n\tif (i === word.length) {\n\t\treturn [];\n\t} else if (j === camelCaseWord.length) {\n\t\treturn null;\n\t} else if (word[i] !== camelCaseWord[j].toLowerCase()) {\n\t\treturn null;\n\t} else {\n\t\tlet result = null;\n\t\tlet nextUpperIndex = j + 1;\n\t\tresult = _matchesCamelCase(word, camelCaseWord, i + 1, j + 1);\n\t\twhile (!result && (nextUpperIndex = nextAnchor(camelCaseWord, nextUpperIndex)) < camelCaseWord.length) {\n\t\t\tresult = _matchesCamelCase(word, camelCaseWord, i + 1, nextUpperIndex);\n\t\t\tnextUpperIndex++;\n\t\t}\n\t\treturn result === null ? null : join({ start: j, end: j + 1 }, result);\n\t}\n}\n\n// Heuristic to avoid computing camel case matcher for words that don't\n// look like camelCaseWords.\nfunction isCamelCaseWord(word: string): boolean {\n\tif (word.length > 60) {\n\t\treturn false;\n\t}\n\n\tlet upper = 0, lower = 0, alpha = 0, numeric = 0, code = 0;\n\n\tfor (let i = 0; i < word.length; i++) {\n\t\tcode = word.charCodeAt(i);\n\n\t\tif (isUpper(code)) { upper++; }\n\t\tif (isLower(code)) { lower++; }\n\t\tif (isAlphanumeric(code)) { alpha++; }\n\t\tif (isNumber(code)) { numeric++; }\n\t}\n\n\tlet upperPercent = upper / word.length;\n\tlet lowerPercent = lower / word.length;\n\tlet alphaPercent = alpha / word.length;\n\tlet numericPercent = numeric / word.length;\n\n\treturn lowerPercent > 0.2 && upperPercent < 0.8 && alphaPercent > 0.6 && numericPercent < 0.2;\n}\n\n// Heuristic to avoid computing camel case matcher for words that don't\n// look like camel case patterns.\nfunction isCamelCasePattern(word: string): boolean {\n\tlet upper = 0, lower = 0, code = 0, whitespace = 0;\n\n\tfor (let i = 0; i < word.length; i++) {\n\t\tcode = word.charCodeAt(i);\n\n\t\tif (isUpper(code)) { upper++; }\n\t\tif (isLower(code)) { lower++; }\n\t\tif (isWhitespace(code)) { whitespace++; }\n\t}\n\n\tif ((upper === 0 || lower === 0) && whitespace === 0) {\n\t\treturn word.length <= 30;\n\t} else {\n\t\treturn upper <= 5;\n\t}\n}\n\nexport function matchesCamelCase(word: string, camelCaseWord: string): IMatch[] {\n\tif (!camelCaseWord || camelCaseWord.length === 0) {\n\t\treturn null;\n\t}\n\n\tif (!isCamelCasePattern(word)) {\n\t\treturn null;\n\t}\n\n\tif (!isCamelCaseWord(camelCaseWord)) {\n\t\treturn null;\n\t}\n\n\tlet result: IMatch[] = null;\n\tlet i = 0;\n\n\twhile (i < camelCaseWord.length && (result = _matchesCamelCase(word.toLowerCase(), camelCaseWord, 0, i)) === null) {\n\t\ti = nextAnchor(camelCaseWord, i + 1);\n\t}\n\n\treturn result;\n}\n\n// Matches beginning of words supporting non-ASCII languages\n// E.g. \"gp\" or \"g p\" will match \"Git: Pull\"\n// Useful in cases where the target is words (e.g. command labels)\n\nexport function matchesWords(word: string, target: string): IMatch[] {\n\tif (!target || target.length === 0) {\n\t\treturn null;\n\t}\n\n\tlet result: IMatch[] = null;\n\tlet i = 0;\n\n\twhile (i < target.length && (result = _matchesWords(word.toLowerCase(), target, 0, i)) === null) {\n\t\ti = nextWord(target, i + 1);\n\t}\n\n\treturn result;\n}\n\nfunction _matchesWords(word: string, target: string, i: number, j: number): IMatch[] {\n\tif (i === word.length) {\n\t\treturn [];\n\t} else if (j === target.length) {\n\t\treturn null;\n\t} else if (word[i] !== target[j].toLowerCase()) {\n\t\treturn null;\n\t} else {\n\t\tlet result = null;\n\t\tlet nextWordIndex = j + 1;\n\t\tresult = _matchesWords(word, target, i + 1, j + 1);\n\t\twhile (!result && (nextWordIndex = nextWord(target, nextWordIndex)) < target.length) {\n\t\t\tresult = _matchesWords(word, target, i + 1, nextWordIndex);\n\t\t\tnextWordIndex++;\n\t\t}\n\t\treturn result === null ? null : join({ start: j, end: j + 1 }, result);\n\t}\n}\n\nfunction nextWord(word: string, start: number): number {\n\tfor (let i = start; i < word.length; i++) {\n\t\tlet c = word.charCodeAt(i);\n\t\tif (isWhitespace(c) || (i > 0 && isWhitespace(word.charCodeAt(i - 1)))) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn word.length;\n}\n\n// Fuzzy\n\nexport enum SubstringMatching {\n\tContiguous,\n\tSeparate\n}\n\nexport const fuzzyContiguousFilter = or(matchesPrefix, matchesCamelCase, matchesContiguousSubString);\nconst fuzzySeparateFilter = or(matchesPrefix, matchesCamelCase, matchesSubString);\nconst fuzzyRegExpCache = new LinkedMap<RegExp>(10000); // bounded to 10000 elements\n\nexport function matchesFuzzy(word: string, wordToMatchAgainst: string, enableSeparateSubstringMatching = false): IMatch[] {\n\tif (typeof word !== 'string' || typeof wordToMatchAgainst !== 'string') {\n\t\treturn null; // return early for invalid input\n\t}\n\n\t// Form RegExp for wildcard matches\n\tlet regexp = fuzzyRegExpCache.get(word);\n\tif (!regexp) {\n\t\tregexp = new RegExp(strings.convertSimple2RegExpPattern(word), 'i');\n\t\tfuzzyRegExpCache.set(word, regexp);\n\t}\n\n\t// RegExp Filter\n\tlet match: RegExpExecArray = regexp.exec(wordToMatchAgainst);\n\tif (match) {\n\t\treturn [{ start: match.index, end: match.index + match[0].length }];\n\t}\n\n\t// Default Filter\n\treturn enableSeparateSubstringMatching ? fuzzySeparateFilter(word, wordToMatchAgainst) : fuzzyContiguousFilter(word, wordToMatchAgainst);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport strings = require('vs/base/common/strings');\nimport paths = require('vs/base/common/paths');\nimport {LinkedMap} from 'vs/base/common/map';\n\nexport interface IExpression {\n\t[pattern: string]: boolean | SiblingClause | any;\n}\n\nexport interface SiblingClause {\n\twhen: string;\n}\n\nconst PATH_REGEX = '[/\\\\\\\\]';\t\t// any slash or backslash\nconst NO_PATH_REGEX = '[^/\\\\\\\\]';\t// any non-slash and non-backslash\n\nfunction starsToRegExp(starCount: number): string {\n\tswitch (starCount) {\n\t\tcase 0:\n\t\t\treturn '';\n\t\tcase 1:\n\t\t\treturn `${NO_PATH_REGEX}*?`; // 1 star matches any number of characters except path separator (/ and \\) - non greedy (?)\n\t\tdefault:\n\t\t\t// Matches:  (Path Sep OR Path Val followed by Path Sep OR Path Sep followed by Path Val) 0-many times\n\t\t\t// Group is non capturing because we don't need to capture at all (?:...)\n\t\t\t// Overall we use non-greedy matching because it could be that we match too much\n\t\t\treturn `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}|${PATH_REGEX}${NO_PATH_REGEX}+)*?`;\n\t}\n}\n\nexport function splitGlobAware(pattern: string, splitChar: string): string[] {\n\tif (!pattern) {\n\t\treturn [];\n\t}\n\n\tlet segments: string[] = [];\n\n\tlet inBraces = false;\n\tlet inBrackets = false;\n\n\tlet char: string;\n\tlet curVal = '';\n\tfor (let i = 0; i < pattern.length; i++) {\n\t\tchar = pattern[i];\n\n\t\tswitch (char) {\n\t\t\tcase splitChar:\n\t\t\t\tif (!inBraces && !inBrackets) {\n\t\t\t\t\tsegments.push(curVal);\n\t\t\t\t\tcurVal = '';\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '{':\n\t\t\t\tinBraces = true;\n\t\t\t\tbreak;\n\t\t\tcase '}':\n\t\t\t\tinBraces = false;\n\t\t\t\tbreak;\n\t\t\tcase '[':\n\t\t\t\tinBrackets = true;\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tinBrackets = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcurVal += char;\n\t}\n\n\t// Tail\n\tif (curVal) {\n\t\tsegments.push(curVal);\n\t}\n\n\treturn segments;\n}\n\nfunction parseRegExp(pattern: string): string {\n\tif (!pattern) {\n\t\treturn '';\n\t}\n\n\tlet regEx = '';\n\n\t// Split up into segments for each slash found\n\tlet segments = splitGlobAware(pattern, '/');\n\n\t// Special case where we only have globstars\n\tif (segments.every(s => s === '**')) {\n\t\tregEx = '.*';\n\t}\n\n\t// Build regex over segments\n\telse {\n\t\tlet previousSegmentWasGlobStar = false;\n\t\tsegments.forEach((segment, index) => {\n\n\t\t\t// Globstar is special\n\t\t\tif (segment === '**') {\n\n\t\t\t\t// if we have more than one globstar after another, just ignore it\n\t\t\t\tif (!previousSegmentWasGlobStar) {\n\t\t\t\t\tregEx += starsToRegExp(2);\n\t\t\t\t\tpreviousSegmentWasGlobStar = true;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// States\n\t\t\tlet inBraces = false;\n\t\t\tlet braceVal = '';\n\n\t\t\tlet inBrackets = false;\n\t\t\tlet bracketVal = '';\n\n\t\t\tlet char: string;\n\t\t\tfor (let i = 0; i < segment.length; i++) {\n\t\t\t\tchar = segment[i];\n\n\t\t\t\t// Support brace expansion\n\t\t\t\tif (char !== '}' && inBraces) {\n\t\t\t\t\tbraceVal += char;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Support brackets\n\t\t\t\tif (char !== ']' && inBrackets) {\n\t\t\t\t\tlet res: string;\n\t\t\t\t\tswitch (char) {\n\t\t\t\t\t\tcase '-':\t\t// allow the range operator\n\t\t\t\t\t\t\tres = char;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '^':\t\t// allow the negate operator\n\t\t\t\t\t\t\tres = char;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tres = strings.escapeRegExpCharacters(char);\n\t\t\t\t\t}\n\n\t\t\t\t\tbracketVal += res;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tswitch (char) {\n\t\t\t\t\tcase '{':\n\t\t\t\t\t\tinBraces = true;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '[':\n\t\t\t\t\t\tinBrackets = true;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '}':\n\t\t\t\t\t\tlet choices = splitGlobAware(braceVal, ',');\n\n\t\t\t\t\t\t// Converts {foo,bar} => [foo|bar]\n\t\t\t\t\t\tlet braceRegExp = `(?:${choices.map(c => parseRegExp(c)).join('|')})`;\n\n\t\t\t\t\t\tregEx += braceRegExp;\n\n\t\t\t\t\t\tinBraces = false;\n\t\t\t\t\t\tbraceVal = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ']':\n\t\t\t\t\t\tregEx += ('[' + bracketVal + ']');\n\n\t\t\t\t\t\tinBrackets = false;\n\t\t\t\t\t\tbracketVal = '';\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\tregEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \\)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tregEx += starsToRegExp(1);\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tregEx += strings.escapeRegExpCharacters(char);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Tail: Add the slash we had split on if there is more to come and the next one is not a globstar\n\t\t\tif (index < segments.length - 1 && segments[index + 1] !== '**') {\n\t\t\t\tregEx += PATH_REGEX;\n\t\t\t}\n\n\t\t\t// reset state\n\t\t\tpreviousSegmentWasGlobStar = false;\n\t\t});\n\t}\n\n\treturn regEx;\n}\n\n// regexes to check for trival glob patterns that just check for String#endsWith\nconst T1 = /^\\*\\*\\/\\*\\.[\\w\\.-]+$/; \t\t\t\t\t\t   // **/*.something\nconst T2 = /^\\*\\*\\/[\\w\\.-]+$/; \t\t\t\t\t\t\t   // **/something\nconst T3 = /^{\\*\\*\\/\\*\\.[\\w\\.-]+(,\\*\\*\\/\\*\\.[\\w\\.-]+)*}$/; // {**/*.something,**/*.else}\n\nenum Trivia {\n\tT1, // **/*.something\n\tT2, // **/something\n\tT3  // {**/*.something,**/*.else}\n}\n\ninterface IParsedPattern {\n\tregexp?: RegExp;\n\ttrivia?: Trivia;\n}\n\nconst CACHE = new LinkedMap<IParsedPattern>(10000); // bounded to 10000 elements\n\nfunction parsePattern(pattern: string): IParsedPattern {\n\tif (!pattern) {\n\t\treturn null;\n\t}\n\n\t// Whitespace trimming\n\tpattern = pattern.trim();\n\n\t// Check cache\n\tlet parsedPattern = CACHE.get(pattern);\n\tif (parsedPattern) {\n\t\tif (parsedPattern.regexp) {\n\t\t\tparsedPattern.regexp.lastIndex = 0; // reset RegExp to its initial state to reuse it!\n\t\t}\n\n\t\treturn parsedPattern;\n\t}\n\n\tparsedPattern = Object.create(null);\n\n\t// Check for Trivias\n\tif (T1.test(pattern)) {\n\t\tparsedPattern.trivia = Trivia.T1;\n\t} else if (T2.test(pattern)) {\n\t\tparsedPattern.trivia = Trivia.T2;\n\t} else if (T3.test(pattern)) {\n\t\tparsedPattern.trivia = Trivia.T3;\n\t}\n\n\t// Otherwise convert to pattern\n\telse {\n\t\tparsedPattern.regexp = toRegExp(`^${parseRegExp(pattern)}$`);\n\t}\n\n\t// Cache\n\tCACHE.set(pattern, parsedPattern);\n\n\treturn parsedPattern;\n}\n\nfunction toRegExp(regEx: string): RegExp {\n\ttry {\n\t\treturn new RegExp(regEx);\n\t} catch (error) {\n\t\treturn /.^/; // create a regex that matches nothing if we cannot parse the pattern\n\t}\n}\n\n/**\n * Simplified glob matching. Supports a subset of glob patterns:\n * - * matches anything inside a path segment\n * - ? matches 1 character inside a path segment\n * - ** matches anything including an empty path segment\n * - simple brace expansion ({js,ts} => js or ts)\n * - character ranges (using [...])\n */\nexport function match(pattern: string, path: string): boolean;\nexport function match(expression: IExpression, path: string, siblings?: string[]): string /* the matching pattern */;\nexport function match(arg1: string | IExpression, path: string, siblings?: string[]): any {\n\tif (!arg1 || !path) {\n\t\treturn false;\n\t}\n\n\t// Glob with String\n\tif (typeof arg1 === 'string') {\n\t\tconst parsedPattern = parsePattern(arg1);\n\t\tif (!parsedPattern) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// common pattern: **/*.txt just need endsWith check\n\t\tif (parsedPattern.trivia === Trivia.T1) {\n\t\t\treturn strings.endsWith(path, arg1.substr(4)); // '**/*'.length === 4\n\t\t}\n\n\t\t// common pattern: **/some.txt just need basename check\n\t\tif (parsedPattern.trivia === Trivia.T2) {\n\t\t\tconst base = arg1.substr(3); // '**/'.length === 3\n\n\t\t\treturn path === base || strings.endsWith(path, `/${base}`) || strings.endsWith(path, `\\\\${base}`);\n\t\t}\n\n\t\t// repetition of common patterns (see above) {**/*.txt,**/*.png}\n\t\tif (parsedPattern.trivia === Trivia.T3) {\n\t\t\treturn arg1.slice(1, -1).split(',').some(pattern => match(pattern, path));\n\t\t}\n\n\t\treturn parsedPattern.regexp.test(path);\n\t}\n\n\t// Glob with Expression\n\treturn matchExpression(<IExpression>arg1, path, siblings);\n}\n\nfunction matchExpression(expression: IExpression, path: string, siblings?: string[]): string /* the matching pattern */ {\n\tlet patterns = Object.getOwnPropertyNames(expression);\n\tlet basename: string;\n\tfor (let i = 0; i < patterns.length; i++) {\n\t\tlet pattern = patterns[i];\n\n\t\tlet value = expression[pattern];\n\t\tif (value === false) {\n\t\t\tcontinue; // pattern is disabled\n\t\t}\n\n\t\t// Pattern matches path\n\t\tif (match(pattern, path)) {\n\n\t\t\t// Expression Pattern is <boolean>\n\t\t\tif (typeof value === 'boolean') {\n\t\t\t\treturn pattern;\n\t\t\t}\n\n\t\t\t// Expression Pattern is <SiblingClause>\n\t\t\tif (value && typeof (<SiblingClause>value).when === 'string') {\n\t\t\t\tif (!siblings || !siblings.length) {\n\t\t\t\t\tcontinue; // pattern is malformed or we don't have siblings\n\t\t\t\t}\n\n\t\t\t\tif (!basename) {\n\t\t\t\t\tbasename = strings.rtrim(paths.basename(path), paths.extname(path));\n\t\t\t\t}\n\n\t\t\t\tlet clause = <SiblingClause>value;\n\t\t\t\tlet clausePattern = clause.when.replace('$(basename)', basename);\n\t\t\t\tif (siblings.some((sibling) => sibling === clausePattern)) {\n\t\t\t\t\treturn pattern;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue; // pattern does not match in the end because the when clause is not satisfied\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Expression is Anything\n\t\t\treturn pattern;\n\t\t}\n\t}\n\n\treturn null;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {isEmptyObject} from 'vs/base/common/types';\nimport {forEach, contains, lookup} from 'vs/base/common/collections';\n\nexport interface Node<T> {\n\tdata: T;\n\tincoming: { [key: string]: Node<T> };\n\toutgoing: { [key: string]: Node<T> };\n}\n\nfunction newNode<T>(data: T): Node<T> {\n\treturn {\n\t\tdata: data,\n\t\tincoming: Object.create(null),\n\t\toutgoing: Object.create(null)\n\t};\n}\n\nexport class Graph<T> {\n\n\tprivate _nodes: { [key: string]: Node<T> } = Object.create(null);\n\n\tconstructor(private _hashFn: (element: T) => string) {\n\t\t// empty\n\t}\n\n\troots(): Node<T>[] {\n\t\tvar ret: Node<T>[] = [];\n\t\tforEach(this._nodes, entry => {\n\t\t\tif (isEmptyObject(entry.value.outgoing)) {\n\t\t\t\tret.push(entry.value);\n\t\t\t}\n\t\t});\n\t\treturn ret;\n\t}\n\n\ttraverse(start: T, inwards: boolean, callback: (data: T) => void): void {\n\t\tvar startNode = this.lookup(start);\n\t\tif (!startNode) {\n\t\t\treturn;\n\t\t}\n\t\tthis._traverse(startNode, inwards, Object.create(null), callback);\n\t}\n\n\tprivate _traverse(node: Node<T>, inwards: boolean, seen: { [key: string]: boolean }, callback: (data: T) => void): void {\n\t\tvar key = this._hashFn(node.data);\n\t\tif (contains(seen, key)) {\n\t\t\treturn;\n\t\t}\n\t\tseen[key] = true;\n\t\tcallback(node.data);\n\t\tvar nodes = inwards ? node.outgoing : node.incoming;\n\t\tforEach(nodes, (entry) => this._traverse(entry.value, inwards, seen, callback));\n\t}\n\n\tinsertEdge(from: T, to: T): void {\n\t\tvar fromNode = this.lookupOrInsertNode(from),\n\t\t\ttoNode = this.lookupOrInsertNode(to);\n\n\t\tfromNode.outgoing[this._hashFn(to)] = toNode;\n\t\ttoNode.incoming[this._hashFn(from)] = fromNode;\n\t}\n\n\tremoveNode(data: T): void {\n\t\tvar key = this._hashFn(data);\n\t\tdelete this._nodes[key];\n\t\tforEach(this._nodes, (entry) => {\n\t\t\tdelete entry.value.outgoing[key];\n\t\t\tdelete entry.value.incoming[key];\n\t\t});\n\t}\n\n\tlookupOrInsertNode(data: T): Node<T> {\n\t\tvar key = this._hashFn(data),\n\t\t\tnode = lookup(this._nodes, key);\n\n\t\tif (!node) {\n\t\t\tnode = newNode(data);\n\t\t\tthis._nodes[key] = node;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\tlookup(data: T): Node<T> {\n\t\treturn lookup(this._nodes, this._hashFn(data));\n\t}\n\n\tget length(): number {\n\t\treturn Object.keys(this._nodes).length;\n\t}\n\n\ttoString(): string {\n\t\tlet data: string[] = [];\n\t\tforEach(this._nodes, entry => {\n\t\t\tdata.push(`${entry.key}, (incoming)[${Object.keys(entry.value.incoming).join(', ')}], (outgoing)[${Object.keys(entry.value.outgoing).join(',')}]`);\n\t\t});\n\t\treturn data.join('\\n');\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { isArray } from './types';\n\nexport const empty: IDisposable = Object.freeze({\n\tdispose() { }\n});\n\nexport interface IDisposable {\n\tdispose(): void;\n}\n\nexport function dispose<T extends IDisposable>(...disposables: T[]): T;\nexport function dispose<T extends IDisposable>(disposables: T[]): T[];\nexport function dispose<T extends IDisposable>(...disposables: T[]): T[] {\n\tconst first = disposables[0];\n\n\tif (isArray(first)) {\n\t\tdisposables = first as any as T[];\n\t}\n\n\tdisposables.forEach(d => d && d.dispose());\n\treturn [];\n}\n\nexport function combinedDisposable(disposables: IDisposable[]): IDisposable;\nexport function combinedDisposable(...disposables: IDisposable[]): IDisposable;\nexport function combinedDisposable(disposables: any): IDisposable {\n\treturn { dispose: () => dispose(disposables) };\n}\n\nexport function toDisposable(...fns: (() => void)[]): IDisposable {\n\treturn combinedDisposable(fns.map(fn => ({ dispose: fn })));\n}\n\nexport abstract class Disposable implements IDisposable {\n\n\tprivate _toDispose: IDisposable[];\n\n\tconstructor() {\n\t\tthis._toDispose = [];\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\t}\n\n\tprotected _register<T extends IDisposable>(t:T): T {\n\t\tthis._toDispose.push(t);\n\t\treturn t;\n\t}\n}\n\nexport class Disposables extends Disposable {\n\n\tpublic add<T extends IDisposable>(e: T): T;\n\tpublic add(...elements: IDisposable[]): void;\n\tpublic add<T extends IDisposable>(arg: T | T[]): T {\n\t\tif (!Array.isArray(arg)) {\n\t\t\treturn this._register(arg);\n\t\t} else {\n\t\t\tfor (let element of arg) {\n\t\t\t\treturn this._register(element);\n\t\t\t}\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport paths = require('vs/base/common/paths');\nimport types = require('vs/base/common/types');\nimport strings = require('vs/base/common/strings');\nimport {match} from 'vs/base/common/glob';\n\nexport let MIME_TEXT = 'text/plain';\nexport let MIME_BINARY = 'application/octet-stream';\nexport let MIME_UNKNOWN = 'application/unknown';\n\nexport interface ITextMimeAssociation {\n\tmime: string;\n\tfilename?: string;\n\textension?: string;\n\tfilepattern?: string;\n\tfirstline?: RegExp;\n\tuserConfigured?: boolean;\n}\n\nlet registeredAssociations: ITextMimeAssociation[] = [];\n\n/**\n * Associate a text mime to the registry.\n */\nexport function registerTextMime(association: ITextMimeAssociation): void {\n\n\t// Register\n\tregisteredAssociations.push(association);\n\n\t// Check for conflicts unless this is a user configured association\n\tif (!association.userConfigured) {\n\t\tregisteredAssociations.forEach(a => {\n\t\t\tif (a.mime === association.mime || a.userConfigured) {\n\t\t\t\treturn; // same mime or userConfigured is ok\n\t\t\t}\n\n\t\t\tif (association.extension && a.extension === association.extension) {\n\t\t\t\tconsole.warn(`Overwriting extension <<${association.extension}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\n\t\t\tif (association.filename && a.filename === association.filename) {\n\t\t\t\tconsole.warn(`Overwriting filename <<${association.filename}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\n\t\t\tif (association.filepattern && a.filepattern === association.filepattern) {\n\t\t\t\tconsole.warn(`Overwriting filepattern <<${association.filepattern}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\n\t\t\tif (association.firstline && a.firstline === association.firstline) {\n\t\t\t\tconsole.warn(`Overwriting firstline <<${association.firstline}>> to now point to mime <<${association.mime}>>`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Clear text mimes from the registry.\n */\nexport function clearTextMimes(onlyUserConfigured?: boolean): void {\n\tif (!onlyUserConfigured) {\n\t\tregisteredAssociations = [];\n\t} else {\n\t\tregisteredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n\t}\n}\n\n/**\n * Given a file, return the best matching mime type for it\n */\nexport function guessMimeTypes(path: string, firstLine?: string): string[] {\n\tif (!path) {\n\t\treturn [MIME_UNKNOWN];\n\t}\n\n\tpath = path.toLowerCase();\n\n\t// 1.) User configured mappings have highest priority\n\tlet configuredMime = guessMimeTypeByPath(path, registeredAssociations.filter(a => a.userConfigured));\n\tif (configuredMime) {\n\t\treturn [configuredMime, MIME_TEXT];\n\t}\n\n\t// 2.) Registered mappings have middle priority\n\tlet registeredMime = guessMimeTypeByPath(path, registeredAssociations.filter(a => !a.userConfigured));\n\tif (registeredMime) {\n\t\treturn [registeredMime, MIME_TEXT];\n\t}\n\n\t// 3.) Firstline has lowest priority\n\tif (firstLine) {\n\t\tlet firstlineMime = guessMimeTypeByFirstline(firstLine);\n\t\tif (firstlineMime) {\n\t\t\treturn [firstlineMime, MIME_TEXT];\n\t\t}\n\t}\n\n\treturn [MIME_UNKNOWN];\n}\n\nfunction guessMimeTypeByPath(path: string, associations: ITextMimeAssociation[]): string {\n\tlet filename = paths.basename(path);\n\n\tlet filenameMatch: ITextMimeAssociation;\n\tlet patternMatch: ITextMimeAssociation;\n\tlet extensionMatch: ITextMimeAssociation;\n\n\tfor (var i = 0; i < associations.length; i++) {\n\t\tlet association = associations[i];\n\n\t\t// First exact name match\n\t\tif (association.filename && filename === association.filename.toLowerCase()) {\n\t\t\tfilenameMatch = association;\n\t\t\tbreak; // take it!\n\t\t}\n\n\t\t// Longest pattern match\n\t\tif (association.filepattern) {\n\t\t\tlet target = association.filepattern.indexOf(paths.sep) >= 0 ? path : filename; // match on full path if pattern contains path separator\n\t\t\tif (match(association.filepattern.toLowerCase(), target)) {\n\t\t\t\tif (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n\t\t\t\t\tpatternMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Longest extension match\n\t\tif (association.extension) {\n\t\t\tif (strings.endsWith(filename, association.extension.toLowerCase())) {\n\t\t\t\tif (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n\t\t\t\t\textensionMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 1.) Exact name match has second highest prio\n\tif (filenameMatch) {\n\t\treturn filenameMatch.mime;\n\t}\n\n\t// 2.) Match on pattern\n\tif (patternMatch) {\n\t\treturn patternMatch.mime;\n\t}\n\n\t// 3.) Match on extension comes next\n\tif (extensionMatch) {\n\t\treturn extensionMatch.mime;\n\t}\n\n\treturn null;\n}\n\nfunction guessMimeTypeByFirstline(firstLine: string): string {\n\tif (strings.startsWithUTF8BOM(firstLine)) {\n\t\tfirstLine = firstLine.substr(1);\n\t}\n\n\tif (firstLine.length > 0) {\n\t\tfor (let i = 0; i < registeredAssociations.length; ++i) {\n\t\t\tlet association = registeredAssociations[i];\n\t\t\tif (!association.firstline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Make sure the entire line matches, not just a subpart.\n\t\t\tlet matches = firstLine.match(association.firstline);\n\t\t\tif (matches && matches.length > 0 && matches[0].length === firstLine.length) {\n\t\t\t\treturn association.mime;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function isBinaryMime(mimes: string): boolean;\nexport function isBinaryMime(mimes: string[]): boolean;\nexport function isBinaryMime(mimes: any): boolean {\n\tif (!mimes) {\n\t\treturn false;\n\t}\n\n\tlet mimeVals: string[];\n\tif (types.isArray(mimes)) {\n\t\tmimeVals = (<string[]>mimes);\n\t} else {\n\t\tmimeVals = (<string>mimes).split(',').map((mime) => mime.trim());\n\t}\n\n\treturn mimeVals.indexOf(MIME_BINARY) >= 0;\n}\n\nexport function isUnspecific(mime: string[] | string): boolean {\n\tif (!mime) {\n\t\treturn true;\n\t}\n\n\tif (typeof mime === 'string') {\n\t\treturn mime === MIME_BINARY || mime === MIME_TEXT || mime === MIME_UNKNOWN;\n\t}\n\n\treturn mime.length === 1 && isUnspecific(mime[0]);\n}\n\nexport function suggestFilename(theMime: string, prefix: string): string {\n\tfor (var i = 0; i < registeredAssociations.length; i++) {\n\t\tlet association = registeredAssociations[i];\n\t\tif (association.userConfigured) {\n\t\t\tcontinue; // only support registered ones\n\t\t}\n\n\t\tif (association.mime === theMime && association.extension) {\n\t\t\treturn prefix + association.extension;\n\t\t}\n\t}\n\n\treturn null;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport namespace Arrays {\n\n\t/**\n\t * Given a sorted array of natural number segments, find the segment containing a natural number.\n\t *    For example, the segments [0, 5), [5, 9), [9, infinity) will be represented in the following manner:\n\t *       [{ startIndex: 0 }, { startIndex: 5 }, { startIndex: 9 }]\n\t *    Searching for 0, 1, 2, 3 or 4 will return 0.\n\t *    Searching for 5, 6, 7 or 8 will return 1.\n\t *    Searching for 9, 10, 11, ... will return 2.\n\t * @param arr A sorted array representing natural number segments\n\t * @param desiredIndex The search\n\t * @return The index of the containing segment in the array.\n\t */\n\texport function findIndexInSegmentsArray(arr: { startIndex: number; }[], desiredIndex: number): number {\n\n\t\tlet low = 0;\n\t\tlet high = arr.length - 1;\n\n\t\tif (high <= 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\twhile (low < high) {\n\n\t\t\tlet mid = low + Math.ceil((high - low) / 2);\n\n\t\t\tif (arr[mid].startIndex > desiredIndex) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlow = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IMode, IModeTransition} from 'vs/editor/common/modes';\nimport {Arrays} from 'vs/editor/common/core/arrays';\n\nexport class ModeTransition {\n\t_modeTransitionBrand: void;\n\n\tpublic startIndex:number;\n\tpublic mode:IMode;\n\n\tconstructor(startIndex:number, mode:IMode) {\n\t\tthis.startIndex = startIndex|0;\n\t\tthis.mode = mode;\n\t}\n\n\tpublic static findIndexInSegmentsArray(arr:ModeTransition[], desiredIndex: number): number {\n\t\treturn Arrays.findIndexInSegmentsArray(arr, desiredIndex);\n\t}\n\n\tpublic static create(modeTransitions:IModeTransition[]): ModeTransition[] {\n\t\tlet result:ModeTransition[] = [];\n\t\tfor (let i = 0, len = modeTransitions.length; i < len; i++) {\n\t\t\tlet modeTransition = modeTransitions[i];\n\t\t\tresult.push(new ModeTransition(modeTransition.startIndex, modeTransition.mode));\n\t\t}\n\t\treturn result;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IPosition, IRange} from 'vs/editor/common/editorCommon';\n\n/**\n * A position in the editor.\n */\nexport class Position {\n\n\tpublic lineNumber: number;\n\tpublic column: number;\n\n\tconstructor(lineNumber: number, column: number) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.column = column;\n\t}\n\n\t/**\n\t * Test if this position equals other position\n\t */\n\tpublic equals(other:IPosition): boolean {\n\t\treturn Position.equals(this, other);\n\t}\n\tpublic static equals(a:IPosition, b:IPosition): boolean {\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\t!!a &&\n\t\t\t!!b &&\n\t\t\ta.lineNumber === b.lineNumber &&\n\t\t\ta.column === b.column\n\t\t);\n\t}\n\n\t/**\n\t * Test if this position is before other position. If the two positions are equal, the result will be false.\n\t */\n\tpublic isBefore(other:IPosition): boolean {\n\t\treturn Position.isBefore(this, other);\n\t}\n\tpublic static isBefore(a:IPosition, b:IPosition): boolean {\n\t\tif (a.lineNumber < b.lineNumber) {\n\t\t\treturn true;\n\t\t}\n\t\tif (b.lineNumber < a.lineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.column < b.column;\n\t}\n\n\t/**\n\t * Test if this position is before other position. If the two positions are equal, the result will be true.\n\t */\n\tpublic isBeforeOrEqual(other:IPosition): boolean {\n\t\treturn Position.isBeforeOrEqual(this, other);\n\t}\n\tpublic static isBeforeOrEqual(a:IPosition, b:IPosition): boolean {\n\t\tif (a.lineNumber < b.lineNumber) {\n\t\t\treturn true;\n\t\t}\n\t\tif (b.lineNumber < a.lineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.column <= b.column;\n\t}\n\n\t/**\n\t * Clone this position.\n\t */\n\tpublic clone(): Position {\n\t\treturn new Position(this.lineNumber, this.column);\n\t}\n\n\tpublic toString(): string {\n\t\treturn '(' + this.lineNumber + ',' + this.column + ')';\n\t}\n\n\t// ---\n\n\tpublic static lift(pos:IPosition): Position {\n\t\treturn new Position(pos.lineNumber, pos.column);\n\t}\n\n\tpublic static isIPosition(obj: any): obj is IPosition {\n\t\treturn (\n\t\t\tobj\n\t\t\t&& (typeof obj.lineNumber === 'number')\n\t\t\t&& (typeof obj.column === 'number')\n\t\t);\n\t}\n\n\tpublic static asEmptyRange(position:IPosition):IRange {\n\t\treturn {\n\t\t\tstartLineNumber: position.lineNumber,\n\t\t\tstartColumn: position.column,\n\t\t\tendLineNumber: position.lineNumber,\n\t\t\tendColumn: position.column\n\t\t};\n\t}\n\n\tpublic static startPosition(range:IRange):IPosition {\n\t\treturn {\n\t\t\tlineNumber: range.startLineNumber,\n\t\t\tcolumn: range.startColumn\n\t\t};\n\t}\n\n\tpublic static endPosition(range:IRange):IPosition {\n\t\treturn {\n\t\t\tlineNumber: range.endLineNumber,\n\t\t\tcolumn: range.endColumn\n\t\t};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {Position} from 'vs/editor/common/core/position';\nimport {IPosition, IRange} from 'vs/editor/common/editorCommon';\n\n/**\n * A range in the editor.\n */\nexport class Range {\n\n\tpublic startLineNumber:number;\n\tpublic startColumn:number;\n\tpublic endLineNumber:number;\n\tpublic endColumn:number;\n\n\tconstructor(startLineNumber:number, startColumn:number, endLineNumber:number, endColumn:number) {\n\t\tif ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n\t\t\tthis.startLineNumber = endLineNumber;\n\t\t\tthis.startColumn = endColumn;\n\t\t\tthis.endLineNumber = startLineNumber;\n\t\t\tthis.endColumn = startColumn;\n\t\t} else {\n\t\t\tthis.startLineNumber = startLineNumber;\n\t\t\tthis.startColumn = startColumn;\n\t\t\tthis.endLineNumber = endLineNumber;\n\t\t\tthis.endColumn = endColumn;\n\t\t}\n\t}\n\n\t/**\n\t * Test if this range is empty.\n\t */\n\tpublic isEmpty(): boolean {\n\t\treturn Range.isEmpty(this);\n\t}\n\n\t/**\n\t * Test if position is in this range. If the position is at the edges, will return true.\n\t */\n\tpublic containsPosition(position:IPosition): boolean {\n\t\treturn Range.containsPosition(this, position);\n\t}\n\n\t/**\n\t * Test if range is in this range. If the range is equal to this range, will return true.\n\t */\n\tpublic containsRange(range:IRange): boolean {\n\t\treturn Range.containsRange(this, range);\n\t}\n\n\t/**\n\t * A reunion of the two ranges. The smallest position will be used as the start point, and the largest one as the end point.\n\t */\n\tpublic plusRange(range:IRange): Range {\n\t\treturn Range.plusRange(this, range);\n\t}\n\n\t/**\n\t * A intersection of the two ranges.\n\t */\n\tpublic intersectRanges(range:IRange): Range {\n\t\treturn Range.intersectRanges(this, range);\n\t}\n\n\t/**\n\t * Test if this range equals other.\n\t */\n\tpublic equalsRange(other:IRange): boolean {\n\t\treturn Range.equalsRange(this, other);\n\t}\n\n\t/**\n\t * Return the end position (which will be after or equal to the start position)\n\t */\n\tpublic getEndPosition(): Position {\n\t\treturn new Position(this.endLineNumber, this.endColumn);\n\t}\n\n\t/**\n\t * Return the start position (which will be before or equal to the end position)\n\t */\n\tpublic getStartPosition(): Position {\n\t\treturn new Position(this.startLineNumber, this.startColumn);\n\t}\n\n\t/**\n\t * Clone this range.\n\t */\n\tpublic cloneRange(): Range {\n\t\treturn new Range(this.startLineNumber, this.startColumn, this.endLineNumber, this.endColumn);\n\t}\n\n\t/**\n\t * Transform to a user presentable string representation.\n\t */\n\tpublic toString(): string {\n\t\treturn '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n\t}\n\n\t/**\n\t * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n\t */\n\tpublic setEndPosition(endLineNumber: number, endColumn: number): Range {\n\t\treturn new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n\t}\n\n\t/**\n\t * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n\t */\n\tpublic setStartPosition(startLineNumber: number, startColumn: number): Range {\n\t\treturn new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n\t}\n\n\tpublic collapseToStart():Range  {\n\t\treturn new Range(this.startLineNumber, this.startColumn, this.startLineNumber, this.startColumn);\n\t}\n\n\t// ---\n\n\tpublic static lift(range:IRange): Range {\n\t\tif (!range) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n\t}\n\n\tpublic static isIRange(obj: any): obj is IRange {\n\t\treturn (\n\t\t\tobj\n\t\t\t&& (typeof obj.startLineNumber === 'number')\n\t\t\t&& (typeof obj.startColumn === 'number')\n\t\t\t&& (typeof obj.endLineNumber === 'number')\n\t\t\t&& (typeof obj.endColumn === 'number')\n\t\t);\n\t}\n\n\tpublic static isEmpty(range:IRange): boolean {\n\t\treturn (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n\t}\n\n\tpublic static containsPosition(range:IRange, position:IPosition): boolean {\n\t\tif (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\tif (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n\t\t\treturn false;\n\t\t}\n\t\tif (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static containsRange(range:IRange, otherRange:IRange): boolean {\n\t\tif (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\tif (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n\t\t\treturn false;\n\t\t}\n\t\tif (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n\t\t\treturn false;\n\t\t}\n\t\tif (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static areIntersectingOrTouching(a:IRange, b:IRange): boolean {\n\t\t// Check if `a` is before `b`\n\t\tif (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if `b` is before `a`\n\t\tif (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// These ranges must intersect\n\t\treturn true;\n\t}\n\n\tpublic static intersectRanges(a:IRange, b:IRange): Range {\n\t\tvar resultStartLineNumber = a.startLineNumber,\n\t\t\tresultStartColumn = a.startColumn,\n\t\t\tresultEndLineNumber = a.endLineNumber,\n\t\t\tresultEndColumn = a.endColumn,\n\t\t\totherStartLineNumber = b.startLineNumber,\n\t\t\totherStartColumn = b.startColumn,\n\t\t\totherEndLineNumber = b.endLineNumber,\n\t\t\totherEndColumn = b.endColumn;\n\n\t\tif (resultStartLineNumber < otherStartLineNumber) {\n\t\t\tresultStartLineNumber = otherStartLineNumber;\n\t\t\tresultStartColumn = otherStartColumn;\n\t\t} else if (resultStartLineNumber === otherStartLineNumber) {\n\t\t\tresultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n\t\t}\n\n\t\tif (resultEndLineNumber > otherEndLineNumber) {\n\t\t\tresultEndLineNumber = otherEndLineNumber;\n\t\t\tresultEndColumn = otherEndColumn;\n\t\t} else if (resultEndLineNumber === otherEndLineNumber) {\n\t\t\tresultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n\t\t}\n\n\t\t// Check if selection is now empty\n\t\tif (resultStartLineNumber > resultEndLineNumber) {\n\t\t\treturn null;\n\t\t}\n\t\tif (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n\t}\n\n\tpublic static plusRange(a:IRange, b:IRange): Range {\n\t\tvar startLineNumber:number, startColumn:number, endLineNumber:number, endColumn:number;\n\t\tif (b.startLineNumber < a.startLineNumber) {\n\t\t\tstartLineNumber = b.startLineNumber;\n\t\t\tstartColumn = b.startColumn;\n\t\t} else if (b.startLineNumber === a.startLineNumber) {\n\t\t\tstartLineNumber = b.startLineNumber;\n\t\t\tstartColumn = Math.min(b.startColumn, a.startColumn);\n\t\t} else {\n\t\t\tstartLineNumber = a.startLineNumber;\n\t\t\tstartColumn = a.startColumn;\n\t\t}\n\n\t\tif (b.endLineNumber > a.endLineNumber) {\n\t\t\tendLineNumber = b.endLineNumber;\n\t\t\tendColumn = b.endColumn;\n\t\t} else if (b.endLineNumber === a.endLineNumber) {\n\t\t\tendLineNumber = b.endLineNumber;\n\t\t\tendColumn = Math.max(b.endColumn, a.endColumn);\n\t\t} else {\n\t\t\tendLineNumber = a.endLineNumber;\n\t\t\tendColumn = a.endColumn;\n\t\t}\n\n\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t}\n\n\tpublic static equalsRange(a:IRange, b:IRange): boolean {\n\t\treturn (\n\t\t\t!!a &&\n\t\t\t!!b &&\n\t\t\ta.startLineNumber === b.startLineNumber &&\n\t\t\ta.startColumn === b.startColumn &&\n\t\t\ta.endLineNumber === b.endLineNumber &&\n\t\t\ta.endColumn === b.endColumn\n\t\t);\n\t}\n\n\t/**\n\t * A function that compares ranges, useful for sorting ranges\n\t * It will first compare ranges on the startPosition and then on the endPosition\n\t */\n\tpublic static compareRangesUsingStarts(a:IRange, b:IRange): number {\n\t\tlet aStartLineNumber = a.startLineNumber|0;\n\t\tlet bStartLineNumber = b.startLineNumber|0;\n\t\tlet aStartColumn = a.startColumn|0;\n\t\tlet bStartColumn = b.startColumn|0;\n\t\tlet aEndLineNumber = a.endLineNumber|0;\n\t\tlet bEndLineNumber = b.endLineNumber|0;\n\t\tlet aEndColumn = a.endColumn|0;\n\t\tlet bEndColumn = b.endColumn|0;\n\n\t\tif (aStartLineNumber === bStartLineNumber) {\n\t\t\tif (aStartColumn === bStartColumn) {\n\t\t\t\tif (aEndLineNumber === bEndLineNumber) {\n\t\t\t\t\treturn aEndColumn - bEndColumn;\n\t\t\t\t}\n\t\t\t\treturn aEndLineNumber - bEndLineNumber;\n\t\t\t}\n\t\t\treturn aStartColumn - bStartColumn;\n\t\t}\n\t\treturn aStartLineNumber - bStartLineNumber;\n\t}\n\n\t/**\n\t * A function that compares ranges, useful for sorting ranges\n\t * It will first compare ranges on the endPosition and then on the startPosition\n\t */\n\tpublic static compareRangesUsingEnds(a:IRange, b:IRange): number {\n\t\tif (a.endLineNumber === b.endLineNumber) {\n\t\t\tif (a.endColumn === b.endColumn) {\n\t\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\t\treturn a.startColumn - b.startColumn;\n\t\t\t\t}\n\t\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t\t}\n\t\t\treturn a.endColumn - b.endColumn;\n\t\t}\n\t\treturn a.endLineNumber - b.endLineNumber;\n\t}\n\n\tpublic static spansMultipleLines(range:IRange):boolean {\n\t\treturn range.endLineNumber > range.startLineNumber;\n\t}\n\n\tpublic static collapseToStart(range:IRange):IRange  {\n\t\treturn {\n\t\t\tstartLineNumber: range.startLineNumber,\n\t\t\tstartColumn: range.startColumn,\n\t\t\tendLineNumber: range.startLineNumber,\n\t\t\tendColumn: range.startColumn\n\t\t};\n\t}\n\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Arrays} from 'vs/editor/common/core/arrays';\n\n/**\n * A token on a line.\n */\nexport class ViewLineToken {\n\t_viewLineTokenBrand: void;\n\n\tpublic startIndex:number;\n\tpublic type:string;\n\n\tconstructor(startIndex:number, type:string) {\n\t\tthis.startIndex = startIndex|0;// @perf\n\t\tthis.type = type.replace(/[^a-z0-9\\-]/gi, ' ');\n\t}\n\n\tpublic equals(other:ViewLineToken): boolean {\n\t\treturn (\n\t\t\tthis.startIndex === other.startIndex\n\t\t\t&& this.type === other.type\n\t\t);\n\t}\n\n\tpublic static findIndexInSegmentsArray(arr:ViewLineToken[], desiredIndex: number): number {\n\t\treturn Arrays.findIndexInSegmentsArray(arr, desiredIndex);\n\t}\n\n\tpublic static equalsArray(a:ViewLineToken[], b:ViewLineToken[]): boolean {\n\t\tlet aLen = a.length;\n\t\tlet bLen = b.length;\n\t\tif (aLen !== bLen) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < aLen; i++) {\n\t\t\tif (!a[i].equals(b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class ViewLineTokens {\n\t_viewLineTokensBrand: void;\n\n\tprivate _lineTokens:ViewLineToken[];\n\tprivate _fauxIndentLength:number;\n\tprivate _textLength:number;\n\n\tconstructor(lineTokens:ViewLineToken[], fauxIndentLength:number, textLength:number) {\n\t\tthis._lineTokens = lineTokens;\n\t\tthis._fauxIndentLength = fauxIndentLength|0;\n\t\tthis._textLength = textLength|0;\n\t}\n\n\tpublic getTokens(): ViewLineToken[] {\n\t\treturn this._lineTokens;\n\t}\n\n\tpublic getFauxIndentLength(): number {\n\t\treturn this._fauxIndentLength;\n\t}\n\n\tpublic getTextLength(): number {\n\t\treturn this._textLength;\n\t}\n\n\tpublic equals(other:ViewLineTokens): boolean {\n\t\treturn (\n\t\t\tthis._fauxIndentLength === other._fauxIndentLength\n\t\t\t&& this._textLength === other._textLength\n\t\t\t&& ViewLineToken.equalsArray(this._lineTokens, other._lineTokens)\n\t\t);\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn ViewLineToken.findIndexInSegmentsArray(this._lineTokens, offset);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IAction} from 'vs/base/common/actions';\nimport {IEventEmitter, BulkListenerCallback} from 'vs/base/common/eventEmitter';\nimport {IHTMLContentElement} from 'vs/base/common/htmlContent';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IInstantiationService, IConstructorSignature1, IConstructorSignature2} from 'vs/platform/instantiation/common/instantiation';\nimport {ILineContext, IMode, IModeTransition, IToken} from 'vs/editor/common/modes';\nimport {ViewLineToken} from 'vs/editor/common/core/viewLineToken';\nimport {ScrollbarVisibility} from 'vs/base/browser/ui/scrollbar/scrollableElementOptions';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Selection} from 'vs/editor/common/core/selection';\n\n/**\n * @internal\n */\nexport interface Event<T> {\n\t(listener: (e: T) => any, thisArg?: any): IDisposable;\n}\n\n// --- position & range\n\n/**\n * A position in the editor. This interface is suitable for serialization.\n */\nexport interface IPosition {\n\t/**\n\t * line number (starts at 1)\n\t */\n\tlineNumber:number;\n\t/**\n\t * column (the first character in a line is between column 1 and column 2)\n\t */\n\tcolumn:number;\n}\n\n/**\n * A range in the editor. This interface is suitable for serialization.\n */\nexport interface IRange {\n\t/**\n\t * Line number on which the range starts (starts at 1).\n\t */\n\tstartLineNumber:number;\n\t/**\n\t * Column on which the range starts in line `startLineNumber` (starts at 1).\n\t */\n\tstartColumn:number;\n\t/**\n\t * Line number on which the range ends.\n\t */\n\tendLineNumber:number;\n\t/**\n\t * Column on which the range ends in line `endLineNumber`.\n\t */\n\tendColumn:number;\n}\n\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport interface ISelection {\n\t/**\n\t * The line number on which the selection has started.\n\t */\n\tselectionStartLineNumber: number;\n\t/**\n\t * The column on `selectionStartLineNumber` where the selection has started.\n\t */\n\tselectionStartColumn: number;\n\t/**\n\t * The line number on which the selection has ended.\n\t */\n\tpositionLineNumber: number;\n\t/**\n\t * The column on `positionLineNumber` where the selection has ended.\n\t */\n\tpositionColumn: number;\n}\n\n/**\n * The direction of a selection.\n */\nexport enum SelectionDirection {\n\t/**\n\t * The selection starts above where it ends.\n\t */\n\tLTR,\n\t/**\n\t * The selection starts below where it ends.\n\t */\n\tRTL\n}\n\n/**\n * Configuration options for editor scrollbars\n */\nexport interface IEditorScrollbarOptions {\n\t/**\n\t * The size of arrows (if displayed).\n\t * Defaults to 11.\n\t */\n\tarrowSize?:number;\n\t/**\n\t * Render vertical scrollbar.\n\t * Accepted values: 'auto', 'visible', 'hidden'.\n\t * Defaults to 'auto'.\n\t */\n\tvertical?:string;\n\t/**\n\t * Render horizontal scrollbar.\n\t * Accepted values: 'auto', 'visible', 'hidden'.\n\t * Defaults to 'auto'.\n\t */\n\thorizontal?:string;\n\t/**\n\t * Cast horizontal and vertical shadows when the content is scrolled.\n\t * Defaults to false.\n\t */\n\tuseShadows?:boolean;\n\t/**\n\t * Render arrows at the top and bottom of the vertical scrollbar.\n\t * Defaults to false.\n\t */\n\tverticalHasArrows?:boolean;\n\t/**\n\t * Render arrows at the left and right of the horizontal scrollbar.\n\t * Defaults to false.\n\t */\n\thorizontalHasArrows?:boolean;\n\t/**\n\t * Listen to mouse wheel events and react to them by scrolling.\n\t * Defaults to true.\n\t */\n\thandleMouseWheel?: boolean;\n\t/**\n\t * Height in pixels for the horizontal scrollbar.\n\t * Defaults to 10 (px).\n\t */\n\thorizontalScrollbarSize?: number;\n\t/**\n\t * Width in pixels for the vertical scrollbar.\n\t * Defaults to 10 (px).\n\t */\n\tverticalScrollbarSize?: number;\n\tverticalSliderSize?: number;\n\thorizontalSliderSize?: number;\n}\n\nexport enum WrappingIndent {\n\tNone = 0,\n\tSame = 1,\n\tIndent = 2\n}\n\n/**\n * Configuration options for the editor.\n */\nexport interface IEditorOptions {\n\texperimentalScreenReader?: boolean;\n\tariaLabel?: string;\n\t/**\n\t * Render vertical lines at the specified columns.\n\t * Defaults to empty array.\n\t */\n\trulers?: number[];\n\t/**\n\t * A string containing the word separators used when doing word navigation.\n\t * Defaults to `~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?\n\t */\n\twordSeparators?: string;\n\t/**\n\t * Enable Linux primary clipboard.\n\t * Defaults to true.\n\t */\n\tselectionClipboard?: boolean;\n\t/**\n\t * Control the rendering of line numbers.\n\t * If it is a function, it will be invoked when rendering a line number and the return value will be rendered.\n\t * Otherwise, if it is a truey, line numbers will be rendered normally (equivalent of using an identity function).\n\t * Otherwise, line numbers will not be rendered.\n\t * Defaults to true.\n\t */\n\tlineNumbers?:any;\n\t/**\n\t * Should the corresponding line be selected when clicking on the line number?\n\t * Defaults to true.\n\t */\n\tselectOnLineNumbers?:boolean;\n\t/**\n\t * Control the width of line numbers, by reserving horizontal space for rendering at least an amount of digits.\n\t * Defaults to 5.\n\t */\n\tlineNumbersMinChars?:number;\n\t/**\n\t * Enable the rendering of the glyph margin.\n\t * Defaults to false.\n\t */\n\tglyphMargin?:boolean;\n\t/**\n\t * The width reserved for line decorations (in px).\n\t * Line decorations are placed between line numbers and the editor content.\n\t * Defaults to 10.\n\t */\n\tlineDecorationsWidth?:number;\n\t/**\n\t * When revealing the cursor, a virtual padding (px) is added to the cursor, turning it into a rectangle.\n\t * This virtual padding ensures that the cursor gets revealed before hitting the edge of the viewport.\n\t * Defaults to 30 (px).\n\t */\n\trevealHorizontalRightPadding?:number;\n\t/**\n\t * Render the editor selection with rounded borders.\n\t * Defaults to true.\n\t */\n\troundedSelection?:boolean;\n\t/**\n\t * Theme to be used for rendering. Consists of two parts, the UI theme and the syntax theme,\n\t * separated by a space.\n\t * The current available UI themes are: 'vs' (default), 'vs-dark', 'hc-black'\n\t * The syntax themes are contributed. The default is 'default-theme'\n\t */\n\ttheme?:string;\n\t/**\n\t * Should the editor be read only.\n\t * Defaults to false.\n\t */\n\treadOnly?:boolean;\n\t/**\n\t * Control the behavior and rendering of the scrollbars.\n\t */\n\tscrollbar?:IEditorScrollbarOptions;\n\t/**\n\t * The number of vertical lanes the overview ruler should render.\n\t * Defaults to 2.\n\t */\n\toverviewRulerLanes?:number;\n\t/**\n\t * Control the cursor blinking animation.\n\t * Defaults to 'blink'.\n\t */\n\tcursorBlinking?:string;\n\t/**\n\t * Control the cursor style, either 'block' or 'line'.\n\t * Defaults to 'line'.\n\t */\n\tcursorStyle?:string;\n\t/**\n\t * Enable font ligatures.\n\t * Defaults to false.\n\t */\n\tfontLigatures?:boolean;\n\t/**\n\t * Disable the use of `translate3d`.\n\t * Defaults to false.\n\t */\n\tdisableTranslate3d?:boolean;\n\t/**\n\t * Should the cursor be hidden in the overview ruler.\n\t * Defaults to false.\n\t */\n\thideCursorInOverviewRuler?:boolean;\n\t/**\n\t * Enable that scrolling can go one screen size after the last line.\n\t * Defaults to true.\n\t */\n\tscrollBeyondLastLine?:boolean;\n\t/**\n\t * Enable that the editor will install an interval to check if its container dom node size has changed.\n\t * Enabling this might have a severe performance impact.\n\t * Defaults to false.\n\t */\n\tautomaticLayout?:boolean;\n\t/**\n\t * Control the wrapping strategy of the editor.\n\t * Using -1 means no wrapping whatsoever.\n\t * Using 0 means viewport width wrapping (ajusts with the resizing of the editor).\n\t * Using a positive number means wrapping after a fixed number of characters.\n\t * Defaults to 300.\n\t */\n\twrappingColumn?:number;\n\t/**\n\t * Control indentation of wrapped lines. Can be: 'none', 'same' or 'indent'.\n\t * Defaults to 'none'.\n\t */\n\twrappingIndent?: string;\n\t/**\n\t * Configure word wrapping characters. A break will be introduced before these characters.\n\t * Defaults to '{([+'.\n\t */\n\twordWrapBreakBeforeCharacters?: string;\n\t/**\n\t * Configure word wrapping characters. A break will be introduced after these characters.\n\t * Defaults to ' \\t})]?|&,;'.\n\t */\n\twordWrapBreakAfterCharacters?: string;\n\t/**\n\t * Configure word wrapping characters. A break will be introduced after these characters only if no `wordWrapBreakBeforeCharacters` or `wordWrapBreakAfterCharacters` were found.\n\t * Defaults to '.'.\n\t */\n\twordWrapBreakObtrusiveCharacters?: string;\n\n\t/**\n\t * Control what pressing Tab does.\n\t * If it is false, pressing Tab or Shift-Tab will be handled by the editor.\n\t * If it is true, pressing Tab or Shift-Tab will move the browser focus.\n\t * Defaults to false.\n\t */\n\ttabFocusMode?:boolean;\n\n\t/**\n\t * Performance guard: Stop rendering a line after x characters.\n\t * Defaults to 10000 if wrappingColumn is -1. Defaults to -1 if wrappingColumn is >= 0.\n\t * Use -1 to never stop rendering\n\t */\n\tstopRenderingLineAfter?:number;\n\t/**\n\t * Enable hover.\n\t * Defaults to true.\n\t */\n\thover?:boolean;\n\t/**\n\t * Enable custom contextmenu.\n\t * Defaults to true.\n\t */\n\tcontextmenu?:boolean;\n\t/**\n\t * A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\n\t * Defaults to 1.\n\t */\n\tmouseWheelScrollSensitivity?: number;\n\t/**\n\t * Enable quick suggestions (shaddow suggestions)\n\t * Defaults to true.\n\t */\n\tquickSuggestions?:boolean;\n\t/**\n\t * Quick suggestions show delay (in ms)\n\t * Defaults to 500 (ms)\n\t */\n\tquickSuggestionsDelay?:number;\n\t/**\n\t * Render icons in suggestions box.\n\t * Defaults to true.\n\t */\n\ticonsInSuggestions?:boolean;\n\t/**\n\t * Enable auto closing brackets.\n\t * Defaults to true.\n\t */\n\tautoClosingBrackets?:boolean;\n\t/**\n\t * Enable format on type.\n\t * Defaults to false.\n\t */\n\tformatOnType?:boolean;\n\t/**\n\t * Enable the suggestion box to pop-up on trigger characters.\n\t * Defaults to true.\n\t */\n\tsuggestOnTriggerCharacters?: boolean;\n\t/**\n\t * Accept suggestions on ENTER.\n\t * Defaults to true.\n\t */\n\tacceptSuggestionOnEnter?: boolean;\n\t/**\n\t * Enable selection highlight.\n\t * Defaults to true.\n\t */\n\tselectionHighlight?:boolean;\n\t/**\n\t * Show lines before classes and methods (based on outline info).\n\t * Defaults to false.\n\t */\n\toutlineMarkers?: boolean;\n\t/**\n\t * Show reference infos (a.k.a. code lenses) for modes that support it\n\t * Defaults to true.\n\t */\n\treferenceInfos?: boolean;\n\t/**\n\t * Enable code folding\n\t * Defaults to true.\n\t */\n\tfolding?: boolean;\n\t/**\n\t * Enable rendering of leading whitespace.\n\t * Defaults to false.\n\t */\n\trenderWhitespace?: boolean;\n\t/**\n\t * Enable rendering of indent guides.\n\t * Defaults to true.\n\t */\n\tindentGuides?: boolean;\n\t/**\n\t * Inserting and deleting whitespace follows tab stops.\n\t */\n\tuseTabStops?: boolean;\n\t/**\n\t * The font family\n\t */\n\tfontFamily?: string;\n\t/**\n\t * The font size\n\t */\n\tfontSize?: number;\n\t/**\n\t * The line height\n\t */\n\tlineHeight?: number;\n}\n\n/**\n * Configuration options for the diff editor.\n */\nexport interface IDiffEditorOptions extends IEditorOptions {\n\t/**\n\t * Allow the user to resize the diff editor split view.\n\t * Defaults to true.\n\t */\n\tenableSplitViewResizing?: boolean;\n\t/**\n\t * Render the differences in two side-by-side editors.\n\t * Defaults to true.\n\t */\n\trenderSideBySide?: boolean;\n\t/**\n\t * Compute the diff by ignoring leading/trailing whitespace\n\t * Defaults to true.\n\t */\n\tignoreTrimWhitespace?: boolean;\n\t/**\n\t * Original model should be editable?\n\t * Defaults to false.\n\t */\n\toriginalEditable?: boolean;\n}\n\nexport class InternalEditorScrollbarOptions {\n\t_internalEditorScrollbarOptionsBrand: void;\n\n\tarrowSize:number;\n\tvertical:ScrollbarVisibility;\n\thorizontal:ScrollbarVisibility;\n\tuseShadows:boolean;\n\tverticalHasArrows:boolean;\n\thorizontalHasArrows:boolean;\n\thandleMouseWheel: boolean;\n\thorizontalScrollbarSize: number;\n\thorizontalSliderSize: number;\n\tverticalScrollbarSize: number;\n\tverticalSliderSize: number;\n\tmouseWheelScrollSensitivity: number;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(source:{\n\t\tarrowSize:number;\n\t\tvertical:ScrollbarVisibility;\n\t\thorizontal:ScrollbarVisibility;\n\t\tuseShadows:boolean;\n\t\tverticalHasArrows:boolean;\n\t\thorizontalHasArrows:boolean;\n\t\thandleMouseWheel: boolean;\n\t\thorizontalScrollbarSize: number;\n\t\thorizontalSliderSize: number;\n\t\tverticalScrollbarSize: number;\n\t\tverticalSliderSize: number;\n\t\tmouseWheelScrollSensitivity: number;\n\t}) {\n\t\tthis.arrowSize = source.arrowSize|0;\n\t\tthis.vertical = source.vertical|0;\n\t\tthis.horizontal = source.horizontal|0;\n\t\tthis.useShadows = Boolean(source.useShadows);\n\t\tthis.verticalHasArrows = Boolean(source.verticalHasArrows);\n\t\tthis.horizontalHasArrows = Boolean(source.horizontalHasArrows);\n\t\tthis.handleMouseWheel = Boolean(source.handleMouseWheel);\n\t\tthis.horizontalScrollbarSize = source.horizontalScrollbarSize|0;\n\t\tthis.horizontalSliderSize = source.horizontalSliderSize|0;\n\t\tthis.verticalScrollbarSize = source.verticalScrollbarSize|0;\n\t\tthis.verticalSliderSize = source.verticalSliderSize|0;\n\t\tthis.mouseWheelScrollSensitivity = Number(source.mouseWheelScrollSensitivity);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other:InternalEditorScrollbarOptions): boolean {\n\t\treturn (\n\t\t\tthis.arrowSize === other.arrowSize\n\t\t\t&& this.vertical === other.vertical\n\t\t\t&& this.horizontal === other.horizontal\n\t\t\t&& this.useShadows === other.useShadows\n\t\t\t&& this.verticalHasArrows === other.verticalHasArrows\n\t\t\t&& this.horizontalHasArrows === other.horizontalHasArrows\n\t\t\t&& this.handleMouseWheel === other.handleMouseWheel\n\t\t\t&& this.horizontalScrollbarSize === other.horizontalScrollbarSize\n\t\t\t&& this.horizontalSliderSize === other.horizontalSliderSize\n\t\t\t&& this.verticalScrollbarSize === other.verticalScrollbarSize\n\t\t\t&& this.verticalSliderSize === other.verticalSliderSize\n\t\t\t&& this.mouseWheelScrollSensitivity === other.mouseWheelScrollSensitivity\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): InternalEditorScrollbarOptions {\n\t\treturn new InternalEditorScrollbarOptions(this);\n\t}\n}\n\nexport class EditorWrappingInfo {\n\t_editorWrappingInfoBrand: void;\n\n\tisViewportWrapping: boolean;\n\twrappingColumn: number;\n\twrappingIndent: WrappingIndent;\n\twordWrapBreakBeforeCharacters: string;\n\twordWrapBreakAfterCharacters: string;\n\twordWrapBreakObtrusiveCharacters: string;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(source:{\n\t\tisViewportWrapping: boolean;\n\t\twrappingColumn: number;\n\t\twrappingIndent: WrappingIndent;\n\t\twordWrapBreakBeforeCharacters: string;\n\t\twordWrapBreakAfterCharacters: string;\n\t\twordWrapBreakObtrusiveCharacters: string;\n\t}) {\n\t\tthis.isViewportWrapping = Boolean(source.isViewportWrapping);\n\t\tthis.wrappingColumn = source.wrappingColumn|0;\n\t\tthis.wrappingIndent = source.wrappingIndent|0;\n\t\tthis.wordWrapBreakBeforeCharacters = String(source.wordWrapBreakBeforeCharacters);\n\t\tthis.wordWrapBreakAfterCharacters = String(source.wordWrapBreakAfterCharacters);\n\t\tthis.wordWrapBreakObtrusiveCharacters = String(source.wordWrapBreakObtrusiveCharacters);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other:EditorWrappingInfo): boolean {\n\t\treturn (\n\t\t\tthis.isViewportWrapping === other.isViewportWrapping\n\t\t\t&& this.wrappingColumn === other.wrappingColumn\n\t\t\t&& this.wrappingIndent === other.wrappingIndent\n\t\t\t&& this.wordWrapBreakBeforeCharacters === other.wordWrapBreakBeforeCharacters\n\t\t\t&& this.wordWrapBreakAfterCharacters === other.wordWrapBreakAfterCharacters\n\t\t\t&& this.wordWrapBreakObtrusiveCharacters === other.wordWrapBreakObtrusiveCharacters\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): EditorWrappingInfo {\n\t\treturn new EditorWrappingInfo(this);\n\t}\n}\n\nexport class InternalEditorViewOptions {\n\t_internalEditorViewOptionsBrand: void;\n\n\ttheme:string;\n\tcanUseTranslate3d:boolean;\n\texperimentalScreenReader: boolean;\n\trulers: number[];\n\tariaLabel: string;\n\tlineNumbers:any;\n\tselectOnLineNumbers:boolean;\n\tglyphMargin:boolean;\n\trevealHorizontalRightPadding:number;\n\troundedSelection:boolean;\n\toverviewRulerLanes:number;\n\tcursorBlinking:string;\n\tcursorStyle:TextEditorCursorStyle;\n\thideCursorInOverviewRuler:boolean;\n\tscrollBeyondLastLine:boolean;\n\teditorClassName: string;\n\tstopRenderingLineAfter: number;\n\trenderWhitespace: boolean;\n\tindentGuides: boolean;\n\tscrollbar:InternalEditorScrollbarOptions;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(source:{\n\t\ttheme:string;\n\t\tcanUseTranslate3d:boolean;\n\t\texperimentalScreenReader: boolean;\n\t\trulers: number[];\n\t\tariaLabel: string;\n\t\tlineNumbers:any;\n\t\tselectOnLineNumbers:boolean;\n\t\tglyphMargin:boolean;\n\t\trevealHorizontalRightPadding:number;\n\t\troundedSelection:boolean;\n\t\toverviewRulerLanes:number;\n\t\tcursorBlinking:string;\n\t\tcursorStyle:TextEditorCursorStyle;\n\t\thideCursorInOverviewRuler:boolean;\n\t\tscrollBeyondLastLine:boolean;\n\t\teditorClassName: string;\n\t\tstopRenderingLineAfter: number;\n\t\trenderWhitespace: boolean;\n\t\tindentGuides: boolean;\n\t\tscrollbar:InternalEditorScrollbarOptions;\n\t}) {\n\t\tthis.theme = String(source.theme);\n\t\tthis.canUseTranslate3d = Boolean(source.canUseTranslate3d);\n\t\tthis.experimentalScreenReader = Boolean(source.experimentalScreenReader);\n\t\tthis.rulers = InternalEditorViewOptions._toSortedIntegerArray(source.rulers);\n\t\tthis.ariaLabel = String(source.ariaLabel);\n\t\tthis.lineNumbers = source.lineNumbers;\n\t\tthis.selectOnLineNumbers = Boolean(source.selectOnLineNumbers);\n\t\tthis.glyphMargin = Boolean(source.glyphMargin);\n\t\tthis.revealHorizontalRightPadding = source.revealHorizontalRightPadding|0;\n\t\tthis.roundedSelection = Boolean(source.roundedSelection);\n\t\tthis.overviewRulerLanes = source.overviewRulerLanes|0;\n\t\tthis.cursorBlinking = String(source.cursorBlinking);\n\t\tthis.cursorStyle = source.cursorStyle|0;\n\t\tthis.hideCursorInOverviewRuler = Boolean(source.hideCursorInOverviewRuler);\n\t\tthis.scrollBeyondLastLine = Boolean(source.scrollBeyondLastLine);\n\t\tthis.editorClassName = String(source.editorClassName);\n\t\tthis.stopRenderingLineAfter = source.stopRenderingLineAfter|0;\n\t\tthis.renderWhitespace = Boolean(source.renderWhitespace);\n\t\tthis.indentGuides = Boolean(source.indentGuides);\n\t\tthis.scrollbar = source.scrollbar.clone();\n\t}\n\n\tprivate static _toSortedIntegerArray(source:any): number[] {\n\t\tif (!Array.isArray(source)) {\n\t\t\treturn [];\n\t\t}\n\t\tlet arrSource = <any[]>source;\n\t\tlet result = arrSource.map(el => {\n\t\t\tlet r = parseInt(el, 10);\n\t\t\tif (isNaN(r)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn r;\n\t\t});\n\t\tresult.sort();\n\t\treturn result;\n\t}\n\n\tprivate static _numberArraysEqual(a:number[], b:number[]): boolean {\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (a[i] !== b[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other:InternalEditorViewOptions): boolean {\n\t\treturn (\n\t\t\tthis.theme === other.theme\n\t\t\t&& this.canUseTranslate3d === other.canUseTranslate3d\n\t\t\t&& this.experimentalScreenReader === other.experimentalScreenReader\n\t\t\t&& InternalEditorViewOptions._numberArraysEqual(this.rulers, other.rulers)\n\t\t\t&& this.ariaLabel === other.ariaLabel\n\t\t\t&& this.lineNumbers === other.lineNumbers\n\t\t\t&& this.selectOnLineNumbers === other.selectOnLineNumbers\n\t\t\t&& this.glyphMargin === other.glyphMargin\n\t\t\t&& this.revealHorizontalRightPadding === other.revealHorizontalRightPadding\n\t\t\t&& this.roundedSelection === other.roundedSelection\n\t\t\t&& this.overviewRulerLanes === other.overviewRulerLanes\n\t\t\t&& this.cursorBlinking === other.cursorBlinking\n\t\t\t&& this.cursorStyle === other.cursorStyle\n\t\t\t&& this.hideCursorInOverviewRuler === other.hideCursorInOverviewRuler\n\t\t\t&& this.scrollBeyondLastLine === other.scrollBeyondLastLine\n\t\t\t&& this.editorClassName === other.editorClassName\n\t\t\t&& this.stopRenderingLineAfter === other.stopRenderingLineAfter\n\t\t\t&& this.renderWhitespace === other.renderWhitespace\n\t\t\t&& this.indentGuides === other.indentGuides\n\t\t\t&& this.scrollbar.equals(other.scrollbar)\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic createChangeEvent(newOpts:InternalEditorViewOptions): IViewConfigurationChangedEvent {\n\t\treturn {\n\t\t\ttheme: this.theme !== newOpts.theme,\n\t\t\tcanUseTranslate3d: this.canUseTranslate3d !== newOpts.canUseTranslate3d,\n\t\t\texperimentalScreenReader: this.experimentalScreenReader !== newOpts.experimentalScreenReader,\n\t\t\trulers: (!InternalEditorViewOptions._numberArraysEqual(this.rulers, newOpts.rulers)),\n\t\t\tariaLabel: this.ariaLabel !== newOpts.ariaLabel,\n\t\t\tlineNumbers: this.lineNumbers !== newOpts.lineNumbers,\n\t\t\tselectOnLineNumbers: this.selectOnLineNumbers !== newOpts.selectOnLineNumbers,\n\t\t\tglyphMargin: this.glyphMargin !== newOpts.glyphMargin,\n\t\t\trevealHorizontalRightPadding: this.revealHorizontalRightPadding !== newOpts.revealHorizontalRightPadding,\n\t\t\troundedSelection: this.roundedSelection !== newOpts.roundedSelection,\n\t\t\toverviewRulerLanes: this.overviewRulerLanes !== newOpts.overviewRulerLanes,\n\t\t\tcursorBlinking: this.cursorBlinking !== newOpts.cursorBlinking,\n\t\t\tcursorStyle: this.cursorStyle !== newOpts.cursorStyle,\n\t\t\thideCursorInOverviewRuler: this.hideCursorInOverviewRuler !== newOpts.hideCursorInOverviewRuler,\n\t\t\tscrollBeyondLastLine: this.scrollBeyondLastLine !== newOpts.scrollBeyondLastLine,\n\t\t\teditorClassName: this.editorClassName !== newOpts.editorClassName,\n\t\t\tstopRenderingLineAfter: this.stopRenderingLineAfter !== newOpts.stopRenderingLineAfter,\n\t\t\trenderWhitespace: this.renderWhitespace !== newOpts.renderWhitespace,\n\t\t\tindentGuides: this.indentGuides !== newOpts.indentGuides,\n\t\t\tscrollbar: (!this.scrollbar.equals(newOpts.scrollbar)),\n\t\t};\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): InternalEditorViewOptions {\n\t\treturn new InternalEditorViewOptions(this);\n\t}\n}\n\nexport interface IViewConfigurationChangedEvent {\n\ttheme: boolean;\n\tcanUseTranslate3d: boolean;\n\texperimentalScreenReader: boolean;\n\trulers: boolean;\n\tariaLabel:  boolean;\n\tlineNumbers: boolean;\n\tselectOnLineNumbers: boolean;\n\tglyphMargin: boolean;\n\trevealHorizontalRightPadding: boolean;\n\troundedSelection: boolean;\n\toverviewRulerLanes: boolean;\n\tcursorBlinking: boolean;\n\tcursorStyle: boolean;\n\thideCursorInOverviewRuler: boolean;\n\tscrollBeyondLastLine: boolean;\n\teditorClassName:  boolean;\n\tstopRenderingLineAfter:  boolean;\n\trenderWhitespace:  boolean;\n\tindentGuides:  boolean;\n\tscrollbar: boolean;\n}\n\nexport class EditorContribOptions {\n\tselectionClipboard: boolean;\n\thover:boolean;\n\tcontextmenu:boolean;\n\tquickSuggestions:boolean;\n\tquickSuggestionsDelay:number;\n\ticonsInSuggestions:boolean;\n\tformatOnType:boolean;\n\tsuggestOnTriggerCharacters: boolean;\n\tacceptSuggestionOnEnter: boolean;\n\tselectionHighlight:boolean;\n\toutlineMarkers: boolean;\n\treferenceInfos: boolean;\n\tfolding: boolean;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(source:{\n\t\tselectionClipboard: boolean;\n\t\thover:boolean;\n\t\tcontextmenu:boolean;\n\t\tquickSuggestions:boolean;\n\t\tquickSuggestionsDelay:number;\n\t\ticonsInSuggestions:boolean;\n\t\tformatOnType:boolean;\n\t\tsuggestOnTriggerCharacters: boolean;\n\t\tacceptSuggestionOnEnter: boolean;\n\t\tselectionHighlight:boolean;\n\t\toutlineMarkers: boolean;\n\t\treferenceInfos: boolean;\n\t\tfolding: boolean;\n\t}) {\n\t\tthis.selectionClipboard = Boolean(source.selectionClipboard);\n\t\tthis.hover = Boolean(source.hover);\n\t\tthis.contextmenu = Boolean(source.contextmenu);\n\t\tthis.quickSuggestions = Boolean(source.quickSuggestions);\n\t\tthis.quickSuggestionsDelay = source.quickSuggestionsDelay|0;\n\t\tthis.iconsInSuggestions = Boolean(source.iconsInSuggestions);\n\t\tthis.formatOnType = Boolean(source.formatOnType);\n\t\tthis.suggestOnTriggerCharacters = Boolean(source.suggestOnTriggerCharacters);\n\t\tthis.acceptSuggestionOnEnter = Boolean(source.acceptSuggestionOnEnter);\n\t\tthis.selectionHighlight = Boolean(source.selectionHighlight);\n\t\tthis.outlineMarkers = Boolean(source.outlineMarkers);\n\t\tthis.referenceInfos = Boolean(source.referenceInfos);\n\t\tthis.folding = Boolean(source.folding);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other: EditorContribOptions): boolean {\n\t\treturn (\n\t\t\tthis.selectionClipboard === other.selectionClipboard\n\t\t\t&& this.hover === other.hover\n\t\t\t&& this.contextmenu === other.contextmenu\n\t\t\t&& this.quickSuggestions === other.quickSuggestions\n\t\t\t&& this.quickSuggestionsDelay === other.quickSuggestionsDelay\n\t\t\t&& this.iconsInSuggestions === other.iconsInSuggestions\n\t\t\t&& this.formatOnType === other.formatOnType\n\t\t\t&& this.suggestOnTriggerCharacters === other.suggestOnTriggerCharacters\n\t\t\t&& this.acceptSuggestionOnEnter === other.acceptSuggestionOnEnter\n\t\t\t&& this.selectionHighlight === other.selectionHighlight\n\t\t\t&& this.outlineMarkers === other.outlineMarkers\n\t\t\t&& this.referenceInfos === other.referenceInfos\n\t\t\t&& this.folding === other.folding\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): EditorContribOptions {\n\t\treturn new EditorContribOptions(this);\n\t}\n}\n\n/**\n * Internal configuration options (transformed or computed) for the editor.\n */\nexport class InternalEditorOptions {\n\t_internalEditorOptionsBrand: void;\n\n\tlineHeight:number; // todo: move to fontInfo\n\n\treadOnly:boolean;\n\t// ---- cursor options\n\twordSeparators: string;\n\tautoClosingBrackets:boolean;\n\tuseTabStops: boolean;\n\ttabFocusMode:boolean;\n\t// ---- grouped options\n\tlayoutInfo: EditorLayoutInfo;\n\tfontInfo: FontInfo;\n\tviewInfo: InternalEditorViewOptions;\n\twrappingInfo: EditorWrappingInfo;\n\tcontribInfo: EditorContribOptions;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(source: {\n\t\tlineHeight:number;\n\t\treadOnly:boolean;\n\t\twordSeparators: string;\n\t\tautoClosingBrackets:boolean;\n\t\tuseTabStops: boolean;\n\t\ttabFocusMode:boolean;\n\t\tlayoutInfo: EditorLayoutInfo;\n\t\tfontInfo: FontInfo;\n\t\tviewInfo: InternalEditorViewOptions;\n\t\twrappingInfo: EditorWrappingInfo;\n\t\tcontribInfo: EditorContribOptions;\n\t}) {\n\t\tthis.lineHeight = source.lineHeight|0;\n\t\tthis.readOnly = Boolean(source.readOnly);\n\t\tthis.wordSeparators = String(source.wordSeparators);\n\t\tthis.autoClosingBrackets = Boolean(source.autoClosingBrackets);\n\t\tthis.useTabStops = Boolean(source.useTabStops);\n\t\tthis.tabFocusMode = Boolean(source.tabFocusMode);\n\t\tthis.layoutInfo = source.layoutInfo.clone();\n\t\tthis.fontInfo = source.fontInfo.clone();\n\t\tthis.viewInfo = source.viewInfo.clone();\n\t\tthis.wrappingInfo = source.wrappingInfo.clone();\n\t\tthis.contribInfo = source.contribInfo.clone();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other:InternalEditorOptions): boolean {\n\t\treturn (\n\t\t\tthis.lineHeight === other.lineHeight\n\t\t\t&& this.readOnly === other.readOnly\n\t\t\t&& this.wordSeparators === other.wordSeparators\n\t\t\t&& this.autoClosingBrackets === other.autoClosingBrackets\n\t\t\t&& this.useTabStops === other.useTabStops\n\t\t\t&& this.tabFocusMode === other.tabFocusMode\n\t\t\t&& this.layoutInfo.equals(other.layoutInfo)\n\t\t\t&& this.fontInfo.equals(other.fontInfo)\n\t\t\t&& this.viewInfo.equals(other.viewInfo)\n\t\t\t&& this.wrappingInfo.equals(other.wrappingInfo)\n\t\t\t&& this.contribInfo.equals(other.contribInfo)\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic createChangeEvent(newOpts:InternalEditorOptions): IConfigurationChangedEvent {\n\t\treturn {\n\t\t\tlineHeight: (this.lineHeight !== newOpts.lineHeight),\n\t\t\treadOnly: (this.readOnly !== newOpts.readOnly),\n\t\t\twordSeparators: (this.wordSeparators !== newOpts.wordSeparators),\n\t\t\tautoClosingBrackets: (this.autoClosingBrackets !== newOpts.autoClosingBrackets),\n\t\t\tuseTabStops: (this.useTabStops !== newOpts.useTabStops),\n\t\t\ttabFocusMode: (this.tabFocusMode !== newOpts.tabFocusMode),\n\t\t\tlayoutInfo: (!this.layoutInfo.equals(newOpts.layoutInfo)),\n\t\t\tfontInfo: (!this.fontInfo.equals(newOpts.fontInfo)),\n\t\t\tviewInfo: this.viewInfo.createChangeEvent(newOpts.viewInfo),\n\t\t\twrappingInfo: (!this.wrappingInfo.equals(newOpts.wrappingInfo)),\n\t\t\tcontribInfo: (!this.contribInfo.equals(newOpts.contribInfo)),\n\t\t};\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): InternalEditorOptions {\n\t\treturn new InternalEditorOptions(this);\n\t}\n}\n\n/**\n * An event describing that the configuration of the editor has changed.\n */\nexport interface IConfigurationChangedEvent {\n\tlineHeight: boolean;\n\treadOnly: boolean;\n\twordSeparators: boolean;\n\tautoClosingBrackets: boolean;\n\tuseTabStops: boolean;\n\ttabFocusMode: boolean;\n\tlayoutInfo: boolean;\n\tfontInfo: boolean;\n\tviewInfo: IViewConfigurationChangedEvent;\n\twrappingInfo: boolean;\n\tcontribInfo: boolean;\n}\n\n/**\n * An event describing that one or more supports of a mode have changed.\n */\nexport interface IModeSupportChangedEvent {\n\ttokenizationSupport:boolean;\n\trichEditSupport: boolean;\n}\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\n/**\n * Options for rendering a model decoration in the overview ruler.\n */\nexport interface IModelDecorationOverviewRulerOptions {\n\t/**\n\t * CSS color to render in the overview ruler.\n\t * e.g.: rgba(100, 100, 100, 0.5)\n\t */\n\tcolor: string;\n\t/**\n\t * CSS color to render in the overview ruler.\n\t * e.g.: rgba(100, 100, 100, 0.5)\n\t */\n\tdarkColor: string;\n\t/**\n\t * The position in the overview ruler.\n\t */\n\tposition: OverviewRulerLane;\n}\n\n/**\n * Options for a model decoration.\n */\nexport interface IModelDecorationOptions {\n\t/**\n\t * Customize the growing behaviour of the decoration when typing at the edges of the decoration.\n\t * Defaults to TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n\t */\n\tstickiness?:TrackedRangeStickiness;\n\t/**\n\t * CSS class name describing the decoration.\n\t */\n\tclassName?:string;\n\t/**\n\t * Message to be rendered when hovering over the decoration.\n\t */\n\thoverMessage?:string;\n\t/**\n\t * Array of IHTMLContentElements to render as the decoration message.\n\t */\n\thtmlMessage?:IHTMLContentElement[];\n\t/**\n\t * Should the decoration expand to encompass a whole line.\n\t */\n\tisWholeLine?:boolean;\n\t/**\n\t * @deprecated : Use `overviewRuler` instead\n\t */\n\tshowInOverviewRuler?:string;\n\t/**\n\t * If set, render this decoration in the overview ruler.\n\t */\n\toverviewRuler?:IModelDecorationOverviewRulerOptions;\n\t/**\n\t * If set, the decoration will be rendered in the glyph margin with this CSS class name.\n\t */\n\tglyphMarginClassName?:string;\n\t/**\n\t * If set, the decoration will be rendered in the lines decorations with this CSS class name.\n\t */\n\tlinesDecorationsClassName?:string;\n\t/**\n\t * If set, the decoration will be rendered inline with the text with this CSS class name.\n\t * Please use this only for CSS rules that must impact the text. For example, use `className`\n\t * to have a background color decoration.\n\t */\n\tinlineClassName?:string;\n}\n\n/**\n * New model decorations.\n */\nexport interface IModelDeltaDecoration {\n\t/**\n\t * Range that this decoration covers.\n\t */\n\trange: IRange;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\toptions: IModelDecorationOptions;\n}\n\n/**\n * A tracked range in the model.\n * @internal\n */\nexport interface IModelTrackedRange {\n\t/**\n\t * Identifier for a tracked range\n\t */\n\tid: string;\n\t/**\n\t * Range that this tracked range covers\n\t */\n\trange: Range;\n}\n\n/**\n * A decoration in the model.\n */\nexport interface IModelDecoration {\n\t/**\n\t * Identifier for a decoration.\n\t */\n\tid: string;\n\t/**\n\t * Identifier for a decoration's owener.\n\t */\n\townerId: number;\n\t/**\n\t * Range that this decoration covers.\n\t */\n\trange: Range;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\toptions: IModelDecorationOptions;\n}\n\n/**\n * An accessor that can add, change or remove model decorations.\n * @internal\n */\nexport interface IModelDecorationsChangeAccessor {\n\t/**\n\t * Add a new decoration.\n\t * @param range Range that this decoration covers.\n\t * @param options Options associated with this decoration.\n\t * @return An unique identifier associated with this decoration.\n\t */\n\taddDecoration(range:IRange, options:IModelDecorationOptions): string;\n\t/**\n\t * Change the range that an existing decoration covers.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newRange The new range that this decoration covers.\n\t */\n\tchangeDecoration(id:string, newRange:IRange): void;\n\t/**\n\t * Change the options associated with an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newOptions The new options associated with this decoration.\n\t */\n\tchangeDecorationOptions(id: string, newOptions:IModelDecorationOptions): void;\n\t/**\n\t * Remove an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t */\n\tremoveDecoration(id:string): void;\n\t/**\n\t * Perform a minimum ammount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations:string[], newDecorations:IModelDeltaDecoration[]): string[];\n}\n\n/**\n * Word inside a model.\n */\nexport interface IWordAtPosition {\n\t/**\n\t * The word.\n\t */\n\tword: string;\n\t/**\n\t * The column where the word starts.\n\t */\n\tstartColumn: number;\n\t/**\n\t * The column where the word ends.\n\t */\n\tendColumn: number;\n}\n\n/**\n * Range of a word inside a model.\n * @internal\n */\nexport interface IWordRange {\n\t/**\n\t * The index where the word starts.\n\t */\n\tstart:number;\n\t/**\n\t * The index where the word ends.\n\t */\n\tend:number;\n}\n\n/**\n * @internal\n */\nexport interface ITokenInfo {\n\ttoken: IToken;\n\tlineNumber: number;\n\tstartColumn: number;\n\tendColumn: number;\n}\n\n/**\n * @internal\n */\nexport interface ITokenIterator {\n\thasNext(): boolean;\n\tnext(): ITokenInfo;\n\thasPrev(): boolean;\n\tprev(): ITokenInfo;\n}\n\n/**\n * End of line character preference.\n */\nexport enum EndOfLinePreference {\n\t/**\n\t * Use the end of line character identified in the text buffer.\n\t */\n\tTextDefined = 0,\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * The default end of line to use when instantiating models.\n */\nexport enum DefaultEndOfLine {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * End of line character preference.\n */\nexport enum EndOfLineSequence {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 0,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 1\n}\n\n/**\n * A read-only line marker in the model.\n * @internal\n */\nexport interface IReadOnlyLineMarker {\n\tid: string;\n\tcolumn: number;\n}\n\n/**\n * And identifier for a single edit operation.\n */\nexport interface ISingleEditOperationIdentifier {\n\t/**\n\t * Identifier major\n\t */\n\tmajor:number;\n\t/**\n\t * Identifier minor\n\t */\n\tminor:number;\n}\n\n/**\n * A builder and helper for edit operations for a command.\n */\nexport interface IEditOperationBuilder {\n\t/**\n\t * Add a new edit operation (a replace operation).\n\t * @param range The range to replace (delete). May be empty to represent a simple insert.\n\t * @param text The text to replace with. May be null to represent a simple delete.\n\t */\n\taddEditOperation(range:Range, text:string): void;\n\n\t/**\n\t * Track `selection` when applying edit operations.\n\t * A best effort will be made to not grow/expand the selection.\n\t * An empty selection will clamp to a nearby character.\n\t * @param selection The selection to track.\n\t * @param trackPreviousOnEmpty If set, and the selection is empty, indicates whether the selection\n\t *           should clamp to the previous or the next character.\n\t * @return A unique identifer.\n\t */\n\ttrackSelection(selection:Selection, trackPreviousOnEmpty?:boolean): string;\n}\n\n/**\n * A helper for computing cursor state after a command.\n */\nexport interface ICursorStateComputerData {\n\t/**\n\t * Get the inverse edit operations of the added edit operations.\n\t */\n\tgetInverseEditOperations(): IIdentifiedSingleEditOperation[];\n\t/**\n\t * Get a previously tracked selection.\n\t * @param id The unique identifier returned by `trackSelection`.\n\t * @return The selection.\n\t */\n\tgetTrackedSelection(id:string): Selection;\n}\n\n/**\n * A command that modifies text / cursor state on a model.\n */\nexport interface ICommand {\n\t/**\n\t * Get the edit operations needed to execute this command.\n\t * @param model The model the command will execute on.\n\t * @param builder A helper to collect the needed edit operations and to track selections.\n\t */\n\tgetEditOperations(model:ITokenizedModel, builder:IEditOperationBuilder): void;\n\t/**\n\t * Compute the cursor state after the edit operations were applied.\n\t * @param model The model the commad has executed on.\n\t * @param helper A helper to get inverse edit operations and to get previously tracked selections.\n\t * @return The cursor state after the command executed.\n\t */\n\tcomputeCursorState(model:ITokenizedModel, helper:ICursorStateComputerData): Selection;\n}\n\n/**\n * A single edit operation, that acts as a simple replace.\n * i.e. Replace text at `range` with `text` in model.\n */\nexport interface ISingleEditOperation {\n\t/**\n\t * The range to replace. This can be empty to emulate a simple insert.\n\t */\n\trange: IRange;\n\t/**\n\t * The text to replace with. This can be null to emulate a simple delete.\n\t */\n\ttext: string;\n\t/**\n\t * This indicates that this operation has \"insert\" semantics.\n\t * i.e. forceMoveMarkers = true => if `range` is collapsed, all markers at the position will be moved.\n\t */\n\tforceMoveMarkers?: boolean;\n}\n\n/**\n * A single edit operation, that has an identifier.\n */\nexport interface IIdentifiedSingleEditOperation {\n\t/**\n\t * An identifier associated with this single edit operation.\n\t */\n\tidentifier: ISingleEditOperationIdentifier;\n\t/**\n\t * The range to replace. This can be empty to emulate a simple insert.\n\t */\n\trange: Range;\n\t/**\n\t * The text to replace with. This can be null to emulate a simple delete.\n\t */\n\ttext: string;\n\t/**\n\t * This indicates that this operation has \"insert\" semantics.\n\t * i.e. forceMoveMarkers = true => if `range` is collapsed, all markers at the position will be moved.\n\t */\n\tforceMoveMarkers: boolean;\n\t/**\n\t * This indicates that this operation is inserting automatic whitespace\n\t * that can be removed on next model edit operation if `config.trimAutoWhitespace` is true.\n\t */\n\tisAutoWhitespaceEdit?: boolean;\n}\n\n/**\n * A callback that can compute the cursor state after applying a series of edit operations.\n */\nexport interface ICursorStateComputer {\n\t/**\n\t * A callback that can compute the resulting cursors state after some edit operations have been executed.\n\t */\n\t(inverseEditOperations:IIdentifiedSingleEditOperation[]): Selection[];\n}\n\n/**\n * A list of tokens on a line.\n * @internal\n */\nexport interface ILineTokens {\n\tgetTokenCount(): number;\n\tgetTokenStartIndex(tokenIndex:number): number;\n\tgetTokenType(tokenIndex:number): string;\n\tgetTokenEndIndex(tokenIndex:number, textLength:number): number;\n\n\t/**\n\t * Check if tokens have changed. This is called by the view to validate rendered lines\n\t * and decide which lines need re-rendering.\n\t */\n\tequals(other:ILineTokens): boolean;\n\n\t/**\n\t * Find the token containing offset `offset`.\n\t *    For example, with the following tokens [0, 5), [5, 9), [9, infinity)\n\t *    Searching for 0, 1, 2, 3 or 4 will return 0.\n\t *    Searching for 5, 6, 7 or 8 will return 1.\n\t *    Searching for 9, 10, 11, ... will return 2.\n\t * @param offset The search offset\n\t * @return The index of the token containing the offset.\n\t */\n\tfindIndexOfOffset(offset:number): number;\n\n\t/**\n\t * @internal\n\t */\n\tsliceAndInflate(startOffset:number, endOffset:number, deltaStartIndex:number): ViewLineToken[];\n\n\t/**\n\t * @internal\n\t */\n\tinflate(): ViewLineToken[];\n}\n\nexport interface ITextModelResolvedOptions {\n\ttabSize: number;\n\tinsertSpaces: boolean;\n\tdefaultEOL: DefaultEndOfLine;\n\ttrimAutoWhitespace: boolean;\n}\n\nexport interface ITextModelCreationOptions {\n\ttabSize: number;\n\tinsertSpaces: boolean;\n\tdetectIndentation: boolean;\n\ttrimAutoWhitespace: boolean;\n\tdefaultEOL: DefaultEndOfLine;\n}\n\nexport interface ITextModelUpdateOptions {\n\ttabSize?: number;\n\tinsertSpaces?: boolean;\n\ttrimAutoWhitespace?: boolean;\n}\n\nexport interface IModelOptionsChangedEvent {\n\ttabSize: boolean;\n\tinsertSpaces: boolean;\n\ttrimAutoWhitespace: boolean;\n}\n\n/**\n * A textual read-only model.\n */\nexport interface ITextModel {\n\n\tgetOptions(): ITextModelResolvedOptions;\n\n\t/**\n\t * Get the current version id of the model.\n\t * Anytime a change happens to the model (even undo/redo),\n\t * the version id is incremented.\n\t */\n\tgetVersionId(): number;\n\n\t/**\n\t * Get the alternative version id of the model.\n\t * This alternative version id is not always incremented,\n\t * it will return the same values in the case of undo-redo.\n\t */\n\tgetAlternativeVersionId(): number;\n\n\t/**\n\t * Replace the entire text buffer value contained in this model.\n\t */\n\tsetValue(newValue:string): void;\n\n\t/**\n\t * Replace the entire text buffer value contained in this model.\n\t */\n\tsetValueFromRawText(newValue:IRawText): void;\n\n\t/**\n\t * Get the text stored in this model.\n\t * @param eol The end of line character preference. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n\t * @return The text.\n\t */\n\tgetValue(eol?:EndOfLinePreference, preserveBOM?:boolean): string;\n\n\tgetValueLength(eol?:EndOfLinePreference, preserveBOM?:boolean): number;\n\n\ttoRawText(): IRawText;\n\n\tequals(other:IRawText): boolean;\n\n\t/**\n\t * Get the text in a certain range.\n\t * @param range The range describing what text to get.\n\t * @param eol The end of line character preference. This will only be used for multiline ranges. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @return The text.\n\t */\n\tgetValueInRange(range:IRange, eol?:EndOfLinePreference): string;\n\n\t/**\n\t * Get the length of text in a certain range.\n\t * @param range The range describing what text length to get.\n\t * @return The text length.\n\t */\n\tgetValueLengthInRange(range:IRange): number;\n\n\t/**\n\t * Splits characters in two buckets. First bucket (A) is of characters that\n\t * sit in lines with length < `LONG_LINE_BOUNDARY`. Second bucket (B) is of\n\t * characters that sit in lines with length >= `LONG_LINE_BOUNDARY`.\n\t * If count(B) > count(A) return true. Returns false otherwise.\n\t * @internal\n\t */\n\tisDominatedByLongLines(): boolean;\n\n\t/**\n\t * Get the number of lines in the model.\n\t */\n\tgetLineCount(): number;\n\n\t/**\n\t * Get the text for a certain line.\n\t */\n\tgetLineContent(lineNumber:number): string;\n\n\t/**\n\t * Get the text for all lines.\n\t */\n\tgetLinesContent(): string[];\n\n\t/**\n\t * Get the end of line character predominantly used in the text buffer.\n\t * @return EOL char sequence (e.g.: '\\n' or '\\r\\n').\n\t */\n\tgetEOL(): string;\n\n\tsetEOL(eol: EndOfLineSequence): void;\n\n\t/**\n\t * Get the minimum legal column for line at `lineNumber`\n\t */\n\tgetLineMinColumn(lineNumber:number): number;\n\n\t/**\n\t * Get the maximum legal column for line at `lineNumber`\n\t */\n\tgetLineMaxColumn(lineNumber:number): number;\n\n\t/**\n\t * Returns the column before the first non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineFirstNonWhitespaceColumn(lineNumber:number): number;\n\n\t/**\n\t * Returns the column after the last non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineLastNonWhitespaceColumn(lineNumber:number): number;\n\n\t/**\n\t * Create a valid position,\n\t */\n\tvalidatePosition(position:IPosition): Position;\n\n\t/**\n\t * Advances the given position by the given offest (negative offsets are also accepted)\n\t * and returns it as a new valid position.\n\t *\n\t * If the offset and position are such that their combination goes beyond the beginning or\n\t * end of the model, throws an exception.\n\t *\n\t * If the ofsset is such that the new position would be in the middle of a multi-byte\n\t * line terminator, throws an exception.\n\t */\n\tmodifyPosition(position: IPosition, offset: number): Position;\n\n\t/**\n\t * Create a valid range.\n\t */\n\tvalidateRange(range:IRange): Range;\n\n\t/**\n\t * Converts the position to a zero-based offset.\n\t *\n\t * The position will be [adjusted](#TextDocument.validatePosition).\n\t *\n\t * @param position A position.\n\t * @return A valid zero-based offset.\n\t */\n\tgetOffsetAt(position: IPosition): number;\n\n\t/**\n\t * Converts a zero-based offset to a position.\n\t *\n\t * @param offset A zero-based offset.\n\t * @return A valid [position](#Position).\n\t */\n\tgetPositionAt(offset: number): Position;\n\n\t/**\n\t * Get a range covering the entire model\n\t */\n\tgetFullModelRange(): Range;\n\n\t/**\n\t * Returns iff the model was disposed or not.\n\t */\n\tisDisposed(): boolean;\n\n\t/**\n\t * No mode supports allowed on this model because it is simply too large.\n\t * (even tokenization would cause too much memory pressure)\n\t * @internal\n\t */\n\tisTooLargeForHavingAMode(): boolean;\n\n\t/**\n\t * Only basic mode supports allowed on this model because it is simply too large.\n\t * (tokenization is allowed and other basic supports)\n\t * @internal\n\t */\n\tisTooLargeForHavingARichMode(): boolean;\n}\n\nexport interface IReadOnlyModel extends ITextModel {\n\t/**\n\t * Gets the resource associated with this editor model.\n\t */\n\turi: URI;\n\n\tgetModeId(): string;\n\n\t/**\n\t * Get the word under or besides `position`.\n\t * @param position The position to look for a word.\n\t * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.\n\t * @return The word under or besides `position`. Might be null.\n\t */\n\tgetWordAtPosition(position:IPosition): IWordAtPosition;\n\n\t/**\n\t * Get the word under or besides `position` trimmed to `position`.column\n\t * @param position The position to look for a word.\n\t * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.\n\t * @return The word under or besides `position`. Will never be null.\n\t */\n\tgetWordUntilPosition(position:IPosition): IWordAtPosition;\n}\n\n/**\n * @internal\n */\nexport interface IRichEditBracket {\n\tmodeId: string;\n\topen: string;\n\tclose: string;\n\tforwardRegex: RegExp;\n\treversedRegex: RegExp;\n}\n\n/**\n * @internal\n */\nexport interface IFoundBracket {\n\trange: Range;\n\topen: string;\n\tclose: string;\n\tisOpen: boolean;\n}\n\n/**\n * A model that is tokenized.\n */\nexport interface ITokenizedModel extends ITextModel {\n\n\t/**\n\t * Tokenize if necessary and get the tokens for the line `lineNumber`.\n\t * @param lineNumber The line number\n\t * @param inaccurateTokensAcceptable Are inaccurate tokens acceptable? Defaults to false\n\t * @internal\n\t */\n\tgetLineTokens(lineNumber:number, inaccurateTokensAcceptable?:boolean): ILineTokens;\n\n\t/**\n\t * Tokenize if necessary and get the tokenization result for the line `lineNumber`, as returned by the language mode.\n\t * @internal\n\t */\n\tgetLineContext(lineNumber:number): ILineContext;\n\n\t/**\n\t * @internal\n\t */\n\t_getLineModeTransitions(lineNumber:number): IModeTransition[];\n\n\t/**\n\t * Get the current language mode associated with the model.\n\t */\n\tgetMode(): IMode;\n\n\t/**\n\t * Set the current language mode associated with the model.\n\t */\n\tsetMode(newMode:IMode|TPromise<IMode>): void;\n\n\t/**\n\t * A mode can be currently pending loading if a promise is used when constructing a model or calling setMode().\n\t *\n\t * If there is no currently pending loading mode, then the result promise will complete immediately.\n\t * Otherwise, the result will complete once the currently pending loading mode is loaded.\n\t * @internal\n\t */\n\twhenModeIsReady(): TPromise<IMode>;\n\n\t/**\n\t * Returns the true (inner-most) language mode at a given position.\n\t * @internal\n\t */\n\tgetModeAtPosition(lineNumber:number, column:number): IMode;\n\n\t/**\n\t * Get the word under or besides `position`.\n\t * @param position The position to look for a word.\n\t * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.\n\t * @return The word under or besides `position`. Might be null.\n\t */\n\tgetWordAtPosition(position:IPosition): IWordAtPosition;\n\n\t/**\n\t * Get the word under or besides `position` trimmed to `position`.column\n\t * @param position The position to look for a word.\n\t * @param skipSyntaxTokens Ignore syntax tokens, as identified by the mode.\n\t * @return The word under or besides `position`. Will never be null.\n\t */\n\tgetWordUntilPosition(position:IPosition): IWordAtPosition;\n\n\t/**\n\t * Returns an iterator that can be used to read\n\t * next and previous tokens from the provided position.\n\t * The iterator is made available through the callback\n\t * function and can't be used afterwards.\n\t * @internal\n\t */\n\ttokenIterator(position: IPosition, callback: (it: ITokenIterator) =>any): any;\n\n\t/**\n\t * Find the matching bracket of `request` up, counting brackets.\n\t * @param request The bracket we're searching for\n\t * @param position The position at which to start the search.\n\t * @return The range of the matching bracket, or null if the bracket match was not found.\n\t * @internal\n\t */\n\tfindMatchingBracketUp(bracket:string, position:IPosition): Range;\n\n\t// /**\n\t//  * Find the first bracket in the model before `position`.\n\t//  * @param position The position at which to start the search.\n\t//  * @return The info for the first bracket before `position`, or null if there are no more brackets before `positions`.\n\t//  */\n\t// findPrevBracket(position:IPosition): IFoundBracket;\n\n\t// /**\n\t//  * Find the first bracket in the model after `position`.\n\t//  * @param position The position at which to start the search.\n\t//  * @return The info for the first bracket after `position`, or null if there are no more brackets after `positions`.\n\t//  */\n\t// findNextBracket(position:IPosition): IFoundBracket;\n\n\t/**\n\t * Given a `position`, if the position is on top or near a bracket,\n\t * find the matching bracket of that bracket and return the ranges of both brackets.\n\t * @param position The position at which to look for a bracket.\n\t * @internal\n\t */\n\tmatchBracket(position:IPosition): [Range,Range];\n}\n\n/**\n * A model that can track markers.\n */\nexport interface ITextModelWithMarkers extends ITextModel {\n\t/**\n\t * @internal\n\t */\n\t_addMarker(lineNumber:number, column:number, stickToPreviousCharacter:boolean): string;\n\t/**\n\t * @internal\n\t */\n\t_changeMarker(id:string, newLineNumber:number, newColumn:number): void;\n\t/**\n\t * @internal\n\t */\n\t_changeMarkerStickiness(id:string, newStickToPreviousCharacter:boolean): void;\n\t/**\n\t * @internal\n\t */\n\t_getMarker(id:string): Position;\n\t/**\n\t * @internal\n\t */\n\t_removeMarker(id:string): void;\n\t/**\n\t * @internal\n\t */\n\t_getLineMarkers(lineNumber: number): IReadOnlyLineMarker[];\n}\n\n/**\n * A map of changed ranges used during the model internal processing\n * @internal\n */\nexport interface IChangedTrackedRanges {\n\t[key:string]:IRange;\n}\n\nexport enum TrackedRangeStickiness {\n\tAlwaysGrowsWhenTypingAtEdges = 0,\n\tNeverGrowsWhenTypingAtEdges = 1,\n\tGrowsOnlyWhenTypingBefore = 2,\n\tGrowsOnlyWhenTypingAfter = 3,\n}\n\n/**\n * A model that can track ranges.\n */\nexport interface ITextModelWithTrackedRanges extends ITextModel {\n\t/**\n\t * Start tracking a range (across edit operations).\n\t * @param range The range to start tracking.\n\t * @param stickiness The behaviour when typing at the edges of the range.\n\t * @return A unique identifier for the tracked range.\n\t * @internal\n\t */\n\taddTrackedRange(range:IRange, stickiness:TrackedRangeStickiness): string;\n\n\t/**\n\t * Change the range of a tracked range.\n\t * @param id The id of the tracked range, as returned by a `addTrackedRange` call.\n\t * @param newRange The new range of the tracked range.\n\t * @internal\n\t */\n\tchangeTrackedRange(id:string, newRange:IRange): void;\n\n\t/**\n\t * Change the stickiness (behaviour when typing at the edges of the range) for a tracked range.\n\t * @param id The id of the tracked range, as returned by a `addTrackedRange` call.\n\t * @param newStickiness The new behaviour when typing at the edges of the range.\n\t * @internal\n\t */\n\tchangeTrackedRangeStickiness(id:string, newStickiness:TrackedRangeStickiness): void;\n\n\t/**\n\t * Remove a tracked range.\n\t * @param id The id of the tracked range, as returned by a `addTrackedRaneg` call.\n\t * @internal\n\t */\n\tremoveTrackedRange(id:string): void;\n\n\t/**\n\t * Get the range of a tracked range.\n\t * @param id The id of the tracked range, as returned by a `addTrackedRaneg` call.\n\t * @internal\n\t */\n\tgetTrackedRange(id:string): Range;\n\n\t/**\n\t * Gets all the tracked ranges for the lines between `startLineNumber` and `endLineNumber` as an array.\n\t * @param startLineNumber The start line number\n\t * @param endLineNumber The end line number\n\t * @return An array with the tracked ranges\n\t * @internal\n\t */\n\tgetLinesTrackedRanges(startLineNumber:number, endLineNumber:number): IModelTrackedRange[];\n}\n\n/**\n * A model that can have decorations.\n */\nexport interface ITextModelWithDecorations {\n\t/**\n\t * Change the decorations. The callback will be called with a change accessor\n\t * that becomes invalid as soon as the callback finishes executing.\n\t * This allows for all events to be queued up until the change\n\t * is completed. Returns whatever the callback returns.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @internal\n\t */\n\tchangeDecorations(callback: (changeAccessor:IModelDecorationsChangeAccessor)=>any, ownerId?:number): any;\n\n\t/**\n\t * Perform a minimum ammount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations:string[], newDecorations:IModelDeltaDecoration[], ownerId?:number): string[];\n\n\t/**\n\t * Remove all decorations that have been added with this specific ownerId.\n\t * @param ownerId The owner id to search for.\n\t * @internal\n\t */\n\tremoveAllDecorationsWithOwnerId(ownerId:number): void;\n\n\t/**\n\t * Get the options associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration options or null if the decoration was not found.\n\t */\n\tgetDecorationOptions(id:string): IModelDecorationOptions;\n\n\t/**\n\t * Get the range associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration range or null if the decoration was not found.\n\t */\n\tgetDecorationRange(id:string): Range;\n\n\t/**\n\t * Gets all the decorations for the line `lineNumber` as an array.\n\t * @param lineNumber The line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @return An array with the decorations\n\t */\n\tgetLineDecorations(lineNumber:number, ownerId?:number, filterOutValidation?:boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations for the lines between `startLineNumber` and `endLineNumber` as an array.\n\t * @param startLineNumber The start line number\n\t * @param endLineNumber The end line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @return An array with the decorations\n\t */\n\tgetLinesDecorations(startLineNumber:number, endLineNumber:number, ownerId?:number, filterOutValidation?:boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the deocorations in a range as an array. Only `startLineNumber` and `endLineNumber` from `range` are used for filtering.\n\t * So for now it returns all the decorations on the same line as `range`.\n\t * @param range The range to search in\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @return An array with the decorations\n\t */\n\tgetDecorationsInRange(range:IRange, ownerId?:number, filterOutValidation?:boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t */\n\tgetAllDecorations(ownerId?:number, filterOutValidation?:boolean): IModelDecoration[];\n}\n\n/**\n * An editable text model.\n */\nexport interface IEditableTextModel extends ITextModelWithMarkers {\n\n\tnormalizeIndentation(str:string): string;\n\n\tgetOneIndent(): string;\n\n\tupdateOptions(newOpts:ITextModelUpdateOptions): void;\n\n\tdetectIndentation(defaultInsertSpaces:boolean, defaultTabSize:number): void;\n\n\t/**\n\t * Push a stack element onto the undo stack. This acts as an undo/redo point.\n\t * The idea is to use `pushEditOperations` to edit the model and then to\n\t * `pushStackElement` to create an undo/redo stop point.\n\t */\n\tpushStackElement(): void;\n\n\t/**\n\t * Push edit operations, basically editing the model. This is the preferred way\n\t * of editing the model. The edit operations will land on the undo stack.\n\t * @param beforeCursorState The cursor state before the edit operaions. This cursor state will be returned when `undo` or `redo` are invoked.\n\t * @param editOperations The edit operations.\n\t * @param cursorStateComputer A callback that can compute the resulting cursors state after the edit operations have been executed.\n\t * @return The cursor state returned by the `cursorStateComputer`.\n\t */\n\tpushEditOperations(beforeCursorState:Selection[], editOperations:IIdentifiedSingleEditOperation[], cursorStateComputer:ICursorStateComputer): Selection[];\n\n\t/**\n\t * Edit the model without adding the edits to the undo stack.\n\t * This can have dire consequences on the undo stack! See @pushEditOperations for the preferred way.\n\t * @param operations The edit operations.\n\t * @return The inverse edit operations, that, when applied, will bring the model back to the previous state.\n\t */\n\tapplyEdits(operations:IIdentifiedSingleEditOperation[]): IIdentifiedSingleEditOperation[];\n\n\t/**\n\t * Undo edit operations until the first previous stop point created by `pushStackElement`.\n\t * The inverse edit operations will be pushed on the redo stack.\n\t * @internal\n\t */\n\tundo(): Selection[];\n\n\t/**\n\t * Redo edit operations until the next stop point created by `pushStackElement`.\n\t * The inverse edit operations will be pushed on the undo stack.\n\t * @internal\n\t */\n\tredo(): Selection[];\n\n\t/**\n\t * Set an editable range on the model.\n\t * @internal\n\t */\n\tsetEditableRange(range:IRange): void;\n\n\t/**\n\t * Check if the model has an editable range.\n\t * @internal\n\t */\n\thasEditableRange(): boolean;\n\n\t/**\n\t * Get the editable range on the model.\n\t * @internal\n\t */\n\tgetEditableRange(): Range;\n}\n\n/**\n * A model.\n */\nexport interface IModel extends IReadOnlyModel, IEditableTextModel, ITextModelWithMarkers, ITokenizedModel, ITextModelWithTrackedRanges, ITextModelWithDecorations, IEditorModel {\n\n\tonDidChangeRawContent(listener: (e:IModelContentChangedEvent)=>void): IDisposable;\n\tonDidChangeContent(listener: (e:IModelContentChangedEvent2)=>void): IDisposable;\n\tonDidChangeModeSupport(listener: (e:IModeSupportChangedEvent)=>void): IDisposable;\n\tonDidChangeDecorations(listener: (e:IModelDecorationsChangedEvent)=>void): IDisposable;\n\tonDidChangeOptions(listener: (e:IModelOptionsChangedEvent)=>void): IDisposable;\n\tonDidChangeMode(listener: (e:IModelModeChangedEvent)=>void): IDisposable;\n\tonWillDispose(listener: ()=>void): IDisposable;\n\n\t/**\n\t * @internal\n\t */\n\taddBulkListener(listener:BulkListenerCallback):IDisposable;\n\n\t/**\n\t * A unique identifier associated with this model.\n\t */\n\tid: string;\n\n\t/**\n\t * Destroy this model. This will unbind the model from the mode\n\t * and make all necessary clean-up to release this object to the GC.\n\t * @internal\n\t */\n\tdestroy(): void;\n\n\t/**\n\t * Destroy this model. This will unbind the model from the mode\n\t * and make all necessary clean-up to release this object to the GC.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchOnlyEditableRange Limit the searching to only search inside the editable range of the model.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wholeWord Force the matching to match entire words only.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if not matches have been found.\n\t */\n\tfindMatches(searchString:string, searchOnlyEditableRange:boolean, isRegex:boolean, matchCase:boolean, wholeWord:boolean, limitResultCount?:number): Range[];\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchScope Limit the searching to only search inside this range.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wholeWord Force the matching to match entire words only.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if no matches have been found.\n\t */\n\tfindMatches(searchString:string, searchScope:IRange, isRegex:boolean, matchCase:boolean, wholeWord:boolean, limitResultCount?:number): Range[];\n\t/**\n\t * Search the model for the next match. Loops to the beginning of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wholeWord Force the matching to match entire words only.\n\t * @return The range where the next match is. It is null if no next match has been found.\n\t */\n\tfindNextMatch(searchString:string, searchStart:IPosition, isRegex:boolean, matchCase:boolean, wholeWord:boolean): Range;\n\t/**\n\t * Search the model for the previous match. Loops to the end of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wholeWord Force the matching to match entire words only.\n\t * @return The range where the previous match is. It is null if no previous match has been found.\n\t */\n\tfindPreviousMatch(searchString:string, searchStart:IPosition, isRegex:boolean, matchCase:boolean, wholeWord:boolean): Range;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeAttached(): void;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeDetached(): void;\n\n\t/**\n\t * Returns iff this model is attached to an editor or not.\n\t * @internal\n\t */\n\tisAttachedToEditor(): boolean;\n}\n\n/**\n * @internal\n */\nexport interface IRangeWithText {\n\ttext:string;\n\trange:IRange;\n}\n\n/**\n * @internal\n */\nexport interface IMirrorModel extends IEventEmitter, ITokenizedModel {\n\tgetEmbeddedAtPosition(position:IPosition): IMirrorModel;\n\tgetAllEmbedded(): IMirrorModel[];\n\n\turi: URI;\n\n\tgetOffsetFromPosition(position:IPosition): number;\n\tgetPositionFromOffset(offset:number): Position;\n\tgetOffsetAndLengthFromRange(range:IRange): {offset:number; length:number;};\n\tgetRangeFromOffsetAndLength(offset:number, length:number): Range;\n\tgetLineStart(lineNumber:number): number;\n\n\tgetAllWordsWithRange(): IRangeWithText[];\n\tgetAllUniqueWords(skipWordOnce?:string): string[];\n\n\tgetModeId(): string;\n}\n\n/**\n * An event describing that the current mode associated with a model has changed.\n */\nexport interface IModelModeChangedEvent {\n\t/**\n\t * Previous mode\n\t */\n\toldMode:IMode;\n\t/**\n\t * New mode\n\t */\n\tnewMode:IMode;\n}\n\n/**\n * An event describing a change in the text of a model.\n */\nexport interface IModelContentChangedEvent2 {\n\t/**\n\t * The range that got replaced.\n\t */\n\trange: IRange;\n\t/**\n\t * The length of the range that got replaced.\n\t */\n\trangeLength: number;\n\t/**\n\t * The new text for the range.\n\t */\n\ttext: string;\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\teol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\tversionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\tisUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\tisRedoing: boolean;\n}\n/**\n * An event describing a change in the text of a model.\n */\nexport interface IModelContentChangedEvent {\n\t/**\n\t * The event type. It can be used to detect the actual event type:\n\t * \t\tEditorCommon.EventType.ModelContentChangedFlush => IModelContentChangedFlushEvent\n\t * \t\tEditorCommon.EventType.ModelContentChangedLinesDeleted => IModelContentChangedLineChangedEvent\n\t * \t\tEditorCommon.EventType.ModelContentChangedLinesInserted => IModelContentChangedLinesDeletedEvent\n\t * \t\tEditorCommon.EventType.ModelContentChangedLineChanged => IModelContentChangedLinesInsertedEvent\n\t */\n\tchangeType: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\tversionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\tisUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\tisRedoing: boolean;\n}\nexport interface IRawText {\n\tlength: number;\n\tlines: string[];\n\tBOM: string;\n\tEOL: string;\n\toptions: ITextModelResolvedOptions;\n}\n/**\n * An event describing that a model has been reset to a new value.\n */\nexport interface IModelContentChangedFlushEvent extends IModelContentChangedEvent {\n\t/**\n\t * The new text content of the model.\n\t */\n\tdetail: IRawText;\n}\n/**\n * An event describing that a line has changed in a model.\n */\nexport interface IModelContentChangedLineChangedEvent extends IModelContentChangedEvent {\n\t/**\n\t * The line that has changed.\n\t */\n\tlineNumber: number;\n\t/**\n\t * The new value of the line.\n\t */\n\tdetail: string;\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n */\nexport interface IModelContentChangedLinesDeletedEvent extends IModelContentChangedEvent {\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tfromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\ttoLineNumber: number;\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n */\nexport interface IModelContentChangedLinesInsertedEvent extends IModelContentChangedEvent {\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tfromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\ttoLineNumber: number;\n\t/**\n\t * The text that was inserted\n\t */\n\tdetail: string;\n}\n/**\n * Decoration data associated with a model decorations changed event.\n */\nexport interface IModelDecorationsChangedEventDecorationData {\n\tid:string;\n\townerId:number;\n\trange:IRange;\n\tisForValidation:boolean;\n\toptions:IModelDecorationOptions;\n}\n/**\n * An event describing that model decorations have changed.\n */\nexport interface IModelDecorationsChangedEvent {\n\t/**\n\t * A summary with ids of decorations that have changed.\n\t */\n\tids:string[];\n\t/**\n\t * Lists of details\n\t */\n\taddedOrChangedDecorations:IModelDecorationsChangedEventDecorationData[];\n\tremovedDecorations:string[];\n\toldOptions:{[decorationId:string]:IModelDecorationOptions;};\n\toldRanges:{[decorationId:string]:IRange;};\n}\n/**\n * An event describing that a range of lines has been tokenized\n */\nexport interface IModelTokensChangedEvent {\n\t/**\n\t * The start of the range (inclusive)\n\t */\n\tfromLineNumber:number;\n\t/**\n\t * The end of the range (inclusive)\n\t */\n\ttoLineNumber:number;\n}\nexport enum CursorChangeReason {\n\tNotSet = 0,\n\tContentFlush = 1,\n\tRecoverFromMarkers = 2,\n\tExplicit = 3,\n\tPaste = 4,\n\tUndo = 5,\n\tRedo = 6,\n}\n/**\n * An event describing that the cursor position has changed.\n */\nexport interface ICursorPositionChangedEvent {\n\t/**\n\t * Primary cursor's position.\n\t */\n\tposition:Position;\n\t/**\n\t * Primary cursor's view position\n\t */\n\tviewPosition:Position;\n\t/**\n\t * Secondary cursors' position.\n\t */\n\tsecondaryPositions:Position[];\n\t/**\n\t * Secondary cursors' view position.\n\t */\n\tsecondaryViewPositions:Position[];\n\t/**\n\t * Reason.\n\t */\n\treason:CursorChangeReason;\n\t/**\n\t * Source of the call that caused the event.\n\t */\n\tsource:string;\n\t/**\n\t * Is the primary cursor in the editable range?\n\t */\n\tisInEditableRange:boolean;\n}\n/**\n * An event describing that the cursor selection has changed.\n */\nexport interface ICursorSelectionChangedEvent {\n\t/**\n\t * The primary selection.\n\t */\n\tselection:Selection;\n\t/**\n\t * The primary selection in view coordinates.\n\t */\n\tviewSelection:Selection;\n\t/**\n\t * The secondary selections.\n\t */\n\tsecondarySelections:Selection[];\n\t/**\n\t * The secondary selections in view coordinates.\n\t */\n\tsecondaryViewSelections:Selection[];\n\t/**\n\t * Source of the call that caused the event.\n\t */\n\tsource:string;\n\t/**\n\t * Reason.\n\t */\n\treason:CursorChangeReason;\n}\n/**\n * @internal\n */\nexport enum VerticalRevealType {\n\tSimple = 0,\n\tCenter = 1,\n\tCenterIfOutsideViewport = 2\n}\n/**\n * An event describing a request to reveal a specific range in the view of the editor.\n * @internal\n */\nexport interface ICursorRevealRangeEvent {\n\t/**\n\t * Range to be reavealed.\n\t */\n\trange:Range;\n\t/**\n\t * View range to be reavealed.\n\t */\n\tviewRange:Range;\n\n\tverticalType: VerticalRevealType;\n\t/**\n\t * If true: there should be a horizontal & vertical revealing\n\t * If false: there should be just a vertical revealing\n\t */\n\trevealHorizontal:boolean;\n}\n\n/**\n * @internal\n */\nexport interface ICursorScrollRequestEvent {\n\tdeltaLines: number;\n}\n\nexport interface IModelChangedEvent {\n\toldModelUrl: string;\n\tnewModelUrl: string;\n}\n\n/**\n * @internal\n */\nexport interface IEditorWhitespace {\n\tid:number;\n\tafterLineNumber:number;\n\theightInLines:number;\n}\n\n/**\n * A description for the overview ruler position.\n */\nexport class OverviewRulerPosition {\n\t_overviewRulerPositionBrand: void;\n\n\t/**\n\t * Width of the overview ruler\n\t */\n\twidth:number;\n\t/**\n\t * Height of the overview ruler\n\t */\n\theight:number;\n\t/**\n\t * Top position for the overview ruler\n\t */\n\ttop:number;\n\t/**\n\t * Right position for the overview ruler\n\t */\n\tright:number;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(source:{\n\t\twidth:number;\n\t\theight:number;\n\t\ttop:number;\n\t\tright:number;\n\t}) {\n\t\tthis.width = source.width|0;\n\t\tthis.height = source.height|0;\n\t\tthis.top = source.top|0;\n\t\tthis.right = source.right|0;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other:OverviewRulerPosition): boolean {\n\t\treturn (\n\t\t\tthis.width === other.width\n\t\t\t&& this.height === other.height\n\t\t\t&& this.top === other.top\n\t\t\t&& this.right === other.right\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): OverviewRulerPosition {\n\t\treturn new OverviewRulerPosition(this);\n\t}\n}\n\n/**\n * The internal layout details of the editor.\n */\nexport class EditorLayoutInfo {\n\t_editorLayoutInfoBrand: void;\n\n\t/**\n\t * Full editor width.\n\t */\n\twidth:number;\n\t/**\n\t * Full editor height.\n\t */\n\theight:number;\n\n\t/**\n\t * Left position for the glyph margin.\n\t */\n\tglyphMarginLeft:number;\n\t/**\n\t * The width of the glyph margin.\n\t */\n\tglyphMarginWidth:number;\n\t/**\n\t * The height of the glyph margin.\n\t */\n\tglyphMarginHeight:number;\n\n\t/**\n\t * Left position for the line numbers.\n\t */\n\tlineNumbersLeft:number;\n\t/**\n\t * The width of the line numbers.\n\t */\n\tlineNumbersWidth:number;\n\t/**\n\t * The height of the line numbers.\n\t */\n\tlineNumbersHeight:number;\n\n\t/**\n\t * Left position for the line decorations.\n\t */\n\tdecorationsLeft:number;\n\t/**\n\t * The width of the line decorations.\n\t */\n\tdecorationsWidth:number;\n\t/**\n\t * The height of the line decorations.\n\t */\n\tdecorationsHeight:number;\n\n\t/**\n\t * Left position for the content (actual text)\n\t */\n\tcontentLeft:number;\n\t/**\n\t * The width of the content (actual text)\n\t */\n\tcontentWidth:number;\n\t/**\n\t * The height of the content (actual height)\n\t */\n\tcontentHeight:number;\n\n\t/**\n\t * The width of the vertical scrollbar.\n\t */\n\tverticalScrollbarWidth:number;\n\t/**\n\t * The height of the horizontal scrollbar.\n\t */\n\thorizontalScrollbarHeight:number;\n\n\t/**\n\t * The position of the overview ruler.\n\t */\n\toverviewRuler:OverviewRulerPosition;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(source:{\n\t\twidth:number;\n\t\theight:number;\n\t\tglyphMarginLeft:number;\n\t\tglyphMarginWidth:number;\n\t\tglyphMarginHeight:number;\n\t\tlineNumbersLeft:number;\n\t\tlineNumbersWidth:number;\n\t\tlineNumbersHeight:number;\n\t\tdecorationsLeft:number;\n\t\tdecorationsWidth:number;\n\t\tdecorationsHeight:number;\n\t\tcontentLeft:number;\n\t\tcontentWidth:number;\n\t\tcontentHeight:number;\n\t\tverticalScrollbarWidth:number;\n\t\thorizontalScrollbarHeight:number;\n\t\toverviewRuler:OverviewRulerPosition;\n\t}) {\n\t\tthis.width = source.width|0;\n\t\tthis.height = source.height|0;\n\t\tthis.glyphMarginLeft = source.glyphMarginLeft|0;\n\t\tthis.glyphMarginWidth = source.glyphMarginWidth|0;\n\t\tthis.glyphMarginHeight = source.glyphMarginHeight|0;\n\t\tthis.lineNumbersLeft = source.lineNumbersLeft|0;\n\t\tthis.lineNumbersWidth = source.lineNumbersWidth|0;\n\t\tthis.lineNumbersHeight = source.lineNumbersHeight|0;\n\t\tthis.decorationsLeft = source.decorationsLeft|0;\n\t\tthis.decorationsWidth = source.decorationsWidth|0;\n\t\tthis.decorationsHeight = source.decorationsHeight|0;\n\t\tthis.contentLeft = source.contentLeft|0;\n\t\tthis.contentWidth = source.contentWidth|0;\n\t\tthis.contentHeight = source.contentHeight|0;\n\t\tthis.verticalScrollbarWidth = source.verticalScrollbarWidth|0;\n\t\tthis.horizontalScrollbarHeight = source.horizontalScrollbarHeight|0;\n\t\tthis.overviewRuler = source.overviewRuler.clone();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other:EditorLayoutInfo): boolean {\n\t\treturn (\n\t\t\tthis.width === other.width\n\t\t\t&& this.height === other.height\n\t\t\t&& this.glyphMarginLeft === other.glyphMarginLeft\n\t\t\t&& this.glyphMarginWidth === other.glyphMarginWidth\n\t\t\t&& this.glyphMarginHeight === other.glyphMarginHeight\n\t\t\t&& this.lineNumbersLeft === other.lineNumbersLeft\n\t\t\t&& this.lineNumbersWidth === other.lineNumbersWidth\n\t\t\t&& this.lineNumbersHeight === other.lineNumbersHeight\n\t\t\t&& this.decorationsLeft === other.decorationsLeft\n\t\t\t&& this.decorationsWidth === other.decorationsWidth\n\t\t\t&& this.decorationsHeight === other.decorationsHeight\n\t\t\t&& this.contentLeft === other.contentLeft\n\t\t\t&& this.contentWidth === other.contentWidth\n\t\t\t&& this.contentHeight === other.contentHeight\n\t\t\t&& this.verticalScrollbarWidth === other.verticalScrollbarWidth\n\t\t\t&& this.horizontalScrollbarHeight === other.horizontalScrollbarHeight\n\t\t\t&& this.overviewRuler.equals(other.overviewRuler)\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): EditorLayoutInfo {\n\t\treturn new EditorLayoutInfo(this);\n\t}\n}\n\n/**\n * Options for creating the editor.\n */\nexport interface ICodeEditorWidgetCreationOptions extends IEditorOptions {\n\tmodel?:IModel;\n}\n\n/**\n * An editor model.\n */\nexport interface IEditorModel {\n}\n/**\n * An editor view state.\n */\nexport interface IEditorViewState {\n}\nexport interface IDimension {\n\twidth:number;\n\theight:number;\n}\n/**\n * Conditions describing action enablement\n */\nexport interface IActionEnablement {\n\t/**\n\t * The action is enabled only if text in the editor is focused (e.g. blinking cursor).\n\t * Warning: This condition will be disabled if the action is marked to be displayed in the context menu\n\t * Defaults to false.\n\t */\n\ttextFocus?: boolean;\n\t/**\n\t * The action is enabled only if the editor or its widgets have focus (e.g. focus is in find widget).\n\t * Defaults to false.\n\t */\n\twidgetFocus?: boolean;\n\t/**\n\t * The action is enabled only if the editor is not in read only mode.\n\t * Defaults to false.\n\t */\n\twriteableEditor?: boolean;\n\t/**\n\t * The action is enabled only if the cursor position is over tokens of a certain kind.\n\t * Defaults to no tokens required.\n\t */\n\ttokensAtPosition?: string[];\n\t/**\n\t * The action is enabled only if the cursor position is over a word (i.e. not whitespace).\n\t * Defaults to false.\n\t */\n\twordAtPosition?: boolean;\n}\n\n/**\n * A (serializable) state of the cursors.\n */\nexport interface ICursorState {\n\tinSelectionMode:boolean;\n\tselectionStart:IPosition;\n\tposition:IPosition;\n}\n/**\n * A (serializable) state of the view.\n */\nexport interface IViewState {\n\tscrollTop: number;\n\tscrollTopWithoutViewZones: number;\n\tscrollLeft: number;\n}\n/**\n * A (serializable) state of the code editor.\n */\nexport interface ICodeEditorViewState extends IEditorViewState {\n\tcursorState:ICursorState[];\n\tviewState:IViewState;\n\tcontributionsState: {[id:string]:any};\n}\n\n/**\n * Type of hit element with the mouse in the editor.\n */\nexport enum MouseTargetType {\n\t/**\n\t * Mouse is on top of an unknown element.\n\t */\n\tUNKNOWN,\n\t/**\n\t * Mouse is on top of the textarea used for input.\n\t */\n\tTEXTAREA,\n\t/**\n\t * Mouse is on top of the glyph margin\n\t */\n\tGUTTER_GLYPH_MARGIN,\n\t/**\n\t * Mouse is on top of the line numbers\n\t */\n\tGUTTER_LINE_NUMBERS,\n\t/**\n\t * Mouse is on top of the line decorations\n\t */\n\tGUTTER_LINE_DECORATIONS,\n\t/**\n\t * Mouse is on top of the whitespace left in the gutter by a view zone.\n\t */\n\tGUTTER_VIEW_ZONE,\n\t/**\n\t * Mouse is on top of text in the content.\n\t */\n\tCONTENT_TEXT,\n\t/**\n\t * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n\t */\n\tCONTENT_EMPTY,\n\t/**\n\t * Mouse is on top of a view zone in the content.\n\t */\n\tCONTENT_VIEW_ZONE,\n\t/**\n\t * Mouse is on top of a content widget.\n\t */\n\tCONTENT_WIDGET,\n\t/**\n\t * Mouse is on top of the decorations overview ruler.\n\t */\n\tOVERVIEW_RULER,\n\t/**\n\t * Mouse is on top of a scrollbar.\n\t */\n\tSCROLLBAR,\n\t/**\n\t * Mouse is on top of an overlay widget.\n\t */\n\tOVERLAY_WIDGET\n}\n\n/**\n * A model for the diff editor.\n */\nexport interface IDiffEditorModel extends IEditorModel {\n\t/**\n\t * Original model.\n\t */\n\toriginal: IModel;\n\t/**\n\t * Modified model.\n\t */\n\tmodified: IModel;\n}\n/**\n * (Serializable) View state for the diff editor.\n */\nexport interface IDiffEditorViewState extends IEditorViewState {\n\toriginal: ICodeEditorViewState;\n\tmodified: ICodeEditorViewState;\n}\n/**\n * A change\n */\nexport interface IChange {\n\toriginalStartLineNumber:number;\n\toriginalEndLineNumber:number;\n\tmodifiedStartLineNumber:number;\n\tmodifiedEndLineNumber:number;\n}\n/**\n * A character level change.\n */\nexport interface ICharChange extends IChange {\n\toriginalStartColumn:number;\n\toriginalEndColumn:number;\n\tmodifiedStartColumn:number;\n\tmodifiedEndColumn:number;\n}\n/**\n * A line change\n */\nexport interface ILineChange extends IChange {\n\tcharChanges:ICharChange[];\n}\n/**\n * Information about a line in the diff editor\n * @internal\n */\nexport interface IDiffLineInformation {\n\tequivalentLineNumber: number;\n}\n\nexport const KEYBINDING_CONTEXT_EDITOR_TEXT_FOCUS = 'editorTextFocus';\nexport const KEYBINDING_CONTEXT_EDITOR_FOCUS = 'editorFocus';\n/**\n * @internal\n */\nexport const KEYBINDING_CONTEXT_EDITOR_TAB_MOVES_FOCUS = 'editorTabMovesFocus';\nexport const KEYBINDING_CONTEXT_EDITOR_HAS_MULTIPLE_SELECTIONS = 'editorHasMultipleSelections';\nexport const KEYBINDING_CONTEXT_EDITOR_HAS_NON_EMPTY_SELECTION = 'editorHasSelection';\nexport const KEYBINDING_CONTEXT_EDITOR_LANGUAGE_ID = 'editorLangId';\n/**\n * @internal\n */\nexport const SHOW_ACCESSIBILITY_HELP_ACTION_ID = 'editor.action.showAccessibilityHelp';\n\nexport class BareFontInfo {\n\t_bareFontInfoBrand: void;\n\n\tfontFamily: string;\n\tfontSize: number;\n\tlineHeight: number;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(opts: {\n\t\tfontFamily: string;\n\t\tfontSize: number;\n\t\tlineHeight: number;\n\t}) {\n\t\tthis.fontFamily = String(opts.fontFamily);\n\t\tthis.fontSize = opts.fontSize|0;\n\t\tthis.lineHeight = opts.lineHeight|0;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic getId(): string {\n\t\treturn this.fontFamily + '-' + this.fontSize + '-' + this.lineHeight;\n\t}\n}\n\nexport class FontInfo extends BareFontInfo {\n\t_editorStylingBrand: void;\n\n\ttypicalHalfwidthCharacterWidth:number;\n\ttypicalFullwidthCharacterWidth:number;\n\tspaceWidth:number;\n\tmaxDigitWidth: number;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(opts:{\n\t\tfontFamily: string;\n\t\tfontSize: number;\n\t\tlineHeight: number;\n\t\ttypicalHalfwidthCharacterWidth:number;\n\t\ttypicalFullwidthCharacterWidth:number;\n\t\tspaceWidth:number;\n\t\tmaxDigitWidth: number;\n\t}) {\n\t\tsuper(opts);\n\t\tthis.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n\t\tthis.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n\t\tthis.spaceWidth = opts.spaceWidth;\n\t\tthis.maxDigitWidth = opts.maxDigitWidth;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other:FontInfo): boolean {\n\t\treturn (\n\t\t\tthis.fontFamily === other.fontFamily\n\t\t\t&& this.fontSize === other.fontSize\n\t\t\t&& this.lineHeight === other.lineHeight\n\t\t\t&& this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n\t\t\t&& this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n\t\t\t&& this.spaceWidth === other.spaceWidth\n\t\t\t&& this.maxDigitWidth === other.maxDigitWidth\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic clone(): FontInfo {\n\t\treturn new FontInfo(this);\n\t}\n}\n\n/**\n * @internal\n */\nexport interface IConfiguration {\n\tonDidChange: Event<IConfigurationChangedEvent>;\n\n\teditor:InternalEditorOptions;\n\n\tsetLineCount(lineCount:number): void;\n}\n\n// --- view\n\n/**\n * @internal\n */\nexport interface IViewEventNames {\n\tModelFlushedEvent: string;\n\tLinesDeletedEvent: string;\n\tLinesInsertedEvent: string;\n\tLineChangedEvent: string;\n\tTokensChangedEvent: string;\n\tDecorationsChangedEvent: string;\n\tCursorPositionChangedEvent: string;\n\tCursorSelectionChangedEvent: string;\n\tRevealRangeEvent: string;\n\tLineMappingChangedEvent: string;\n}\n\n/**\n * @internal\n */\nexport var ViewEventNames = {\n\tModelFlushedEvent: 'modelFlushedEvent',\n\tLinesDeletedEvent: 'linesDeletedEvent',\n\tLinesInsertedEvent: 'linesInsertedEvent',\n\tLineChangedEvent: 'lineChangedEvent',\n\tTokensChangedEvent: 'tokensChangedEvent',\n\tDecorationsChangedEvent: 'decorationsChangedEvent',\n\tCursorPositionChangedEvent: 'cursorPositionChangedEvent',\n\tCursorSelectionChangedEvent: 'cursorSelectionChangedEvent',\n\tRevealRangeEvent: 'revealRangeEvent',\n\tLineMappingChangedEvent: 'lineMappingChangedEvent',\n\tScrollRequestEvent: 'scrollRequestEvent'\n};\n\nexport interface IScrollEvent {\n\tscrollTop: number;\n\tscrollLeft: number;\n\tscrollWidth: number;\n\tscrollHeight: number;\n\n\tscrollTopChanged: boolean;\n\tscrollLeftChanged: boolean;\n\tscrollWidthChanged: boolean;\n\tscrollHeightChanged: boolean;\n}\n\nexport interface INewScrollPosition {\n\tscrollLeft?: number;\n\tscrollTop?: number;\n}\n\n/**\n * @internal\n */\nexport interface IViewLinesDeletedEvent {\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tfromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\ttoLineNumber: number;\n}\n\n/**\n * @internal\n */\nexport interface IViewLinesInsertedEvent {\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tfromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\ttoLineNumber: number;\n}\n\n/**\n * @internal\n */\nexport interface IViewLineChangedEvent {\n\t/**\n\t * The line that has changed.\n\t */\n\tlineNumber: number;\n}\n\n/**\n * @internal\n */\nexport interface IViewTokensChangedEvent {\n\t/**\n\t * Start line number of range\n\t */\n\tfromLineNumber: number;\n\t/**\n\t * End line number of range\n\t */\n\ttoLineNumber: number;\n}\n\n/**\n * @internal\n */\nexport interface IViewDecorationsChangedEvent {\n\t/**\n\t * signals that at least one inline decoration has changed\n\t */\n\tinlineDecorationsChanged: boolean;\n}\n\n/**\n * @internal\n */\nexport interface IViewCursorPositionChangedEvent {\n\t/**\n\t * Primary cursor's position.\n\t */\n\tposition: Position;\n\t/**\n\t * Secondary cursors' position.\n\t */\n\tsecondaryPositions: Position[];\n\t/**\n\t * Is the primary cursor in the editable range?\n\t */\n\tisInEditableRange: boolean;\n}\n\n/**\n * @internal\n */\nexport interface IViewCursorSelectionChangedEvent {\n\t/**\n\t * The primary selection.\n\t */\n\tselection: Selection;\n\t/**\n\t * The secondary selections.\n\t */\n\tsecondarySelections: Selection[];\n}\n\n/**\n * @internal\n */\nexport interface IViewRevealRangeEvent {\n\t/**\n\t * Range to be reavealed.\n\t */\n\trange: Range;\n\n\tverticalType: VerticalRevealType;\n\t/**\n\t * If true: there should be a horizontal & vertical revealing\n\t * If false: there should be just a vertical revealing\n\t */\n\trevealHorizontal: boolean;\n}\n\n/**\n * @internal\n */\nexport interface IViewScrollRequestEvent {\n\tdeltaLines: number;\n}\n\n/**\n * @internal\n */\nexport interface IViewWhitespaceViewportData {\n\tid:number;\n\tafterLineNumber:number;\n\tverticalOffset:number;\n\theight:number;\n}\n\n/**\n * @internal\n */\nexport class Viewport {\n\t_viewportBrand: void;\n\n\ttop: number;\n\tleft: number;\n\twidth: number;\n\theight: number;\n\n\tconstructor(top:number, left:number, width:number, height:number) {\n\t\tthis.top = top|0;\n\t\tthis.left = left|0;\n\t\tthis.width = width|0;\n\t\tthis.height = height|0;\n\t}\n}\n\n/**\n * Description of an action contribution\n */\nexport interface IActionDescriptor {\n\t/**\n\t * An unique identifier of the contributed action.\n\t */\n\tid: string;\n\t/**\n\t * A label of the action that will be presented to the user.\n\t */\n\tlabel: string;\n\t/**\n\t * An array of keybindings for the action.\n\t */\n\tkeybindings?: number[];\n\tkeybindingContext?: string;\n\t/**\n\t * A set of enablement conditions.\n\t */\n\tenablement?: IActionEnablement;\n\t/**\n\t * Control if the action should show up in the context menu and where.\n\t * Built-in groups:\n\t *   1_goto/* => e.g. 1_goto/1_peekDefinition\n\t *   2_change/* => e.g. 2_change/2_format\n\t *   3_edit/* => e.g. 3_edit/1_copy\n\t *   4_tools/* => e.g. 4_tools/1_commands\n\t * You can also create your own group.\n\t * Defaults to null (don't show in context menu).\n\t */\n\tcontextMenuGroupId?: string;\n\t/**\n\t * Method that will be executed when the action is triggered.\n\t * @param editor The editor instance is passed in as a convinience\n\t */\n\trun:(editor:ICommonCodeEditor)=>TPromise<void>;\n}\n\n/**\n * Data associated with an editor action contribution\n * @internal\n */\nexport interface IEditorActionDescriptorData {\n\tid:string;\n\tlabel:string;\n\talias?:string;\n}\n\n/**\n * @internal\n */\nexport type IEditorActionContributionCtor = IConstructorSignature2<IEditorActionDescriptorData, ICommonCodeEditor, IEditorContribution>;\n\n/**\n * @internal\n */\nexport type ICommonEditorContributionCtor = IConstructorSignature1<ICommonCodeEditor, IEditorContribution>;\n\n/**\n * An editor contribution descriptor that will be used to construct editor contributions\n * @internal\n */\nexport interface ICommonEditorContributionDescriptor {\n\t/**\n\t * Create an instance of the contribution\n\t */\n\tcreateInstance(instantiationService:IInstantiationService, editor:ICommonCodeEditor): IEditorContribution;\n}\n\n/**\n * An editor.\n */\nexport interface IEditor {\n\n\tonDidChangeModelRawContent(listener: (e:IModelContentChangedEvent)=>void): IDisposable;\n\tonDidChangeModelContent(listener: (e:IModelContentChangedEvent2)=>void): IDisposable;\n\tonDidChangeModelMode(listener: (e:IModelModeChangedEvent)=>void): IDisposable;\n\tonDidChangeModelOptions(listener: (e:IModelOptionsChangedEvent)=>void): IDisposable;\n\tonDidChangeConfiguration(listener: (e:IConfigurationChangedEvent)=>void): IDisposable;\n\tonDidChangeCursorPosition(listener: (e:ICursorPositionChangedEvent)=>void): IDisposable;\n\tonDidChangeCursorSelection(listener: (e:ICursorSelectionChangedEvent)=>void): IDisposable;\n\tonDidDispose(listener: ()=>void): IDisposable;\n\n\tdispose(): void;\n\n\tgetId(): string;\n\n\t/**\n\t * Get the editor type. Current supported types:\n\t * \t\t\tEditorCommon.EditorType.ICodeEditor => ICodeEditor;\n\t * \t\t\tEditorCommon.EditorType.IDiffEditor => IDiffEditor;\n\t * This is to avoid an instanceof check\n\t */\n\tgetEditorType(): string;\n\n\t/**\n\t * Destroy the editor.\n\t * @internal\n\t */\n\tdestroy(): void;\n\n\t/**\n\t * Update the editor's options after the editor has been created.\n\t */\n\tupdateOptions(newOptions: IEditorOptions): void;\n\n\t/**\n\t * Indicates that the editor becomes visible.\n\t * @internal\n\t */\n\tonVisible(): void;\n\n\t/**\n\t * Indicates that the editor becomes hidden.\n\t * @internal\n\t */\n\tonHide(): void;\n\n\t/**\n\t * Instructs the editor to remeasure its container. This method should\n\t * be called when the container of the editor gets resized.\n\t */\n\tlayout(dimension?:IDimension): void;\n\n\t/**\n\t * Brings browser focus to the editor text\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Returns true if this editor has keyboard focus (e.g. cursor is blinking).\n\t */\n\tisFocused(): boolean;\n\n\t/**\n\t * Add a new action to this editor.\n\t */\n\taddAction(descriptor:IActionDescriptor): void;\n\n\t/**\n\t * Returns all actions associated with this editor.\n\t */\n\tgetActions(): IAction[];\n\n\t/**\n\t * Saves current view state of the editor in a serializable object.\n\t */\n\tsaveViewState(): IEditorViewState;\n\n\t/**\n\t * Restores the view state of the editor from a serializable object generated by `saveViewState`.\n\t */\n\trestoreViewState(state: IEditorViewState): void;\n\n\t/**\n\t * Given a position, returns a column number that takes tab-widths into account.\n\t */\n\tgetVisibleColumnFromPosition(position:IPosition): number;\n\n\t/**\n\t * Returns the primary position of the cursor.\n\t */\n\tgetPosition(): Position;\n\n\t/**\n\t * Set the primary position of the cursor. This will remove any secondary cursors.\n\t * @param position New primary cursor's position\n\t */\n\tsetPosition(position:IPosition): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line.\n\t */\n\trevealLine(lineNumber: number): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically.\n\t */\n\trevealLineInCenter(lineNumber: number): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal a line centered vertically only if it lies outside the viewport.\n\t */\n\trevealLineInCenterIfOutsideViewport(lineNumber: number): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position.\n\t */\n\trevealPosition(position: IPosition): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically.\n\t */\n\trevealPositionInCenter(position: IPosition): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a position centered vertically only if it lies outside the viewport.\n\t */\n\trevealPositionInCenterIfOutsideViewport(position: IPosition): void;\n\n\t/**\n\t * Returns the primary selection of the editor.\n\t */\n\tgetSelection(): Selection;\n\n\t/**\n\t * Returns all the selections of the editor.\n\t */\n\tgetSelections(): Selection[];\n\n\t/**\n\t * Set the primary selection of the editor. This will remove any secondary cursors.\n\t * @param selection The new selection\n\t */\n\tsetSelection(selection:IRange): void;\n\tsetSelection(selection:Range): void;\n\tsetSelection(selection:ISelection): void;\n\tsetSelection(selection:Selection): void;\n\n\t/**\n\t * Set the selections for all the cursors of the editor.\n\t * Cursors will be removed or added, as necessary.\n\t */\n\tsetSelections(selections:ISelection[]): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines.\n\t */\n\trevealLines(startLineNumber: number, endLineNumber: number): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically.\n\t */\n\trevealLinesInCenter(lineNumber: number, endLineNumber: number): void;\n\n\t/**\n\t * Scroll vertically as necessary and reveal lines centered vertically only if it lies outside the viewport.\n\t */\n\trevealLinesInCenterIfOutsideViewport(lineNumber: number, endLineNumber: number): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range.\n\t */\n\trevealRange(range: IRange): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically.\n\t */\n\trevealRangeInCenter(range: IRange): void;\n\n\t/**\n\t * Scroll vertically or horizontally as necessary and reveal a range centered vertically only if it lies outside the viewport.\n\t */\n\trevealRangeInCenterIfOutsideViewport(range: IRange): void;\n\n\n\t/**\n\t * Directly trigger a handler or an editor action.\n\t * @param source The source of the call.\n\t * @param handlerId The id of the handler or the id of a contribution.\n\t * @param payload Extra data to be sent to the handler.\n\t */\n\ttrigger(source:string, handlerId:string, payload:any): void;\n\n\t/**\n\t * Gets the current model attached to this editor.\n\t */\n\tgetModel(): IEditorModel;\n\n\t/**\n\t * Sets the current model attached to this editor.\n\t * If the previous model was created by the editor via the value key in the options\n\t * literal object, it will be destroyed. Otherwise, if the previous model was set\n\t * via setModel, or the model key in the options literal object, the previous model\n\t * will not be destroyed.\n\t * It is safe to call setModel(null) to simply detach the current model from the editor.\n\t */\n\tsetModel(model:IEditorModel): void;\n\n\t/**\n\t * Change the decorations. All decorations added through this changeAccessor\n\t * will get the ownerId of the editor (meaning they will not show up in other\n\t * editors).\n\t * @see IModel.changeDecorations\n\t * @internal\n\t */\n\tchangeDecorations(callback: (changeAccessor:IModelDecorationsChangeAccessor)=>any): any;\n}\n\n/**\n * @internal\n */\nexport interface ICodeEditorState {\n\tvalidate(editor:ICommonCodeEditor): boolean;\n}\n\n/**\n * @internal\n */\nexport enum CodeEditorStateFlag {\n\tValue,\n\tSelection,\n\tPosition,\n\tScroll\n}\n\n/**\n * An editor contribution that gets created every time a new editor gets created and gets disposed when the editor gets disposed.\n */\nexport interface IEditorContribution {\n\t/**\n\t * Get a unique identifier for this contribution.\n\t */\n\tgetId(): string;\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\t/**\n\t * Store view state.\n\t */\n\tsaveViewState?(): any;\n\t/**\n\t * Restore view state.\n\t */\n\trestoreViewState?(state: any): void;\n}\n\n/**\n * @internal\n */\nexport interface IThemeDecorationRenderOptions {\n\tbackgroundColor?: string;\n\n\toutlineColor?: string;\n\toutlineStyle?: string;\n\toutlineWidth?: string;\n\n\tborderColor?: string;\n\tborderRadius?: string;\n\tborderSpacing?: string;\n\tborderStyle?: string;\n\tborderWidth?: string;\n\n\ttextDecoration?: string;\n\tcursor?: string;\n\tcolor?: string;\n\tletterSpacing?: string;\n\n\tgutterIconPath?: string;\n\n\toverviewRulerColor?: string;\n}\n\n/**\n * @internal\n */\nexport interface IDecorationRenderOptions extends IThemeDecorationRenderOptions {\n\tisWholeLine?: boolean;\n\toverviewRulerLane?: OverviewRulerLane;\n\n\tlight?: IThemeDecorationRenderOptions;\n\tdark?: IThemeDecorationRenderOptions;\n}\n\n/**\n * @internal\n */\nexport interface IRangeWithMessage {\n\trange: IRange;\n\thoverMessage?: IHTMLContentElement[];\n}\n\nexport interface ICommonCodeEditor extends IEditor {\n\n\tonDidChangeModel(listener: (e:IModelChangedEvent)=>void): IDisposable;\n\tonDidChangeModelModeSupport(listener: (e:IModeSupportChangedEvent)=>void): IDisposable;\n\tonDidChangeModelDecorations(listener: (e:IModelDecorationsChangedEvent)=>void): IDisposable;\n\n\tonDidFocusEditorText(listener: ()=>void): IDisposable;\n\tonDidBlurEditorText(listener: ()=>void): IDisposable;\n\n\tonDidFocusEditor(listener: ()=>void): IDisposable;\n\tonDidBlurEditor(listener: ()=>void): IDisposable;\n\n\t/**\n\t * Returns true if this editor or one of its widgets has keyboard focus.\n\t */\n\thasWidgetFocus(): boolean;\n\n\t/**\n\t * Get a contribution of this editor.\n\t * @id Unique identifier of the contribution.\n\t * @return The contribution or null if contribution not found.\n\t */\n\tgetContribution(id: string): IEditorContribution;\n\n\t/**\n\t * @internal\n\t */\n\tcaptureState(...flags:CodeEditorStateFlag[]): ICodeEditorState;\n\n\t/**\n\t * Type the getModel() of IEditor.\n\t */\n\tgetModel(): IModel;\n\n\t/**\n\t * Returns the current editor's configuration\n\t */\n\tgetConfiguration(): InternalEditorOptions;\n\n\t/**\n\t * Returns the 'raw' editor's configuration, as it was applied over the defaults, but without any computed members.\n\t * @internal\n\t */\n\tgetRawConfiguration(): IEditorOptions;\n\n\t/**\n\t * Get value of the current model attached to this editor.\n\t * @see IModel.getValue\n\t */\n\tgetValue(options?: { preserveBOM: boolean; lineEnding: string; }): string;\n\n\t/**\n\t * Set the value of the current model attached to this editor.\n\t * @see IModel.setValue\n\t */\n\tsetValue(newValue: string): void;\n\n\t/**\n\t * Get the scrollWidth of the editor's viewport.\n\t */\n\tgetScrollWidth(): number;\n\t/**\n\t * Get the scrollLeft of the editor's viewport.\n\t */\n\tgetScrollLeft(): number;\n\n\t/**\n\t * Get the scrollHeight of the editor's viewport.\n\t */\n\tgetScrollHeight(): number;\n\t/**\n\t * Get the scrollTop of the editor's viewport.\n\t */\n\tgetScrollTop(): number;\n\n\t/**\n\t * Change the scrollLeft of the editor's viewport.\n\t */\n\tsetScrollLeft(newScrollLeft: number): void;\n\t/**\n\t * Change the scrollTop of the editor's viewport.\n\t */\n\tsetScrollTop(newScrollTop: number): void;\n\t/**\n\t * Change the scroll position of the editor's viewport.\n\t */\n\tsetScrollPosition(position: INewScrollPosition): void;\n\n\t/**\n\t * Get an action that is a contribution to this editor.\n\t * @id Unique identifier of the contribution.\n\t * @return The action or null if action not found.\n\t */\n\tgetAction(id: string): IAction;\n\n\t/**\n\t * Execute a command on the editor.\n\t * @param source The source of the call.\n\t * @param command The command to execute\n\t */\n\texecuteCommand(source: string, command: ICommand): void;\n\n\t/**\n\t * Execute a command on the editor.\n\t * @param source The source of the call.\n\t * @param command The command to execute\n\t */\n\texecuteEdits(source: string, edits: IIdentifiedSingleEditOperation[]): boolean;\n\n\t/**\n\t * Execute multiple (concommitent) commands on the editor.\n\t * @param source The source of the call.\n\t * @param command The commands to execute\n\t */\n\texecuteCommands(source: string, commands: ICommand[]): void;\n\n\t/**\n\t * Get all the decorations on a line (filtering out decorations from other editors).\n\t */\n\tgetLineDecorations(lineNumber: number): IModelDecoration[];\n\n\t/**\n\t * All decorations added through this call will get the ownerId of this editor.\n\t * @see IModel.deltaDecorations\n\t */\n\tdeltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[]): string[];\n\n\t/**\n\t * @internal\n\t */\n\tsetDecorations(decorationTypeKey: string, ranges:IRangeWithMessage[]): void;\n\n\t/**\n\t * @internal\n\t */\n\tremoveDecorations(decorationTypeKey:string): void;\n\n\t/**\n\t * Get the layout info for the editor.\n\t */\n\tgetLayoutInfo(): EditorLayoutInfo;\n\n\t/**\n\t * Prevent the editor from sending a widgetFocusLost event,\n\t * set it in a state where it believes that focus is in one of its widgets.\n\t * Use this method with care and always add a matching `endForcedWidgetFocus`\n\t * @internal\n\t */\n\tbeginForcedWidgetFocus(): void;\n\n\t/**\n\t * End the preventing of sending a widgetFocusLost event.\n\t * @internal\n\t */\n\tendForcedWidgetFocus(): void;\n\n\t/**\n\t * This listener is notified when a keypress produces a visible character.\n\t * The callback should not do operations on the view, as the view might not be updated to reflect previous typed characters.\n\t * @param character Character to listen to.\n\t * @param callback Function to call when `character` is typed.\n\t * @internal\n\t */\n\taddTypingListener(character: string, callback: () => void): IDisposable;\n\n}\n\nexport interface ICommonDiffEditor extends IEditor {\n\tonDidUpdateDiff(listener: ()=>void): IDisposable;\n\n\t/**\n\t * Type the getModel() of IEditor.\n\t */\n\tgetModel(): IDiffEditorModel;\n\n\tgetOriginalEditor(): ICommonCodeEditor;\n\tgetModifiedEditor(): ICommonCodeEditor;\n\n\tgetLineChanges(): ILineChange[];\n\n\t/**\n\t * Get information based on computed diff about a line number from the original model.\n\t * If the diff computation is not finished or the model is missing, will return null.\n\t * @internal\n\t */\n\tgetDiffLineInformationForOriginal(lineNumber:number): IDiffLineInformation;\n\t/**\n\t * Get information based on computed diff about a line number from the modified model.\n\t * If the diff computation is not finished or the model is missing, will return null.\n\t * @internal\n\t */\n\tgetDiffLineInformationForModified(lineNumber:number): IDiffLineInformation;\n\n\t/**\n\t * @see ICodeEditor.getValue\n\t */\n\tgetValue(options?:{ preserveBOM:boolean; lineEnding:string; }): string;\n\n\t/**\n\t * Returns whether the diff editor is ignoring trim whitespace or not.\n\t * @internal\n\t */\n\tignoreTrimWhitespace: boolean;\n\t/**\n\t * Returns whether the diff editor is rendering side by side or not.\n\t * @internal\n\t */\n\trenderSideBySide: boolean;\n}\n\nexport var EditorType = {\n\tICodeEditor: 'vs.editor.ICodeEditor',\n\tIDiffEditor: 'vs.editor.IDiffEditor'\n};\n\n/**\n * @internal\n */\nexport var ClassName = {\n\tEditorWarningDecoration: 'greensquiggly',\n\tEditorErrorDecoration: 'redsquiggly'\n};\n\n/**\n * @internal\n */\nexport var EventType = {\n\tDisposed: 'disposed',\n\n\tConfigurationChanged: 'configurationChanged',\n\n\tModelDispose: 'modelDispose',\n\n\tModelChanged: 'modelChanged',\n\n\tModelTokensChanged: 'modelTokensChanged',\n\tModelModeChanged: 'modelsModeChanged',\n\tModelModeSupportChanged: 'modelsModeSupportChanged',\n\tModelOptionsChanged: 'modelOptionsChanged',\n\tModelRawContentChanged: 'contentChanged',\n\tModelContentChanged2: 'contentChanged2',\n\tModelRawContentChangedFlush: 'flush',\n\tModelRawContentChangedLinesDeleted: 'linesDeleted',\n\tModelRawContentChangedLinesInserted: 'linesInserted',\n\tModelRawContentChangedLineChanged: 'lineChanged',\n\n\tEditorTextBlur: 'blur',\n\tEditorTextFocus: 'focus',\n\tEditorFocus: 'widgetFocus',\n\tEditorBlur: 'widgetBlur',\n\n\tModelDecorationsChanged: 'decorationsChanged',\n\n\tCursorPositionChanged: 'positionChanged',\n\tCursorSelectionChanged: 'selectionChanged',\n\tCursorRevealRange: 'revealRange',\n\tCursorScrollRequest: 'scrollRequest',\n\n\tViewFocusGained: 'focusGained',\n\tViewFocusLost: 'focusLost',\n\tViewFocusChanged: 'focusChanged',\n\tViewScrollChanged: 'scrollChanged',\n\tViewZonesChanged: 'zonesChanged',\n\n\tViewLayoutChanged: 'viewLayoutChanged',\n\n\tContextMenu: 'contextMenu',\n\tMouseDown: 'mousedown',\n\tMouseUp: 'mouseup',\n\tMouseMove: 'mousemove',\n\tMouseLeave: 'mouseleave',\n\tKeyDown: 'keydown',\n\tKeyUp: 'keyup',\n\n\tEditorLayout: 'editorLayout',\n\n\tDiffUpdated: 'diffUpdated'\n};\n\nexport var Handler = {\n\tExecuteCommand:\t\t\t\t'executeCommand',\n\tExecuteCommands:\t\t\t'executeCommands',\n\n\tCursorLeft:\t\t\t\t\t'cursorLeft',\n\tCursorLeftSelect:\t\t\t'cursorLeftSelect',\n\n\tCursorWordLeft:\t\t\t\t'cursorWordLeft',\n\tCursorWordStartLeft:\t\t'cursorWordStartLeft',\n\tCursorWordEndLeft:\t\t\t'cursorWordEndLeft',\n\n\tCursorWordLeftSelect:\t\t'cursorWordLeftSelect',\n\tCursorWordStartLeftSelect:\t'cursorWordStartLeftSelect',\n\tCursorWordEndLeftSelect:\t'cursorWordEndLeftSelect',\n\n\tCursorRight:\t\t\t\t'cursorRight',\n\tCursorRightSelect:\t\t\t'cursorRightSelect',\n\n\tCursorWordRight:\t\t\t'cursorWordRight',\n\tCursorWordStartRight:\t\t'cursorWordStartRight',\n\tCursorWordEndRight:\t\t\t'cursorWordEndRight',\n\n\tCursorWordRightSelect:\t\t'cursorWordRightSelect',\n\tCursorWordStartRightSelect:\t'cursorWordStartRightSelect',\n\tCursorWordEndRightSelect:\t'cursorWordEndRightSelect',\n\n\tCursorUp:\t\t\t\t\t'cursorUp',\n\tCursorUpSelect:\t\t\t\t'cursorUpSelect',\n\tCursorDown:\t\t\t\t\t'cursorDown',\n\tCursorDownSelect:\t\t\t'cursorDownSelect',\n\n\tCursorPageUp:\t\t\t\t'cursorPageUp',\n\tCursorPageUpSelect:\t\t\t'cursorPageUpSelect',\n\tCursorPageDown:\t\t\t\t'cursorPageDown',\n\tCursorPageDownSelect:\t\t'cursorPageDownSelect',\n\n\tCursorHome:\t\t\t\t\t'cursorHome',\n\tCursorHomeSelect:\t\t\t'cursorHomeSelect',\n\n\tCursorEnd:\t\t\t\t\t'cursorEnd',\n\tCursorEndSelect:\t\t\t'cursorEndSelect',\n\n\tExpandLineSelection:\t\t'expandLineSelection',\n\n\tCursorTop:\t\t\t\t\t'cursorTop',\n\tCursorTopSelect:\t\t\t'cursorTopSelect',\n\tCursorBottom:\t\t\t\t'cursorBottom',\n\tCursorBottomSelect:\t\t\t'cursorBottomSelect',\n\n\tCursorColumnSelectLeft:\t\t'cursorColumnSelectLeft',\n\tCursorColumnSelectRight:\t'cursorColumnSelectRight',\n\tCursorColumnSelectUp:\t\t'cursorColumnSelectUp',\n\tCursorColumnSelectPageUp:\t'cursorColumnSelectPageUp',\n\tCursorColumnSelectDown:\t\t'cursorColumnSelectDown',\n\tCursorColumnSelectPageDown:\t'cursorColumnSelectPageDown',\n\n\tAddCursorDown:\t\t\t\t'addCursorDown',\n\tAddCursorUp:\t\t\t\t'addCursorUp',\n\tCursorUndo:\t\t\t\t\t'cursorUndo',\n\tMoveTo:\t\t\t\t\t\t'moveTo',\n\tMoveToSelect:\t\t\t\t'moveToSelect',\n\tColumnSelect:\t\t\t\t'columnSelect',\n\tCreateCursor:\t\t\t\t'createCursor',\n\tLastCursorMoveToSelect:\t\t'lastCursorMoveToSelect',\n\n\tJumpToBracket:\t\t\t\t'jumpToBracket',\n\n\tType:\t\t\t\t\t\t'type',\n\tReplacePreviousChar:\t\t'replacePreviousChar',\n\tPaste:\t\t\t\t\t\t'paste',\n\n\tTab:\t\t\t\t\t\t'tab',\n\tIndent:\t\t\t\t\t\t'indent',\n\tOutdent:\t\t\t\t\t'outdent',\n\n\tDeleteLeft:\t\t\t\t\t'deleteLeft',\n\tDeleteRight:\t\t\t\t'deleteRight',\n\n\tDeleteWordLeft:\t\t\t\t'deleteWordLeft',\n\tDeleteWordStartLeft:\t\t'deleteWordStartLeft',\n\tDeleteWordEndLeft:\t\t\t'deleteWordEndLeft',\n\n\tDeleteWordRight:\t\t\t'deleteWordRight',\n\tDeleteWordStartRight:\t\t'deleteWordStartRight',\n\tDeleteWordEndRight:\t\t\t'deleteWordEndRight',\n\n\tDeleteAllLeft:\t\t\t\t'deleteAllLeft',\n\tDeleteAllRight:\t\t\t\t'deleteAllRight',\n\n\tRemoveSecondaryCursors: \t'removeSecondaryCursors',\n\tCancelSelection:\t\t\t'cancelSelection',\n\n\tCut:\t\t\t\t\t\t'cut',\n\n\tUndo:\t\t\t\t\t\t'undo',\n\tRedo:\t\t\t\t\t\t'redo',\n\n\tWordSelect:\t\t\t\t\t'wordSelect',\n\tWordSelectDrag:\t\t\t\t'wordSelectDrag',\n\tLastCursorWordSelect: \t\t'lastCursorWordSelect',\n\n\tLineSelect:\t\t\t\t\t'lineSelect',\n\tLineSelectDrag:\t\t\t\t'lineSelectDrag',\n\tLastCursorLineSelect:\t\t'lastCursorLineSelect',\n\tLastCursorLineSelectDrag:\t'lastCursorLineSelectDrag',\n\tLineInsertBefore:\t\t\t'lineInsertBefore',\n\tLineInsertAfter:\t\t\t'lineInsertAfter',\n\tLineBreakInsert:\t\t\t'lineBreakInsert',\n\n\tSelectAll:\t\t\t\t\t'selectAll',\n\n\tScrollLineUp:\t\t\t\t'scrollLineUp',\n\tScrollLineDown:\t\t\t\t'scrollLineDown',\n\n\tScrollPageUp:\t\t\t\t'scrollPageUp',\n\tScrollPageDown:\t\t\t\t'scrollPageDown'\n};\n\nexport enum TextEditorCursorStyle {\n\tLine = 1,\n\tBlock = 2,\n\tUnderline = 3\n}\n\n/**\n * @internal\n */\nexport function cursorStyleToString(cursorStyle:TextEditorCursorStyle): string {\n\tif (cursorStyle === TextEditorCursorStyle.Line) {\n\t\treturn 'line';\n\t} else if (cursorStyle === TextEditorCursorStyle.Block) {\n\t\treturn 'block';\n\t} else if (cursorStyle === TextEditorCursorStyle.Underline) {\n\t\treturn 'underline';\n\t} else {\n\t\tthrow new Error('cursorStyleToString: Unknown cursorStyle');\n\t}\n}\n\n/**\n * @internal\n */\nexport class ColorZone {\n\t_colorZoneBrand: void;\n\n\tfrom: number;\n\tto: number;\n\tcolorId: number;\n\tposition: OverviewRulerLane;\n\n\tconstructor(from:number, to:number, colorId:number, position: OverviewRulerLane) {\n\t\tthis.from = from|0;\n\t\tthis.to = to|0;\n\t\tthis.colorId = colorId|0;\n\t\tthis.position = position|0;\n\t}\n}\n\n/**\n * A zone in the overview ruler\n * @internal\n */\nexport class OverviewRulerZone {\n\t_overviewRulerZoneBrand: void;\n\n\tstartLineNumber: number;\n\tendLineNumber: number;\n\tposition: OverviewRulerLane;\n\tforceHeight: number;\n\n\tprivate _color: string;\n\tprivate _darkColor: string;\n\n\tprivate _colorZones: ColorZone[];\n\n\tconstructor(\n\t\tstartLineNumber: number, endLineNumber: number,\n\t\tposition: OverviewRulerLane,\n\t\tforceHeight: number,\n\t\tcolor: string, darkColor: string\n\t) {\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.endLineNumber = endLineNumber;\n\t\tthis.position = position;\n\t\tthis.forceHeight = forceHeight;\n\t\tthis._color = color;\n\t\tthis._darkColor = darkColor;\n\t\tthis._colorZones = null;\n\t}\n\n\tpublic getColor(useDarkColor:boolean): string {\n\t\tif (useDarkColor) {\n\t\t\treturn this._darkColor;\n\t\t}\n\t\treturn this._color;\n\t}\n\n\tpublic equals(other:OverviewRulerZone): boolean {\n\t\treturn (\n\t\t\tthis.startLineNumber === other.startLineNumber\n\t\t\t&& this.endLineNumber === other.endLineNumber\n\t\t\t&& this.position === other.position\n\t\t\t&& this.forceHeight === other.forceHeight\n\t\t\t&& this._color === other._color\n\t\t\t&& this._darkColor === other._darkColor\n\t\t);\n\t}\n\n\tpublic compareTo(other:OverviewRulerZone): number {\n\t\tif (this.startLineNumber === other.startLineNumber) {\n\t\t\tif (this.endLineNumber === other.endLineNumber) {\n\t\t\t\tif (this.forceHeight === other.forceHeight) {\n\t\t\t\t\tif (this.position === other.position) {\n\t\t\t\t\t\tif (this._darkColor === other._darkColor) {\n\t\t\t\t\t\t\tif (this._color === other._color) {\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn this._color < other._color ? -1 : 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this._darkColor < other._darkColor ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.position - other.position;\n\t\t\t\t}\n\t\t\t\treturn this.forceHeight - other.forceHeight;\n\t\t\t}\n\t\t\treturn this.endLineNumber - other.endLineNumber;\n\t\t}\n\t\treturn this.startLineNumber - other.startLineNumber;\n\t}\n\n\tpublic setColorZones(colorZones:ColorZone[]): void {\n\t\tthis._colorZones = colorZones;\n\t}\n\n\tpublic getColorZones(): ColorZone[] {\n\t\treturn this._colorZones;\n\t}\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nconst __space = ' '.charCodeAt(0);\nconst __tab = '\\t'.charCodeAt(0);\n\n/**\n * Compute the diff in spaces between two line's indentation.\n */\nfunction spacesDiff(a:string, aLength:number, b:string, bLength:number): number {\n\n\t// This can go both ways (e.g.):\n\t//  - a: \"\\t\"\n\t//  - b: \"\\t    \"\n\t//  => This should count 1 tab and 4 spaces\n\n\tlet i:number;\n\n\tfor (i = 0; i < aLength && i < bLength; i++) {\n\t\tlet aCharCode = a.charCodeAt(i);\n\t\tlet bCharCode = b.charCodeAt(i);\n\n\t\tif (aCharCode !== bCharCode) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlet aSpacesCnt = 0, aTabsCount = 0;\n\tfor (let j = i; j < aLength; j++) {\n\t\tlet aCharCode = a.charCodeAt(j);\n\t\tif (aCharCode === __space) {\n\t\t\taSpacesCnt++;\n\t\t} else {\n\t\t\taTabsCount++;\n\t\t}\n\t}\n\n\tlet bSpacesCnt = 0, bTabsCount = 0;\n\tfor (let j = i; j < bLength; j++) {\n\t\tlet bCharCode = b.charCodeAt(j);\n\t\tif (bCharCode === __space) {\n\t\t\tbSpacesCnt++;\n\t\t} else {\n\t\t\tbTabsCount++;\n\t\t}\n\t}\n\n\tif (aSpacesCnt > 0 && aTabsCount > 0) {\n\t\treturn 0;\n\t}\n\tif (bSpacesCnt > 0 && bTabsCount > 0) {\n\t\treturn 0;\n\t}\n\n\tlet tabsDiff = Math.abs(aTabsCount - bTabsCount);\n\tlet spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n\n\tif (tabsDiff === 0) {\n\t\treturn spacesDiff;\n\t}\n\tif (spacesDiff % tabsDiff === 0) {\n\t\treturn spacesDiff / tabsDiff;\n\t}\n\treturn 0;\n}\n\n/**\n * Result for a guessIndentation\n */\nexport interface IGuessedIndentation {\n\t/**\n\t * If indentation is based on spaces (`insertSpaces` = true), then what is the number of spaces that make an indent?\n\t */\n\ttabSize: number;\n\t/**\n\t * Is indentation based on spaces?\n\t */\n\tinsertSpaces: boolean;\n}\n\nexport function guessIndentation(lines:string[], defaultTabSize:number, defaultInsertSpaces:boolean): IGuessedIndentation {\n\tlet linesIndentedWithTabsCount = 0;\t\t\t\t// number of lines that contain at least one tab in indentation\n\tlet linesIndentedWithSpacesCount = 0;\t\t\t// number of lines that contain only spaces in indentation\n\n\tlet previousLineText = '';\t\t\t\t\t\t// content of latest line that contained non-whitespace chars\n\tlet previousLineIndentation = 0;\t\t\t\t// index at which latest line contained the first non-whitespace char\n\n\tconst ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8];\t// limit guesses for `tabSize` to 2, 4, 6 or 8.\n\tconst MAX_ALLOWED_TAB_SIZE_GUESS = 8;\t\t\t// max(2,4,6,8) = 8\n\n\tlet spacesDiffCount = [0,0,0,0,0,0,0,0,0];\t\t// `tabSize` scores\n\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tlet currentLineText = lines[i];\n\n\t\tlet currentLineHasContent = false;\t\t\t// does `currentLineText` contain non-whitespace chars\n\t\tlet currentLineIndentation = 0;\t\t\t\t// index at which `currentLineText` contains the first non-whitespace char\n\t\tlet currentLineSpacesCount = 0;\t\t\t\t// count of spaces found in `currentLineText` indentation\n\t\tlet currentLineTabsCount = 0;\t\t\t\t// count of tabs found in `currentLineText` indentation\n\t\tfor (let j = 0, lenJ = currentLineText.length; j < lenJ; j++) {\n\t\t\tlet charCode = currentLineText.charCodeAt(j);\n\n\t\t\tif (charCode === __tab) {\n\t\t\t\tcurrentLineTabsCount++;\n\t\t\t} else if (charCode === __space) {\n\t\t\t\tcurrentLineSpacesCount++;\n\t\t\t} else {\n\t\t\t\t// Hit non whitespace character on this line\n\t\t\t\tcurrentLineHasContent = true;\n\t\t\t\tcurrentLineIndentation = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Ignore empty or only whitespace lines\n\t\tif (!currentLineHasContent) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (currentLineTabsCount > 0) {\n\t\t\tlinesIndentedWithTabsCount++;\n\t\t} else if (currentLineSpacesCount > 1) {\n\t\t\tlinesIndentedWithSpacesCount++;\n\t\t}\n\n\t\tlet currentSpacesDiff = spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation);\n\t\tif (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n\t\t\tspacesDiffCount[currentSpacesDiff]++;\n\t\t}\n\n\t\tpreviousLineText = currentLineText;\n\t\tpreviousLineIndentation = currentLineIndentation;\n\t}\n\n\t// Take into account the last line as well\n\tlet deltaSpacesCount = spacesDiff(previousLineText, previousLineIndentation, '', 0);\n\tif (deltaSpacesCount <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n\t\tspacesDiffCount[deltaSpacesCount]++;\n\t}\n\n\tlet insertSpaces = defaultInsertSpaces;\n\tif (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n\t\tinsertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\n\t}\n\n\tlet tabSize = defaultTabSize;\n\tlet tabSizeScore = (insertSpaces ? 0 : 0.1 * lines.length);\n\n\t// console.log(\"score threshold: \" + tabSizeScore);\n\n\tALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize) => {\n\t\tlet possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n\t\tif (possibleTabSizeScore > tabSizeScore) {\n\t\t\ttabSizeScore = possibleTabSizeScore;\n\t\t\ttabSize = possibleTabSize;\n\t\t}\n\t});\n\n\n\t// console.log('--------------------------');\n\t// console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n\t// console.log('spacesDiffCount: ' + spacesDiffCount);\n\t// console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n\n\treturn {\n\t\tinsertSpaces: insertSpaces,\n\t\ttabSize: tabSize\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {Arrays} from 'vs/editor/common/core/arrays';\n\n/**\n * A token on a line.\n */\nexport class LineToken {\n\tpublic _lineTokenBrand: void;\n\n\tpublic startIndex:number;\n\tpublic type:string;\n\n\tconstructor(startIndex:number, type:string) {\n\t\tthis.startIndex = startIndex|0;// @perf\n\t\tthis.type = type;\n\t}\n\n\tpublic equals(other:LineToken): boolean {\n\t\treturn (\n\t\t\tthis.startIndex === other.startIndex\n\t\t\t&& this.type === other.type\n\t\t);\n\t}\n\n\tpublic static findIndexInSegmentsArray(arr:LineToken[], desiredIndex: number): number {\n\t\treturn Arrays.findIndexInSegmentsArray(arr, desiredIndex);\n\t}\n\n\tpublic static equalsArray(a:LineToken[], b:LineToken[]): boolean {\n\t\tlet aLen = a.length;\n\t\tlet bLen = b.length;\n\t\tif (aLen !== bLen) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < aLen; i++) {\n\t\t\tif (!a[i].equals(b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as editorCommon from 'vs/editor/common/editorCommon';\n\nexport class TokenIterator implements editorCommon.ITokenIterator {\n\n\tprivate _model:editorCommon.ITokenizedModel;\n\tprivate _currentLineNumber:number;\n\tprivate _currentTokenIndex:number;\n\tprivate _currentLineTokens:editorCommon.ILineTokens;\n\tprivate _next:editorCommon.ITokenInfo;\n\tprivate _prev:editorCommon.ITokenInfo;\n\n\tconstructor(model:editorCommon.ITokenizedModel, position:editorCommon.IPosition) {\n\t\tthis._model = model;\n\t\tthis._currentLineNumber = position.lineNumber;\n\t\tthis._currentTokenIndex = 0;\n\t\tthis._readLineTokens(this._currentLineNumber);\n\t\tthis._next = null;\n\t\tthis._prev = null;\n\n\t\t// start with a position to next/prev run\n\t\tvar columnIndex = position.column - 1, tokenEndIndex = Number.MAX_VALUE;\n\n\t\tfor (var i = this._currentLineTokens.getTokenCount() - 1; i >= 0; i--) {\n\t\t\tlet tokenStartIndex = this._currentLineTokens.getTokenStartIndex(i);\n\n\t\t\tif (tokenStartIndex <= columnIndex && columnIndex <= tokenEndIndex) {\n\n\t\t\t\tthis._currentTokenIndex = i;\n\t\t\t\tthis._next = this._current();\n\t\t\t\tthis._prev = this._current();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttokenEndIndex = tokenStartIndex;\n\t\t}\n\t}\n\n\tprivate _readLineTokens(lineNumber:number): void {\n\t\tthis._currentLineTokens = this._model.getLineTokens(lineNumber, false);\n\t}\n\n\tprivate _advanceNext() {\n\t\tthis._prev = this._next;\n\t\tthis._next = null;\n\t\tif (this._currentTokenIndex + 1 < this._currentLineTokens.getTokenCount()) {\n\t\t\t// There are still tokens on current line\n\t\t\tthis._currentTokenIndex++;\n\t\t\tthis._next = this._current();\n\n\t\t} else {\n\t\t\t// find the next line with tokens\n\t\t\twhile (this._currentLineNumber + 1 <= this._model.getLineCount()) {\n\t\t\t\tthis._currentLineNumber++;\n\t\t\t\tthis._readLineTokens(this._currentLineNumber);\n\t\t\t\tif (this._currentLineTokens.getTokenCount() > 0) {\n\t\t\t\t\tthis._currentTokenIndex = 0;\n\t\t\t\t\tthis._next = this._current();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._next === null) {\n\t\t\t\t// prepare of a previous run\n\t\t\t\tthis._readLineTokens(this._currentLineNumber);\n\t\t\t\tthis._currentTokenIndex = this._currentLineTokens.getTokenCount();\n\t\t\t\tthis._advancePrev();\n\t\t\t\tthis._next = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _advancePrev() {\n\t\tthis._next = this._prev;\n\t\tthis._prev = null;\n\t\tif (this._currentTokenIndex > 0) {\n\t\t\t// There are still tokens on current line\n\t\t\tthis._currentTokenIndex--;\n\t\t\tthis._prev = this._current();\n\n\t\t} else {\n\t\t\t// find previous line with tokens\n\t\t\twhile (this._currentLineNumber > 1) {\n\t\t\t\tthis._currentLineNumber--;\n\t\t\t\tthis._readLineTokens(this._currentLineNumber);\n\t\t\t\tif (this._currentLineTokens.getTokenCount() > 0) {\n\t\t\t\t\tthis._currentTokenIndex = this._currentLineTokens.getTokenCount() - 1;\n\t\t\t\t\tthis._prev = this._current();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _current(): editorCommon.ITokenInfo {\n\t\tlet startIndex = this._currentLineTokens.getTokenStartIndex(this._currentTokenIndex);\n\t\tlet type = this._currentLineTokens.getTokenType(this._currentTokenIndex);\n\t\tlet endIndex = this._currentLineTokens.getTokenEndIndex(this._currentTokenIndex, this._model.getLineContent(this._currentLineNumber).length);\n\n\t\treturn {\n\t\t\ttoken: {\n\t\t\t\tstartIndex: startIndex,\n\t\t\t\ttype: type\n\t\t\t},\n\t\t\tlineNumber: this._currentLineNumber,\n\t\t\tstartColumn: startIndex + 1,\n\t\t\tendColumn: endIndex + 1\n\t\t};\n\t}\n\n\tpublic hasNext(): boolean {\n\t\treturn this._next !== null;\n\t}\n\n\tpublic next(): editorCommon.ITokenInfo {\n\t\tvar result = this._next;\n\t\tthis._advanceNext();\n\t\treturn result;\n\t}\n\n\tpublic hasPrev(): boolean {\n\t\treturn this._prev !== null;\n\t}\n\n\tpublic prev(): editorCommon.ITokenInfo {\n\t\tvar result = this._prev;\n\t\tthis._advancePrev();\n\t\treturn result;\n\t}\n\n\tpublic _invalidate() {\n\t\t// replace all public functions with errors\n\t\tvar errorFn = function(): any {\n\t\t\tthrow new Error('iteration isn\\'t valid anymore');\n\t\t};\n\t\tthis.hasNext = errorFn;\n\t\tthis.next = errorFn;\n\t\tthis.hasPrev = errorFn;\n\t\tthis.prev = errorFn;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IMode, IState, IStream, ITokenizationResult} from 'vs/editor/common/modes';\n\nexport class AbstractState implements IState {\n\n\tprivate mode:IMode;\n\tprivate stateData:IState;\n\n\tconstructor(mode:IMode, stateData:IState = null) {\n\t\tthis.mode = mode;\n\t\tthis.stateData = stateData;\n\t}\n\n\tpublic getMode():IMode {\n\t\treturn this.mode;\n\t}\n\n\tpublic clone():IState {\n\t\tvar result:AbstractState = this.makeClone();\n\t\tresult.initializeFrom(this);\n\t\treturn result;\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\tthrow new Error('Abstract Method');\n\t}\n\n\tpublic initializeFrom(other:AbstractState): void {\n\t\tthis.stateData = other.stateData !== null ? other.stateData.clone() : null;\n\t}\n\n\tpublic getStateData(): IState {\n\t\treturn this.stateData;\n\t}\n\n\tpublic setStateData(state:IState):void {\n\t\tthis.stateData = state;\n\t}\n\n\tpublic equals(other:IState):boolean {\n\t\tif (other === null || this.mode !== other.getMode()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (other instanceof AbstractState) {\n\t\t\treturn AbstractState.safeEquals(this.stateData, other.stateData);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:IStream):ITokenizationResult {\n\t\tthrow new Error('Abstract Method');\n\t}\n\n\tpublic static safeEquals(a: IState, b: IState): boolean {\n\t\tif (a === null && b === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (a === null || b === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.equals(b);\n\t}\n\n\tpublic static safeClone(state: IState): IState {\n\t\tif (state) {\n\t\t\treturn state.clone();\n\t\t}\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {match as matchGlobPattern} from 'vs/base/common/glob'; // TODO@Alex\n\nexport interface LanguageFilter {\n\tlanguage?: string;\n\tscheme?: string;\n\tpattern?: string;\n}\n\nexport type LanguageSelector = string | LanguageFilter | (string | LanguageFilter)[];\n\nexport default function matches(selection: LanguageSelector, uri: URI, language: string): boolean {\n\treturn score(selection, uri, language) > 0;\n}\n\nexport function score(selector: LanguageSelector, uri: URI, language: string): number {\n\n\tif (Array.isArray(selector)) {\n\t\t// for each\n\t\tlet values = (<LanguageSelector[]>selector).map(item => score(item, uri, language));\n\t\treturn Math.max(...values);\n\n\t} else if (typeof selector === 'string') {\n\t\t// compare language id\n\t\tif (selector === language) {\n\t\t\treturn 10;\n\t\t} else if (selector === '*') {\n\t\t\treturn 5;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t} else if (selector) {\n\t\tlet filter = <LanguageFilter>selector;\n\t\tlet value = 0;\n\n\t\t// language id\n\t\tif (filter.language) {\n\t\t\tif (filter.language === language) {\n\t\t\t\tvalue += 10;\n\t\t\t} else if (filter.language === '*') {\n\t\t\t\tvalue += 5;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\t// scheme\n\t\tif (filter.scheme) {\n\t\t\tif (filter.scheme === uri.scheme) {\n\t\t\t\tvalue += 10;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\t// match fsPath with pattern\n\t\tif (filter.pattern) {\n\t\t\tif (filter.pattern === uri.fsPath) {\n\t\t\t\tvalue += 10;\n\t\t\t} else if (matchGlobPattern(filter.pattern, uri.fsPath)) {\n\t\t\t\tvalue += 5;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IStream} from 'vs/editor/common/modes';\n\nexport class LineStream implements IStream {\n\n\tstatic STRING_TO_ARRAY_CACHE:{ [key:string]:boolean[]; } = {};\n\n\t/*protected*/ _source:string;\n\tprivate sourceLength:number;\n\t/*protected*/ _pos:number;\n\tprivate whitespace:string;\n\tprivate whitespaceArr:boolean[];\n\tprivate separators:string;\n\tprivate separatorsArr:boolean[];\n\tprivate tokenStart:number;\n\tprivate tokenEnd:number;\n\n\tconstructor(source:string) {\n\t\tthis._source = source;\n\t\tthis.sourceLength = source.length;\n\t\tthis._pos = 0;\n\t\tthis.whitespace = '\\t \\u00a0';\n\t\tthis.whitespaceArr = this.stringToArray(this.whitespace);\n\t\tthis.separators = '';\n\t\tthis.separatorsArr = this.stringToArray(this.separators);\n\t\tthis.tokenStart = -1;\n\t\tthis.tokenEnd = -1;\n\t}\n\n\tprivate stringToArray(str:string):boolean[] {\n\t\tif (!LineStream.STRING_TO_ARRAY_CACHE.hasOwnProperty(str)) {\n\t\t\tLineStream.STRING_TO_ARRAY_CACHE[str] = this.actualStringToArray(str);\n\t\t}\n\t\treturn LineStream.STRING_TO_ARRAY_CACHE[str];\n\t}\n\n\tprivate actualStringToArray(str:string):boolean[] {\n\t\tlet maxCharCode = 0;\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tmaxCharCode = Math.max(maxCharCode, str.charCodeAt(i));\n\t\t}\n\t\tlet r:boolean[] = [];\n\t\tfor (let i = 0; i <= maxCharCode; i++) {\n\t\t\tr[i] = false;\n\t\t}\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tr[str.charCodeAt(i)] = true;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic pos():number {\n\t\treturn this._pos;\n\t}\n\n\tpublic eos() {\n\t\treturn this._pos >= this.sourceLength;\n\t}\n\n\tpublic peek():string {\n\t\t// Check EOS\n\t\tif (this._pos >= this.sourceLength) {\n\t\t\tthrow new Error('Stream is at the end');\n\t\t}\n\t\treturn this._source[this._pos];\n\t}\n\n\tpublic next():string {\n\t\t// Check EOS\n\t\tif (this._pos >= this.sourceLength) {\n\t\t\tthrow new Error('Stream is at the end');\n\t\t}\n\n\t\t// Reset peeked token\n\t\tthis.tokenStart = -1;\n\t\tthis.tokenEnd = -1;\n\n\t\treturn this._source[this._pos++];\n\t}\n\n\tpublic next2(): void {\n\t\t// Check EOS\n\t\tif (this._pos >= this.sourceLength) {\n\t\t\tthrow new Error('Stream is at the end');\n\t\t}\n\n\t\t// Reset peeked token\n\t\tthis.tokenStart = -1;\n\t\tthis.tokenEnd = -1;\n\n\t\tthis._pos++;\n\t}\n\n\tpublic advance(n: number): string {\n\t\tif (n === 0) {\n\t\t\treturn '';\n\t\t}\n\t\tvar oldPos = this._pos;\n\t\tthis._pos += n;\n\t\t// Reset peeked token\n\t\tthis.tokenStart = -1;\n\t\tthis.tokenEnd = -1;\n\t\treturn this._source.substring(oldPos, this._pos);\n\t}\n\n\tprivate _advance2(n: number): number {\n\t\tif (n === 0) {\n\t\t\treturn n;\n\t\t}\n\t\tthis._pos += n;\n\t\t// Reset peeked token\n\t\tthis.tokenStart = -1;\n\t\tthis.tokenEnd = -1;\n\t\treturn n;\n\t}\n\n\tpublic advanceToEOS():string {\n\t\tvar oldPos = this._pos;\n\t\tthis._pos = this.sourceLength;\n\t\tthis.resetPeekedToken();\n\t\treturn this._source.substring(oldPos, this._pos);\n\t}\n\n\tpublic goBack(n:number) {\n\t\tthis._pos -= n;\n\t\tthis.resetPeekedToken();\n\t}\n\n\tprivate createPeeker(condition:any):()=>number {\n\t\tif (condition instanceof RegExp) {\n\t\t\treturn () => {\n\t\t\t\tvar result = condition.exec(this._source.substr(this._pos));\n\t\t\t\tif (result === null) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} else if (result.index !== 0) {\n\t\t\t\t\tthrow new Error('Regular expression must begin with the character \"^\"');\n\t\t\t\t}\n\t\t\t\treturn result[0].length;\n\t\t\t};\n\t\t} else if ((condition instanceof String || (typeof condition) === 'string') && condition) {\n\t\t\treturn () => {\n\t\t\t\tvar len = (<String> condition).length, match = this._pos + len <= this.sourceLength;\n\t\t\t\tfor (var i = 0; match && i < len; i++) {\n\t\t\t\t\tmatch = this._source.charCodeAt(this._pos + i) === (<String> condition).charCodeAt(i);\n\t\t\t\t}\n\t\t\t\treturn match ? len : 0;\n\t\t\t};\n\t\t}\n\t\tthrow new Error('Condition must be either a regular expression, function or a non-empty string');\n\t}\n\n\t// --- BEGIN `_advanceIfStringCaseInsensitive`\n\tprivate _advanceIfStringCaseInsensitive(condition:string): number {\n\t\tvar oldPos = this._pos,\n\t\t\tsource = this._source,\n\t\t\tlen = condition.length,\n\t\t\ti:number;\n\n\t\tif (len < 1 || oldPos + len > this.sourceLength) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (source.charAt(oldPos + i).toLowerCase() !== condition.charAt(i).toLowerCase()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn len;\n\t}\n\tpublic advanceIfStringCaseInsensitive(condition: string): string {\n\t\treturn this.advance(this._advanceIfStringCaseInsensitive(condition));\n\t}\n\tpublic advanceIfStringCaseInsensitive2(condition: string): number {\n\t\treturn this._advance2(this._advanceIfStringCaseInsensitive(condition));\n\t}\n\t// --- END\n\n\t// --- BEGIN `advanceIfString`\n\tprivate _advanceIfString(condition: string): number {\n\t\tvar oldPos = this._pos,\n\t\t\tsource = this._source,\n\t\t\tlen = condition.length,\n\t\t\ti:number;\n\n\t\tif (len < 1 || oldPos + len > this.sourceLength) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (source.charCodeAt(oldPos + i) !== condition.charCodeAt(i)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn len;\n\t}\n\tpublic advanceIfString(condition:string): string {\n\t\treturn this.advance(this._advanceIfString(condition));\n\t}\n\tpublic advanceIfString2(condition: string): number {\n\t\treturn this._advance2(this._advanceIfString(condition));\n\t}\n\t// --- END\n\n\t// --- BEGIN `advanceIfString`\n\tprivate _advanceIfCharCode(charCode:number): number {\n\t\tif (this._pos < this.sourceLength && this._source.charCodeAt(this._pos) === charCode) {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn 0;\n\t}\n\tpublic advanceIfCharCode(charCode: number): string {\n\t\treturn this.advance(this._advanceIfCharCode(charCode));\n\t}\n\tpublic advanceIfCharCode2(charCode: number): number {\n\t\treturn this._advance2(this._advanceIfCharCode(charCode));\n\t}\n\t// --- END\n\n\t// --- BEGIN `advanceIfRegExp`\n\tprivate _advanceIfRegExp(condition:RegExp): number {\n\t\tif (this._pos >= this.sourceLength) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (!condition.test(this._source.substr(this._pos))) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn RegExp.lastMatch.length;\n\t}\n\tpublic advanceIfRegExp(condition: RegExp): string {\n\t\treturn this.advance(this._advanceIfRegExp(condition));\n\t}\n\tpublic advanceIfRegExp2(condition: RegExp): number {\n\t\treturn this._advance2(this._advanceIfRegExp(condition));\n\t}\n\t// --- END\n\n\tprivate advanceLoop(condition:any, isWhile:boolean, including:boolean):string {\n\t\tif (this.eos()) {\n\t\t\treturn '';\n\t\t}\n\t\tvar peeker = this.createPeeker(condition);\n\t\tvar oldPos = this._pos;\n\t\tvar n = 0;\n\t\tvar f = null;\n\t\tif (isWhile) {\n\t\t\tf = (n) => {\n\t\t\t\treturn n > 0;\n\t\t\t};\n\t\t} else {\n\t\t\tf = (n) => {\n\t\t\t\treturn n === 0;\n\t\t\t};\n\t\t}\n\t\twhile (!this.eos() && f(n = peeker())) {\n\t\t\tif (n > 0) {\n\t\t\t\tthis.advance(n);\n\t\t\t} else {\n\t\t\t\tthis.next();\n\t\t\t}\n\t\t}\n\t\tif (including && !this.eos()) {\n\t\t\tthis.advance(n);\n\t\t}\n\t\treturn this._source.substring(oldPos, this._pos);\n\t}\n\n\tpublic advanceWhile(condition:any):string {\n\t\treturn this.advanceLoop(condition, true, false);\n\t}\n\n\tpublic advanceUntil(condition:any, including:boolean):string {\n\t\treturn this.advanceLoop(condition, false, including);\n\t}\n\n\t// --- BEGIN `advanceUntilString`\n\tprivate _advanceUntilString(condition: string, including: boolean): number {\n\t\tif (this.eos() || condition.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar oldPos = this._pos;\n\t\tvar index = this._source.indexOf(condition, oldPos);\n\n\t\tif (index === -1) {\n\t\t\t// String was not found => advanced to `eos`\n\t\t\treturn (this.sourceLength - oldPos);\n\t\t}\n\n\t\tif (including) {\n\t\t\t// String was found => advance to include `condition`\n\t\t\treturn (index + condition.length - oldPos);\n\t\t}\n\n\t\t// String was found => advance right before `condition`\n\t\treturn (index - oldPos);\n\t}\n\tpublic advanceUntilString(condition: string, including: boolean): string {\n\t\treturn this.advance(this._advanceUntilString(condition, including));\n\t}\n\tpublic advanceUntilString2(condition: string, including: boolean): number {\n\t\treturn this._advance2(this._advanceUntilString(condition, including));\n\t}\n\t// --- END\n\n\tprivate resetPeekedToken() {\n\t\tthis.tokenStart = -1;\n\t\tthis.tokenEnd = -1;\n\t}\n\n\tpublic setTokenRules(separators:string, whitespace:string):void {\n\t\tif (this.separators !== separators || this.whitespace !== whitespace) {\n\t\t\tthis.separators = separators;\n\t\t\tthis.separatorsArr = this.stringToArray(this.separators);\n\t\t\tthis.whitespace = whitespace;\n\t\t\tthis.whitespaceArr = this.stringToArray(this.whitespace);\n\t\t\tthis.resetPeekedToken();\n\t\t}\n\t}\n\n\t// --- tokens\n\n\tpublic peekToken():string {\n\t\tif (this.tokenStart !== -1) {\n\t\t\treturn this._source.substring(this.tokenStart, this.tokenEnd);\n\t\t}\n\n\t\tvar\tsource = this._source,\n\t\t\tsourceLength = this.sourceLength,\n\t\t\twhitespaceArr = this.whitespaceArr,\n\t\t\tseparatorsArr = this.separatorsArr,\n\t\t\ttokenStart = this._pos;\n\n\t\t// Check EOS\n\t\tif (tokenStart >= sourceLength) {\n\t\t\tthrow new Error('Stream is at the end');\n\t\t}\n\n\t\t// Skip whitespace\n\t\twhile (whitespaceArr[source.charCodeAt(tokenStart)] && tokenStart < sourceLength) {\n\t\t\ttokenStart++;\n\t\t}\n\n\t\tvar tokenEnd = tokenStart;\n\t\t// If a separator is hit, it is a token\n\t\tif (separatorsArr[source.charCodeAt(tokenEnd)] && tokenEnd < sourceLength) {\n\t\t\ttokenEnd++;\n\t\t} else {\n\t\t\t// Advance until a separator or a whitespace is hit\n\t\t\twhile (!separatorsArr[source.charCodeAt(tokenEnd)] && !whitespaceArr[source.charCodeAt(tokenEnd)] && tokenEnd < sourceLength) {\n\t\t\t\ttokenEnd++;\n\t\t\t}\n\t\t}\n\n\t\t// Cache peeked token\n\t\tthis.tokenStart = tokenStart;\n\t\tthis.tokenEnd = tokenEnd;\n\n\t\treturn source.substring(tokenStart, tokenEnd);\n\t}\n\n\tpublic nextToken():string {\n\t\t// Check EOS\n\t\tif (this._pos >= this.sourceLength) {\n\t\t\tthrow new Error('Stream is at the end');\n\t\t}\n\n\t\t// Peek token if necessary\n\t\tvar result:string;\n\t\tif (this.tokenStart === -1)  {\n\t\t\tresult = this.peekToken();\n\t\t} else {\n\t\t\tresult = this._source.substring(this.tokenStart, this.tokenEnd);\n\t\t}\n\n\t\t// Advance to tokenEnd\n\t\tthis._pos = this.tokenEnd;\n\n\t\t// Reset peeked token\n\t\tthis.tokenStart = -1;\n\t\tthis.tokenEnd = -1;\n\n\t\treturn result;\n\t}\n\n\t// -- whitespace\n\n\tpublic peekWhitespace():string {\n\t\tvar\tsource = this._source,\n\t\t\tsourceLength = this.sourceLength,\n\t\t\twhitespaceArr = this.whitespaceArr,\n\t\t\tpeek = this._pos;\n\n\t\twhile (whitespaceArr[source.charCodeAt(peek)] && peek < sourceLength) {\n\t\t\tpeek++;\n\t\t}\n\t\treturn source.substring(this._pos, peek);\n\t}\n\n\t// --- BEGIN `advanceIfRegExp`\n\tprivate _skipWhitespace(): number {\n\t\tvar source = this._source,\n\t\t\tsourceLength = this.sourceLength,\n\t\t\twhitespaceArr = this.whitespaceArr,\n\t\t\toldPos = this._pos,\n\t\t\tpeek = this._pos;\n\n\t\twhile (whitespaceArr[source.charCodeAt(peek)] && peek < sourceLength) {\n\t\t\tpeek++;\n\t\t}\n\n\t\treturn (peek - oldPos);\n\t}\n\tpublic skipWhitespace(): string {\n\t\treturn this.advance(this._skipWhitespace());\n\t}\n\tpublic skipWhitespace2(): number {\n\t\treturn this._advance2(this._skipWhitespace());\n\t}\n\t// --- END\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {CharacterPair, IAutoClosingPairConditional} from 'vs/editor/common/modes';\n\n/*\n * This module exports common types and functionality shared between\n * the Monarch compiler that compiles JSON to ILexer, and the Monarch\n * Tokenizer (that highlights at runtime)\n */\n\n/*\n * Type definitions to be used internally to Monarch.\n * Inside monarch we use fully typed definitions and compiled versions of the more abstract JSON descriptions.\n */\n\nexport enum MonarchBracket {\n\tNone = 0,\n\tOpen = 1,\n\tClose = -1\n}\n\nexport interface ILexerMin {\n\tnoThrow: boolean;\n\tignoreCase: boolean;\n\tdisplayName: string;\n\tname: string;\n\tusesEmbedded: boolean;\n\tdefaultToken: string;\n\tstateNames: Object;\n}\n\nexport interface ILexer extends ILexerMin {\n\tmaxStack: number;\n\tstart: string;\n\tignoreCase: boolean;\n\tlineComment: string;\n\tblockCommentStart: string;\n\tblockCommentEnd: string;\n\ttokenPostfix: string;\n\n\ttokenizer: IRule[][];\n\tbrackets: IBracket[];\n\twordDefinition: RegExp;\n\tautoClosingPairs: IAutoClosingPairConditional[];\n\n\tstandardBrackets: CharacterPair[];\n\t// enhancedBrackets: IRegexBracketPair[];\n\toutdentTriggers: string;\n}\n\nexport interface IAutoIndent {\n\tmatch: RegExp;\n\tmatchAfter: RegExp;\n}\n\nexport interface IAutoComplete {\n\ttriggers: string;\n\tmatch: RegExp;\n\tcomplete: string;\n}\n\nexport interface IBracket {\n\ttoken: string;\n\topen: string;\n\tclose: string;\n}\n\nexport interface IRule {\n\tregex: RegExp;\n\taction: IAction;\n\tmatchOnlyAtLineStart: boolean;\n\tname: string;\n}\n\nexport interface IAction {\n\t// an action is either a group of actions\n\tgroup?: IAction[];\n\n\t// or a function that returns a fresh action\n\ttest?: (id: string, matches: string[], state: string, eos: boolean) => IAction;\n\n\t// or it is a declarative action with a token value and various other attributes\n\ttoken?: string;\n\ttokenSubst?: boolean;\n\tnext?: string;\n\tnextEmbedded?: string;\n\tbracket?: MonarchBracket;\n\tlog?: string;\n\tswitchTo?: string;\n\tgoBack?: number;\n\ttransform?: (states: string[]) => string[];\n}\n\nexport interface IBranch {\n\tname: string;\n\tvalue: IAction;\n\ttest: (id: string, matches: string[], state: string, eos: boolean) => boolean;\n}\n\n// Small helper functions\n\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s: string): boolean {\n\treturn (s ? false : true);\n}\n\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer: ILexerMin, str: string): string {\n\treturn (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s: string) {\n\treturn s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n\n// Logging\n\n/**\n * Logs a message.\n */\nexport function log(lexer: ILexerMin, msg: string) {\n\tconsole.log(`${lexer.name}: ${msg}`);\n}\n\n// Throwing errors\n\n/**\n * Throws error. May actually just log the error and continue.\n */\nexport function throwError(lexer: ILexerMin, msg: string) {\n\tthrow new Error(`${lexer.name}: ${msg}`);\n}\n\n// Helper functions for rule finding and substitution\n\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer: ILexerMin, str: string, id: string, matches: string[], state: string) {\n\tvar re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n\tvar stateMatches: string[] = null;\n\treturn str.replace(re, function(full, sub?, dollar?, hash?, n?, s?, attr?, ofs?, total?) {\n\t\tif (!empty(dollar)) {\n\t\t\treturn '$'; // $$\n\t\t}\n\t\tif (!empty(hash)) {\n\t\t\treturn fixCase(lexer, id);   // default $#\n\t\t}\n\t\tif (!empty(n) && n < matches.length) {\n\t\t\treturn fixCase(lexer, matches[n]); // $n\n\t\t}\n\t\tif (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n\t\t\treturn lexer[attr]; //@attribute\n\t\t}\n\t\tif (stateMatches === null) { // split state on demand\n\t\t\tstateMatches = state.split('.');\n\t\t\tstateMatches.unshift(state);\n\t\t}\n\t\tif (!empty(s) && s < stateMatches.length) {\n\t\t\treturn fixCase(lexer, stateMatches[s]); //$Sn\n\t\t}\n\t\treturn '';\n\t});\n}\n\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer: ILexer, state: string): IRule[] {\n\twhile (state && state.length > 0) {\n\t\tvar rules = lexer.tokenizer[state];\n\t\tif (rules) {\n\t\t\treturn rules;\n\t\t}\n\n\t\tvar idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer: ILexerMin, state: string): boolean {\n\twhile (state && state.length > 0) {\n\t\tvar exist = lexer.stateNames[state];\n\t\tif (exist) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar idx = state.lastIndexOf('.');\n\t\tif (idx < 0) {\n\t\t\tstate = null; // no further parent\n\t\t} else {\n\t\t\tstate = state.substr(0, idx);\n\t\t}\n\t}\n\treturn false;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/*\n * This module only exports 'compile' which compiles a JSON langauge definition\n * into a typed and checked ILexer definition.\n */\n\nimport * as objects from 'vs/base/common/objects';\nimport {IAutoClosingPairConditional, CharacterPair} from 'vs/editor/common/modes';\nimport * as monarchCommon from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {ILanguage, ILanguageBracket} from 'vs/editor/common/modes/monarch/monarchTypes';\n\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\n\nfunction isArrayOf(elemType: (x: any) => boolean, obj: any): boolean {\n\tif (!obj) {\n\t\treturn false;\n\t}\n\tif (!(Array.isArray(obj))) {\n\t\treturn false;\n\t}\n\tvar idx: any;\n\tfor (idx in obj) {\n\t\tif (obj.hasOwnProperty(idx)) {\n\t\t\tif (!(elemType(obj[idx]))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction bool(prop: any, def?: boolean, onerr?: () => void ): boolean {\n\tif (typeof (prop) === 'boolean') {\n\t\treturn prop;\n\t}\n\tif (onerr && (prop || def === undefined)) {\n\t\tonerr(); // type is wrong, or there is no default\n\t}\n\treturn (def === undefined ? null : def);\n}\n\nfunction string(prop: any, def?: string, onerr?: () => void ): string {\n\tif (typeof (prop) === 'string') {\n\t\treturn prop;\n\t}\n\tif (onerr && (prop || def === undefined)) {\n\t\tonerr(); // type is wrong, or there is no default\n\t}\n\treturn (def === undefined ? null : def);\n\n}\n\n// Lexer helpers\n\n/**\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set.\n * Also replaces @\\w+ or sequences with the content of the specified attribute\n */\nfunction compileRegExp(lexer: monarchCommon.ILexerMin, str: string): RegExp {\n\tif (typeof (str) !== 'string') {\n\t\treturn null;\n\t}\n\n\tvar n = 0;\n\twhile (str.indexOf('@') >= 0 && n < 5) { // at most 5 expansions\n\t\tn++;\n\t\tstr = str.replace(/@(\\w+)/g, function(s, attr?) {\n\t\t\tvar sub = '';\n\t\t\tif (typeof (lexer[attr]) === 'string') {\n\t\t\t\tsub = lexer[attr];\n\t\t\t} else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n\t\t\t\tsub = lexer[attr].source;\n\t\t\t} else {\n\t\t\t\tif (lexer[attr] === undefined) {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n\t\t\t\t} else {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\n\t\t});\n\t}\n\n\treturn new RegExp(str, (lexer.ignoreCase ? 'i' : ''));\n}\n\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(id: string, matches: string[], state: string, num: number): string {\n\tif (num < 0) {\n\t\treturn id;\n\t}\n\tif (num < matches.length) {\n\t\treturn matches[num];\n\t}\n\tif (num >= 100) {\n\t\tnum = num - 100;\n\t\tvar parts = state.split('.');\n\t\tparts.unshift(state);\n\t\tif (num < parts.length) {\n\t\t\treturn parts[num];\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction createGuard(lexer: monarchCommon.ILexerMin, ruleName: string, tkey: string, val: monarchCommon.IAction): monarchCommon.IBranch {\n\t// get the scrutinee and pattern\n\tvar scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n\tvar oppat = tkey;\n\tvar matches: string[] = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n\tif (matches) {\n\t\tif (matches[3]) { // if digits\n\t\t\tscrut = parseInt(matches[3]);\n\t\t\tif (matches[2]) {\n\t\t\t\tscrut = scrut + 100; // if [sS] present\n\t\t\t}\n\t\t}\n\t\toppat = matches[4];\n\t}\n\t// get operator\n\tvar op = '~';\n\tvar pat = oppat;\n\tif (!oppat || oppat.length === 0) {\n\t\top = '!=';\n\t\tpat = '';\n\t}\n\telse if (/^\\w*$/.test(pat)) {  // just a word\n\t\top = '==';\n\t}\n\telse {\n\t\tmatches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n\t\tif (matches) {\n\t\t\top = matches[1];\n\t\t\tpat = matches[2];\n\t\t}\n\t}\n\n\t// set the tester function\n\tvar tester: (s: string, id: string, matches: string[], state: string, eos: boolean) => boolean;\n\n\t// special case a regexp that matches just words\n\tif ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n\t\tvar inWords = objects.createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n\t\ttester = function(s) { return (op === '~' ? inWords(s) : !inWords(s)); };\n\t}\n\telse if (op === '@' || op === '!@') {\n\t\tvar words = lexer[pat];\n\t\tif (!words) {\n\t\t\tmonarchCommon.throwError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n\t\t}\n\t\tif (!(isArrayOf(function(elem) { return (typeof (elem) === 'string'); }, words))) {\n\t\t\tmonarchCommon.throwError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n\t\t}\n\t\tvar inWords = objects.createKeywordMatcher(words, lexer.ignoreCase);\n\t\ttester = function(s) { return (op === '@' ? inWords(s) : !inWords(s)); };\n\t}\n\telse if (op === '~' || op === '!~') {\n\t\tif (pat.indexOf('$') < 0) {\n\t\t\t// precompile regular expression\n\t\t\tvar re = compileRegExp(lexer, '^' + pat + '$');\n\t\t\ttester = function(s) { return (op === '~' ? re.test(s) : !re.test(s)); };\n\t\t}\n\t\telse {\n\t\t\ttester = function(s, id, matches, state) {\n\t\t\t\tvar re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n\t\t\t\treturn re.test(s);\n\t\t\t};\n\t\t}\n\t}\n\telse { // if (op==='==' || op==='!=') {\n\t\tif (pat.indexOf('$') < 0) {\n\t\t\tvar patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = function(s) { return (op === '==' ? s === patx : s !== patx); };\n\t\t}\n\t\telse {\n\t\t\tvar patx = monarchCommon.fixCase(lexer, pat);\n\t\t\ttester = function(s, id, matches, state, eos) {\n\t\t\t\tvar patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n\t\t\t\treturn (op === '==' ? s === patexp : s !== patexp);\n\t\t\t};\n\t\t}\n\t}\n\n\t// return the branch object\n\tif (scrut === -1) {\n\t\treturn {\n\t\t\tname: tkey, value: val, test: function(id, matches, state, eos) {\n\t\t\t\treturn tester(id, id, matches, state, eos);\n\t\t\t}\n\t\t};\n\t}\n\telse {\n\t\treturn {\n\t\t\tname: tkey, value: val, test: function(id, matches, state, eos) {\n\t\t\t\tvar scrutinee = selectScrutinee(id, matches, state, scrut);\n\t\t\t\treturn tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(lexer: monarchCommon.ILexerMin, ruleName: string, action: any): monarchCommon.IAction {\n\tif (!action) {\n\t\treturn { token: '' };\n\t}\n\telse if (typeof (action) === 'string') {\n\t\treturn action; // { token: action };\n\t}\n\telse if (action.token || action.token === '') {\n\t\tif (typeof (action.token) !== 'string') {\n\t\t\tmonarchCommon.throwError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n\t\t\treturn { token: '' };\n\t\t}\n\t\telse {\n\t\t\t// only copy specific typed fields (only happens once during compile Lexer)\n\t\t\tvar newAction: monarchCommon.IAction = { token: action.token };\n\t\t\tif (action.token.indexOf('$') >= 0) {\n\t\t\t\tnewAction.tokenSubst = true;\n\t\t\t}\n\t\t\tif (typeof (action.bracket) === 'string') {\n\t\t\t\tif (action.bracket === '@open') {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Open;\n\t\t\t\t} else if (action.bracket === '@close') {\n\t\t\t\t\tnewAction.bracket = monarchCommon.MonarchBracket.Close;\n\t\t\t\t} else {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (action.next) {\n\t\t\t\tif (typeof (action.next) !== 'string') {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar next: string = action.next;\n\t\t\t\t\tif (!/^(@pop|@push|@popall)$/.test(next)) {\n\t\t\t\t\t\tif (next[0] === '@') {\n\t\t\t\t\t\t\tnext = next.substr(1); // peel off starting @ sign\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (next.indexOf('$') < 0) {  // no dollar substitution, we can check if the state exists\n\t\t\t\t\t\t\tif (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n\t\t\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnewAction.next = next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof (action.goBack) === 'number') {\n\t\t\t\tnewAction.goBack = action.goBack;\n\t\t\t}\n\t\t\tif (typeof (action.switchTo) === 'string') {\n\t\t\t\tnewAction.switchTo = action.switchTo;\n\t\t\t}\n\t\t\tif (typeof (action.log) === 'string') {\n\t\t\t\tnewAction.log = action.log;\n\t\t\t}\n\t\t\tif (typeof (action.nextEmbedded) === 'string') {\n\t\t\t\tnewAction.nextEmbedded = action.nextEmbedded;\n\t\t\t\tlexer.usesEmbedded = true;\n\t\t\t}\n\t\t\treturn newAction;\n\t\t}\n\t}\n\telse if (Array.isArray(action)) {\n\t\tvar results = [];\n\t\tvar idx: string;\n\t\tfor (idx in action) {\n\t\t\tif (action.hasOwnProperty(idx)) {\n\t\t\t\tresults[idx] = compileAction(lexer, ruleName, action[idx]);\n\t\t\t}\n\t\t}\n\t\treturn { group: results };\n\t}\n\telse if (action.cases) {\n\t\t// build an array of test cases\n\t\tvar cases: monarchCommon.IBranch[] = [];\n\n\t\t// for each case, push a test function and result value\n\t\tvar tkey: string;\n\t\tfor (tkey in action.cases) {\n\t\t\tif (action.cases.hasOwnProperty(tkey)) {\n\t\t\t\tvar val = compileAction(lexer, ruleName, action.cases[tkey]);\n\n\t\t\t\t// what kind of case\n\t\t\t\tif (tkey === '@default' || tkey === '@' || tkey === '') {\n\t\t\t\t\tcases.push({ test: null, value: val, name: tkey });\n\t\t\t\t}\n\t\t\t\telse if (tkey === '@eos') {\n\t\t\t\t\tcases.push({ test: function(id, matches, state, eos) { return eos; }, value: val, name: tkey });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcases.push(createGuard(lexer, ruleName, tkey, val));  // call separate function to avoid local variable capture\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// create a matching function\n\t\tvar def = lexer.defaultToken;\n\t\treturn {\n\t\t\ttest: function(id, matches, state, eos) {\n\t\t\t\tvar idx: string;\n\t\t\t\tfor (idx in cases) {\n\t\t\t\t\tif (cases.hasOwnProperty(idx)) {\n\t\t\t\t\t\tvar didmatch = (!cases[idx].test || cases[idx].test(id, matches, state, eos));\n\t\t\t\t\t\tif (didmatch) {\n\t\t\t\t\t\t\treturn cases[idx].value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn def;\n\t\t\t}\n\t\t};\n\t}\n\telse {\n\t\tmonarchCommon.throwError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n\t\treturn '';\n\t}\n}\n\n/**\n * Helper class for creating matching rules\n */\nclass Rule implements monarchCommon.IRule {\n\tpublic regex: RegExp = new RegExp('');\n\tpublic action: monarchCommon.IAction = { token: '' };\n\tpublic matchOnlyAtLineStart: boolean = false;\n\tpublic name: string = '';\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: string);\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: RegExp);\n\tpublic setRegex(lexer: monarchCommon.ILexerMin, re: any) {\n\t\tvar sregex: string;\n\t\tif (typeof (re) === 'string') {\n\t\t\tsregex = re;\n\t\t}\n\t\telse if (re instanceof RegExp) {\n\t\t\tsregex = (<RegExp>re).source;\n\t\t}\n\t\telse {\n\t\t\tmonarchCommon.throwError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n\t\t}\n\n\t\tthis.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\n\t\tthis.name = this.name + ': ' + sregex;\n\t\tthis.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n\t}\n\n\tpublic setAction(lexer: monarchCommon.ILexerMin, act: monarchCommon.IAction) {\n\t\tthis.action = compileAction(lexer, this.name, act);\n\t}\n}\n\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(json: ILanguage): monarchCommon.ILexer {\n\tif (!json || typeof (json) !== 'object') {\n\t\tthrow new Error('Monarch: expecting a language definition object');\n\t}\n\n\t// Get names\n\tif (typeof (json.name) !== 'string') {\n\t\tthrow new Error('Monarch: a language definition must include a string \\'name\\' attribute');\n\t}\n\n\t// Create our lexer\n\tvar lexer: monarchCommon.ILexer = <monarchCommon.ILexer>{};\n\tlexer.name = json.name;\n\tlexer.displayName = string(json.displayName, lexer.name);\n\tlexer.noThrow = false; // raise exceptions during compilation\n\tlexer.maxStack = 100;\n\n\t// Set standard fields: be defensive about types\n\tlexer.start = string(json.start);\n\tlexer.ignoreCase = bool(json.ignoreCase, false);\n\n\tlexer.lineComment = string(json.lineComment, '//');\n\tlexer.blockCommentStart = string(json.blockCommentStart, '/*');\n\tlexer.blockCommentEnd = string(json.blockCommentEnd, '*/');\n\tlexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.name);\n\tlexer.defaultToken = string(json.defaultToken, 'source', function () { monarchCommon.throwError(lexer, 'the \\'defaultToken\\' must be a string'); });\n\n\tlexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n\tlexer.wordDefinition = json.wordDefinition || undefined;\n\n\t// COMPAT: with earlier monarch versions\n\tif (!lexer.lineComment && (<any>json).lineComments) {\n\t\tif (typeof ((<any>json).lineComments) === 'string') {\n\t\t\tlexer.lineComment = (<any>json).lineComments;\n\t\t}\n\t\telse if (typeof ((<any>json).lineComments[0]) === 'string') {\n\t\t\tlexer.lineComment = (<any>json).lineComments[0];\n\t\t}\n\t}\n\n\t// For calling compileAction later on\n\tvar lexerMin: monarchCommon.ILexerMin = <any>json;\n\tlexerMin.name = lexer.name;\n\tlexerMin.displayName = lexer.displayName;\n\tlexerMin.ignoreCase = lexer.ignoreCase;\n\tlexerMin.noThrow = lexer.noThrow;\n\tlexerMin.usesEmbedded = lexer.usesEmbedded;\n\tlexerMin.stateNames = json.tokenizer;\n\tlexerMin.defaultToken = lexer.defaultToken;\n\n\n\t// Compile an array of rules into newrules where RegExp objects are created.\n\tfunction addRules(state: string, newrules: monarchCommon.IRule[], rules: any[]) {\n\t\tvar idx: string;\n\t\tfor (idx in rules) {\n\t\t\tif (rules.hasOwnProperty(idx)) {\n\t\t\t\tvar rule = rules[idx];\n\t\t\t\tvar include = rule.include;\n\t\t\t\tif (include) {\n\t\t\t\t\tif (typeof (include) !== 'string') {\n\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n\t\t\t\t\t}\n\t\t\t\t\tif (include[0] === '@') {\n\t\t\t\t\t\tinclude = include.substr(1); // peel off starting @\n\t\t\t\t\t}\n\t\t\t\t\tif (!json.tokenizer[include]) {\n\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n\t\t\t\t\t}\n\t\t\t\t\taddRules(state + '.' + include, newrules, json.tokenizer[include]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar newrule = new Rule(state);\n\n\n\t\t\t\t\t// Set up new rule attributes\n\t\t\t\t\tif (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n\t\t\t\t\t\tnewrule.setRegex(lexerMin, rule[0]);\n\t\t\t\t\t\tif (rule.length >= 3) {\n\t\t\t\t\t\t\tif (typeof (rule[1]) === 'string') {\n\t\t\t\t\t\t\t\tnewrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (typeof (rule[1]) === 'object') {\n\t\t\t\t\t\t\t\tvar rule1 = rule[1];\n\t\t\t\t\t\t\t\trule1.next = rule[2];\n\t\t\t\t\t\t\t\tnewrule.setAction(lexerMin, rule1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tnewrule.setAction(lexerMin, rule[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!rule.regex) {\n\t\t\t\t\t\t\tmonarchCommon.throwError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rule.name) {\n\t\t\t\t\t\t\tnewrule.name = string(rule.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rule.matchOnlyAtStart) {\n\t\t\t\t\t\t\tnewrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewrule.setRegex(lexerMin, rule.regex);\n\t\t\t\t\t\tnewrule.setAction(lexerMin, rule.action);\n\t\t\t\t\t}\n\n\t\t\t\t\tnewrules.push(newrule);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// compile the tokenizer rules\n\tif (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\n\t\tmonarchCommon.throwError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n\t}\n\n\tlexer.tokenizer = [];\n\tvar key: string;\n\tfor (key in json.tokenizer) {\n\t\tif (json.tokenizer.hasOwnProperty(key)) {\n\t\t\tif (!lexer.start) {\n\t\t\t\tlexer.start = key;\n\t\t\t}\n\n\t\t\tvar rules = json.tokenizer[key];\n\t\t\tlexer.tokenizer[key] = new Array();\n\t\t\taddRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n\t\t}\n\t}\n\tlexer.usesEmbedded = lexerMin.usesEmbedded;  // can be set during compileAction\n\n\t// Set simple brackets\n\tif (json.brackets) {\n\t\tif (!(Array.isArray(<any>json.brackets))) {\n\t\t\tmonarchCommon.throwError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n\t\t}\n\t}\n\telse {\n\t\tjson.brackets = [\n\t\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t\t{ open: '<', close: '>', token: 'delimiter.angle' }];\n\t}\n\tvar brackets : ILanguageBracket[] = [];\n\tfor (var bracketIdx in json.brackets) {\n\t\tif (json.brackets.hasOwnProperty(bracketIdx)) {\n\t\t\tvar desc = <any> json.brackets[bracketIdx];\n\t\t\tif (desc && Array.isArray(desc) && desc.length === 3) {\n\t\t\t\tdesc = { token: desc[2], open: desc[0], close: desc[1] };\n\t\t\t}\n\t\t\tif (desc.open === desc.close) {\n\t\t\t\tmonarchCommon.throwError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\n\t\t\t\t\t'\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n\t\t\t}\n\t\t\tif (typeof (desc.open) === 'string' && typeof (desc.token) === 'string') {\n\t\t\t\tbrackets.push({\n\t\t\t\t\ttoken: string(desc.token) + lexer.tokenPostfix\n\t\t\t\t\t, open: monarchCommon.fixCase(lexer, string(desc.open))\n\t\t\t\t\t, close: monarchCommon.fixCase(lexer, string(desc.close))\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmonarchCommon.throwError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n\t\t\t}\n\t\t}\n\t}\n\tlexer.brackets = brackets;\n\n\t// Set default auto closing pairs\n\tvar autoClosingPairs: any/*string[][]*/;\n\tif (json.autoClosingPairs) {\n\t\tif (!(Array.isArray(<any>json.autoClosingPairs))) {\n\t\t\tmonarchCommon.throwError(lexer, 'the \\'autoClosingPairs\\' attribute must be an array of string pairs (as arrays)');\n\t\t}\n\t\tautoClosingPairs = json.autoClosingPairs.slice(0);\n\t}\n\telse {\n\t\tautoClosingPairs = [['\"', '\"'], ['\\'', '\\''], ['@brackets']];\n\t}\n\n\t// set auto closing pairs\n\tlexer.autoClosingPairs = [];\n\tif (autoClosingPairs) {\n\t\tfor (var autoClosingPairIdx in autoClosingPairs) {\n\t\t\tif (autoClosingPairs.hasOwnProperty(autoClosingPairIdx)) {\n\t\t\t\tvar pair = autoClosingPairs[autoClosingPairIdx];\n\t\t\t\tvar openClose: IAutoClosingPairConditional;\n\t\t\t\tif (pair === '@brackets' || pair[0] === '@brackets') {\n\t\t\t\t\tvar bidx: string;\n\t\t\t\t\tfor (bidx in brackets) {\n\t\t\t\t\t\tif (brackets.hasOwnProperty(bidx)) {\n\t\t\t\t\t\t\tif (brackets[bidx].open && brackets[bidx].open.length === 1 &&\n\t\t\t\t\t\t\t\tbrackets[bidx].close && brackets[bidx].close.length === 1) {\n\t\t\t\t\t\t\t\topenClose = { open: brackets[bidx].open, close: brackets[bidx].close, notIn:['string', 'comment'] };\n\t\t\t\t\t\t\t\tlexer.autoClosingPairs.push(openClose);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (Array.isArray(pair) && pair.length === 2 &&\n\t\t\t\t\ttypeof (pair[0]) === 'string' && pair[0].length === 1 &&\n\t\t\t\t\ttypeof (pair[1]) === 'string' && pair[1].length === 1) {\n\t\t\t\t\topenClose = { open: monarchCommon.fixCase(lexer, pair[0]), close: monarchCommon.fixCase(lexer, pair[1]), notIn:['string', 'comment'] };\n\t\t\t\t\tlexer.autoClosingPairs.push(openClose);\n\t\t\t\t}\n\t\t\t\telse if (typeof (pair.open) === 'string' && pair.open.length === 1 &&\n\t\t\t\t\ttypeof (pair.close) === 'string' && pair.close.length === 1) {\n\t\t\t\t\topenClose = { open: monarchCommon.fixCase(lexer, pair.open[0]), close: monarchCommon.fixCase(lexer, pair.close[0]), notIn:['string', 'comment'] };\n\t\t\t\t\tlexer.autoClosingPairs.push(openClose);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmonarchCommon.throwError(lexer, 'every element in an \\'autoClosingPairs\\' array must be a pair of 1 character strings, or a \\'@brackets\\' directive');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set enhanced brackets\n\t// var enhancedBrackets : IRegexBracketPair[] = [];\n\t// if (json.enhancedBrackets) {\n\t// \tif (!(Array.isArray(<any>json.enhancedBrackets))) {\n\t// \t\tmonarchCommon.throwError(lexer, 'the \\'enhancedBrackets\\' attribute must be defined as an array');\n\t// \t}\n\n\t// \tfor (var bracketIdx in json.enhancedBrackets) {\n\t// \t\tif (json.enhancedBrackets.hasOwnProperty(bracketIdx)) {\n\t// \t\t\tvar desc = <any> json.enhancedBrackets[bracketIdx];\n\t// \t\t\tif (desc.hasOwnProperty('openTrigger') && typeof (desc.openTrigger) !== 'string') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'openTrigger in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('open') && !(desc.open instanceof RegExp)) {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'open in the \\'enhancedBrackets\\' array must be a regex');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('closeComplete') && typeof (desc.closeComplete) !== 'string') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'closeComplete in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('matchCase') && typeof (desc.matchCase) !== 'boolean') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'matchCase in the \\'enhancedBrackets\\' array must be a boolean');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('closeTrigger') && typeof (desc.closeTrigger) !== 'string') {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'closeTrigger in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('close') && !(desc.close instanceof RegExp)) {\n\t// \t\t\t\tmonarchCommon.throwError(lexer, 'close in the \\'enhancedBrackets\\' array must be a regex');\n\t// \t\t\t}\n\t// \t\t\tif (desc.hasOwnProperty('tokenType')) {\n\t// \t\t\t\tif (typeof (desc.tokenType) !== 'string') {\n\t// \t\t\t\t\tmonarchCommon.throwError(lexer, 'tokenType in the \\'enhancedBrackets\\' array must be a string');\n\t// \t\t\t\t}\n\t// \t\t\t\telse {\n\t// \t\t\t\t\tdesc.tokenType += lexer.tokenPostfix;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t\tenhancedBrackets.push(desc);\n\t// \t\t}\n\t// \t}\n\t// }\n\t// lexer.enhancedBrackets = enhancedBrackets;\n\n\tvar standardBrackets: CharacterPair[] = [];\n\tfor (var i = 0; i < brackets.length; ++i) {\n\t\tstandardBrackets.push([brackets[i].open, brackets[i].close]);\n\t}\n\tlexer.standardBrackets = standardBrackets;\n\n\tlexer.outdentTriggers = string(json.outdentTriggers, '');\n\n\t// Disable throw so the syntax highlighter goes, no matter what\n\tlexer.noThrow = true;\n\treturn lexer;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\n\nimport {ILexer} from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {IRichLanguageConfiguration} from 'vs/editor/common/modes/supports/richEditSupport';\n\nexport function createRichEditSupport(lexer: ILexer): IRichLanguageConfiguration {\n\n\treturn {\n\n\t\twordPattern: lexer.wordDefinition,\n\n\t\tcomments: {\n\t\t\tlineComment: lexer.lineComment,\n\t\t\tblockComment: [lexer.blockCommentStart, lexer.blockCommentEnd]\n\t\t},\n\n\t\tbrackets: lexer.standardBrackets,\n\n\t\tautoClosingPairs: lexer.autoClosingPairs,\n\n\t\t__electricCharacterSupport: {\n\t\t\t// regexBrackets: lexer.enhancedBrackets,\n\t\t\tcaseInsensitive: lexer.ignoreCase,\n\t\t\tembeddedElectricCharacters: lexer.outdentTriggers.split('')\n\t\t}\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport * as objects from 'vs/base/common/objects';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IReadOnlyModel, IPosition} from 'vs/editor/common/editorCommon';\nimport * as modes from 'vs/editor/common/modes';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\n\nexport class Token implements modes.IToken {\n\t_tokenBrand: void;\n\n\tpublic startIndex:number;\n\tpublic type:string;\n\n\tconstructor(startIndex:number, type:string) {\n\t\tthis.startIndex = startIndex;\n\t\tthis.type = type;\n\t}\n\n\tpublic toString(): string {\n\t\treturn '(' + this.startIndex + ', ' + this.type + ')';\n\t}\n}\n\nexport class LineTokens implements modes.ILineTokens {\n\t_lineTokensBrand: void;\n\n\ttokens: Token[];\n\tmodeTransitions: ModeTransition[];\n\tactualStopOffset: number;\n\tendState: modes.IState;\n\tretokenize: TPromise<void>;\n\n\tconstructor(tokens:Token[], modeTransitions: ModeTransition[], actualStopOffset:number, endState:modes.IState) {\n\t\tthis.tokens = tokens;\n\t\tthis.modeTransitions = modeTransitions;\n\t\tthis.actualStopOffset = actualStopOffset;\n\t\tthis.endState = endState;\n\t\tthis.retokenize = null;\n\t}\n}\n\nexport function handleEvent<T>(context:modes.ILineContext, offset:number, runner:(mode:modes.IMode, newContext:modes.ILineContext, offset:number)=>T):T {\n\tvar modeTransitions = context.modeTransitions;\n\tif (modeTransitions.length === 1) {\n\t\treturn runner(modeTransitions[0].mode, context, offset);\n\t}\n\n\tvar modeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, offset);\n\tvar nestedMode = modeTransitions[modeIndex].mode;\n\tvar modeStartIndex = modeTransitions[modeIndex].startIndex;\n\n\tvar firstTokenInModeIndex = context.findIndexOfOffset(modeStartIndex);\n\tvar nextCharacterAfterModeIndex = -1;\n\tvar nextTokenAfterMode = -1;\n\tif (modeIndex + 1 < modeTransitions.length) {\n\t\tnextTokenAfterMode = context.findIndexOfOffset(modeTransitions[modeIndex + 1].startIndex);\n\t\tnextCharacterAfterModeIndex = context.getTokenStartIndex(nextTokenAfterMode);\n\t} else {\n\t\tnextTokenAfterMode = context.getTokenCount();\n\t\tnextCharacterAfterModeIndex = context.getLineContent().length;\n\t}\n\n\tvar firstTokenCharacterOffset = context.getTokenStartIndex(firstTokenInModeIndex);\n\tvar newCtx = new FilteredLineContext(context, nestedMode, firstTokenInModeIndex, nextTokenAfterMode, firstTokenCharacterOffset, nextCharacterAfterModeIndex);\n\treturn runner(nestedMode, newCtx, offset - firstTokenCharacterOffset);\n}\n\nexport class FilteredLineContext implements modes.ILineContext {\n\n\tpublic modeTransitions: ModeTransition[];\n\n\tprivate _actual:modes.ILineContext;\n\tprivate _firstTokenInModeIndex:number;\n\tprivate _nextTokenAfterMode:number;\n\tprivate _firstTokenCharacterOffset:number;\n\tprivate _nextCharacterAfterModeIndex:number;\n\n\tconstructor(actual:modes.ILineContext, mode:modes.IMode,\n\t\t\tfirstTokenInModeIndex:number, nextTokenAfterMode:number,\n\t\t\tfirstTokenCharacterOffset:number, nextCharacterAfterModeIndex:number) {\n\n\t\tthis.modeTransitions = [new ModeTransition(0, mode)];\n\t\tthis._actual = actual;\n\t\tthis._firstTokenInModeIndex = firstTokenInModeIndex;\n\t\tthis._nextTokenAfterMode = nextTokenAfterMode;\n\t\tthis._firstTokenCharacterOffset = firstTokenCharacterOffset;\n\t\tthis._nextCharacterAfterModeIndex = nextCharacterAfterModeIndex;\n\t}\n\n\tpublic getLineContent(): string {\n\t\tvar actualLineContent = this._actual.getLineContent();\n\t\treturn actualLineContent.substring(this._firstTokenCharacterOffset, this._nextCharacterAfterModeIndex);\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._nextTokenAfterMode - this._firstTokenInModeIndex;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn this._actual.findIndexOfOffset(offset + this._firstTokenCharacterOffset) - this._firstTokenInModeIndex;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn this._actual.getTokenStartIndex(tokenIndex + this._firstTokenInModeIndex) - this._firstTokenCharacterOffset;\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number): number {\n\t\treturn this._actual.getTokenEndIndex(tokenIndex + this._firstTokenInModeIndex) - this._firstTokenCharacterOffset;\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn this._actual.getTokenType(tokenIndex + this._firstTokenInModeIndex);\n\t}\n\n\tpublic getTokenText(tokenIndex:number): string {\n\t\treturn this._actual.getTokenText(tokenIndex + this._firstTokenInModeIndex);\n\t}\n}\n\nconst IGNORE_IN_TOKENS = /\\b(comment|string|regex)\\b/;\nexport function ignoreBracketsInToken(tokenType:string): boolean {\n\treturn IGNORE_IN_TOKENS.test(tokenType);\n}\n\n// TODO@Martin: find a better home for this code:\n// TODO@Martin: modify suggestSupport to return a boolean if snippets should be presented or not\n//       and turn this into a real registry\nexport class SnippetsRegistry {\n\n\tprivate static _defaultSnippets: { [modeId: string]: modes.ISuggestion[] } = Object.create(null);\n\tprivate static _snippets: { [modeId: string]: { [path: string]: modes.ISuggestion[] } } = Object.create(null);\n\n\tpublic static registerDefaultSnippets(modeId: string, snippets: modes.ISuggestion[]): void {\n\t\tthis._defaultSnippets[modeId] = (this._defaultSnippets[modeId] || []).concat(snippets);\n\t}\n\n\tpublic static registerSnippets(modeId: string, path: string, snippets: modes.ISuggestion[]): void {\n\t\tlet snippetsByMode = this._snippets[modeId];\n\t\tif (!snippetsByMode) {\n\t\t\tthis._snippets[modeId] = snippetsByMode = {};\n\t\t}\n\t\tsnippetsByMode[path] = snippets;\n\t}\n\n\t// the previous\n\tprivate static getNonWhitespacePrefix(model: IReadOnlyModel, position: IPosition) {\n\t\tlet line = model.getLineContent(position.lineNumber);\n\t\tlet match = line.match(/[^\\s]+$/);\n\t\tif (match) {\n\t\t\treturn match[0];\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic static getSnippets(model: IReadOnlyModel, position: IPosition): modes.ISuggestResult {\n\t\tlet word = model.getWordAtPosition(position);\n\t\tlet currentWord = word ? word.word.substring(0, position.column - word.startColumn).toLowerCase() : '';\n\t\tlet currentFullWord = SnippetsRegistry.getNonWhitespacePrefix(model, position).toLowerCase();\n\t\tlet result : modes.ISuggestResult = {\n\t\t\tcurrentWord: currentWord,\n\t\t\tsuggestions: []\n\t\t};\n\n\t\tlet modeId = model.getModeId();\n\t\tlet snippets : modes.ISuggestion[]= [];\n\t\tlet snipppetsByMode = this._snippets[modeId];\n\t\tif (snipppetsByMode) {\n\t\t\tfor (let s in snipppetsByMode) {\n\t\t\t\tsnippets = snippets.concat(snipppetsByMode[s]);\n\t\t\t}\n\t\t}\n\t\tlet defaultSnippets = this._defaultSnippets[modeId];\n\t\tif (defaultSnippets) {\n\t\t\tsnippets = snippets.concat(defaultSnippets);\n\t\t}\n\t\t// to avoid that snippets are too prominent in the intellisense proposals:\n\t\t// enforce that current word is matched or the position is after a whitespace\n\t\tsnippets.forEach(p => {\n\t\t\tif (currentWord.length === 0 && currentFullWord.length === 0) {\n\t\t\t\t// if there's no prefix, only show snippets at the beginning of the line, or after a whitespace\n\t\t\t} else {\n\t\t\t\tlet label = p.label.toLowerCase();\n\t\t\t\t// force that the current word or full word matches with the snippet prefix\n\t\t\t\tif (currentWord.length > 0 && strings.startsWith(label, currentWord)) {\n\t\t\t\t\t// ok\n\t\t\t\t} else if (currentFullWord.length > currentWord.length && strings.startsWith(label, currentFullWord)) {\n\t\t\t\t\tp = objects.clone(p);\n\t\t\t\t\tp.overwriteBefore = currentFullWord.length;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.suggestions.push(p);\n\t\t});\n\n\t\t// if (result.suggestions.length > 0) {\n\t\t// \tif (word) {\n\t\t// \t\t// Push also the current word as first suggestion, to avoid unexpected snippet acceptance on Enter.\n\t\t// \t\tresult.suggestions = result.suggestions.slice(0);\n\t\t// \t\tresult.suggestions.unshift({\n\t\t// \t\t\tcodeSnippet: word.word,\n\t\t// \t\t\tlabel: word.word,\n\t\t// \t\t\ttype: 'text'\n\t\t// \t\t});\n\t\t// \t}\n\t\t// \tresult.incomplete = true;\n\t\t// }\n\n\t\treturn result;\n\n\t}\n\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IAutoClosingPair, IAutoClosingPairConditional, ILineContext, IMode, IRichEditCharacterPair, CharacterPair} from 'vs/editor/common/modes';\nimport {handleEvent} from 'vs/editor/common/modes/supports';\n\nexport class CharacterPairSupport implements IRichEditCharacterPair {\n\n\tprivate _modeId: string;\n\tprivate _autoClosingPairs: IAutoClosingPairConditional[];\n\tprivate _surroundingPairs: IAutoClosingPair[];\n\n\tconstructor(modeId: string, config: { brackets?: CharacterPair[]; autoClosingPairs?: IAutoClosingPairConditional[], surroundingPairs?: IAutoClosingPair[]}) {\n\t\tthis._modeId = modeId;\n\t\tthis._autoClosingPairs = config.autoClosingPairs;\n\t\tif (!this._autoClosingPairs) {\n\t\t\tthis._autoClosingPairs = config.brackets ? config.brackets.map(b => ({ open: b[0], close: b[1] })) : [];\n\t\t}\n\t\tthis._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n\t}\n\n\tpublic getAutoClosingPairs(): IAutoClosingPair[] {\n\t\treturn this._autoClosingPairs;\n\t}\n\n\tpublic shouldAutoClosePair(character:string, context:ILineContext, offset:number): boolean {\n\t\treturn handleEvent(context, offset, (nestedMode:IMode, context:ILineContext, offset:number) => {\n\t\t\tif (this._modeId === nestedMode.getId()) {\n\n\t\t\t\t// Always complete on empty line\n\t\t\t\tif (context.getTokenCount() === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar tokenIndex = context.findIndexOfOffset(offset - 1);\n\t\t\t\tvar tokenType = context.getTokenType(tokenIndex);\n\n\t\t\t\tfor (var i = 0; i < this._autoClosingPairs.length; ++i) {\n\t\t\t\t\tif (this._autoClosingPairs[i].open === character) {\n\t\t\t\t\t\tif (this._autoClosingPairs[i].notIn) {\n\t\t\t\t\t\t\tfor (var notInIndex = 0; notInIndex < this._autoClosingPairs[i].notIn.length; ++notInIndex) {\n\t\t\t\t\t\t\t\tif (tokenType.indexOf(this._autoClosingPairs[i].notIn[notInIndex]) > -1) {\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} else if (nestedMode.richEditSupport && nestedMode.richEditSupport.characterPair) {\n\t\t\t\treturn nestedMode.richEditSupport.characterPair.shouldAutoClosePair(character, context, offset);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getSurroundingPairs(): IAutoClosingPair[]{\n\t\treturn this._surroundingPairs;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {Range} from 'vs/editor/common/core/range';\nimport {IRichEditBracket} from 'vs/editor/common/editorCommon';\nimport * as modes from 'vs/editor/common/modes';\n\ninterface ISimpleInternalBracket {\n\topen: string;\n\tclose: string;\n}\n\nexport class RichEditBrackets implements modes.IRichEditBrackets {\n\n\tpublic brackets: IRichEditBracket[];\n\tpublic forwardRegex: RegExp;\n\tpublic reversedRegex: RegExp;\n\tpublic maxBracketLength: number;\n\tpublic textIsBracket: {[text:string]:IRichEditBracket;};\n\tpublic textIsOpenBracket: {[text:string]:boolean;};\n\n\tconstructor(modeId: string, brackets: modes.CharacterPair[]) {\n\t\tthis.brackets = brackets.map((b) => {\n\t\t\treturn {\n\t\t\t\tmodeId: modeId,\n\t\t\t\topen: b[0],\n\t\t\t\tclose: b[1],\n\t\t\t\tforwardRegex: getRegexForBracketPair({ open: b[0], close: b[1] }),\n\t\t\t\treversedRegex: getReversedRegexForBracketPair({ open: b[0], close: b[1] })\n\t\t\t};\n\t\t});\n\t\tthis.forwardRegex = getRegexForBrackets(this.brackets);\n\t\tthis.reversedRegex = getReversedRegexForBrackets(this.brackets);\n\n\t\tthis.textIsBracket = {};\n\t\tthis.textIsOpenBracket = {};\n\t\tthis.maxBracketLength = 0;\n\t\tthis.brackets.forEach((b) => {\n\t\t\tthis.textIsBracket[b.open] = b;\n\t\t\tthis.textIsBracket[b.close] = b;\n\t\t\tthis.textIsOpenBracket[b.open] = true;\n\t\t\tthis.textIsOpenBracket[b.close] = false;\n\t\t\tthis.maxBracketLength = Math.max(this.maxBracketLength, b.open.length);\n\t\t\tthis.maxBracketLength = Math.max(this.maxBracketLength, b.close.length);\n\t\t});\n\t}\n}\n\nfunction once<T, R>(keyFn:(input:T)=>string, computeFn:(input:T)=>R):(input:T)=>R {\n\tlet cache: {[key:string]:R;} = {};\n\treturn (input:T):R => {\n\t\tlet key = keyFn(input);\n\t\tif (!cache.hasOwnProperty(key)) {\n\t\t\tcache[key] = computeFn(input);\n\t\t}\n\t\treturn cache[key];\n\t};\n}\n\nvar getRegexForBracketPair = once<ISimpleInternalBracket,RegExp>(\n\t(input) => `${input.open};${input.close}`,\n\t(input) => {\n\t\treturn createOrRegex([input.open, input.close]);\n\t}\n);\n\nvar getReversedRegexForBracketPair = once<ISimpleInternalBracket,RegExp>(\n\t(input) => `${input.open};${input.close}`,\n\t(input) => {\n\t\treturn createOrRegex([toReversedString(input.open), toReversedString(input.close)]);\n\t}\n);\n\nvar getRegexForBrackets = once<ISimpleInternalBracket[],RegExp>(\n\t(input) => input.map(b => `${b.open};${b.close}`).join(';'),\n\t(input) => {\n\t\tlet pieces: string[] = [];\n\t\tinput.forEach((b) => {\n\t\t\tpieces.push(b.open);\n\t\t\tpieces.push(b.close);\n\t\t});\n\t\treturn createOrRegex(pieces);\n\t}\n);\n\nvar getReversedRegexForBrackets = once<ISimpleInternalBracket[],RegExp>(\n\t(input) => input.map(b => `${b.open};${b.close}`).join(';'),\n\t(input) => {\n\t\tlet pieces: string[] = [];\n\t\tinput.forEach((b) => {\n\t\t\tpieces.push(toReversedString(b.open));\n\t\t\tpieces.push(toReversedString(b.close));\n\t\t});\n\t\treturn createOrRegex(pieces);\n\t}\n);\n\nfunction createOrRegex(pieces:string[]): RegExp {\n\tlet regexStr = `(${pieces.map(strings.escapeRegExpCharacters).join(')|(')})`;\n\treturn strings.createRegExp(regexStr, true, false, false, false);\n}\n\nfunction toReversedString(str:string): string {\n\tlet reversedStr = '';\n\tfor (let i = str.length - 1; i >= 0; i--) {\n\t\treversedStr += str.charAt(i);\n\t}\n\treturn reversedStr;\n}\n\nexport class BracketsUtils {\n\n\tprivate static _findPrevBracketInText(reversedBracketRegex:RegExp, lineNumber:number, reversedText:string, offset:number): Range {\n\t\tlet m = reversedText.match(reversedBracketRegex);\n\n\t\tif (!m) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet matchOffset = reversedText.length - m.index;\n\t\tlet matchLength = m[0].length;\n\t\tlet absoluteMatchOffset = offset + matchOffset;\n\n\t\treturn new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n\t}\n\n\tpublic static findPrevBracketInToken(reversedBracketRegex:RegExp, lineNumber:number, lineText:string, currentTokenStart:number, currentTokenEnd:number): Range {\n\t\t// Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n\t\tlet currentTokenReversedText = '';\n\t\tfor (let index = currentTokenEnd - 1; index >= currentTokenStart; index--) {\n\t\t\tcurrentTokenReversedText += lineText.charAt(index);\n\t\t}\n\n\t\treturn this._findPrevBracketInText(reversedBracketRegex, lineNumber, currentTokenReversedText, currentTokenStart);\n\t}\n\n\tpublic static findNextBracketInText(bracketRegex:RegExp, lineNumber:number, text:string, offset:number): Range {\n\t\tlet m = text.match(bracketRegex);\n\n\t\tif (!m) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet matchOffset = m.index;\n\t\tlet matchLength = m[0].length;\n\t\tlet absoluteMatchOffset = offset + matchOffset;\n\n\t\treturn new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n\t}\n\n\tpublic static findNextBracketInToken(bracketRegex:RegExp, lineNumber:number, lineText:string, currentTokenStart:number, currentTokenEnd:number): Range {\n\t\tlet currentTokenText = lineText.substring(currentTokenStart, currentTokenEnd);\n\n\t\treturn this.findNextBracketInText(bracketRegex, lineNumber, currentTokenText, currentTokenStart);\n\t}\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport * as modes from 'vs/editor/common/modes';\nimport {handleEvent, ignoreBracketsInToken} from 'vs/editor/common/modes/supports';\nimport {BracketsUtils} from 'vs/editor/common/modes/supports/richEditBrackets';\n\n/**\n * Definition of documentation comments (e.g. Javadoc/JSdoc)\n */\nexport interface IDocComment {\n\tscope: string; // What tokens should be used to detect a doc comment (e.g. 'comment.documentation').\n\topen: string; // The string that starts a doc comment (e.g. '/**')\n\tlineStart: string; // The string that appears at the start of each line, except the first and last (e.g. ' * ').\n\tclose?: string; // The string that appears on the last line and closes the doc comment (e.g. ' */').\n}\n\nexport interface IBracketElectricCharacterContribution {\n\tdocComment?: IDocComment;\n\tcaseInsensitive?: boolean;\n\tembeddedElectricCharacters?: string[];\n}\n\nexport class BracketElectricCharacterSupport implements modes.IRichEditElectricCharacter {\n\n\tprivate _modeId: string;\n\tprivate contribution: IBracketElectricCharacterContribution;\n\tprivate brackets: Brackets;\n\n\tconstructor(modeId: string, brackets: modes.IRichEditBrackets, contribution: IBracketElectricCharacterContribution) {\n\t\tthis._modeId = modeId;\n\t\tthis.contribution = contribution || {};\n\t\tthis.brackets = new Brackets(modeId, brackets, this.contribution.docComment, this.contribution.caseInsensitive);\n\t}\n\n\tpublic getElectricCharacters(): string[]{\n\t\tif (Array.isArray(this.contribution.embeddedElectricCharacters)) {\n\t\t\treturn this.contribution.embeddedElectricCharacters.concat(this.brackets.getElectricCharacters());\n\t\t}\n\t\treturn this.brackets.getElectricCharacters();\n\t}\n\n\tpublic onElectricCharacter(context:modes.ILineContext, offset:number): modes.IElectricAction {\n\t\treturn handleEvent(context, offset, (nestedMode:modes.IMode, context:modes.ILineContext, offset:number) => {\n\t\t\tif (this._modeId === nestedMode.getId()) {\n\t\t\t\treturn this.brackets.onElectricCharacter(context, offset);\n\t\t\t} else if (nestedMode.richEditSupport && nestedMode.richEditSupport.electricCharacter) {\n\t\t\t\treturn nestedMode.richEditSupport.electricCharacter.onElectricCharacter(context, offset);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n\nexport class Brackets {\n\n\tprivate _modeId: string;\n\tprivate _richEditBrackets: modes.IRichEditBrackets;\n\tprivate _docComment: IDocComment;\n\n\tconstructor(modeId: string, richEditBrackets: modes.IRichEditBrackets, docComment: IDocComment = null, caseInsensitive: boolean = false) {\n\t\tthis._modeId = modeId;\n\t\tthis._richEditBrackets = richEditBrackets;\n\t\tthis._docComment = docComment ? docComment : null;\n\t}\n\n\tpublic getElectricCharacters():string[] {\n\t\tvar result: string[] = [];\n\n\t\tif (this._richEditBrackets) {\n\t\t\tfor (let i = 0, len = this._richEditBrackets.brackets.length; i < len; i++) {\n\t\t\t\tlet bracketPair = this._richEditBrackets.brackets[i];\n\t\t\t\tlet lastChar = bracketPair.close.charAt(bracketPair.close.length - 1);\n\t\t\t\tresult.push(lastChar);\n\t\t\t}\n\t\t}\n\n\t\t// Doc comments\n\t\tif (this._docComment){\n\t\t\tresult.push(this._docComment.open.charAt(this._docComment.open.length - 1));\n\t\t}\n\n\t\t// Filter duplicate entries\n\t\tresult = result.filter((item, pos, array) => {\n\t\t\treturn array.indexOf(item) === pos;\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tpublic onElectricCharacter(context: modes.ILineContext, offset: number): modes.IElectricAction {\n\t\tif (context.getTokenCount() === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (this._onElectricCharacterDocComment(context, offset) ||\n\t\t\tthis._onElectricCharacterStandardBrackets(context, offset));\n\t}\n\n\tprivate containsTokenTypes(fullTokenSpec: string, tokensToLookFor: string): boolean {\n\t\tvar array = tokensToLookFor.split('.');\n\t\tfor (var i = 0; i < array.length; ++i) {\n\t\t\tif (fullTokenSpec.indexOf(array[i]) < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _onElectricCharacterStandardBrackets(context: modes.ILineContext, offset: number): modes.IElectricAction {\n\n\t\tif (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet reversedBracketRegex = this._richEditBrackets.reversedRegex;\n\n\t\tlet lineText = context.getLineContent();\n\t\tlet tokenIndex = context.findIndexOfOffset(offset);\n\t\tlet tokenStart = context.getTokenStartIndex(tokenIndex);\n\t\tlet tokenEnd = offset + 1;\n\n\t\tvar firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(context.getLineContent());\n\t\tif (firstNonWhitespaceIndex !== -1 && firstNonWhitespaceIndex < tokenStart) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!ignoreBracketsInToken(context.getTokenType(tokenIndex))) {\n\t\t\tlet r = BracketsUtils.findPrevBracketInToken(reversedBracketRegex, 1, lineText, tokenStart, tokenEnd);\n\t\t\tif (r) {\n\t\t\t\tlet text = lineText.substring(r.startColumn - 1, r.endColumn - 1);\n\t\t\t\tlet isOpen = this._richEditBrackets.textIsOpenBracket[text];\n\t\t\t\tif (!isOpen) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmatchOpenBracket: text\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _onElectricCharacterDocComment(context: modes.ILineContext, offset: number): modes.IElectricAction {\n\t\t// We only auto-close, so do nothing if there is no closing part.\n\t\tif (!this._docComment || !this._docComment.close) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar line = context.getLineContent();\n\t\tvar char: string = line[offset];\n\n\t\t// See if the right electric character was pressed\n\t\tif (char !== this._docComment.open.charAt(this._docComment.open.length - 1)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If this line already contains the closing tag, do nothing.\n\t\tif (line.indexOf(this._docComment.close, offset) >= 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If we're not in a documentation comment, do nothing.\n\t\tvar lastTokenIndex = context.findIndexOfOffset(offset);\n\t\tif (! this.containsTokenTypes(context.getTokenType(lastTokenIndex), this._docComment.scope)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (line.substring(context.getTokenStartIndex(lastTokenIndex), offset+1/* include electric char*/) !== this._docComment.open) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn { appendText: this._docComment.close};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport class PrefixSumIndexOfResult {\n\t_prefixSumIndexOfResultBrand: void;\n\n\tindex: number;\n\tremainder: number;\n\n\tconstructor(index:number, remainder:number) {\n\t\tthis.index = index;\n\t\tthis.remainder = remainder;\n\t}\n}\n\nexport class PrefixSumComputer {\n\n\t/**\n\t * values[i] is the value at index i\n\t */\n\tprivate values:number[];\n\n\t/**\n\t * prefixSum[i] = SUM(heights[j]), 0 <= j <= i\n\t */\n\tprivate prefixSum:number[];\n\n\t/**\n\t * prefixSum[i], 0 <= i <= prefixSumValidIndex can be trusted\n\t */\n\tprivate prefixSumValidIndex:number;\n\n\tconstructor(values:number[]) {\n\t\tthis.values = values;\n\t\tthis.prefixSum = [];\n\t\tfor (let i = 0, len = this.values.length; i < len; i++) {\n\t\t\tthis.prefixSum[i] = 0;\n\t\t}\n\t\tthis.prefixSumValidIndex = -1;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this.values.length;\n\t}\n\n\tpublic insertValue(insertIndex:number, value:number): void {\n\t\tinsertIndex = Math.floor(insertIndex); //@perf\n\t\tvalue = Math.floor(value); //@perf\n\n\t\tthis.values.splice(insertIndex, 0, value);\n\t\tthis.prefixSum.splice(insertIndex, 0, 0);\n\t\tif (insertIndex - 1 < this.prefixSumValidIndex) {\n\t\t\tthis.prefixSumValidIndex = insertIndex - 1;\n\t\t}\n\t}\n\n\tpublic insertValues(insertIndex: number, values: number[]): void {\n\t\tinsertIndex = Math.floor(insertIndex); //@perf\n\n\t\tif (values.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.values = this.values.slice(0, insertIndex).concat(values).concat(this.values.slice(insertIndex));\n\t\tthis.prefixSum = this.prefixSum.slice(0, insertIndex).concat(PrefixSumComputer._zeroArray(values.length)).concat(this.prefixSum.slice(insertIndex));\n\n\t\tif (insertIndex - 1 < this.prefixSumValidIndex) {\n\t\t\tthis.prefixSumValidIndex = insertIndex - 1;\n\t\t}\n\t}\n\n\tprivate static _zeroArray(count: number): number[] {\n\t\tcount = Math.floor(count); //@perf\n\n\t\tlet r: number[] = [];\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tr[i] = 0;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic changeValue(index:number, value:number): void {\n\t\tindex = Math.floor(index); //@perf\n\t\tvalue = Math.floor(value); //@perf\n\n\t\tif (this.values[index] === value) {\n\t\t\treturn;\n\t\t}\n\t\tthis.values[index] = value;\n\t\tif (index - 1 < this.prefixSumValidIndex) {\n\t\t\tthis.prefixSumValidIndex = index - 1;\n\t\t}\n\t}\n\n\tpublic removeValues(startIndex:number, cnt:number): void {\n\t\tstartIndex = Math.floor(startIndex); //@perf\n\t\tcnt = Math.floor(cnt); //@perf\n\n\t\tthis.values.splice(startIndex, cnt);\n\t\tthis.prefixSum.splice(startIndex, cnt);\n\t\tif (startIndex - 1 < this.prefixSumValidIndex) {\n\t\t\tthis.prefixSumValidIndex = startIndex - 1;\n\t\t}\n\t}\n\n\tpublic getTotalValue(): number {\n\t\tif (this.values.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.getAccumulatedValue(this.values.length - 1);\n\t}\n\n\tpublic getAccumulatedValue(index:number): number {\n\t\tindex = Math.floor(index); //@perf\n\n\t\tif (index < 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (index <= this.prefixSumValidIndex) {\n\t\t\treturn this.prefixSum[index];\n\t\t}\n\n\t\tlet startIndex = this.prefixSumValidIndex + 1;\n\t\tif (startIndex === 0) {\n\t\t\tthis.prefixSum[0] = this.values[0];\n\t\t\tstartIndex++;\n\t\t}\n\n\t\tif (index >= this.values.length) {\n\t\t\tindex = this.values.length - 1;\n\t\t}\n\n\t\tfor (let i = startIndex; i <= index; i++) {\n\t\t\tthis.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n\t\t}\n\t\tthis.prefixSumValidIndex = Math.max(this.prefixSumValidIndex, index);\n\t\treturn this.prefixSum[index];\n\t}\n\n\tpublic getIndexOf(accumulatedValue:number): PrefixSumIndexOfResult {\n\t\taccumulatedValue = Math.floor(accumulatedValue); //@perf\n\n\t\tlet low = 0;\n\t\tlet high = this.values.length - 1;\n\t\tlet mid:number;\n\t\tlet midStop:number;\n\t\tlet midStart:number;\n\n\t\twhile (low <= high) {\n\t\t\tmid = low + ( (high-low)/2 ) | 0;\n\n\t\t\tmidStop = this.getAccumulatedValue(mid);\n\t\t\tmidStart = midStop - this.values[mid];\n\n\t\t\tif (accumulatedValue < midStart) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else if (accumulatedValue >= midStop) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {onUnexpectedError} from 'vs/base/common/errors';\n\nexport default class CallbackList {\n\n\tprivate _callbacks: Function[];\n\tprivate _contexts: any[];\n\n\tpublic add(callback: Function, context: any = null, bucket?: IDisposable[]): void {\n\t\tif (!this._callbacks) {\n\t\t\tthis._callbacks = [];\n\t\t\tthis._contexts = [];\n\t\t}\n\t\tthis._callbacks.push(callback);\n\t\tthis._contexts.push(context);\n\n\t\tif (Array.isArray(bucket)) {\n\t\t\tbucket.push({ dispose: () => this.remove(callback, context) });\n\t\t}\n\t}\n\n\tpublic remove(callback: Function, context: any = null): void {\n\t\tif (!this._callbacks) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet foundCallbackWithDifferentContext = false;\n\t\tfor (var i = 0, len = this._callbacks.length; i < len; i++) {\n\t\t\tif (this._callbacks[i] === callback) {\n\t\t\t\tif (this._contexts[i] === context) {\n\t\t\t\t\t// callback & context match => remove it\n\t\t\t\t\tthis._callbacks.splice(i, 1);\n\t\t\t\t\tthis._contexts.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tfoundCallbackWithDifferentContext = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (foundCallbackWithDifferentContext) {\n\t\t\tthrow new Error('When adding a listener with a context, you should remove it with the same context');\n\t\t}\n\t}\n\n\tpublic invoke(...args: any[]): any[] {\n\t\tif (!this._callbacks) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ret: any[] = [],\n\t\t\tcallbacks = this._callbacks.slice(0),\n\t\t\tcontexts = this._contexts.slice(0);\n\n\t\tfor (var i = 0, len = callbacks.length; i < len; i++) {\n\t\t\ttry {\n\t\t\t\tret.push(callbacks[i].apply(contexts[i], args));\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedError(e);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn !this._callbacks || this._callbacks.length === 0;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._callbacks = undefined;\n\t\tthis._contexts = undefined;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IDisposable}  from 'vs/base/common/lifecycle';\nimport CallbackList from 'vs/base/common/callbackList';\nimport {EventEmitter} from 'vs/base/common/eventEmitter';\n\n/**\n * To an event a function with one or zero parameters\n * can be subscribed. The event is the subscriber function itself.\n */\ninterface Event<T> {\n\t(listener: (e: T) => any, thisArgs?: any, disposables?: IDisposable[]): IDisposable;\n}\n\nnamespace Event {\n\tconst _disposable = { dispose() { } };\n\texport const None: Event<any> = function() { return _disposable; };\n}\n\nexport default Event;\n\nexport interface EmitterOptions {\n\tonFirstListenerAdd?: Function;\n\tonLastListenerRemove?: Function;\n}\n\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n\tclass Document {\n\n\t\tprivate _onDidChange = new Emitter<(value:string)=>any>();\n\n\t\tpublic onDidChange = this._onDidChange.event;\n\n\t\t// getter-style\n\t\t// get onDidChange(): Event<(value:string)=>any> {\n\t\t// \treturn this._onDidChange.event;\n\t\t// }\n\n\t\tprivate _doIt() {\n\t\t\t//...\n\t\t\tthis._onDidChange.fire(value);\n\t\t}\n\t}\n */\nexport class Emitter<T> {\n\n\tprivate static _noop = function () { };\n\n\tprivate _event: Event<T>;\n\tprivate _callbacks: CallbackList;\n\tprivate _disposed: boolean;\n\n\tconstructor(private _options?: EmitterOptions) {\n\n\t}\n\n\t/**\n\t * For the public to allow to subscribe\n\t * to events from this Emitter\n\t */\n\tget event(): Event<T> {\n\t\tif (!this._event) {\n\t\t\tthis._event = (listener: (e: T) => any,  thisArgs?: any, disposables?: IDisposable[]) => {\n\t\t\t\tif (!this._callbacks) {\n\t\t\t\t\tthis._callbacks = new CallbackList();\n\t\t\t\t}\n\t\t\t\tif (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n\t\t\t\t\tthis._options.onFirstListenerAdd(this);\n\t\t\t\t}\n\t\t\t\tthis._callbacks.add(listener, thisArgs);\n\n\t\t\t\tlet result: IDisposable;\n\t\t\t\tresult = {\n\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\tresult.dispose = Emitter._noop;\n\t\t\t\t\t\tif (!this._disposed) {\n\t\t\t\t\t\t\tthis._callbacks.remove(listener, thisArgs);\n\t\t\t\t\t\t\tif(this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n\t\t\t\t\t\t\t\tthis._options.onLastListenerRemove(this);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif(Array.isArray(disposables)) {\n\t\t\t\t\tdisposables.push(result);\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}\n\t\treturn this._event;\n\t}\n\n\t/**\n\t * To be kept private to fire an event to\n\t * subscribers\n\t */\n\tfire(event?: T): any {\n\t\tif (this._callbacks) {\n\t\t\tthis._callbacks.invoke.call(this._callbacks, event);\n\t\t}\n\t}\n\n\tdispose() {\n\t\tif(this._callbacks) {\n\t\t\tthis._callbacks.dispose();\n\t\t\tthis._callbacks = undefined;\n\t\t\tthis._disposed = true;\n\t\t}\n\t}\n}\n\n/**\n * Creates an Event which is backed-up by the event emitter. This allows\n * to use the existing eventing pattern and is likely using less memory.\n * Sample:\n *\n * \tclass Document {\n *\n *\t\tprivate _eventbus = new EventEmitter();\n *\n *\t\tpublic onDidChange = fromEventEmitter(this._eventbus, 'changed');\n *\n *\t\t// getter-style\n *\t\t// get onDidChange(): Event<(value:string)=>any> {\n *\t\t// \tcache fromEventEmitter result and return\n *\t\t// }\n *\n *\t\tprivate _doIt() {\n *\t\t\t// ...\n *\t\t\tthis._eventbus.emit('changed', value)\n *\t\t}\n *\t}\n */\nexport function fromEventEmitter<T>(emitter: EventEmitter, eventType: string): Event<T> {\n\treturn function (listener: (e: T) => any, thisArgs?: any, disposables?: IDisposable[]): IDisposable {\n\t\tconst result = emitter.addListener2(eventType, function () {\n\t\t\tlistener.apply(thisArgs, arguments);\n\t\t});\n\t\tif(Array.isArray(disposables)) {\n\t\t\tdisposables.push(result);\n\t\t}\n\t\treturn result;\n\t};\n}\n\nexport function mapEvent<I,O>(event: Event<I>, map: (i:I)=>O): Event<O> {\n\treturn (listener, thisArgs?, disposables?) =>\n\t\tevent(i => listener(map(i)), thisArgs, disposables);\n}\n\nenum EventDelayerState {\n\tIdle,\n\tRunning\n}\n\n/**\n * The EventDelayer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.delay(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.wrap(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n\n\tprivate buffers: Function[][] = [];\n\n\twrapEvent<T>(event: Event<T>): Event<T> {\n\t\treturn (listener, thisArgs?, disposables?) => {\n\t\t\treturn event(i => {\n\t\t\t\tconst buffer = this.buffers[this.buffers.length - 1];\n\n\t\t\t\tif (buffer) {\n\t\t\t\t\tbuffer.push(() => listener.call(thisArgs, i));\n\t\t\t\t} else {\n\t\t\t\t\tlistener.call(thisArgs, i);\n\t\t\t\t}\n\t\t\t}, void 0, disposables);\n\t\t};\n\t}\n\n\tbufferEvents(fn: () => void): void {\n\t\tconst buffer = [];\n\t\tthis.buffers.push(buffer);\n\t\tfn();\n\t\tthis.buffers.pop();\n\t\tbuffer.forEach(flush => flush());\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport Event, {Emitter} from 'vs/base/common/event';\n\nexport interface CancellationToken {\n\tisCancellationRequested: boolean;\n\tonCancellationRequested: Event<any>;\n}\n\nexport namespace CancellationToken {\n\n\texport const None: CancellationToken = Object.freeze({\n\t\tisCancellationRequested: false,\n\t\tonCancellationRequested: Event.None\n\t});\n\n\texport const Cancelled: CancellationToken = Object.freeze({\n\t\tisCancellationRequested: true,\n\t\tonCancellationRequested: Event.None\n\t});\n}\n\nconst shortcutEvent: Event<any> = Object.freeze(function(callback, context?) {\n\tlet handle = setTimeout(callback.bind(context), 0);\n\treturn { dispose() { clearTimeout(handle); } };\n});\n\nclass MutableToken implements CancellationToken {\n\n\tprivate _isCancelled: boolean = false;\n\tprivate _emitter: Emitter<any>;\n\n\tpublic cancel() {\n\t\tif (!this._isCancelled) {\n\t\t\tthis._isCancelled = true;\n\t\t\tif (this._emitter) {\n\t\t\t\tthis._emitter.fire(undefined);\n\t\t\t\tthis._emitter = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tget isCancellationRequested(): boolean {\n\t\treturn this._isCancelled;\n\t}\n\n\tget onCancellationRequested(): Event<any> {\n\t\tif (this._isCancelled) {\n\t\t\treturn shortcutEvent;\n\t\t}\n\t\tif (!this._emitter) {\n\t\t\tthis._emitter = new Emitter<any>();\n\t\t}\n\t\treturn this._emitter.event;\n\t}\n}\n\nexport class CancellationTokenSource {\n\n\tprivate _token: CancellationToken;\n\n\tget token(): CancellationToken {\n\t\tif (!this._token) {\n\t\t\t// be lazy and create the token only when\n\t\t\t// actually needed\n\t\t\tthis._token = new MutableToken();\n\t\t}\n\t\treturn this._token;\n\t}\n\n\tcancel(): void {\n\t\tif (!this._token) {\n\t\t\t// save an object by returning the default\n\t\t\t// cancelled token when cancellation happens\n\t\t\t// before someone asks for the token\n\t\t\tthis._token = CancellationToken.Cancelled;\n\t\t} else {\n\t\t\t(<MutableToken>this._token).cancel();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Errors = require('vs/base/common/errors');\nimport {IDisposable} from 'vs/base/common/lifecycle';\n\nexport class EmitterEvent {\n\n\tprivate _type:string;\n\tprivate _data:any;\n\n\tconstructor(eventType:string=null, data:any=null) {\n\t\tthis._type = eventType;\n\t\tthis._data = data;\n\t}\n\n\tpublic getType():string {\n\t\treturn this._type;\n\t}\n\n\tpublic getData():any {\n\t\treturn this._data;\n\t}\n}\n\nexport interface ListenerCallback {\n\t(value:any):void;\n}\n\nexport interface BulkListenerCallback {\n\t(value:EmitterEvent[]):void;\n}\n\nexport interface IEventEmitter extends IDisposable {\n\taddListener2(eventType:string, listener:ListenerCallback):IDisposable;\n\taddOneTimeDisposableListener(eventType:string, listener:ListenerCallback):IDisposable;\n\taddBulkListener2(listener:BulkListenerCallback):IDisposable;\n\taddEmitter2(eventEmitter:IEventEmitter):IDisposable;\n}\n\nexport interface IListenersMap {\n\t[key:string]:ListenerCallback[];\n}\n\nexport class EventEmitter implements IEventEmitter {\n\n\tprotected _listeners:IListenersMap;\n\tprotected _bulkListeners:ListenerCallback[];\n\tprivate _collectedEvents:EmitterEvent[];\n\tprivate _deferredCnt:number;\n\tprivate _allowedEventTypes:{[eventType:string]:boolean;};\n\n\tconstructor(allowedEventTypes:string[] = null) {\n\t\tthis._listeners = {};\n\t\tthis._bulkListeners = [];\n\t\tthis._collectedEvents = [];\n\t\tthis._deferredCnt = 0;\n\t\tif (allowedEventTypes) {\n\t\t\tthis._allowedEventTypes = {};\n\t\t\tfor (var i = 0; i < allowedEventTypes.length; i++) {\n\t\t\t\tthis._allowedEventTypes[allowedEventTypes[i]] = true;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._allowedEventTypes = null;\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._listeners = {};\n\t\tthis._bulkListeners = [];\n\t\tthis._collectedEvents = [];\n\t\tthis._deferredCnt = 0;\n\t\tthis._allowedEventTypes = null;\n\t}\n\n\tprivate addListener(eventType:string, listener:ListenerCallback):IDisposable {\n\t\tif (eventType === '*') {\n\t\t\tthrow new Error('Use addBulkListener(listener) to register your listener!');\n\t\t}\n\n\t\tif (this._allowedEventTypes && !this._allowedEventTypes.hasOwnProperty(eventType)) {\n\t\t\tthrow new Error('This object will never emit this event type!');\n\t\t}\n\n\t\tif (this._listeners.hasOwnProperty(eventType)) {\n\t\t\tthis._listeners[eventType].push(listener);\n\t\t} else {\n\t\t\tthis._listeners[eventType] = [listener];\n\t\t}\n\n\t\tvar bound = this;\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tif (!bound) {\n\t\t\t\t\t// Already called\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbound._removeListener(eventType, listener);\n\n\t\t\t\t// Prevent leakers from holding on to the event emitter\n\t\t\t\tbound = null;\n\t\t\t\tlistener = null;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic addListener2(eventType:string, listener:ListenerCallback):IDisposable {\n\t\treturn this.addListener(eventType, listener);\n\t}\n\n\tprivate addOneTimeListener(eventType:string, listener:ListenerCallback):IDisposable {\n\t\tvar unbind = this.addListener(eventType, (value:any) => {\n\t\t\tunbind.dispose();\n\t\t\tlistener(value);\n\t\t});\n\t\treturn unbind;\n\t}\n\n\tpublic addOneTimeDisposableListener(eventType:string, listener:ListenerCallback):IDisposable {\n\t\treturn this.addOneTimeListener(eventType, listener);\n\t}\n\n\tprotected addBulkListener(listener:BulkListenerCallback):IDisposable {\n\n\t\tthis._bulkListeners.push(listener);\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._removeBulkListener(listener);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic addBulkListener2(listener:BulkListenerCallback):IDisposable {\n\t\treturn this.addBulkListener(listener);\n\t}\n\n\tprivate addEmitter(eventEmitter:IEventEmitter):IDisposable {\n\t\treturn eventEmitter.addBulkListener2((events:EmitterEvent[]):void => {\n\t\t\tvar newEvents = events;\n\n\t\t\tif (this._deferredCnt === 0) {\n\t\t\t\tthis._emitEvents(<EmitterEvent[]>newEvents);\n\t\t\t} else {\n\t\t\t\t// Collect for later\n\t\t\t\tthis._collectedEvents.push.apply(this._collectedEvents, newEvents);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic addEmitter2(eventEmitter:IEventEmitter):IDisposable {\n\t\treturn this.addEmitter(eventEmitter);\n\t}\n\n\tprivate _removeListener(eventType:string, listener:ListenerCallback): void {\n\t\tif (this._listeners.hasOwnProperty(eventType)) {\n\t\t\tvar listeners = this._listeners[eventType];\n\t\t\tfor (var i = 0, len = listeners.length; i < len; i++) {\n\t\t\t\tif (listeners[i] === listener) {\n\t\t\t\t\tlisteners.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tprivate _removeBulkListener(listener:BulkListenerCallback): void {\n\t\tfor (var i = 0, len = this._bulkListeners.length; i < len; i++) {\n\t\t\tif (this._bulkListeners[i] === listener) {\n\t\t\t\tthis._bulkListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _emitToSpecificTypeListeners(eventType:string, data:any): void {\n\t\tif (this._listeners.hasOwnProperty(eventType)) {\n\t\t\tvar listeners = this._listeners[eventType].slice(0);\n\t\t\tfor (var i = 0, len = listeners.length; i < len; i++) {\n\t\t\t\tsafeInvoke1Arg(listeners[i], data);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _emitToBulkListeners(events:EmitterEvent[]): void {\n\t\tvar bulkListeners = this._bulkListeners.slice(0);\n\t\tfor (var i = 0, len = bulkListeners.length; i < len; i++) {\n\t\t\tsafeInvoke1Arg(bulkListeners[i], events);\n\t\t}\n\t}\n\n\tprotected _emitEvents(events:EmitterEvent[]): void {\n\t\tif (this._bulkListeners.length > 0) {\n\t\t\tthis._emitToBulkListeners(events);\n\t\t}\n\t\tfor (var i = 0, len = events.length; i < len; i++) {\n\t\t\tvar e = events[i];\n\n\t\t\tthis._emitToSpecificTypeListeners(e.getType(), e.getData());\n\t\t}\n\t}\n\n\tpublic emit(eventType:string, data:any={}):void {\n\t\tif (this._allowedEventTypes && !this._allowedEventTypes.hasOwnProperty(eventType)) {\n\t\t\tthrow new Error('Cannot emit this event type because it wasn\\'t white-listed!');\n\t\t}\n\t\t// Early return if no listeners would get this\n\t\tif (!this._listeners.hasOwnProperty(eventType) && this._bulkListeners.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tvar emitterEvent = new EmitterEvent(eventType, data);\n\n\t\tif (this._deferredCnt === 0) {\n\t\t\tthis._emitEvents([emitterEvent]);\n\t\t} else {\n\t\t\t// Collect for later\n\t\t\tthis._collectedEvents.push(emitterEvent);\n\t\t}\n\t}\n\n\tpublic deferredEmit(callback:()=>any):any {\n\t\tthis._deferredCnt = this._deferredCnt + 1;\n\t\tvar result: any = safeInvokeNoArg(callback);\n\t\tthis._deferredCnt = this._deferredCnt - 1;\n\n\t\tif (this._deferredCnt === 0) {\n\t\t\tthis._emitCollected();\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _emitCollected(): void {\n\t\t// Flush collected events\n\t\tvar events = this._collectedEvents;\n\t\tthis._collectedEvents = [];\n\n\t\tif (events.length > 0) {\n\t\t\tthis._emitEvents(events);\n\t\t}\n\t}\n}\n\nclass EmitQueueElement {\n\tpublic target: Function;\n\tpublic arg: any;\n\n\tconstructor(target: Function, arg: any) {\n\t\tthis.target = target;\n\t\tthis.arg = arg;\n\t}\n}\n\n/**\n * Same as EventEmitter, but guarantees events are delivered in order to each listener\n */\nexport class OrderGuaranteeEventEmitter extends EventEmitter {\n\n\tprivate _emitQueue: EmitQueueElement[];\n\n\tconstructor(allowedEventTypes:string[] = null) {\n\t\tsuper(allowedEventTypes);\n\t\tthis._emitQueue = [];\n\t}\n\n\tprotected _emitToSpecificTypeListeners(eventType:string, data:any): void {\n\t\tif (this._listeners.hasOwnProperty(eventType)) {\n\t\t\tlet listeners = this._listeners[eventType];\n\t\t\tfor (let i = 0, len = listeners.length; i < len; i++) {\n\t\t\t\tthis._emitQueue.push(new EmitQueueElement(listeners[i], data));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _emitToBulkListeners(events:EmitterEvent[]): void {\n\t\tlet bulkListeners = this._bulkListeners;\n\t\tfor (let i = 0, len = bulkListeners.length; i < len; i++) {\n\t\t\tthis._emitQueue.push(new EmitQueueElement(bulkListeners[i], events));\n\t\t}\n\t}\n\n\tprotected _emitEvents(events:EmitterEvent[]): void {\n\t\tsuper._emitEvents(events);\n\n\t\twhile (this._emitQueue.length > 0) {\n\t\t\tlet queueElement = this._emitQueue.shift();\n\t\t\tsafeInvoke1Arg(queueElement.target, queueElement.arg);\n\t\t}\n\t}\n}\n\nfunction safeInvokeNoArg(func:Function): any {\n\ttry {\n\t\treturn func();\n\t} catch(e) {\n\t\tErrors.onUnexpectedError(e);\n\t}\n}\n\nfunction safeInvoke1Arg(func:Function, arg1:any): any {\n\ttry {\n\t\treturn func(arg1);\n\t} catch(e) {\n\t\tErrors.onUnexpectedError(e);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Platform = require('vs/base/common/platform');\nimport errors = require('vs/base/common/errors');\nimport precision = require('vs/base/common/stopwatch');\nimport {IDisposable} from 'vs/base/common/lifecycle';\n\nexport var ENABLE_TIMER = false;\nvar msWriteProfilerMark = Platform.globals['msWriteProfilerMark'];\n\nexport enum Topic {\n\tEDITOR,\n\tLANGUAGES,\n\tWORKER,\n\tWORKBENCH,\n\tSTARTUP\n}\n\nexport interface ITimerEvent {\n\tid: number;\n\ttopic: string;\n\tname: string;\n\tdescription: string;\n\tdata: any;\n\n\tstartTime: Date;\n\tstopTime: Date;\n\n\tstop(stopTime?: Date): void;\n\ttimeTaken(): number;\n}\n\nexport interface IExistingTimerEvent {\n\ttopic: string;\n\tname: string;\n\n\tdescription?: string;\n\n\tstartTime: Date;\n\tstopTime: Date;\n}\n\nclass NullTimerEvent implements ITimerEvent {\n\tpublic id: number;\n\tpublic topic: string;\n\tpublic name: string;\n\tpublic description: string;\n\tpublic data: any;\n\n\tpublic startTime: Date;\n\tpublic stopTime: Date;\n\n\tpublic stop(): void {\n\t\treturn;\n\t}\n\n\tpublic timeTaken(): number {\n\t\treturn -1;\n\t}\n}\n\nclass TimerEvent implements ITimerEvent {\n\tpublic id: number;\n\tpublic topic: string;\n\tpublic name: string;\n\tpublic description: string;\n\tpublic data: any;\n\n\tpublic startTime: Date;\n\tpublic stopTime: Date;\n\n\tprivate timeKeeper: TimeKeeper;\n\tprivate sw: precision.StopWatch;\n\n\tconstructor(timeKeeper: TimeKeeper, name: string, topic: string, startTime?: Date, description?: string) {\n\t\tthis.timeKeeper = timeKeeper;\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.topic = topic;\n\t\tthis.stopTime = null;\n\n\t\tif (startTime) {\n\t\t\tthis.startTime = startTime;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.startTime = new Date();\n\t\tthis.sw = precision.StopWatch.create();\n\n\t\tif (msWriteProfilerMark) {\n\t\t\tvar profilerName = ['Monaco', this.topic, this.name, 'start'];\n\t\t\tmsWriteProfilerMark(profilerName.join('|'));\n\t\t}\n\t}\n\n\tpublic stop(stopTime?: Date): void {\n\n\t\t// already stopped\n\t\tif (this.stopTime !== null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (stopTime) {\n\t\t\tthis.stopTime = stopTime;\n\t\t\tthis.sw = null;\n\t\t\tthis.timeKeeper._onEventStopped(this);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.stopTime = new Date();\n\t\tif (this.sw) {\n\t\t\tthis.sw.stop();\n\t\t}\n\n\t\tthis.timeKeeper._onEventStopped(this);\n\n\t\tif (msWriteProfilerMark) {\n\t\t\tvar profilerName = ['Monaco', this.topic, this.name, 'stop'];\n\t\t\tmsWriteProfilerMark(profilerName.join('|'));\n\t\t}\n\t}\n\n\tpublic timeTaken(): number {\n\t\tif (this.sw) {\n\t\t\treturn this.sw.elapsed();\n\t\t}\n\t\tif (this.stopTime) {\n\t\t\treturn this.stopTime.getTime() - this.startTime.getTime();\n\t\t}\n\t\treturn -1;\n\t}\n}\n\nexport interface IEventsListener {\n\t(events: ITimerEvent[]): void;\n}\n\nexport class TimeKeeper /*extends EventEmitter.EventEmitter*/ {\n\t/**\n\t * After being started for 1 minute, all timers are automatically stopped.\n\t */\n\tprivate static _MAX_TIMER_LENGTH = 60000; // 1 minute\n\t/**\n\t * Every 2 minutes, a sweep of current started timers is done.\n\t */\n\tprivate static _CLEAN_UP_INTERVAL = 120000; // 2 minutes\n\t/**\n\t * Collect at most 1000 events.\n\t */\n\tprivate static _EVENT_CACHE_LIMIT = 1000;\n\n\tprivate static EVENT_ID = 1;\n\tpublic static PARSE_TIME = new Date();\n\n\n\tprivate cleaningIntervalId: Platform.IntervalToken;\n\tprivate collectedEvents: ITimerEvent[];\n\tprivate listeners: IEventsListener[];\n\n\tconstructor() {\n\t\tthis.cleaningIntervalId = -1;\n\t\tthis.collectedEvents = [];\n\t\tthis.listeners = [];\n\t}\n\n\tpublic isEnabled(): boolean {\n\t\treturn ENABLE_TIMER;\n\t}\n\n\tpublic start(topic: Topic|string, name: string, start?: Date, description?: string): ITimerEvent {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn nullEvent;\n\t\t}\n\n\t\tvar strTopic: string;\n\n\t\tif (typeof topic === 'string') {\n\t\t\tstrTopic = topic;\n\t\t} else if (topic === Topic.EDITOR) {\n\t\t\tstrTopic = 'Editor';\n\t\t} else if (topic === Topic.LANGUAGES) {\n\t\t\tstrTopic = 'Languages';\n\t\t} else if (topic === Topic.WORKER) {\n\t\t\tstrTopic = 'Worker';\n\t\t} else if (topic === Topic.WORKBENCH) {\n\t\t\tstrTopic = 'Workbench';\n\t\t} else if (topic === Topic.STARTUP) {\n\t\t\tstrTopic = 'Startup';\n\t\t}\n\n\t\tthis.initAutoCleaning();\n\t\tvar event = new TimerEvent(this, name, strTopic, start, description);\n\t\tthis.addEvent(event);\n\n\t\treturn event;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this.cleaningIntervalId !== -1) {\n\t\t\tPlatform.clearInterval(this.cleaningIntervalId);\n\t\t\tthis.cleaningIntervalId = -1;\n\t\t}\n\t}\n\n\tpublic addListener(listener: IEventsListener): IDisposable {\n\t\tthis.listeners.push(listener);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tfor (var i = 0; i < this.listeners.length; i++) {\n\t\t\t\t\tif (this.listeners[i] === listener) {\n\t\t\t\t\t\tthis.listeners.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate addEvent(event: ITimerEvent): void {\n\t\tevent.id = TimeKeeper.EVENT_ID;\n\t\tTimeKeeper.EVENT_ID++;\n\t\tthis.collectedEvents.push(event);\n\t\t// expire items from the front of the cache\n\t\tif (this.collectedEvents.length > TimeKeeper._EVENT_CACHE_LIMIT) {\n\t\t\tthis.collectedEvents.shift();\n\t\t}\n\t}\n\n\tprivate initAutoCleaning(): void {\n\t\tif (this.cleaningIntervalId === -1) {\n\t\t\tthis.cleaningIntervalId = Platform.setInterval(() => {\n\t\t\t\tvar now = Date.now();\n\t\t\t\tthis.collectedEvents.forEach((event) => {\n\t\t\t\t\tif (!event.stopTime && (now - event.startTime.getTime()) >= TimeKeeper._MAX_TIMER_LENGTH) {\n\t\t\t\t\t\tevent.stop();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, TimeKeeper._CLEAN_UP_INTERVAL);\n\t\t}\n\t}\n\n\tpublic getCollectedEvents(): ITimerEvent[] {\n\t\treturn this.collectedEvents.slice(0);\n\t}\n\n\tpublic clearCollectedEvents(): void {\n\t\tthis.collectedEvents = [];\n\t}\n\n\t_onEventStopped(event: ITimerEvent): void {\n\t\tvar emitEvents = [event];\n\n\t\tvar listeners = this.listeners.slice(0);\n\t\tfor (var i = 0; i < listeners.length; i++) {\n\t\t\ttry {\n\t\t\t\tlisteners[i](emitEvents);\n\t\t\t} catch (e) {\n\t\t\t\terrors.onUnexpectedError(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setInitialCollectedEvents(events: IExistingTimerEvent[], startTime?: Date): void {\n\t\tif (!this.isEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (startTime) {\n\t\t\tTimeKeeper.PARSE_TIME = startTime;\n\t\t}\n\n\t\tevents.forEach((event) => {\n\t\t\tvar e = new TimerEvent(this, event.name, event.topic, event.startTime, event.description);\n\t\t\te.stop(event.stopTime);\n\t\t\tthis.addEvent(e);\n\t\t});\n\t}\n}\n\nvar timeKeeper = new TimeKeeper();\nexport var nullEvent: ITimerEvent = new NullTimerEvent();\n\nexport function start(topic: Topic|string, name: string, start?: Date, description?: string): ITimerEvent {\n\treturn timeKeeper.start(topic, name, start, description);\n}\n\nexport function getTimeKeeper(): TimeKeeper {\n\treturn timeKeeper;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport * as errors from 'vs/base/common/errors';\nimport * as platform from 'vs/base/common/platform';\nimport { Promise, TPromise, ValueCallback, ErrorCallback, ProgressCallback } from 'vs/base/common/winjs.base';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nfunction isThenable<T>(obj: any): obj is Thenable<T> {\n\treturn obj && typeof (<Thenable<any>>obj).then === 'function';\n}\n\nexport function toThenable<T>(arg: T | Thenable<T>): Thenable<T> {\n\tif (isThenable(arg)) {\n\t\treturn arg;\n\t} else {\n\t\treturn TPromise.as(arg);\n\t}\n}\n\nexport function asWinJsPromise<T>(callback: (token: CancellationToken) => T | Thenable<T>): TPromise<T> {\n\tlet source = new CancellationTokenSource();\n\treturn new TPromise<T>((resolve, reject) => {\n\t\tlet item = callback(source.token);\n\t\tif (isThenable<T>(item)) {\n\t\t\titem.then(resolve, reject);\n\t\t} else {\n\t\t\tresolve(item);\n\t\t}\n\t}, () => {\n\t\tsource.cancel();\n\t});\n}\n\n/**\n * Hook a cancellation token to a WinJS Promise\n */\nexport function wireCancellationToken<T>(token: CancellationToken, promise: TPromise<T>): Thenable<T> {\n\ttoken.onCancellationRequested(() => promise.cancel());\n\treturn promise;\n}\n\nexport interface ITask<T> {\n\t(): T;\n}\n\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tvar throttler = new Throttler();\n * \t\tvar letters = [];\n *\n * \t\tfunction deliver() {\n * \t\t\tconst lettersToDeliver = letters;\n * \t\t\tletters = [];\n * \t\t\treturn makeTheTrip(lettersToDeliver);\n * \t\t}\n *\n * \t\tfunction onLetterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(deliver);\n * \t\t}\n */\nexport class Throttler {\n\n\tprivate activePromise: Promise;\n\tprivate queuedPromise: Promise;\n\tprivate queuedPromiseFactory: ITask<Promise>;\n\n\tconstructor() {\n\t\tthis.activePromise = null;\n\t\tthis.queuedPromise = null;\n\t\tthis.queuedPromiseFactory = null;\n\t}\n\n\tqueue<T>(promiseFactory: ITask<TPromise<T>>): TPromise<T> {\n\t\tif (this.activePromise) {\n\t\t\tthis.queuedPromiseFactory = promiseFactory;\n\n\t\t\tif (!this.queuedPromise) {\n\t\t\t\tconst onComplete = () => {\n\t\t\t\t\tthis.queuedPromise = null;\n\n\t\t\t\t\tconst result = this.queue(this.queuedPromiseFactory);\n\t\t\t\t\tthis.queuedPromiseFactory = null;\n\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\n\t\t\t\tthis.queuedPromise = new Promise((c, e, p) => {\n\t\t\t\t\tthis.activePromise.then(onComplete, onComplete, p).done(c);\n\t\t\t\t}, () => {\n\t\t\t\t\tthis.activePromise.cancel();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new Promise((c, e, p) => {\n\t\t\t\tthis.queuedPromise.then(c, e, p);\n\t\t\t}, () => {\n\t\t\t\t// no-op\n\t\t\t});\n\t\t}\n\n\t\tthis.activePromise = promiseFactory();\n\n\t\treturn new Promise((c, e, p) => {\n\t\t\tthis.activePromise.done((result: any) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\tc(result);\n\t\t\t}, (err: any) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\te(err);\n\t\t\t}, p);\n\t\t}, () => {\n\t\t\tthis.activePromise.cancel();\n\t\t});\n\t}\n}\n\n// TODO@Joao: can the previous throttler be replaced with this?\nexport class SimpleThrottler {\n\n\tprivate current = TPromise.as(null);\n\n\tqueue<T>(promiseTask: ITask<TPromise<T>>): TPromise<T> {\n\t\treturn this.current = this.current.then(() => promiseTask());\n\t}\n}\n\n/**\n * A helper to delay execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so the he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tvar delayer = new Delayer(WAITING_PERIOD);\n * \t\tvar letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer<T> {\n\n\tprivate timeout: number;\n\tprivate completionPromise: Promise;\n\tprivate onSuccess: ValueCallback;\n\tprivate task: ITask<T>;\n\n\tconstructor(public defaultDelay: number) {\n\t\tthis.timeout = null;\n\t\tthis.completionPromise = null;\n\t\tthis.onSuccess = null;\n\t\tthis.task = null;\n\t}\n\n\ttrigger(task: ITask<T>, delay: number = this.defaultDelay): TPromise<T> {\n\t\tthis.task = task;\n\t\tthis.cancelTimeout();\n\n\t\tif (!this.completionPromise) {\n\t\t\tthis.completionPromise = new Promise((c) => {\n\t\t\t\tthis.onSuccess = c;\n\t\t\t}, () => {\n\t\t\t\t// no-op\n\t\t\t}).then(() => {\n\t\t\t\tthis.completionPromise = null;\n\t\t\t\tthis.onSuccess = null;\n\t\t\t\tconst task = this.task;\n\t\t\t\tthis.task = null;\n\n\t\t\t\treturn task();\n\t\t\t});\n\t\t}\n\n\t\tthis.timeout = setTimeout(() => {\n\t\t\tthis.timeout = null;\n\t\t\tthis.onSuccess(null);\n\t\t}, delay);\n\n\t\treturn this.completionPromise;\n\t}\n\n\tisTriggered(): boolean {\n\t\treturn this.timeout !== null;\n\t}\n\n\tcancel(): void {\n\t\tthis.cancelTimeout();\n\n\t\tif (this.completionPromise) {\n\t\t\tthis.completionPromise.cancel();\n\t\t\tthis.completionPromise = null;\n\t\t}\n\t}\n\n\tprivate cancelTimeout(): void {\n\t\tif (this.timeout !== null) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n}\n\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * Simply combine the two mail man strategies from the Throttler and Delayer\n * helpers, for an analogy.\n */\nexport class ThrottledDelayer<T> extends Delayer<TPromise<T>> {\n\n\tprivate throttler: Throttler;\n\n\tconstructor(defaultDelay: number) {\n\t\tsuper(defaultDelay);\n\n\t\tthis.throttler = new Throttler();\n\t}\n\n\ttrigger(promiseFactory: ITask<TPromise<T>>, delay?: number): Promise {\n\t\treturn super.trigger(() => this.throttler.queue(promiseFactory), delay);\n\t}\n}\n\n/**\n * Similar to the ThrottledDelayer, except it also guarantees that the promise\n * factory doesn't get called more often than every `minimumPeriod` milliseconds.\n */\nexport class PeriodThrottledDelayer<T> extends ThrottledDelayer<T> {\n\n\tprivate minimumPeriod: number;\n\tprivate periodThrottler: Throttler;\n\n\tconstructor(defaultDelay: number, minimumPeriod: number = 0) {\n\t\tsuper(defaultDelay);\n\n\t\tthis.minimumPeriod = minimumPeriod;\n\t\tthis.periodThrottler = new Throttler();\n\t}\n\n\ttrigger(promiseFactory: ITask<TPromise<T>>, delay?: number): Promise {\n\t\treturn super.trigger(() => {\n\t\t\treturn this.periodThrottler.queue(() => {\n\t\t\t\treturn Promise.join([\n\t\t\t\t\tTPromise.timeout(this.minimumPeriod),\n\t\t\t\t\tpromiseFactory()\n\t\t\t\t]).then(r => r[1]);\n\t\t\t});\n\t\t}, delay);\n\t}\n}\n\nexport class PromiseSource<T> {\n\n\tprivate _value: TPromise<T>;\n\tprivate _completeCallback: Function;\n\tprivate _errorCallback: Function;\n\n\tconstructor() {\n\t\tthis._value = new TPromise<T>((c, e) => {\n\t\t\tthis._completeCallback = c;\n\t\t\tthis._errorCallback = e;\n\t\t});\n\t}\n\n\tget value(): TPromise<T> {\n\t\treturn this._value;\n\t}\n\n\tcomplete(value?: T): void {\n\t\tthis._completeCallback(value);\n\t}\n\n\terror(err?: any): void {\n\t\tthis._errorCallback(err);\n\t}\n}\n\nexport class ShallowCancelThenPromise<T> extends TPromise<T> {\n\n\tconstructor(outer: TPromise<T>) {\n\n\t\tlet completeCallback: ValueCallback,\n\t\t\terrorCallback: ErrorCallback,\n\t\t\tprogressCallback: ProgressCallback;\n\n\t\tsuper((c, e, p) => {\n\t\t\tcompleteCallback = c;\n\t\t\terrorCallback = e;\n\t\t\tprogressCallback = p;\n\t\t}, () => {\n\t\t\t// cancel this promise but not the\n\t\t\t// outer promise\n\t\t\terrorCallback(errors.canceled());\n\t\t});\n\n\t\touter.then(completeCallback, errorCallback, progressCallback);\n\t}\n}\n\n/**\n * Returns a new promise that joins the provided promise. Upon completion of\n * the provided promise the provided function will always be called. This\n * method is comparable to a try-finally code block.\n * @param promise a promise\n * @param f a function that will be call in the success and error case.\n */\nexport function always<T>(promise: TPromise<T>, f: Function): TPromise<T> {\n\treturn new TPromise<T>((c, e, p) => {\n\t\tpromise.done((result) => {\n\t\t\ttry {\n\t\t\t\tf(result);\n\t\t\t} catch (e1) {\n\t\t\t\terrors.onUnexpectedError(e1);\n\t\t\t}\n\t\t\tc(result);\n\t\t}, (err) => {\n\t\t\ttry {\n\t\t\t\tf(err);\n\t\t\t} catch (e1) {\n\t\t\t\terrors.onUnexpectedError(e1);\n\t\t\t}\n\t\t\te(err);\n\t\t}, (progress) => {\n\t\t\tp(progress);\n\t\t});\n\t}, () => {\n\t\tpromise.cancel();\n\t});\n}\n\n/**\n * Runs the provided list of promise factories in sequential order. The returned\n * promise will complete to an array of results from each promise.\n */\nexport function sequence<T>(promiseFactory: ITask<TPromise<T>>[]): TPromise<T[]> {\n\tconst results: T[] = [];\n\n\t// reverse since we start with last element using pop()\n\tpromiseFactory = promiseFactory.reverse();\n\n\tfunction next(): Promise {\n\t\tif (promiseFactory.length) {\n\t\t\treturn promiseFactory.pop()();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfunction thenHandler(result: any): Promise {\n\t\tif (result) {\n\t\t\tresults.push(result);\n\t\t}\n\n\t\tconst n = next();\n\t\tif (n) {\n\t\t\treturn n.then(thenHandler);\n\t\t}\n\n\t\treturn TPromise.as(results);\n\t}\n\n\treturn TPromise.as(null).then(thenHandler);\n}\n\nexport function once<T extends Function>(fn: T): T {\n\tconst _this = this;\n\tlet didCall = false;\n\tlet result: any;\n\n\treturn function() {\n\t\tif (didCall) {\n\t\t\treturn result;\n\t\t}\n\n\t\tdidCall = true;\n\t\tresult = fn.apply(_this, arguments);\n\n\t\treturn result;\n\t} as any as T;\n}\n\ninterface ILimitedTaskFactory {\n\tfactory: ITask<Promise>;\n\tc: ValueCallback;\n\te: ErrorCallback;\n\tp: ProgressCallback;\n}\n\n/**\n * A helper to queue N promises and run them all with a max degree of parallelism. The helper\n * ensures that at any time no more than M promises are running at the same time.\n */\nexport class Limiter<T> {\n\tprivate runningPromises: number;\n\tprivate maxDegreeOfParalellism: number;\n\tprivate outstandingPromises: ILimitedTaskFactory[];\n\n\tconstructor(maxDegreeOfParalellism: number) {\n\t\tthis.maxDegreeOfParalellism = maxDegreeOfParalellism;\n\t\tthis.outstandingPromises = [];\n\t\tthis.runningPromises = 0;\n\t}\n\n\tqueue(promiseFactory: ITask<Promise>): Promise;\n\tqueue(promiseFactory: ITask<TPromise<T>>): TPromise<T> {\n\t\treturn new TPromise<T>((c, e, p) => {\n\t\t\tthis.outstandingPromises.push({\n\t\t\t\tfactory: promiseFactory,\n\t\t\t\tc: c,\n\t\t\t\te: e,\n\t\t\t\tp: p\n\t\t\t});\n\n\t\t\tthis.consume();\n\t\t});\n\t}\n\n\tprivate consume(): void {\n\t\twhile (this.outstandingPromises.length && this.runningPromises < this.maxDegreeOfParalellism) {\n\t\t\tconst iLimitedTask = this.outstandingPromises.shift();\n\t\t\tthis.runningPromises++;\n\n\t\t\tconst promise = iLimitedTask.factory();\n\t\t\tpromise.done(iLimitedTask.c, iLimitedTask.e, iLimitedTask.p);\n\t\t\tpromise.done(() => this.consumed(), () => this.consumed());\n\t\t}\n\t}\n\n\tprivate consumed(): void {\n\t\tthis.runningPromises--;\n\t\tthis.consume();\n\t}\n}\n\nexport class TimeoutTimer extends Disposable {\n\tprivate _token: platform.TimeoutToken;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._token = -1;\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t\tsuper.dispose();\n\t}\n\n\tcancel(): void {\n\t\tif (this._token !== -1) {\n\t\t\tplatform.clearTimeout(this._token);\n\t\t\tthis._token = -1;\n\t\t}\n\t}\n\n\tcancelAndSet(runner: () => void, timeout:number): void {\n\t\tthis.cancel();\n\t\tthis._token = platform.setTimeout(() => {\n\t\t\tthis._token = -1;\n\t\t\trunner();\n\t\t}, timeout);\n\t}\n\n\tsetIfNotSet(runner: () => void, timeout: number): void {\n\t\tif (this._token !== -1) {\n\t\t\t// timer is already set\n\t\t\treturn;\n\t\t}\n\t\tthis._token = platform.setTimeout(() => {\n\t\t\tthis._token = -1;\n\t\t\trunner();\n\t\t}, timeout);\n\t}\n}\n\nexport class IntervalTimer extends Disposable {\n\n\tprivate _token: platform.IntervalToken;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._token = -1;\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t\tsuper.dispose();\n\t}\n\n\tcancel(): void {\n\t\tif (this._token !== -1) {\n\t\t\tplatform.clearInterval(this._token);\n\t\t\tthis._token = -1;\n\t\t}\n\t}\n\n\tcancelAndSet(runner: () => void, interval:number): void {\n\t\tthis.cancel();\n\t\tthis._token = platform.setInterval(() => {\n\t\t\trunner();\n\t\t}, interval);\n\t}\n}\n\nexport class RunOnceScheduler {\n\n\tprivate timeoutToken: platform.TimeoutToken;\n\tprivate runner: () => void;\n\tprivate timeout: number;\n\tprivate timeoutHandler: () => void;\n\n\tconstructor(runner: () => void, timeout: number) {\n\t\tthis.timeoutToken = -1;\n\t\tthis.runner = runner;\n\t\tthis.timeout = timeout;\n\t\tthis.timeoutHandler = this.onTimeout.bind(this);\n\t}\n\n\t/**\n\t * Dispose RunOnceScheduler\n\t */\n\tdispose(): void {\n\t\tthis.cancel();\n\t\tthis.runner = null;\n\t}\n\n\t/**\n\t * Cancel current scheduled runner (if any).\n\t */\n\tcancel(): void {\n\t\tif (this.isScheduled()) {\n\t\t\tplatform.clearTimeout(this.timeoutToken);\n\t\t\tthis.timeoutToken = -1;\n\t\t}\n\t}\n\n\t/**\n\t * Replace runner. If there is a runner already scheduled, the new runner will be called.\n\t */\n\tsetRunner(runner: () => void): void {\n\t\tthis.runner = runner;\n\t}\n\n\t/**\n\t * Cancel previous runner (if any) & schedule a new runner.\n\t */\n\tschedule(delay = this.timeout): void {\n\t\tthis.cancel();\n\t\tthis.timeoutToken = platform.setTimeout(this.timeoutHandler, this.timeout);\n\t}\n\n\t/**\n\t * Returns true if scheduled.\n\t */\n\tisScheduled(): boolean {\n\t\treturn this.timeoutToken !== -1;\n\t}\n\n\tprivate onTimeout() {\n\t\tthis.timeoutToken = -1;\n\t\tif (this.runner) {\n\t\t\tthis.runner();\n\t\t}\n\t}\n}\n\nexport function nfcall(fn: Function, ...args: any[]): Promise;\nexport function nfcall<T>(fn: Function, ...args: any[]): TPromise<T>;\nexport function nfcall(fn: Function, ...args: any[]): any {\n\treturn new Promise((c, e) => fn(...args, (err, result) => err ? e(err) : c(result)));\n}\n\nexport function ninvoke(thisArg: any, fn: Function, ...args: any[]): Promise;\nexport function ninvoke<T>(thisArg: any, fn: Function, ...args: any[]): TPromise<T>;\nexport function ninvoke(thisArg: any, fn: Function, ...args: any[]): any {\n\treturn new Promise((c, e) => fn.call(thisArg, ...args, (err, result) => err ? e(err) : c(result)));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {ICursorStateComputer, IEditableTextModel, IIdentifiedSingleEditOperation} from 'vs/editor/common/editorCommon';\nimport {Selection} from 'vs/editor/common/core/selection';\n\ninterface IEditOperation {\n\toperations: IIdentifiedSingleEditOperation[];\n}\n\ninterface IStackElement {\n\tbeforeVersionId: number;\n\tbeforeCursorState: Selection[];\n\n\teditOperations: IEditOperation[];\n\n\tafterCursorState: Selection[];\n\tafterVersionId: number;\n}\n\nexport interface IUndoRedoResult {\n\tselections: Selection[];\n\trecordedVersionId: number;\n}\n\nexport class EditStack {\n\n\tprivate model:IEditableTextModel;\n\tprivate currentOpenStackElement:IStackElement;\n\tprivate past:IStackElement[];\n\tprivate future:IStackElement[];\n\n\tconstructor(model:IEditableTextModel) {\n\t\tthis.model = model;\n\t\tthis.currentOpenStackElement = null;\n\t\tthis.past = [];\n\t\tthis.future = [];\n\t}\n\n\tpublic pushStackElement(): void {\n\t\tif (this.currentOpenStackElement !== null) {\n\t\t\tthis.past.push(this.currentOpenStackElement);\n\t\t\tthis.currentOpenStackElement = null;\n\t\t}\n\t}\n\n\tpublic clear(): void {\n\t\tthis.currentOpenStackElement = null;\n\t\tthis.past = [];\n\t\tthis.future = [];\n\t}\n\n\tpublic pushEditOperation(beforeCursorState: Selection[], editOperations:IIdentifiedSingleEditOperation[], cursorStateComputer:ICursorStateComputer): Selection[] {\n\t\t// No support for parallel universes :(\n\t\tthis.future = [];\n\n\t\tif (!this.currentOpenStackElement) {\n\t\t\tthis.currentOpenStackElement = {\n\t\t\t\tbeforeVersionId: this.model.getAlternativeVersionId(),\n\t\t\t\tbeforeCursorState: beforeCursorState,\n\t\t\t\teditOperations: [],\n\t\t\t\tafterCursorState: null,\n\t\t\t\tafterVersionId: -1\n\t\t\t};\n\t\t}\n\n\t\tvar inverseEditOperation:IEditOperation = {\n\t\t\toperations: this.model.applyEdits(editOperations)\n\t\t};\n\n\t\tthis.currentOpenStackElement.editOperations.push(inverseEditOperation);\n\t\ttry {\n\t\t\tthis.currentOpenStackElement.afterCursorState = cursorStateComputer ? cursorStateComputer(inverseEditOperation.operations) : null;\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\tthis.currentOpenStackElement.afterCursorState = null;\n\t\t}\n\t\tthis.currentOpenStackElement.afterVersionId = this.model.getVersionId();\n\t\treturn this.currentOpenStackElement.afterCursorState;\n\t}\n\n\tpublic undo(): IUndoRedoResult {\n\n\t\tthis.pushStackElement();\n\n\t\tif (this.past.length > 0) {\n\t\t\tvar pastStackElement = this.past.pop();\n\n\t\t\ttry {\n\t\t\t\t// Apply all operations in reverse order\n\t\t\t\tfor (var i = pastStackElement.editOperations.length - 1; i >= 0; i--) {\n\t\t\t\t\tpastStackElement.editOperations[i] = {\n\t\t\t\t\t\toperations: this.model.applyEdits(pastStackElement.editOperations[i].operations)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch(e) {\n\t\t\t\tthis.clear();\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tthis.future.push(pastStackElement);\n\n\t\t\treturn {\n\t\t\t\tselections: pastStackElement.beforeCursorState,\n\t\t\t\trecordedVersionId: pastStackElement.beforeVersionId\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic redo(): IUndoRedoResult {\n\n\t\tif (this.future.length > 0) {\n\t\t\tif (this.currentOpenStackElement) {\n\t\t\t\tthrow new Error('How is this possible?');\n\t\t\t}\n\n\t\t\tvar futureStackElement = this.future.pop();\n\n\t\t\ttry {\n\t\t\t\t// Apply all operations\n\t\t\t\tfor (var i = 0; i < futureStackElement.editOperations.length; i++) {\n\t\t\t\t\tfutureStackElement.editOperations[i] = {\n\t\t\t\t\t\toperations: this.model.applyEdits(futureStackElement.editOperations[i].operations)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch(e) {\n\t\t\t\tthis.clear();\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tthis.past.push(futureStackElement);\n\n\t\t\treturn {\n\t\t\t\tselections: futureStackElement.afterCursorState,\n\t\t\t\trecordedVersionId: futureStackElement.afterVersionId\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport * as strings from 'vs/base/common/strings';\nimport {ViewLineToken} from 'vs/editor/common/core/viewLineToken';\nimport {LineToken} from 'vs/editor/common/model/lineToken';\n\nconst START_INDEX_MASK = 0xffffffff;\nconst TYPE_MASK = 0xffff;\nconst START_INDEX_OFFSET = 1;\nconst TYPE_OFFSET = Math.pow(2, 32);\n\nconst DEFAULT_VIEW_TOKEN = new ViewLineToken(0, '');\nconst INFLATED_TOKENS_EMPTY_TEXT:ViewLineToken[] = [];\nconst DEFLATED_TOKENS_EMPTY_TEXT:number[] = [];\nconst INFLATED_TOKENS_NON_EMPTY_TEXT:ViewLineToken[] = [DEFAULT_VIEW_TOKEN];\nconst DEFLATED_TOKENS_NON_EMPTY_TEXT:number[] = [0];\n\nexport class TokensInflatorMap {\n\n\tpublic _inflate:string[];\n\n\tpublic _deflate: {\n\t\t[token:string]:number;\n\t};\n\n\tconstructor() {\n\t\tthis._inflate = [ '' ];\n\t\tthis._deflate = { '': 0 };\n\t}\n}\n\nexport class TokensBinaryEncoding {\n\tpublic static START_INDEX_MASK = START_INDEX_MASK;\n\tpublic static TYPE_MASK = TYPE_MASK;\n\tpublic static START_INDEX_OFFSET = START_INDEX_OFFSET;\n\tpublic static TYPE_OFFSET = TYPE_OFFSET;\n\n\tpublic static deflateArr(map:TokensInflatorMap, tokens:LineToken[]): number[] {\n\t\tif (tokens.length === 0) {\n\t\t\treturn DEFLATED_TOKENS_EMPTY_TEXT;\n\t\t}\n\t\tif (tokens.length === 1 && tokens[0].startIndex === 0 && !tokens[0].type) {\n\t\t\treturn DEFLATED_TOKENS_NON_EMPTY_TEXT;\n\t\t}\n\n\t\tvar i:number,\n\t\t\tlen:number,\n\t\t\tdeflatedToken:number,\n\t\t\tdeflated:number,\n\t\t\ttoken:LineToken,\n\t\t\tinflateMap = map._inflate,\n\t\t\tdeflateMap = map._deflate,\n\t\t\tprevStartIndex:number = -1,\n\t\t\tresult:number[] = new Array(tokens.length);\n\n\t\tfor (i = 0, len = tokens.length; i < len; i++) {\n\t\t\ttoken = tokens[i];\n\n\t\t\tif (token.startIndex <= prevStartIndex) {\n\t\t\t\ttoken.startIndex = prevStartIndex + 1;\n\t\t\t\tonUnexpectedError({\n\t\t\t\t\tmessage: 'Invalid tokens detected',\n\t\t\t\t\ttokens: tokens\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (deflateMap.hasOwnProperty(token.type)) {\n\t\t\t\tdeflatedToken = deflateMap[token.type];\n\t\t\t} else {\n\t\t\t\tdeflatedToken = inflateMap.length;\n\t\t\t\tdeflateMap[token.type] = deflatedToken;\n\t\t\t\tinflateMap.push(token.type);\n\t\t\t}\n\n\t\t\t// http://stackoverflow.com/a/2803010\n\t\t\t// All numbers in JavaScript are actually IEEE-754 compliant floating-point doubles.\n\t\t\t// These have a 53-bit mantissa which should mean that any integer value with a magnitude\n\t\t\t// of approximately 9 quadrillion or less -- more specifically, 9,007,199,254,740,991 --\n\t\t\t// will be represented accurately.\n\n\t\t\t// http://stackoverflow.com/a/6729252\n\t\t\t// Bitwise operations cast numbers to 32bit representation in JS\n\n\t\t\t// 32 bits for startIndex => up to 2^32 = 4,294,967,296\n\t\t\t// 16 bits for token => up to 2^16 = 65,536\n\n\t\t\t// [token][startIndex]\n\t\t\tdeflated = deflatedToken * TYPE_OFFSET + token.startIndex * START_INDEX_OFFSET;\n\n\t\t\tresult[i] = deflated;\n\n\t\t\tprevStartIndex = token.startIndex;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic static getStartIndex(binaryEncodedToken:number): number {\n\t\treturn (binaryEncodedToken / START_INDEX_OFFSET) & START_INDEX_MASK;\n\t}\n\n\tpublic static getType(map:TokensInflatorMap, binaryEncodedToken:number): string {\n\t\tvar deflatedType = (binaryEncodedToken / TYPE_OFFSET) & TYPE_MASK;\n\t\tif (deflatedType === 0) {\n\t\t\treturn strings.empty;\n\t\t}\n\t\treturn map._inflate[deflatedType];\n\t}\n\n\tpublic static inflateArr(map:TokensInflatorMap, binaryEncodedTokens:number[]): ViewLineToken[] {\n\t\tif (binaryEncodedTokens.length === 0) {\n\t\t\treturn INFLATED_TOKENS_EMPTY_TEXT;\n\t\t}\n\t\tif (binaryEncodedTokens.length === 1 && binaryEncodedTokens[0] === 0) {\n\t\t\treturn INFLATED_TOKENS_NON_EMPTY_TEXT;\n\t\t}\n\n\t\tlet result: ViewLineToken[] = [];\n\t\tconst inflateMap = map._inflate;\n\n\t\tfor (let i = 0, len = binaryEncodedTokens.length; i < len; i++) {\n\t\t\tlet deflated = binaryEncodedTokens[i];\n\n\t\t\tlet startIndex = (deflated / START_INDEX_OFFSET) & START_INDEX_MASK;\n\t\t\tlet deflatedType = (deflated / TYPE_OFFSET) & TYPE_MASK;\n\n\t\t\tresult.push(new ViewLineToken(startIndex, inflateMap[deflatedType]));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic static findIndexOfOffset(binaryEncodedTokens:number[], offset:number): number {\n\t\treturn this.findIndexInSegmentsArray(binaryEncodedTokens, offset);\n\t}\n\n\tpublic static sliceAndInflate(map:TokensInflatorMap, binaryEncodedTokens:number[], startOffset:number, endOffset:number, deltaStartIndex:number): ViewLineToken[] {\n\t\tif (binaryEncodedTokens.length === 0) {\n\t\t\treturn INFLATED_TOKENS_EMPTY_TEXT;\n\t\t}\n\t\tif (binaryEncodedTokens.length === 1 && binaryEncodedTokens[0] === 0) {\n\t\t\treturn INFLATED_TOKENS_NON_EMPTY_TEXT;\n\t\t}\n\n\t\tlet startIndex = this.findIndexInSegmentsArray(binaryEncodedTokens, startOffset);\n\t\tlet result: ViewLineToken[] = [];\n\t\tconst inflateMap = map._inflate;\n\n\t\tlet originalToken = binaryEncodedTokens[startIndex];\n\t\tlet deflatedType = (originalToken / TYPE_OFFSET) & TYPE_MASK;\n\t\tlet newStartIndex = 0;\n\t\tresult.push(new ViewLineToken(newStartIndex, inflateMap[deflatedType]));\n\n\t\tfor (let i = startIndex + 1, len = binaryEncodedTokens.length; i < len; i++) {\n\t\t\toriginalToken = binaryEncodedTokens[i];\n\t\t\tlet originalStartIndex = (originalToken / START_INDEX_OFFSET) & START_INDEX_MASK;\n\n\t\t\tif (originalStartIndex >= endOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tdeflatedType = (originalToken / TYPE_OFFSET) & TYPE_MASK;\n\t\t\tnewStartIndex = originalStartIndex - startOffset + deltaStartIndex;\n\t\t\tresult.push(new ViewLineToken(newStartIndex, inflateMap[deflatedType]));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static findIndexInSegmentsArray(arr:number[], desiredIndex: number):number {\n\n\t\tvar low = 0,\n\t\t\thigh = arr.length - 1,\n\t\t\tmid:number,\n\t\t\tvalue:number;\n\n\t\twhile (low < high) {\n\n\t\t\tmid = low + Math.ceil((high - low)/2);\n\n\t\t\tvalue = arr[mid] & 0xffffffff;\n\n\t\t\tif (value > desiredIndex) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlow = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from 'vs/base/common/strings';\nimport {ILineTokens, IReadOnlyLineMarker} from 'vs/editor/common/editorCommon';\nimport {IMode, IState} from 'vs/editor/common/modes';\nimport {TokensBinaryEncoding, TokensInflatorMap} from 'vs/editor/common/model/tokensBinaryEncoding';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\nimport {LineToken} from 'vs/editor/common/model/lineToken';\nimport {ViewLineToken} from 'vs/editor/common/core/viewLineToken';\n\nconst START_INDEX_MASK = TokensBinaryEncoding.START_INDEX_MASK;\nconst TYPE_MASK = TokensBinaryEncoding.TYPE_MASK;\nconst START_INDEX_OFFSET = TokensBinaryEncoding.START_INDEX_OFFSET;\nconst TYPE_OFFSET = TokensBinaryEncoding.TYPE_OFFSET;\n\nexport interface ILineEdit {\n\tstartColumn: number;\n\tendColumn: number;\n\ttext: string;\n\tforceMoveMarkers: boolean;\n}\n\nexport interface ILineMarker extends IReadOnlyLineMarker {\n\tid:string;\n\tcolumn:number;\n\tstickToPreviousCharacter:boolean;\n\n\toldLineNumber:number;\n\toldColumn:number;\n\n\tline:ModelLine;\n}\n\nexport interface IChangedMarkers {\n\t[markerId:string]: boolean;\n}\n\nexport interface ITextWithMarkers {\n\ttext: string;\n\tmarkers: ILineMarker[];\n}\n\ninterface ITokensAdjuster {\n\tadjust(toColumn:number, delta:number, minimumAllowedColumn:number): void;\n\tfinish(delta:number, lineTextLength:number): void;\n}\n\ninterface IMarkersAdjuster {\n\tadjustDelta(toColumn:number, delta:number, minimumAllowedColumn:number, moveSemantics:MarkerMoveSemantics): void;\n\tadjustSet(toColumn:number, newColumn:number, moveSemantics:MarkerMoveSemantics): void;\n\tfinish(delta:number, lineTextLength:number): void;\n}\n\nvar NO_OP_TOKENS_ADJUSTER: ITokensAdjuster = {\n\tadjust: () => {},\n\tfinish: () => {}\n};\nvar NO_OP_MARKERS_ADJUSTER: IMarkersAdjuster = {\n\tadjustDelta: () => {},\n\tadjustSet: () => {},\n\tfinish: () => {}\n};\n\nenum MarkerMoveSemantics {\n\tMarkerDefined = 0,\n\tForceMove = 1,\n\tForceStay = 2\n}\n\nexport class ModelLine {\n\tprivate _lineNumber:number;\n\tpublic get lineNumber():number { return this._lineNumber; }\n\n\tprivate _text:string;\n\tpublic get text():string { return this._text; }\n\n\tprivate _isInvalid:boolean;\n\tpublic get isInvalid():boolean { return this._isInvalid; }\n\tpublic set isInvalid(value:boolean) { this._isInvalid = value; }\n\n\tprivate _state:IState;\n\tprivate _modeTransitions: ModeTransition[];\n\tprivate _lineTokens: LineTokens;\n\tprivate _markers:ILineMarker[];\n\n\tconstructor(lineNumber:number, text:string) {\n\t\tthis._lineNumber = lineNumber|0;\n\t\tthis._text = text;\n\t\tthis._isInvalid = false;\n\t\tthis._state = null;\n\t\tthis._modeTransitions = null;\n\t\tthis._lineTokens = null;\n\t\tthis._markers = null;\n\t}\n\n\t// --- BEGIN STATE\n\n\tpublic setState(state: IState): void {\n\t\tthis._state = state;\n\t}\n\n\tpublic getState(): IState {\n\t\treturn this._state || null;\n\t}\n\n\t// --- END STATE\n\n\t// --- BEGIN MODE TRANSITIONS\n\n\tpublic getModeTransitions(topLevelMode:IMode): ModeTransition[] {\n\t\tif (this._modeTransitions) {\n\t\t\treturn this._modeTransitions;\n\t\t} else {\n\t\t\treturn [new ModeTransition(0, topLevelMode)];\n\t\t}\n\t}\n\n\t// --- END MODE TRANSITIONS\n\n\t// --- BEGIN TOKENS\n\n\tpublic setTokens(map: TokensInflatorMap, tokens: LineToken[], topLevelMode:IMode, modeTransitions:ModeTransition[]): void {\n\t\tthis._lineTokens = toLineTokensFromInflated(map, tokens, this._text.length);\n\t\tthis._modeTransitions = toModeTransitions(topLevelMode, modeTransitions);\n\t}\n\n\tprivate _setLineTokensFromDeflated(map:TokensInflatorMap, tokens:number[]): void {\n\t\tthis._lineTokens = toLineTokensFromDeflated(map, tokens, this._text.length);\n\t}\n\n\tpublic getTokens(): ILineTokens {\n\t\tif (this._lineTokens) {\n\t\t\treturn this._lineTokens;\n\t\t}\n\t\tif (this._text.length === 0) {\n\t\t\treturn EmptyLineTokens.INSTANCE;\n\t\t}\n\t\treturn DefaultLineTokens.INSTANCE;\n\t}\n\n\t// --- END TOKENS\n\n\tprivate _createTokensAdjuster(): ITokensAdjuster {\n\t\tif (!this._lineTokens) {\n\t\t\t// This line does not have real tokens, so there is nothing to adjust\n\t\t\treturn NO_OP_TOKENS_ADJUSTER;\n\t\t}\n\n\t\tvar lineTokens = this._lineTokens;\n\n\t\tlet tokens = lineTokens.getBinaryEncodedTokens();\n\t\tlet tokensLength = tokens.length;\n\t\tlet tokensIndex = 0;\n\t\tlet currentTokenStartIndex = 0;\n\n\t\tlet adjust = (toColumn:number, delta:number, minimumAllowedColumn:number) => {\n\t\t\t// console.log('before call: tokensIndex: ' + tokensIndex + ': ' + String(this.getTokens()));\n\t\t\t// console.log('adjustTokens: ' + toColumn + ' with delta: ' + delta + ' and [' + minimumAllowedColumn + ']');\n\t\t\t// console.log('currentTokenStartIndex: ' + currentTokenStartIndex);\n\t\t\tlet minimumAllowedIndex = minimumAllowedColumn - 1;\n\n\t\t\twhile (currentTokenStartIndex < toColumn && tokensIndex < tokensLength) {\n\n\t\t\t\tif (currentTokenStartIndex > 0 && delta !== 0) {\n\t\t\t\t\t// adjust token's `startIndex` by `delta`\n\t\t\t\t\tlet deflatedType = (tokens[tokensIndex] / TYPE_OFFSET) & TYPE_MASK;\n\t\t\t\t\tlet newStartIndex = Math.max(minimumAllowedIndex, currentTokenStartIndex + delta);\n\t\t\t\t\tlet newToken = deflatedType * TYPE_OFFSET + newStartIndex * START_INDEX_OFFSET;\n\n\t\t\t\t\tif (delta < 0) {\n\t\t\t\t\t\t// pop all previous tokens that have become `collapsed`\n\t\t\t\t\t\twhile (tokensIndex > 0) {\n\t\t\t\t\t\t\tlet prevTokenStartIndex = (tokens[tokensIndex - 1] / START_INDEX_OFFSET) & START_INDEX_MASK;\n\t\t\t\t\t\t\tif (prevTokenStartIndex >= newStartIndex) {\n\t\t\t\t\t\t\t\t// Token at `tokensIndex` - 1 is now `collapsed` => pop it\n\t\t\t\t\t\t\t\ttokens.splice(tokensIndex - 1, 1);\n\t\t\t\t\t\t\t\ttokensLength--;\n\t\t\t\t\t\t\t\ttokensIndex--;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttokens[tokensIndex] = newToken;\n\t\t\t\t}\n\n\t\t\t\ttokensIndex++;\n\n\t\t\t\tif (tokensIndex < tokensLength) {\n\t\t\t\t\tcurrentTokenStartIndex = (tokens[tokensIndex] / START_INDEX_OFFSET) & START_INDEX_MASK;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log('after call: tokensIndex: ' + tokensIndex + ': ' + String(this.getTokens()));\n\t\t};\n\n\t\tlet finish = (delta:number, lineTextLength:number) => {\n\t\t\tadjust(Number.MAX_VALUE, delta, 1);\n\t\t};\n\n\t\treturn {\n\t\t\tadjust: adjust,\n\t\t\tfinish: finish\n\t\t};\n\t}\n\n\tprivate _setText(text:string): void {\n\t\tthis._text = text;\n\n\t\tif (this._lineTokens) {\n\t\t\tlet map = this._lineTokens.getBinaryEncodedTokensMap(),\n\t\t\t\ttokens = this._lineTokens.getBinaryEncodedTokens(),\n\t\t\t\tlineTextLength = this._text.length;\n\n\t\t\t// Remove overflowing tokens\n\t\t\twhile (tokens.length > 0) {\n\t\t\t\tlet lastTokenStartIndex = (tokens[tokens.length - 1] / START_INDEX_OFFSET) & START_INDEX_MASK;\n\t\t\t\tif (lastTokenStartIndex < lineTextLength) {\n\t\t\t\t\t// Valid token\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// This token now overflows the text => remove it\n\t\t\t\ttokens.pop();\n\t\t\t}\n\n\t\t\tthis._setLineTokensFromDeflated(map, tokens);\n\t\t}\n\t}\n\n\t// private _printMarkers(): string {\n\t// \tif (!this._markers) {\n\t// \t\treturn '[]';\n\t// \t}\n\t// \tif (this._markers.length === 0) {\n\t// \t\treturn '[]';\n\t// \t}\n\n\t// \tvar markers = this._markers;\n\n\t// \tvar printMarker = (m:ILineMarker) => {\n\t// \t\tif (m.stickToPreviousCharacter) {\n\t// \t\t\treturn '|' + m.column;\n\t// \t\t}\n\t// \t\treturn m.column + '|';\n\t// \t};\n\t// \treturn '[' + markers.map(printMarker).join(', ') + ']';\n\t// }\n\n\tprivate _createMarkersAdjuster(changedMarkers:IChangedMarkers): IMarkersAdjuster {\n\t\tif (!this._markers) {\n\t\t\treturn NO_OP_MARKERS_ADJUSTER;\n\t\t}\n\t\tif (this._markers.length === 0) {\n\t\t\treturn NO_OP_MARKERS_ADJUSTER;\n\t\t}\n\n\t\tthis._markers.sort(ModelLine._compareMarkers);\n\n\t\tvar markers = this._markers;\n\t\tvar markersLength = markers.length;\n\t\tvar markersIndex = 0;\n\t\tvar marker = markers[markersIndex];\n\n\t\t// console.log('------------- INITIAL MARKERS: ' + this._printMarkers());\n\n\t\tlet adjustMarkerBeforeColumn = (toColumn:number, moveSemantics:MarkerMoveSemantics) => {\n\t\t\tif (marker.column < toColumn) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (marker.column > toColumn) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (moveSemantics === MarkerMoveSemantics.ForceMove) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (moveSemantics === MarkerMoveSemantics.ForceStay) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn marker.stickToPreviousCharacter;\n\t\t};\n\n\t\tlet adjustDelta = (toColumn:number, delta:number, minimumAllowedColumn:number, moveSemantics:MarkerMoveSemantics) => {\n\t\t\t// console.log('------------------------------');\n\t\t\t// console.log('adjustDelta called: toColumn: ' + toColumn + ', delta: ' + delta + ', minimumAllowedColumn: ' + minimumAllowedColumn + ', moveSemantics: ' + MarkerMoveSemantics[moveSemantics]);\n\t\t\t// console.log('BEFORE::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\n\t\t\twhile (markersIndex < markersLength && adjustMarkerBeforeColumn(toColumn, moveSemantics)) {\n\t\t\t\tif (delta !== 0) {\n\t\t\t\t\tlet newColumn = Math.max(minimumAllowedColumn, marker.column + delta);\n\t\t\t\t\tif (marker.column !== newColumn) {\n\t\t\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\t\t\tmarker.column = newColumn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmarkersIndex++;\n\t\t\t\tif (markersIndex < markersLength) {\n\t\t\t\t\tmarker = markers[markersIndex];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log('AFTER::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\t\t};\n\n\t\tlet adjustSet = (toColumn:number, newColumn:number, moveSemantics:MarkerMoveSemantics) => {\n\t\t\t// console.log('------------------------------');\n\t\t\t// console.log('adjustSet called: toColumn: ' + toColumn + ', newColumn: ' + newColumn + ', moveSemantics: ' + MarkerMoveSemantics[moveSemantics]);\n\t\t\t// console.log('BEFORE::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\n\t\t\twhile (markersIndex < markersLength && adjustMarkerBeforeColumn(toColumn, moveSemantics)) {\n\t\t\t\tif (marker.column !== newColumn) {\n\t\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\t\tmarker.column = newColumn;\n\t\t\t\t}\n\n\t\t\t\tmarkersIndex++;\n\t\t\t\tif (markersIndex < markersLength) {\n\t\t\t\t\tmarker = markers[markersIndex];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log('AFTER::: markersIndex: ' + markersIndex + ' : ' + this._printMarkers());\n\t\t};\n\n\t\tlet finish = (delta:number, lineTextLength:number) => {\n\t\t\tadjustDelta(Number.MAX_VALUE, delta, 1, MarkerMoveSemantics.MarkerDefined);\n\n\t\t\t// console.log('------------- FINAL MARKERS: ' + this._printMarkers());\n\t\t};\n\n\t\treturn {\n\t\t\tadjustDelta: adjustDelta,\n\t\t\tadjustSet: adjustSet,\n\t\t\tfinish: finish\n\t\t};\n\t}\n\n\tpublic applyEdits(changedMarkers: IChangedMarkers, edits:ILineEdit[]): number {\n\t\tlet deltaColumn = 0;\n\t\tlet resultText = this._text;\n\n\t\tlet tokensAdjuster = this._createTokensAdjuster();\n\t\tlet markersAdjuster = this._createMarkersAdjuster(changedMarkers);\n\n\t\tfor (let i = 0, len = edits.length; i < len; i++) {\n\t\t\tlet edit = edits[i];\n\n\t\t\t// console.log();\n\t\t\t// console.log('=============================');\n\t\t\t// console.log('EDIT #' + i + ' [ ' + edit.startColumn + ' -> ' + edit.endColumn + ' ] : <<<' + edit.text + '>>>, forceMoveMarkers: ' + edit.forceMoveMarkers);\n\t\t\t// console.log('deltaColumn: ' + deltaColumn);\n\n\t\t\tlet startColumn = deltaColumn + edit.startColumn;\n\t\t\tlet endColumn = deltaColumn + edit.endColumn;\n\t\t\tlet deletingCnt = endColumn - startColumn;\n\t\t\tlet insertingCnt = edit.text.length;\n\n\t\t\t// Adjust tokens & markers before this edit\n\t\t\t// console.log('Adjust tokens & markers before this edit');\n\t\t\ttokensAdjuster.adjust(edit.startColumn - 1, deltaColumn, 1);\n\t\t\tmarkersAdjuster.adjustDelta(edit.startColumn, deltaColumn, 1, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : (deletingCnt > 0 ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined));\n\n\t\t\t// Adjust tokens & markers for the common part of this edit\n\t\t\tlet commonLength = Math.min(deletingCnt, insertingCnt);\n\t\t\tif (commonLength > 0) {\n\t\t\t\t// console.log('Adjust tokens & markers for the common part of this edit');\n\t\t\t\ttokensAdjuster.adjust(edit.startColumn - 1 + commonLength, deltaColumn, startColumn);\n\n\t\t\t\tif (!edit.forceMoveMarkers) {\n\t\t\t\t\tmarkersAdjuster.adjustDelta(edit.startColumn + commonLength, deltaColumn, startColumn, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : (deletingCnt > insertingCnt ? MarkerMoveSemantics.ForceStay : MarkerMoveSemantics.MarkerDefined));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Perform the edit & update `deltaColumn`\n\t\t\tresultText = resultText.substring(0, startColumn - 1) + edit.text + resultText.substring(endColumn - 1);\n\t\t\tdeltaColumn += insertingCnt - deletingCnt;\n\n\t\t\t// Adjust tokens & markers inside this edit\n\t\t\t// console.log('Adjust tokens & markers inside this edit');\n\t\t\ttokensAdjuster.adjust(edit.endColumn, deltaColumn, startColumn);\n\t\t\tmarkersAdjuster.adjustSet(edit.endColumn, startColumn + insertingCnt, edit.forceMoveMarkers ? MarkerMoveSemantics.ForceMove : MarkerMoveSemantics.MarkerDefined);\n\t\t}\n\n\t\t// Wrap up tokens & markers; adjust remaining if needed\n\t\ttokensAdjuster.finish(deltaColumn, resultText.length);\n\t\tmarkersAdjuster.finish(deltaColumn, resultText.length);\n\n\t\t// Save the resulting text\n\t\tthis._setText(resultText);\n\n\t\treturn deltaColumn;\n\t}\n\n\tpublic split(changedMarkers: IChangedMarkers, splitColumn:number, forceMoveMarkers:boolean): ModelLine {\n\t\t// console.log('--> split @ ' + splitColumn + '::: ' + this._printMarkers());\n\t\tvar myText = this._text.substring(0, splitColumn - 1);\n\t\tvar otherText = this._text.substring(splitColumn - 1);\n\n\t\tvar otherMarkers: ILineMarker[] = null;\n\n\t\tif (this._markers) {\n\t\t\tthis._markers.sort(ModelLine._compareMarkers);\n\t\t\tfor (let i = 0, len = this._markers.length; i < len; i++) {\n\t\t\t\tlet marker = this._markers[i];\n\n\t\t\t\tif (\n\t\t\t\t\tmarker.column > splitColumn\n\t\t\t\t\t|| (\n\t\t\t\t\t\tmarker.column === splitColumn\n\t\t\t\t\t\t&& (\n\t\t\t\t\t\t\tforceMoveMarkers\n\t\t\t\t\t\t\t|| !marker.stickToPreviousCharacter\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tlet myMarkers = this._markers.slice(0, i);\n\t\t\t\t\totherMarkers = this._markers.slice(i);\n\t\t\t\t\tthis._markers = myMarkers;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (otherMarkers) {\n\t\t\t\tfor (let i = 0, len = otherMarkers.length; i < len; i++) {\n\t\t\t\t\tlet marker = otherMarkers[i];\n\n\t\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\t\tmarker.column -= splitColumn - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setText(myText);\n\n\t\tvar otherLine = new ModelLine(this._lineNumber + 1, otherText);\n\t\tif (otherMarkers) {\n\t\t\totherLine.addMarkers(otherMarkers);\n\t\t}\n\t\treturn otherLine;\n\t}\n\n\tpublic append(changedMarkers: IChangedMarkers, other:ModelLine): void {\n\t\t// console.log('--> append: THIS :: ' + this._printMarkers());\n\t\t// console.log('--> append: OTHER :: ' + this._printMarkers());\n\t\tvar thisTextLength = this._text.length;\n\t\tthis._setText(this._text + other._text);\n\n\t\tlet otherLineTokens = other._lineTokens;\n\t\tif (otherLineTokens) {\n\t\t\t// Other has real tokens\n\t\t\tlet otherTokens = otherLineTokens.getBinaryEncodedTokens();\n\n\t\t\t// Adjust other tokens\n\t\t\tif (thisTextLength > 0) {\n\t\t\t\tfor (let i = 0, len = otherTokens.length; i < len; i++) {\n\t\t\t\t\tlet token = otherTokens[i];\n\n\t\t\t\t\tlet deflatedStartIndex = (token / START_INDEX_OFFSET) & START_INDEX_MASK;\n\t\t\t\t\tlet deflatedType = (token / TYPE_OFFSET) & TYPE_MASK;\n\t\t\t\t\tlet newStartIndex = deflatedStartIndex + thisTextLength;\n\t\t\t\t\tlet newToken = deflatedType * TYPE_OFFSET + newStartIndex * START_INDEX_OFFSET;\n\n\t\t\t\t\totherTokens[i] = newToken;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Append other tokens\n\t\t\tlet myLineTokens = this._lineTokens;\n\t\t\tif (myLineTokens) {\n\t\t\t\t// I have real tokens\n\t\t\t\tthis._setLineTokensFromDeflated(myLineTokens.getBinaryEncodedTokensMap(), myLineTokens.getBinaryEncodedTokens().concat(otherTokens));\n\t\t\t} else {\n\t\t\t\t// I don't have real tokens\n\t\t\t\tthis._setLineTokensFromDeflated(otherLineTokens.getBinaryEncodedTokensMap(), otherTokens);\n\t\t\t}\n\t\t}\n\n\t\tif (other._markers) {\n\t\t\t// Other has markers\n\t\t\tlet otherMarkers = other._markers;\n\n\t\t\t// Adjust other markers\n\t\t\tfor (let i = 0, len = otherMarkers.length; i < len; i++) {\n\t\t\t\tlet marker = otherMarkers[i];\n\n\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || other.lineNumber;\n\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\tmarker.column += thisTextLength;\n\t\t\t}\n\n\t\t\tthis.addMarkers(otherMarkers);\n\t\t}\n\t}\n\n\tpublic addMarker(marker:ILineMarker): void {\n\t\tmarker.line = this;\n\t\tif (!this._markers) {\n\t\t\tthis._markers = [marker];\n\t\t} else {\n\t\t\tthis._markers.push(marker);\n\t\t}\n\t}\n\n\tpublic addMarkers(markers:ILineMarker[]): void {\n\t\tif (markers.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar i:number,\n\t\t\tlen:number;\n\n\t\tfor (i = 0, len = markers.length; i < len; i++) {\n\t\t\tmarkers[i].line = this;\n\t\t}\n\n\t\tif (!this._markers) {\n\t\t\tthis._markers = markers.slice(0);\n\t\t} else {\n\t\t\tthis._markers = this._markers.concat(markers);\n\t\t}\n\t}\n\n\tprivate static _compareMarkers(a:ILineMarker, b:ILineMarker): number {\n\t\tif (a.column === b.column) {\n\t\t\treturn (a.stickToPreviousCharacter ? 0 : 1) - (b.stickToPreviousCharacter ? 0 : 1);\n\t\t}\n\t\treturn a.column - b.column;\n\t}\n\n\tpublic removeMarker(marker:ILineMarker): void {\n\t\tif (!this._markers) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = this._indexOfMarkerId(marker.id);\n\t\tif (index >= 0) {\n\t\t\tmarker.line = null;\n\t\t\tthis._markers.splice(index, 1);\n\t\t}\n\t\tif (this._markers.length === 0) {\n\t\t\tthis._markers = null;\n\t\t}\n\t}\n\n\tpublic removeMarkers(deleteMarkers: {[markerId:string]:boolean;}): void {\n\t\tif (!this._markers) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0, len = this._markers.length; i < len; i++) {\n\t\t\tlet marker = this._markers[i];\n\n\t\t\tif (deleteMarkers[marker.id]) {\n\t\t\t\tmarker.line = null;\n\t\t\t\tthis._markers.splice(i, 1);\n\t\t\t\tlen--;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif (this._markers.length === 0) {\n\t\t\tthis._markers = null;\n\t\t}\n\t}\n\n\tpublic getMarkers(): ILineMarker[] {\n\t\tif (!this._markers) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._markers.slice(0);\n\t}\n\n\tpublic updateLineNumber(changedMarkers: IChangedMarkers, newLineNumber: number): void {\n\t\tif (this._markers) {\n\t\t\tvar markers = this._markers,\n\t\t\t\ti: number,\n\t\t\t\tlen: number,\n\t\t\t\tmarker: ILineMarker;\n\n\t\t\tfor (i = 0, len = markers.length; i < len; i++) {\n\t\t\t\tmarker = markers[i];\n\n\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || this._lineNumber;\n\t\t\t}\n\t\t}\n\n\t\tthis._lineNumber = newLineNumber;\n\t}\n\n\tpublic deleteLine(changedMarkers: IChangedMarkers, setMarkersColumn:number, setMarkersOldLineNumber:number): ILineMarker[] {\n\t\t// console.log('--> deleteLine: ');\n\t\tif (this._markers) {\n\t\t\tvar markers = this._markers,\n\t\t\t\ti: number,\n\t\t\t\tlen: number,\n\t\t\t\tmarker: ILineMarker;\n\n\t\t\t// Mark all these markers as changed\n\t\t\tfor (i = 0, len = markers.length; i < len; i++) {\n\t\t\t\tmarker = markers[i];\n\n\t\t\t\tchangedMarkers[marker.id] = true;\n\t\t\t\tmarker.oldColumn = marker.oldColumn || marker.column;\n\t\t\t\tmarker.oldLineNumber = marker.oldLineNumber || setMarkersOldLineNumber;\n\t\t\t\tmarker.column = setMarkersColumn;\n\t\t\t}\n\n\t\t\treturn markers;\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate _indexOfMarkerId(markerId:string): number {\n\t\tlet markers = this._markers;\n\t\tfor (let i = 0, len = markers.length; i < len; i++) {\n\t\t\tif (markers[i].id === markerId) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction toLineTokensFromInflated(map:TokensInflatorMap, tokens:LineToken[], textLength:number): LineTokens {\n\tif (textLength === 0) {\n\t\treturn null;\n\t}\n\tif (!tokens || tokens.length === 0) {\n\t\treturn null;\n\t}\n\tif (tokens.length === 1) {\n\t\tif (tokens[0].startIndex === 0 && tokens[0].type === '') {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tlet deflated = TokensBinaryEncoding.deflateArr(map, tokens);\n\treturn new LineTokens(map, deflated);\n}\n\nfunction toLineTokensFromDeflated(map:TokensInflatorMap, tokens:number[], textLength:number): LineTokens {\n\tif (textLength === 0) {\n\t\treturn null;\n\t}\n\tif (!tokens || tokens.length === 0) {\n\t\treturn null;\n\t}\n\tif (tokens.length === 1) {\n\t\tif (tokens[0] === 0) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn new LineTokens(map, tokens);\n}\n\nexport class LineTokens implements ILineTokens {\n\n\tprivate map:TokensInflatorMap;\n\tprivate _tokens:number[];\n\n\tconstructor(map:TokensInflatorMap, tokens:number[]) {\n\t\tthis.map = map;\n\t\tthis._tokens = tokens;\n\t}\n\n\tpublic getBinaryEncodedTokensMap(): TokensInflatorMap {\n\t\treturn this.map;\n\t}\n\n\tpublic getBinaryEncodedTokens(): number[] {\n\t\treturn this._tokens;\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._tokens.length;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn TokensBinaryEncoding.getStartIndex(this._tokens[tokenIndex]);\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn TokensBinaryEncoding.getType(this.map, this._tokens[tokenIndex]);\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number, textLength:number): number {\n\t\tif (tokenIndex + 1 < this._tokens.length) {\n\t\t\treturn TokensBinaryEncoding.getStartIndex(this._tokens[tokenIndex + 1]);\n\t\t}\n\t\treturn textLength;\n\t}\n\n\tpublic equals(other:ILineTokens): boolean {\n\t\tif (other instanceof LineTokens) {\n\t\t\tif (this.map !== other.map) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this._tokens.length !== other._tokens.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (let i = 0, len = this._tokens.length; i < len; i++) {\n\t\t\t\tif (this._tokens[i] !== other._tokens[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (!(other instanceof LineTokens)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn TokensBinaryEncoding.findIndexOfOffset(this._tokens, offset);\n\t}\n\n\tpublic inflate(): ViewLineToken[] {\n\t\treturn TokensBinaryEncoding.inflateArr(this.map, this._tokens);\n\t}\n\n\tpublic sliceAndInflate(startOffset:number, endOffset:number, deltaStartIndex:number): ViewLineToken[] {\n\t\treturn TokensBinaryEncoding.sliceAndInflate(this.map, this._tokens, startOffset, endOffset, deltaStartIndex);\n\t}\n\n}\n\nclass EmptyLineTokens implements ILineTokens {\n\n\tpublic static INSTANCE = new EmptyLineTokens();\n\n\tpublic getTokenCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn strings.empty;\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number, textLength:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic equals(other:ILineTokens): boolean {\n\t\treturn other === this;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic inflate(): ViewLineToken[] {\n\t\treturn [];\n\t}\n\n\tpublic sliceAndInflate(startOffset:number, endOffset:number, deltaStartIndex:number): ViewLineToken[] {\n\t\treturn [];\n\t}\n}\n\nexport class DefaultLineTokens implements ILineTokens {\n\n\tpublic static INSTANCE = new DefaultLineTokens();\n\n\tpublic getTokenCount(): number {\n\t\treturn 1;\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn strings.empty;\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number, textLength:number): number {\n\t\treturn textLength;\n\t}\n\n\tpublic equals(other:ILineTokens): boolean {\n\t\treturn this === other;\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn 0;\n\t}\n\n\tpublic inflate(): ViewLineToken[] {\n\t\treturn [new ViewLineToken(0, '')];\n\t}\n\n\tpublic sliceAndInflate(startOffset:number, endOffset:number, deltaStartIndex:number): ViewLineToken[] {\n\t\treturn [new ViewLineToken(0, '')];\n\t}\n\n}\n\nfunction toModeTransitions(topLevelMode:IMode, modeTransitions:ModeTransition[]): ModeTransition[] {\n\n\tif (!modeTransitions || modeTransitions.length === 0) {\n\t\treturn null;\n\t} else if (modeTransitions.length === 1 && modeTransitions[0].startIndex === 0 && modeTransitions[0].mode === topLevelMode) {\n\t\treturn null;\n\t}\n\n\treturn modeTransitions;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {IReadOnlyModel} from 'vs/editor/common/editorCommon';\nimport {LanguageSelector, score} from 'vs/editor/common/modes/languageSelector';\n\ninterface Entry<T> {\n\tselector: LanguageSelector;\n\tprovider: T;\n\tisBuiltin: boolean;\n\t_score: number;\n\t_time: number;\n}\n\nexport default class LanguageFeatureRegistry<T> {\n\n\tprivate _clock: number = 0;\n\tprivate _entries: Entry<T>[] = [];\n\tprivate _onDidChange: Emitter<number> = new Emitter<number>();\n\n\tconstructor() {\n\t}\n\n\tget onDidChange(): Event<number> {\n\t\treturn this._onDidChange.event;\n\t}\n\n\tregister(selector: LanguageSelector, provider: T, isBuiltin = false): IDisposable {\n\n\t\tlet entry: Entry<T> = {\n\t\t\tselector,\n\t\t\tprovider,\n\t\t\tisBuiltin,\n\t\t\t_score: -1,\n\t\t\t_time: this._clock++\n\t\t};\n\n\t\tthis._entries.push(entry);\n\t\tthis._lastCandidate = undefined;\n\t\tthis._onDidChange.fire(this._entries.length);\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tif (entry) {\n\t\t\t\t\tlet idx = this._entries.indexOf(entry);\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tthis._entries.splice(idx, 1);\n\t\t\t\t\t\tthis._lastCandidate = undefined;\n\t\t\t\t\t\tthis._onDidChange.fire(this._entries.length);\n\t\t\t\t\t\tentry = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\thas(model: IReadOnlyModel): boolean {\n\t\treturn this.all(model).length > 0;\n\t}\n\n\tall(model: IReadOnlyModel): T[] {\n\t\tif (!model || model.isTooLargeForHavingAMode()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._updateScores(model);\n\t\tconst result: T[] = [];\n\n\t\t// from registry\n\t\tfor (let entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tresult.push(entry.provider);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tordered(model: IReadOnlyModel): T[] {\n\t\tconst result: T[] = [];\n\t\tthis._orderedForEach(model, entry => result.push(entry.provider));\n\t\treturn result;\n\t}\n\n\torderedGroups(model: IReadOnlyModel): T[][] {\n\t\tconst result: T[][] = [];\n\t\tlet lastBucket: T[];\n\t\tlet lastBucketScore: number;\n\n\t\tthis._orderedForEach(model, entry => {\n\t\t\tif (lastBucket && lastBucketScore === entry._score) {\n\t\t\t\tlastBucket.push(entry.provider);\n\t\t\t} else {\n\t\t\t\tlastBucketScore = entry._score;\n\t\t\t\tlastBucket = [entry.provider];\n\t\t\t\tresult.push(lastBucket);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate _orderedForEach(model: IReadOnlyModel, callback: (provider: Entry<T>) => any): void {\n\n\t\tif (!model || model.isTooLargeForHavingAMode()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._updateScores(model);\n\n\t\tfor (let from = 0; from < this._entries.length; from++) {\n\t\t\tlet entry = this._entries[from];\n\t\t\tif (entry._score > 0) {\n\t\t\t\tcallback(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _lastCandidate: { uri: string; language: string; };\n\n\tprivate _updateScores(model: IReadOnlyModel): boolean {\n\n\t\tlet candidate = {\n\t\t\turi: model.uri.toString(),\n\t\t\tlanguage: model.getModeId()\n\t\t};\n\n\t\tif (this._lastCandidate\n\t\t\t&& this._lastCandidate.language === candidate.language\n\t\t\t&& this._lastCandidate.uri === candidate.uri) {\n\n\t\t\t// nothing has changed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lastCandidate = candidate;\n\n\t\tfor (let entry of this._entries) {\n\t\t\tentry._score = score(entry.selector, model.uri, model.getModeId());\n\t\t\tif (entry.isBuiltin && entry._score > 0) {\n\t\t\t\tentry._score = .5;\n\t\t\t\tentry._time = -1;\n\t\t\t}\n\t\t}\n\n\t\t// needs sorting\n\t\tthis._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n\t}\n\n\tprivate static _compareByScoreAndTime(a: Entry<any>, b: Entry<any>): number {\n\t\tif (a._score < b._score) {\n\t\t\treturn 1;\n\t\t} else if (a._score > b._score) {\n\t\t\treturn -1;\n\t\t} else if (a._time < b._time) {\n\t\t\treturn 1;\n\t\t} else if (a._time > b._time) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IHTMLContentElement} from 'vs/base/common/htmlContent';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IFilter} from 'vs/base/common/filters';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\nimport LanguageFeatureRegistry from 'vs/editor/common/modes/languageFeatureRegistry';\nimport {CancellationToken} from 'vs/base/common/cancellation';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\n\n/**\n * @internal\n */\nexport interface ITokenizationResult {\n\ttype?:string;\n\tdontMergeWithPrev?:boolean;\n\tnextState?:IState;\n}\n\n/**\n * @internal\n */\nexport interface IState {\n\tclone():IState;\n\tequals(other:IState):boolean;\n\tgetMode():IMode;\n\ttokenize(stream:IStream):ITokenizationResult;\n\tgetStateData(): IState;\n\tsetStateData(state:IState):void;\n}\n\n/**\n * An IStream is a character & token stream abstraction over a line of text. It\n *  is never multi-line. The stream can be navigated character by character, or\n *  token by token, given some token rules.\n * @internal\n */\nexport interface IStream {\n\n\t/**\n\t * Returns the current character position of the stream on the line.\n\t */\n\tpos():number;\n\n\t/**\n\t * Returns true iff the stream is at the end of the line.\n\t */\n\teos():boolean;\n\n\t/**\n\t * Returns the next character in the stream.\n\t */\n\tpeek():string;\n\n\t/**\n\t * Returns the next character in the stream, and advances it by one character.\n\t */\n\tnext(): string;\n\tnext2(): void;\n\n\t/**\n\t * Advances the stream by `n` characters.\n\t */\n\tadvance(n:number):string;\n\n\t/**\n\t * Advances the stream until the end of the line.\n\t */\n\tadvanceToEOS():string;\n\n\t/**\n\t * Brings the stream back `n` characters.\n\t */\n\tgoBack(n:number):void;\n\n\t/**\n\t *  Advances the stream if the next characters validate a condition. A condition can be\n\t *\n\t *      - a regular expression (always starting with ^)\n\t * \t\t\tEXAMPLES: /^\\d+/, /^function|var|interface|class/\n\t *\n\t *  \t- a string\n\t * \t\t\tEXAMPLES: \"1954\", \"albert\"\n\t */\n\tadvanceIfCharCode(charCode: number): string;\n\tadvanceIfCharCode2(charCode:number): number;\n\n\tadvanceIfString(condition: string): string;\n\tadvanceIfString2(condition: string): number;\n\n\tadvanceIfStringCaseInsensitive(condition: string): string;\n\tadvanceIfStringCaseInsensitive2(condition: string): number;\n\n\tadvanceIfRegExp(condition: RegExp): string;\n\tadvanceIfRegExp2(condition:RegExp): number;\n\n\n\t/**\n\t * Advances the stream while the next characters validate a condition. Check #advanceIf for\n\t * details on the possible types for condition.\n\t */\n\tadvanceWhile(condition:string):string;\n\tadvanceWhile(condition:RegExp):string;\n\n\t/**\n\t * Advances the stream until the some characters validate a condition. Check #advanceIf for\n\t * details on the possible types for condition. The `including` boolean value indicates\n\t * whether the stream will advance the characters that matched the condition as well, or not.\n\t */\n\tadvanceUntil(condition: string, including: boolean): string;\n\tadvanceUntil(condition: RegExp, including: boolean): string;\n\n\tadvanceUntilString(condition: string, including: boolean): string;\n\tadvanceUntilString2(condition: string, including: boolean): number;\n\n\t/**\n\t * The token rules define how consecutive characters should be put together as a token,\n\t * or separated into two different tokens. They are given through a separator characters\n\t * string and a whitespace characters string. A separator is always one token. Consecutive\n\t * whitespace is always one token. Everything in between these two token types, is also a token.\n\t *\n\t * \tEXAMPLE: stream.setTokenRules(\"+-\", \" \");\n\t * \tSetting these token rules defines the tokens for the string \"123+456 -    7\" as being\n\t * \t\t[\"123\", \"+\", \"456\", \" \", \"-\", \"    \", \"7\"]\n\t */\n\tsetTokenRules(separators:string, whitespace:string):void;\n\n\t/**\n\t * Returns the next token, given that the stream was configured with token rules.\n\t */\n\tpeekToken():string;\n\n\t/**\n\t * Returns the next token, given that the stream was configured with token rules, and advances the\n\t * stream by the exact length of the found token.\n\t */\n\tnextToken():string;\n\n\t/**\n\t * Returns the next whitespace, if found. Returns an empty string otherwise.\n\t */\n\tpeekWhitespace():string;\n\n\t/**\n\t * Returns the next whitespace, if found, and advances the stream by the exact length of the found\n\t * whitespace. Returns an empty string otherwise.\n\t */\n\tskipWhitespace(): string;\n\tskipWhitespace2(): number;\n}\n\n/**\n * @internal\n */\nexport interface IModeDescriptor {\n\tid:string;\n}\n\n/**\n * @internal\n */\nexport interface ILineContext {\n\tgetLineContent(): string;\n\n\tmodeTransitions: ModeTransition[];\n\n\tgetTokenCount(): number;\n\tgetTokenStartIndex(tokenIndex:number): number;\n\tgetTokenType(tokenIndex:number): string;\n\tgetTokenText(tokenIndex:number): string;\n\tgetTokenEndIndex(tokenIndex:number): number;\n\tfindIndexOfOffset(offset:number): number;\n}\n\n/**\n * @internal\n */\nexport enum MutableSupport {\n\tRichEditSupport = 1,\n\tTokenizationSupport = 2\n}\n\n/**\n * @internal\n */\nexport function mutableSupportToString(registerableSupport:MutableSupport) {\n\tif (registerableSupport === MutableSupport.RichEditSupport) {\n\t\treturn 'richEditSupport';\n\t}\n\tif (registerableSupport === MutableSupport.TokenizationSupport) {\n\t\treturn 'tokenizationSupport';\n\t}\n\tthrow new Error('Illegal argument!');\n}\n\n\nexport interface IMode {\n\n\tgetId(): string;\n\n\t/**\n\t * Return a mode \"similar\" to this one that strips any \"smart\" supports.\n\t * @internal\n\t */\n\ttoSimplifiedMode(): IMode;\n\n\t/**\n\t * @internal\n\t */\n\taddSupportChangedListener?(callback: (e: editorCommon.IModeSupportChangedEvent) => void): IDisposable;\n\n\t/**\n\t * Register a support by name. Only optional.\n\t * @internal\n\t */\n\tregisterSupport?<T>(support:MutableSupport, callback:(mode:IMode)=>T): IDisposable;\n\n\t/**\n\t * Optional adapter to support tokenization.\n\t * @internal\n\t */\n\ttokenizationSupport?: ITokenizationSupport;\n\n\t/**\n\t * Optional adapter to support inplace-replace.\n\t * @internal\n\t */\n\tinplaceReplaceSupport?:IInplaceReplaceSupport;\n\n\t/**\n\t * Optional adapter to support output for a model (e.g. markdown -> html)\n\t * @internal\n\t */\n\temitOutputSupport?:IEmitOutputSupport;\n\n\t/**\n\t * Optional adapter to support configuring this mode.\n\t * @internal\n\t */\n\tconfigSupport?:IConfigurationSupport;\n\n\t/**\n\t * Optional adapter to support rich editing.\n\t * @internal\n\t */\n\trichEditSupport?: IRichEditSupport;\n}\n\n/**\n * Interface used for tokenization\n * @internal\n */\nexport interface IToken {\n\tstartIndex:number;\n\ttype:string;\n}\n\n/**\n * @internal\n */\nexport interface IModeTransition {\n\tstartIndex: number;\n\tmode: IMode;\n}\n\n/**\n * @internal\n */\nexport interface ILineTokens {\n\ttokens: IToken[];\n\tactualStopOffset: number;\n\tendState: IState;\n\tmodeTransitions: IModeTransition[];\n\tretokenize?:TPromise<void>;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupport {\n\n\tshouldGenerateEmbeddedModels: boolean;\n\n\tgetInitialState():IState;\n\n\t// add offsetDelta to each of the returned indices\n\t// stop tokenizing at absolute value stopAtOffset (i.e. stream.pos() + offsetDelta > stopAtOffset)\n\ttokenize(line:string, state:IState, offsetDelta?:number, stopAtOffset?:number):ILineTokens;\n}\n\nexport interface IToken2 {\n\tstartIndex: number;\n\tscopes: string|string[];\n}\nexport interface ILineTokens2 {\n\ttokens: IToken2[];\n\tendState: IState2;\n\tretokenize?: TPromise<void>;\n}\nexport interface IState2 {\n\tclone():IState2;\n\tequals(other:IState2):boolean;\n}\nexport interface TokensProvider {\n\tgetInitialState(): IState2;\n\ttokenize(line:string, state:IState2): ILineTokens2;\n}\n\n/**\n * A hover represents additional information for a symbol or word. Hovers are\n * rendered in a tooltip-like widget.\n */\nexport interface Hover {\n\t/**\n\t * The contents of this hover.\n\t */\n\thtmlContent: IHTMLContentElement[];\n\n\t/**\n\t * The range to which this hover applies. When missing, the\n\t * editor will use the range at the current position or the\n\t * current position itself.\n\t */\n\trange: editorCommon.IRange;\n}\n\nexport interface HoverProvider {\n\tprovideHover(model:editorCommon.IReadOnlyModel, position:Position, token:CancellationToken): Hover | Thenable<Hover>;\n}\n\n/**\n * @internal\n */\nexport type SuggestionType = 'method'\n\t| 'function'\n\t| 'constructor'\n\t| 'field'\n\t| 'variable'\n\t| 'class'\n\t| 'interface'\n\t| 'module'\n\t| 'property'\n\t| 'unit'\n\t| 'value'\n\t| 'enum'\n\t| 'keyword'\n\t| 'snippet'\n\t| 'text'\n\t| 'color'\n\t| 'file'\n\t| 'reference'\n\t| 'customcolor';\n\n/**\n * @internal\n */\nexport interface ISuggestion {\n\tlabel: string;\n\tcodeSnippet: string;\n\ttype: SuggestionType;\n\ttypeLabel?: string;\n\tdocumentationLabel?: string;\n\tfilterText?: string;\n\tsortText?: string;\n\tnoAutoAccept?: boolean;\n\toverwriteBefore?: number;\n\toverwriteAfter?: number;\n}\n\n/**\n * @internal\n */\nexport interface ISuggestResult {\n\tcurrentWord: string;\n\tsuggestions:ISuggestion[];\n\tincomplete?: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ISuggestSupport {\n\n\ttriggerCharacters: string[];\n\n\tshouldAutotriggerSuggest: boolean;\n\n\tfilter?: IFilter;\n\n\tprovideCompletionItems(model:editorCommon.IReadOnlyModel, position:Position, token:CancellationToken): ISuggestResult[] | Thenable<ISuggestResult[]>;\n\n\tresolveCompletionItem?(model:editorCommon.IReadOnlyModel, position:Position, item: ISuggestion, token: CancellationToken): ISuggestion | Thenable<ISuggestion>;\n}\n\n/**\n * Interface used to quick fix typing errors while accesing member fields.\n */\nexport interface IQuickFix {\n\tcommand: ICommand;\n\tscore: number;\n}\nexport interface CodeActionProvider {\n\tprovideCodeActions(model:editorCommon.IReadOnlyModel, range:Range, token: CancellationToken): IQuickFix[] | Thenable<IQuickFix[]>;\n}\n\n\nexport interface ParameterInformation {\n\tlabel: string;\n\tdocumentation: string;\n}\nexport interface SignatureInformation {\n\tlabel: string;\n\tdocumentation: string;\n\tparameters: ParameterInformation[];\n}\nexport interface SignatureHelp {\n\tsignatures: SignatureInformation[];\n\tactiveSignature: number;\n\tactiveParameter: number;\n}\nexport interface SignatureHelpProvider {\n\n\tsignatureHelpTriggerCharacters: string[];\n\n\tprovideSignatureHelp(model: editorCommon.IReadOnlyModel, position: Position, token: CancellationToken): SignatureHelp | Thenable<SignatureHelp>;\n}\n\n\nexport enum DocumentHighlightKind {\n\tText,\n\tRead,\n\tWrite\n}\nexport interface DocumentHighlight {\n\trange: editorCommon.IRange;\n\tkind: DocumentHighlightKind;\n}\nexport interface DocumentHighlightProvider {\n\tprovideDocumentHighlights(model: editorCommon.IReadOnlyModel, position: Position, token: CancellationToken): DocumentHighlight[] | Thenable<DocumentHighlight[]>;\n}\n\n\nexport interface ReferenceContext {\n\tincludeDeclaration: boolean;\n}\nexport interface ReferenceProvider {\n\tprovideReferences(model:editorCommon.IReadOnlyModel, position:Position, context: ReferenceContext, token: CancellationToken): Location[] | Thenable<Location[]>;\n}\n\n\nexport interface Location {\n\turi: URI;\n\trange: editorCommon.IRange;\n}\nexport type Definition = Location | Location[];\nexport interface DefinitionProvider {\n\tprovideDefinition(model:editorCommon.IReadOnlyModel, position:Position, token:CancellationToken): Definition | Thenable<Definition>;\n}\n\n\nexport enum SymbolKind {\n\tFile,\n\tModule,\n\tNamespace,\n\tPackage,\n\tClass,\n\tMethod,\n\tProperty,\n\tField,\n\tConstructor,\n\tEnum,\n\tInterface,\n\tFunction,\n\tVariable,\n\tConstant,\n\tString,\n\tNumber,\n\tBoolean,\n\tArray,\n\tObject,\n\tKey,\n\tNull\n}\n/**\n * @internal\n */\nexport namespace SymbolKind {\n\n\t/**\n\t * @internal\n\t */\n\texport function from(kind: number | SymbolKind): string {\n\t\tswitch (kind) {\n\t\t\tcase SymbolKind.Method:\n\t\t\t\treturn 'method';\n\t\t\tcase SymbolKind.Function:\n\t\t\t\treturn 'function';\n\t\t\tcase SymbolKind.Constructor:\n\t\t\t\treturn 'constructor';\n\t\t\tcase SymbolKind.Variable:\n\t\t\t\treturn 'variable';\n\t\t\tcase SymbolKind.Class:\n\t\t\t\treturn 'class';\n\t\t\tcase SymbolKind.Interface:\n\t\t\t\treturn 'interface';\n\t\t\tcase SymbolKind.Namespace:\n\t\t\t\treturn 'namespace';\n\t\t\tcase SymbolKind.Package:\n\t\t\t\treturn 'package';\n\t\t\tcase SymbolKind.Module:\n\t\t\t\treturn 'module';\n\t\t\tcase SymbolKind.Property:\n\t\t\t\treturn 'property';\n\t\t\tcase SymbolKind.Enum:\n\t\t\t\treturn 'enum';\n\t\t\tcase SymbolKind.String:\n\t\t\t\treturn 'string';\n\t\t\tcase SymbolKind.File:\n\t\t\t\treturn 'file';\n\t\t\tcase SymbolKind.Array:\n\t\t\t\treturn 'array';\n\t\t\tcase SymbolKind.Number:\n\t\t\t\treturn 'number';\n\t\t\tcase SymbolKind.Boolean:\n\t\t\t\treturn 'boolean';\n\t\t\tcase SymbolKind.Object:\n\t\t\t\treturn 'object';\n\t\t\tcase SymbolKind.Key:\n\t\t\t\treturn 'key';\n\t\t\tcase SymbolKind.Null:\n\t\t\t\treturn 'null';\n\t\t}\n\t\treturn 'property';\n\t}\n\n\t/**\n\t * @internal\n\t */\n\texport function to(type: string): SymbolKind {\n\t\tswitch (type) {\n\t\t\tcase 'method':\n\t\t\t\treturn SymbolKind.Method;\n\t\t\tcase 'function':\n\t\t\t\treturn SymbolKind.Function;\n\t\t\tcase 'constructor':\n\t\t\t\treturn SymbolKind.Constructor;\n\t\t\tcase 'variable':\n\t\t\t\treturn SymbolKind.Variable;\n\t\t\tcase 'class':\n\t\t\t\treturn SymbolKind.Class;\n\t\t\tcase 'interface':\n\t\t\t\treturn SymbolKind.Interface;\n\t\t\tcase 'namespace':\n\t\t\t\treturn SymbolKind.Namespace;\n\t\t\tcase 'package':\n\t\t\t\treturn SymbolKind.Package;\n\t\t\tcase 'module':\n\t\t\t\treturn SymbolKind.Module;\n\t\t\tcase 'property':\n\t\t\t\treturn SymbolKind.Property;\n\t\t\tcase 'enum':\n\t\t\t\treturn SymbolKind.Enum;\n\t\t\tcase 'string':\n\t\t\t\treturn SymbolKind.String;\n\t\t\tcase 'file':\n\t\t\t\treturn SymbolKind.File;\n\t\t\tcase 'array':\n\t\t\t\treturn SymbolKind.Array;\n\t\t\tcase 'number':\n\t\t\t\treturn SymbolKind.Number;\n\t\t\tcase 'boolean':\n\t\t\t\treturn SymbolKind.Boolean;\n\t\t\tcase 'object':\n\t\t\t\treturn SymbolKind.Object;\n\t\t\tcase 'key':\n\t\t\t\treturn SymbolKind.Key;\n\t\t\tcase 'null':\n\t\t\t\treturn SymbolKind.Null;\n\t\t}\n\t\treturn SymbolKind.Property;\n\t}\n}\nexport interface SymbolInformation {\n\tname: string;\n\tcontainerName?: string;\n\tkind: SymbolKind;\n\tlocation: Location;\n}\nexport interface DocumentSymbolProvider {\n\tprovideDocumentSymbols(model:editorCommon.IReadOnlyModel, token: CancellationToken): SymbolInformation[] | Thenable<SymbolInformation[]>;\n}\n\n/**\n * Interface used to format a model\n */\nexport interface IFormattingOptions {\n\ttabSize:number;\n\tinsertSpaces:boolean;\n}\nexport interface DocumentFormattingEditProvider {\n\tprovideDocumentFormattingEdits(model: editorCommon.IReadOnlyModel, options: IFormattingOptions, token: CancellationToken): editorCommon.ISingleEditOperation[] | Thenable<editorCommon.ISingleEditOperation[]>;\n}\nexport interface DocumentRangeFormattingEditProvider {\n\tprovideDocumentRangeFormattingEdits(model: editorCommon.IReadOnlyModel, range: Range, options: IFormattingOptions, token: CancellationToken): editorCommon.ISingleEditOperation[] | Thenable<editorCommon.ISingleEditOperation[]>;\n}\nexport interface OnTypeFormattingEditProvider {\n\tautoFormatTriggerCharacters: string[];\n\tprovideOnTypeFormattingEdits(model: editorCommon.IReadOnlyModel, position: Position, ch: string, options: IFormattingOptions, token: CancellationToken): editorCommon.ISingleEditOperation[] | Thenable<editorCommon.ISingleEditOperation[]>;\n}\n\n/**\n * @internal\n */\nexport interface IInplaceReplaceSupportResult {\n\tvalue: string;\n\trange:editorCommon.IRange;\n}\n\n/**\n * Interface used to navigate with a value-set.\n * @internal\n */\nexport interface IInplaceReplaceSupport {\n\tnavigateValueSet(resource:URI, range:editorCommon.IRange, up:boolean):TPromise<IInplaceReplaceSupportResult>;\n}\n\n/**\n * Interface used to get output for a language that supports transformation (e.g. markdown -> html)\n * @internal\n */\nexport interface IEmitOutputSupport {\n\tgetEmitOutput(resource:URI):TPromise<IEmitOutput>;\n}\n/**\n * @internal\n */\nexport interface IEmitOutput {\n\tfilename?:string;\n\tcontent:string;\n}\n\n\nexport interface ILink {\n\trange: editorCommon.IRange;\n\turl: string;\n}\nexport interface LinkProvider {\n\tprovideLinks(model: editorCommon.IReadOnlyModel, token: CancellationToken): ILink[] | Thenable<ILink[]>;\n}\n\n\n/**\n * Interface used to define a configurable editor mode.\n * @internal\n */\nexport interface IConfigurationSupport {\n\tconfigure(options:any):TPromise<void>;\n}\n\n\nexport interface IResourceEdit {\n\tresource: URI;\n\trange: editorCommon.IRange;\n\tnewText: string;\n}\nexport interface WorkspaceEdit {\n\tedits: IResourceEdit[];\n\trejectReason?: string;\n}\nexport interface RenameProvider {\n\tprovideRenameEdits(model:editorCommon.IReadOnlyModel, position:Position, newName: string, token: CancellationToken): WorkspaceEdit | Thenable<WorkspaceEdit>;\n}\n\n\nexport interface ICommand {\n\tid: string;\n\ttitle: string;\n\targuments?: any[];\n}\nexport interface ICodeLensSymbol {\n\trange: editorCommon.IRange;\n\tid?: string;\n\tcommand?: ICommand;\n}\nexport interface CodeLensProvider {\n\tprovideCodeLenses(model:editorCommon.IReadOnlyModel, token: CancellationToken): ICodeLensSymbol[] | Thenable<ICodeLensSymbol[]>;\n\tresolveCodeLens?(model:editorCommon.IReadOnlyModel, codeLens: ICodeLensSymbol, token: CancellationToken): ICodeLensSymbol | Thenable<ICodeLensSymbol>;\n}\n\nexport type CharacterPair = [string, string];\n\nexport interface IAutoClosingPairConditional extends IAutoClosingPair {\n\tnotIn?: string[];\n}\n\n/**\n * Interface used to support electric characters\n * @internal\n */\nexport interface IElectricAction {\n\t// Only one of the following properties should be defined:\n\n\t// The line will be indented at the same level of the line\n\t// which contains the matching given bracket type.\n\tmatchOpenBracket?:string;\n\n\t// The text will be appended after the electric character.\n\tappendText?:string;\n\n\t// The number of characters to advance the cursor, useful with appendText\n\tadvanceCount?:number;\n}\n\nexport enum IndentAction {\n\tNone,\n\tIndent,\n\tIndentOutdent,\n\tOutdent\n}\n\n/**\n * An action the editor executes when 'enter' is being pressed\n */\nexport interface IEnterAction {\n\tindentAction:IndentAction;\n\tappendText?:string;\n\tremoveText?:number;\n}\n\n/**\n * @internal\n */\nexport interface IRichEditElectricCharacter {\n\tgetElectricCharacters():string[];\n\t// Should return opening bracket type to match indentation with\n\tonElectricCharacter(context:ILineContext, offset:number):IElectricAction;\n}\n\n/**\n * @internal\n */\nexport interface IRichEditOnEnter {\n\tonEnter(model:editorCommon.ITokenizedModel, position: editorCommon.IPosition): IEnterAction;\n}\n\n/**\n * Interface used to support insertion of mode specific comments.\n * @internal\n */\nexport interface ICommentsConfiguration {\n\tlineCommentToken?:string;\n\tblockCommentStartToken?:string;\n\tblockCommentEndToken?:string;\n}\n\nexport interface IAutoClosingPair {\n\topen:string;\n\tclose:string;\n}\n\n/**\n * @internal\n */\nexport interface IRichEditCharacterPair {\n\tgetAutoClosingPairs():IAutoClosingPairConditional[];\n\tshouldAutoClosePair(character:string, context:ILineContext, offset:number):boolean;\n\tgetSurroundingPairs():IAutoClosingPair[];\n}\n\n/**\n * @internal\n */\nexport interface IRichEditBrackets {\n\tmaxBracketLength: number;\n\tforwardRegex: RegExp;\n\treversedRegex: RegExp;\n\tbrackets: editorCommon.IRichEditBracket[];\n\ttextIsBracket: {[text:string]:editorCommon.IRichEditBracket;};\n\ttextIsOpenBracket: {[text:string]:boolean;};\n}\n\n/**\n * @internal\n */\nexport interface IRichEditSupport {\n\t/**\n\t * Optional adapter for electric characters.\n\t */\n\telectricCharacter?:IRichEditElectricCharacter;\n\n\t/**\n\t * Optional adapter for comment insertion.\n\t */\n\tcomments?:ICommentsConfiguration;\n\n\t/**\n\t * Optional adapter for insertion of character pair.\n\t */\n\tcharacterPair?:IRichEditCharacterPair;\n\n\t/**\n\t * Optional adapter for classification of tokens.\n\t */\n\twordDefinition?: RegExp;\n\n\t/**\n\t * Optional adapter for custom Enter handling.\n\t */\n\tonEnter?: IRichEditOnEnter;\n\n\t/**\n\t * Optional adapter for brackets.\n\t */\n\tbrackets?: IRichEditBrackets;\n}\n\n// --- feature registries ------\n\n/**\n * @internal\n */\nexport const ReferenceProviderRegistry = new LanguageFeatureRegistry<ReferenceProvider>();\n\n/**\n * @internal\n */\nexport const RenameProviderRegistry = new LanguageFeatureRegistry<RenameProvider>();\n\n/**\n * @internal\n */\nexport const SuggestRegistry = new LanguageFeatureRegistry<ISuggestSupport>();\n\n/**\n * @internal\n */\nexport const SignatureHelpProviderRegistry = new LanguageFeatureRegistry<SignatureHelpProvider>();\n\n/**\n * @internal\n */\nexport const HoverProviderRegistry = new LanguageFeatureRegistry<HoverProvider>();\n\n/**\n * @internal\n */\nexport const DocumentSymbolProviderRegistry = new LanguageFeatureRegistry<DocumentSymbolProvider>();\n\n/**\n * @internal\n */\nexport const DocumentHighlightProviderRegistry = new LanguageFeatureRegistry<DocumentHighlightProvider>();\n\n/**\n * @internal\n */\nexport const DefinitionProviderRegistry = new LanguageFeatureRegistry<DefinitionProvider>();\n\n/**\n * @internal\n */\nexport const CodeLensProviderRegistry = new LanguageFeatureRegistry<CodeLensProvider>();\n\n/**\n * @internal\n */\nexport const CodeActionProviderRegistry = new LanguageFeatureRegistry<CodeActionProvider>();\n\n/**\n * @internal\n */\nexport const DocumentFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const DocumentRangeFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentRangeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const OnTypeFormattingEditProviderRegistry = new LanguageFeatureRegistry<OnTypeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const LinkProviderRegistry = new LanguageFeatureRegistry<LinkProvider>();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport * as strings from 'vs/base/common/strings';\nimport {Position} from 'vs/editor/common/core/position';\nimport {IPosition, ITextModel, ITokenizedModel} from 'vs/editor/common/editorCommon';\nimport {IEnterAction, ILineContext, IMode, IRichEditOnEnter, IndentAction, CharacterPair} from 'vs/editor/common/modes';\nimport {handleEvent} from 'vs/editor/common/modes/supports';\n\nexport interface IIndentationRules {\n\tdecreaseIndentPattern: RegExp;\n\tincreaseIndentPattern: RegExp;\n\tindentNextLinePattern?: RegExp;\n\tunIndentedLinePattern?: RegExp;\n}\n\nexport interface IOnEnterRegExpRules {\n\tbeforeText: RegExp;\n\tafterText?: RegExp;\n\taction: IEnterAction;\n}\n\nexport interface IOnEnterSupportOptions {\n\tbrackets?: CharacterPair[];\n\tindentationRules?: IIndentationRules;\n\tregExpRules?: IOnEnterRegExpRules[];\n}\n\ninterface IProcessedBracketPair {\n\topen: string;\n\tclose: string;\n\topenRegExp: RegExp;\n\tcloseRegExp: RegExp;\n}\n\nexport class OnEnterSupport implements IRichEditOnEnter {\n\n\tprivate static _INDENT: IEnterAction = { indentAction: IndentAction.Indent };\n\tprivate static _INDENT_OUTDENT: IEnterAction = { indentAction: IndentAction.IndentOutdent };\n\tprivate static _OUTDENT: IEnterAction = { indentAction: IndentAction.Outdent };\n\n\tprivate _modeId: string;\n\tprivate _brackets: IProcessedBracketPair[];\n\tprivate _indentationRules: IIndentationRules;\n\tprivate _regExpRules: IOnEnterRegExpRules[];\n\n\tconstructor(modeId: string, opts?:IOnEnterSupportOptions) {\n\t\topts = opts || {};\n\t\topts.brackets = opts.brackets || [\n\t\t\t['(', ')'],\n\t\t\t['{', '}'],\n\t\t\t['[', ']']\n\t\t];\n\n\t\tthis._modeId = modeId;\n\t\tthis._brackets = opts.brackets.map((bracket) => {\n\t\t\treturn {\n\t\t\t\topen: bracket[0],\n\t\t\t\topenRegExp: OnEnterSupport._createOpenBracketRegExp(bracket[0]),\n\t\t\t\tclose: bracket[1],\n\t\t\t\tcloseRegExp: OnEnterSupport._createCloseBracketRegExp(bracket[1]),\n\t\t\t};\n\t\t});\n\t\tthis._regExpRules = opts.regExpRules || [];\n\t\tthis._indentationRules = opts.indentationRules;\n\t}\n\n\tpublic onEnter(model:ITokenizedModel, position: IPosition): IEnterAction {\n\t\tvar context = model.getLineContext(position.lineNumber);\n\n\t\treturn handleEvent(context, position.column - 1, (nestedMode:IMode, context:ILineContext, offset:number) => {\n\t\t\tif (this._modeId === nestedMode.getId()) {\n\t\t\t\treturn this._onEnter(model, position);\n\t\t\t} else if (nestedMode.richEditSupport && nestedMode.richEditSupport.onEnter) {\n\t\t\t\treturn nestedMode.richEditSupport.onEnter.onEnter(model, position);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _onEnter(model:ITextModel, position: IPosition): IEnterAction {\n\t\tlet lineText = model.getLineContent(position.lineNumber);\n\t\tlet beforeEnterText = lineText.substr(0, position.column - 1);\n\t\tlet afterEnterText = lineText.substr(position.column - 1);\n\n\t\tlet oneLineAboveText = position.lineNumber === 1 ? '' : model.getLineContent(position.lineNumber - 1);\n\n\t\treturn this._actualOnEnter(oneLineAboveText, beforeEnterText, afterEnterText);\n\t}\n\n\t_actualOnEnter(oneLineAboveText:string, beforeEnterText:string, afterEnterText:string): IEnterAction {\n\t\t// (1): `regExpRules`\n\t\tfor (let i = 0, len = this._regExpRules.length; i < len; i++) {\n\t\t\tlet rule = this._regExpRules[i];\n\t\t\tif (rule.beforeText.test(beforeEnterText)) {\n\t\t\t\tif (rule.afterText) {\n\t\t\t\t\tif (rule.afterText.test(afterEnterText)) {\n\t\t\t\t\t\treturn rule.action;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn rule.action;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (2): Special indent-outdent\n\t\tif (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n\t\t\tfor (let i = 0, len = this._brackets.length; i < len; i++) {\n\t\t\t\tlet bracket = this._brackets[i];\n\t\t\t\tif (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n\t\t\t\t\treturn OnEnterSupport._INDENT_OUTDENT;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3): Indentation Support\n\t\tif (this._indentationRules) {\n\t\t\tif (this._indentationRules.increaseIndentPattern && this._indentationRules.increaseIndentPattern.test(beforeEnterText)) {\n\t\t\t\treturn OnEnterSupport._INDENT;\n\t\t\t}\n\t\t\tif (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(beforeEnterText)) {\n\t\t\t\treturn OnEnterSupport._INDENT;\n\t\t\t}\n\t\t\tif (/^\\s/.test(beforeEnterText)) {\n\t\t\t\t// No reason to run regular expressions if there is nothing to outdent from\n\t\t\t\tif (this._indentationRules.decreaseIndentPattern && this._indentationRules.decreaseIndentPattern.test(afterEnterText)) {\n\t\t\t\t\treturn OnEnterSupport._OUTDENT;\n\t\t\t\t}\n\t\t\t\tif (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(oneLineAboveText)) {\n\t\t\t\t\treturn OnEnterSupport._OUTDENT;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (4): Open bracket based logic\n\t\tif (beforeEnterText.length > 0) {\n\t\t\tfor (let i = 0, len = this._brackets.length; i < len; i++) {\n\t\t\t\tlet bracket = this._brackets[i];\n\t\t\t\tif (bracket.openRegExp.test(beforeEnterText)) {\n\t\t\t\t\treturn OnEnterSupport._INDENT;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _createOpenBracketRegExp(bracket:string): RegExp {\n\t\tvar str = strings.escapeRegExpCharacters(bracket);\n\t\tif (!/\\B/.test(str.charAt(0))) {\n\t\t\tstr = '\\\\b' + str;\n\t\t}\n\t\tstr += '\\\\s*$';\n\t\treturn OnEnterSupport._safeRegExp(str);\n\t}\n\n\tprivate static _createCloseBracketRegExp(bracket:string): RegExp {\n\t\tvar str = strings.escapeRegExpCharacters(bracket);\n\t\tif (!/\\B/.test(str.charAt(str.length - 1))) {\n\t\t\tstr = str + '\\\\b';\n\t\t}\n\t\tstr = '^\\\\s*' + str;\n\t\treturn OnEnterSupport._safeRegExp(str);\n\t}\n\n\tprivate static _safeRegExp(def:string): RegExp {\n\t\ttry {\n\t\t\treturn new RegExp(def);\n\t\t} catch(err) {\n\t\t\tonUnexpectedError(err);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport function getRawEnterActionAtPosition(model:ITokenizedModel, lineNumber:number, column:number): IEnterAction {\n\tlet result:IEnterAction;\n\tlet richEditSupport = model.getMode().richEditSupport;\n\n\tif (richEditSupport && richEditSupport.onEnter) {\n\t\ttry {\n\t\t\tresult = richEditSupport.onEnter.onEnter(model, new Position(lineNumber, column));\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function getEnterActionAtPosition(model:ITokenizedModel, lineNumber:number, column:number): { enterAction: IEnterAction; indentation: string; } {\n\tlet lineText = model.getLineContent(lineNumber);\n\tlet indentation = strings.getLeadingWhitespace(lineText);\n\tif (indentation.length > column - 1) {\n\t\tindentation = indentation.substring(0, column - 1);\n\t}\n\n\tlet enterAction = getRawEnterActionAtPosition(model, lineNumber, column);\n\tif (!enterAction) {\n\t\tenterAction = {\n\t\t\tindentAction: IndentAction.None,\n\t\t\tappendText: '',\n\t\t};\n\t} else {\n\t\tif(!enterAction.appendText) {\n\t\t\tif (\n\t\t\t\t(enterAction.indentAction === IndentAction.Indent) ||\n\t\t\t\t(enterAction.indentAction === IndentAction.IndentOutdent)\n\t\t\t) {\n\t\t\t\tenterAction.appendText = '\\t';\n\t\t\t} else {\n\t\t\t\tenterAction.appendText = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (enterAction.removeText) {\n\t\tindentation = indentation.substring(0, indentation.length - 1);\n\t}\n\n\treturn {\n\t\tenterAction: enterAction,\n\t\tindentation: indentation\n\t};\n}\n","define(\"vs/nls!vs/platform/jsonschemas/common/jsonContributionRegistry\",['vs/nls', 'vs/nls!vs/editor/common/worker/editorWorkerServer'], function(nls, data) { return nls.create(\"vs/platform/jsonschemas/common/jsonContributionRegistry\", data); });","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport strings = require('vs/base/common/strings');\n\nenum Severity {\n\tIgnore = 0,\n\tInfo = 1,\n\tWarning = 2,\n\tError = 3\n}\n\nnamespace Severity {\n\n\tvar _error = 'error',\n\t\t_warning = 'warning',\n\t\t_warn = 'warn',\n\t\t_info = 'info';\n\n\tvar _displayStrings: { [value: number]: string; } = Object.create(null);\n\t_displayStrings[Severity.Error] = nls.localize('sev.error', \"Error\");\n\t_displayStrings[Severity.Warning] = nls.localize('sev.warning', \"Warning\");\n\t_displayStrings[Severity.Info] = nls.localize('sev.info', \"Info\");\n\n\t/**\n\t * Parses 'error', 'warning', 'warn', 'info' in call casings\n\t * and falls back to ignore.\n\t */\n\texport function fromValue(value: string): Severity {\n\t\tif (!value) {\n\t\t\treturn Severity.Ignore;\n\t\t}\n\n\t\tif (strings.equalsIgnoreCase(_error, value)) {\n\t\t\treturn Severity.Error;\n\t\t}\n\n\t\tif (strings.equalsIgnoreCase(_warning, value) || strings.equalsIgnoreCase(_warn, value)) {\n\t\t\treturn Severity.Warning;\n\t\t}\n\n\t\tif (strings.equalsIgnoreCase(_info, value)) {\n\t\t\treturn Severity.Info;\n\t\t}\n\n\t\treturn Severity.Ignore;\n\t}\n\n\texport function toString(value: Severity): string {\n\t\treturn _displayStrings[value] || strings.empty;\n\t}\n\n\texport function compare(a: Severity, b: Severity): number {\n\t\treturn b - a;\n\t}\n}\n\nexport default Severity;","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {IEditorOptions} from 'vs/editor/common/editorCommon';\nimport * as platform from 'vs/base/common/platform';\n\nexport interface IConfiguration {\n\teditor:IEditorOptions;\n}\n\nexport const USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?';\nexport const DEFAULT_INDENTATION = {\n\ttabSize: 4,\n\tinsertSpaces: true,\n\tdetectIndentation: true\n};\nexport const DEFAULT_TRIM_AUTO_WHITESPACE = true;\n\nconst DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\nconst DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\nconst DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'Courier New\\', monospace, \\'Droid Sans Fallback\\'';\n\n/**\n * Determined from empirical observations.\n */\nexport const GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n\nclass ConfigClass implements IConfiguration {\n\n\tpublic editor: IEditorOptions;\n\n\tconstructor() {\n\t\tthis.editor = {\n\t\t\texperimentalScreenReader: true,\n\t\t\trulers: [],\n\t\t\twordSeparators: USUAL_WORD_SEPARATORS,\n\t\t\tselectionClipboard: true,\n\t\t\tariaLabel: nls.localize('editorViewAccessibleLabel', \"Editor content\"),\n\t\t\tlineNumbers: true,\n\t\t\tselectOnLineNumbers: true,\n\t\t\tlineNumbersMinChars: 5,\n\t\t\tglyphMargin: false,\n\t\t\tlineDecorationsWidth: 10,\n\t\t\trevealHorizontalRightPadding: 30,\n\t\t\troundedSelection: true,\n\t\t\ttheme: 'vs',\n\t\t\treadOnly: false,\n\t\t\tscrollbar: {\n\t\t\t\tverticalScrollbarSize: 14,\n\t\t\t\thorizontal: 'auto',\n\t\t\t\tuseShadows: true,\n\t\t\t\tverticalHasArrows: false,\n\t\t\t\thorizontalHasArrows: false\n\t\t\t},\n\t\t\toverviewRulerLanes: 2,\n\t\t\tcursorBlinking: 'blink',\n\t\t\tcursorStyle: 'line',\n\t\t\tfontLigatures: false,\n\t\t\tdisableTranslate3d: false,\n\t\t\thideCursorInOverviewRuler: false,\n\t\t\tscrollBeyondLastLine: true,\n\t\t\tautomaticLayout: false,\n\t\t\twrappingColumn: 300,\n\t\t\twrappingIndent: 'same',\n\t\t\twordWrapBreakBeforeCharacters: '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋',\n\t\t\twordWrapBreakAfterCharacters: ' \\t})]?|&,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ’”〉》」』】〕）］｝｣',\n\t\t\twordWrapBreakObtrusiveCharacters: '.',\n\t\t\ttabFocusMode: false,\n\n\t\t\t// Features\n\t\t\thover: true,\n\t\t\tcontextmenu: true,\n\t\t\tmouseWheelScrollSensitivity: 1,\n\t\t\tquickSuggestions: true,\n\t\t\tquickSuggestionsDelay: 10,\n\t\t\ticonsInSuggestions: true,\n\t\t\tautoClosingBrackets: true,\n\t\t\tformatOnType: false,\n\t\t\tsuggestOnTriggerCharacters: true,\n\t\t\tacceptSuggestionOnEnter: true,\n\t\t\tselectionHighlight: true,\n\t\t\toutlineMarkers: false,\n\t\t\treferenceInfos: true,\n\t\t\tfolding: true,\n\t\t\trenderWhitespace: false,\n\t\t\tindentGuides: false,\n\t\t\tuseTabStops: true,\n\n\t\t\tfontFamily: (\n\t\t\t\tplatform.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : (platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY)\n\t\t\t),\n\t\t\tfontSize: (\n\t\t\t\tplatform.isMacintosh ? 12 : 14\n\t\t\t),\n\t\t\tlineHeight: 0\n\t\t};\n\t}\n}\n\nexport var DefaultConfig: IConfiguration = new ConfigClass();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {OrderGuaranteeEventEmitter} from 'vs/base/common/eventEmitter';\nimport * as strings from 'vs/base/common/strings';\nimport {Position} from 'vs/editor/common/core/position';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ModelLine} from 'vs/editor/common/model/modelLine';\nimport {guessIndentation} from 'vs/editor/common/model/indentationGuesser';\nimport {DEFAULT_INDENTATION, DEFAULT_TRIM_AUTO_WHITESPACE} from 'vs/editor/common/config/defaultConfig';\nimport {PrefixSumComputer} from 'vs/editor/common/viewModel/prefixSumComputer';\n\nvar LIMIT_FIND_COUNT = 999;\nexport const LONG_LINE_BOUNDARY = 1000;\n\nexport class TextModel extends OrderGuaranteeEventEmitter implements editorCommon.ITextModel {\n\tprivate static MODEL_SYNC_LIMIT = 5 * 1024 * 1024; // 5 MB\n\tprivate static MODEL_TOKENIZATION_LIMIT = 20 * 1024 * 1024; // 20 MB\n\n\tpublic static DEFAULT_CREATION_OPTIONS: editorCommon.ITextModelCreationOptions = {\n\t\ttabSize: DEFAULT_INDENTATION.tabSize,\n\t\tinsertSpaces: DEFAULT_INDENTATION.insertSpaces,\n\t\tdetectIndentation: false,\n\t\tdefaultEOL: editorCommon.DefaultEndOfLine.LF,\n\t\ttrimAutoWhitespace: DEFAULT_TRIM_AUTO_WHITESPACE,\n\t};\n\n\t/*protected*/ _lines:ModelLine[];\n\tprotected _EOL:string;\n\tprotected _isDisposed:boolean;\n\tprotected _isDisposing:boolean;\n\tprotected _options: editorCommon.ITextModelResolvedOptions;\n\tprotected _lineStarts: PrefixSumComputer;\n\n\tprivate _versionId:number;\n\t/**\n\t * Unlike, versionId, this can go down (via undo) or go to previous values (via redo)\n\t */\n\tprivate _alternativeVersionId: number;\n\tprivate _BOM:string;\n\n\tprivate _shouldSimplifyMode: boolean;\n\tprivate _shouldDenyMode: boolean;\n\n\tconstructor(allowedEventTypes:string[], rawText:editorCommon.IRawText) {\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelRawContentChanged, editorCommon.EventType.ModelOptionsChanged);\n\t\tsuper(allowedEventTypes);\n\n\t\tthis._shouldSimplifyMode = (rawText.length > TextModel.MODEL_SYNC_LIMIT);\n\t\tthis._shouldDenyMode = (rawText.length > TextModel.MODEL_TOKENIZATION_LIMIT);\n\n\t\tthis._options = rawText.options;\n\t\tthis._constructLines(rawText);\n\t\tthis._setVersionId(1);\n\t\tthis._isDisposed = false;\n\t\tthis._isDisposing = false;\n\t}\n\n\tpublic isTooLargeForHavingAMode(): boolean {\n\t\treturn this._shouldDenyMode;\n\t}\n\n\tpublic isTooLargeForHavingARichMode(): boolean {\n\t\treturn this._shouldSimplifyMode;\n\t}\n\n\tpublic getOptions(): editorCommon.ITextModelResolvedOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateOptions(newOpts:editorCommon.ITextModelUpdateOptions): void {\n\t\tlet somethingChanged = false;\n\t\tlet changed:editorCommon.IModelOptionsChangedEvent = {\n\t\t\ttabSize: false,\n\t\t\tinsertSpaces: false,\n\t\t\ttrimAutoWhitespace: false\n\t\t};\n\n\t\tif (typeof newOpts.insertSpaces !== 'undefined') {\n\t\t\tif (this._options.insertSpaces !== newOpts.insertSpaces) {\n\t\t\t\tsomethingChanged = true;\n\t\t\t\tchanged.insertSpaces = true;\n\t\t\t\tthis._options.insertSpaces = newOpts.insertSpaces;\n\t\t\t}\n\t\t}\n\t\tif (typeof newOpts.tabSize !== 'undefined') {\n\t\t\tif (this._options.tabSize !== newOpts.tabSize) {\n\t\t\t\tsomethingChanged = true;\n\t\t\t\tchanged.tabSize = true;\n\t\t\t\tthis._options.tabSize = newOpts.tabSize;\n\t\t\t}\n\t\t}\n\t\tif (typeof newOpts.trimAutoWhitespace !== 'undefined') {\n\t\t\tif (this._options.trimAutoWhitespace !== newOpts.trimAutoWhitespace) {\n\t\t\t\tsomethingChanged = true;\n\t\t\t\tchanged.trimAutoWhitespace = true;\n\t\t\t\tthis._options.trimAutoWhitespace = newOpts.trimAutoWhitespace;\n\t\t\t}\n\t\t}\n\n\t\tif (somethingChanged) {\n\t\t\tthis.emit(editorCommon.EventType.ModelOptionsChanged, changed);\n\t\t}\n\t}\n\n\tpublic detectIndentation(defaultInsertSpaces:boolean, defaultTabSize:number): void {\n\t\tlet lines = this._lines.map(line => line.text);\n\t\tlet guessedIndentation = guessIndentation(lines, defaultTabSize, defaultInsertSpaces);\n\t\tthis.updateOptions({\n\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\ttabSize: guessedIndentation.tabSize\n\t\t});\n\t}\n\n\tprivate _normalizeIndentationFromWhitespace(str:string): string {\n\t\tlet tabSize = this._options.tabSize;\n\t\tlet insertSpaces = this._options.insertSpaces;\n\n\t\tlet spacesCnt = 0;\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tif (str.charAt(i) === '\\t') {\n\t\t\t\tspacesCnt += tabSize;\n\t\t\t} else {\n\t\t\t\tspacesCnt++;\n\t\t\t}\n\t\t}\n\n\t\tlet result = '';\n\t\tif (!insertSpaces) {\n\t\t\tlet tabsCnt = Math.floor(spacesCnt / tabSize);\n\t\t\tspacesCnt = spacesCnt % tabSize;\n\t\t\tfor (let i = 0; i < tabsCnt; i++) {\n\t\t\t\tresult += '\\t';\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < spacesCnt; i++) {\n\t\t\tresult += ' ';\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic normalizeIndentation(str:string): string {\n\t\tlet firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\n\t\tif (firstNonWhitespaceIndex === -1) {\n\t\t\tfirstNonWhitespaceIndex = str.length;\n\t\t}\n\t\treturn this._normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex)) + str.substring(firstNonWhitespaceIndex);\n\t}\n\n\tpublic getOneIndent(): string {\n\t\tlet tabSize = this._options.tabSize;\n\t\tlet insertSpaces = this._options.insertSpaces;\n\n\t\tif (insertSpaces) {\n\t\t\tlet result = '';\n\t\t\tfor (let i = 0; i < tabSize; i++) {\n\t\t\t\tresult += ' ';\n\t\t\t}\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn '\\t';\n\t\t}\n\t}\n\n\tpublic getVersionId(): number {\n\t\treturn this._versionId;\n\t}\n\n\tpublic getAlternativeVersionId(): number {\n\t\treturn this._alternativeVersionId;\n\t}\n\n\tprivate _ensureLineStarts(): void {\n\t\tif (!this._lineStarts) {\n\t\t\tconst lineStartValues:number[] = [];\n\t\t\tconst eolLength = this._EOL.length;\n\t\t\tfor (let i = 0, len = this._lines.length; i < len; i++) {\n\t\t\t\tlineStartValues.push(this._lines[i].text.length + eolLength);\n\t\t\t}\n\t\t\tthis._lineStarts = new PrefixSumComputer(lineStartValues);\n\t\t}\n\t}\n\n\tpublic getOffsetAt(rawPosition: editorCommon.IPosition): number {\n\t\tlet position = this.validatePosition(rawPosition);\n\t\tthis._ensureLineStarts();\n\t\treturn this._lineStarts.getAccumulatedValue(position.lineNumber - 2) + position.column - 1;\n\t}\n\n\tpublic getPositionAt(offset: number): Position {\n\t\toffset = Math.floor(offset);\n\t\toffset = Math.max(0, offset);\n\n\t\tthis._ensureLineStarts();\n\t\tlet out = this._lineStarts.getIndexOf(offset);\n\n\t\tlet lineLength = this._lines[out.index].text.length;\n\n\t\t// Ensure we return a valid position\n\t\treturn new Position(out.index + 1, Math.min(out.remainder + 1, lineLength + 1));\n\t}\n\n\t_increaseVersionId(): void {\n\t\tthis._setVersionId(this._versionId + 1);\n\t}\n\n\t_setVersionId(newVersionId:number): void {\n\t\tthis._versionId = newVersionId;\n\t\tthis._alternativeVersionId = this._versionId;\n\t}\n\n\t_overwriteAlternativeVersionId(newAlternativeVersionId:number): void {\n\t\tthis._alternativeVersionId = newAlternativeVersionId;\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._isDisposed;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\t// Null out members, such that any use of a disposed model will throw exceptions sooner rather than later\n\t\tthis._lines = null;\n\t\tthis._EOL = null;\n\t\tthis._BOM = null;\n\n\t\tsuper.dispose();\n\t}\n\n\t_createContentChangedFlushEvent(): editorCommon.IModelContentChangedFlushEvent {\n\t\treturn {\n\t\t\tchangeType: editorCommon.EventType.ModelRawContentChangedFlush,\n\t\t\tdetail: null,\n\t\t\t// TODO@Alex -> remove these fields from here\n\t\t\tversionId: -1,\n\t\t\tisUndoing: false,\n\t\t\tisRedoing: false\n\t\t};\n\t}\n\n\tprotected _emitContentChanged2(startLineNumber:number, startColumn:number, endLineNumber:number, endColumn:number, rangeLength:number, text:string, isUndoing:boolean, isRedoing:boolean): void {\n\t\tvar e:editorCommon.IModelContentChangedEvent2 = {\n\t\t\trange: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n\t\t\trangeLength: rangeLength,\n\t\t\ttext: text,\n\t\t\teol: this._EOL,\n\t\t\tversionId: this.getVersionId(),\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing\n\t\t};\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelContentChanged2, e);\n\t\t}\n\t}\n\n\t_resetValue(e:editorCommon.IModelContentChangedFlushEvent, newValue:editorCommon.IRawText): void {\n\t\tthis._constructLines(newValue);\n\n\t\tthis._increaseVersionId();\n\n\t\te.detail = this.toRawText();\n\t\te.versionId = this._versionId;\n\t}\n\n\tpublic toRawText(): editorCommon.IRawText {\n\t\treturn {\n\t\t\tBOM: this._BOM,\n\t\t\tEOL: this._EOL,\n\t\t\tlines: this.getLinesContent(),\n\t\t\tlength: this.getValueLength(),\n\t\t\toptions: this._options\n\t\t};\n\t}\n\n\tpublic equals(other: editorCommon.IRawText): boolean {\n\t\tif (this._BOM !== other.BOM) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._EOL !== other.EOL) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._lines.length !== other.lines.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = this._lines.length; i < len; i++) {\n\t\t\tif (this._lines[i].text !== other.lines[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic setValue(value:string): void {\n\t\tif (value === null) {\n\t\t\t// There's nothing to do\n\t\t\treturn;\n\t\t}\n\t\tlet rawText: editorCommon.IRawText = null;\n\t\trawText = TextModel.toRawText(value, {\n\t\t\ttabSize: this._options.tabSize,\n\t\t\tinsertSpaces: this._options.insertSpaces,\n\t\t\ttrimAutoWhitespace: this._options.trimAutoWhitespace,\n\t\t\tdetectIndentation: false,\n\t\t\tdefaultEOL: this._options.defaultEOL\n\t\t});\n\t\tthis.setValueFromRawText(rawText);\n\t}\n\n\tpublic setValueFromRawText(newValue:editorCommon.IRawText): void {\n\t\tif (newValue === null) {\n\t\t\t// There's nothing to do\n\t\t\treturn;\n\t\t}\n\t\tvar oldFullModelRange = this.getFullModelRange();\n\t\tvar oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n\t\tvar endLineNumber = this.getLineCount();\n\t\tvar endColumn = this.getLineMaxColumn(endLineNumber);\n\t\tvar e = this._createContentChangedFlushEvent();\n\n\t\tthis._resetValue(e, newValue);\n\t\tthis._emitModelContentChangedFlushEvent(e);\n\t\tthis._emitContentChanged2(1, 1, endLineNumber, endColumn, oldModelValueLength, this.getValue(), false, false);\n\t}\n\n\tpublic getValue(eol?:editorCommon.EndOfLinePreference, preserveBOM:boolean=false): string {\n\t\tvar fullModelRange = this.getFullModelRange();\n\t\tvar fullModelValue = this.getValueInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._BOM + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic getValueLength(eol?: editorCommon.EndOfLinePreference, preserveBOM: boolean = false): number {\n\t\tvar fullModelRange = this.getFullModelRange();\n\t\tvar fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._BOM.length + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic getEmptiedValueInRange(rawRange:editorCommon.IRange, fillCharacter: string = '', eol:editorCommon.EndOfLinePreference=editorCommon.EndOfLinePreference.TextDefined): string {\n\t\tvar range = this.validateRange(rawRange);\n\n\t\tif (range.isEmpty()) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn this._repeatCharacter(fillCharacter, range.endColumn - range.startColumn);\n\t\t}\n\n\t\tvar lineEnding = this._getEndOfLine(eol),\n\t\t\tstartLineIndex = range.startLineNumber - 1,\n\t\t\tendLineIndex = range.endLineNumber - 1,\n\t\t\tresultLines:string[] = [];\n\n\t\tresultLines.push(this._repeatCharacter(fillCharacter, this._lines[startLineIndex].text.length - range.startColumn + 1));\n\t\tfor (var i = startLineIndex + 1; i < endLineIndex; i++) {\n\t\t\tresultLines.push(this._repeatCharacter(fillCharacter, this._lines[i].text.length));\n\t\t}\n\t\tresultLines.push(this._repeatCharacter(fillCharacter, range.endColumn - 1));\n\n\t\treturn resultLines.join(lineEnding);\n\t}\n\n\tprivate _repeatCharacter(fillCharacter:string, count:number): string {\n\t\tvar r = '';\n\t\tfor (var i = 0; i < count; i++) {\n\t\t\tr += fillCharacter;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic getValueInRange(rawRange:editorCommon.IRange, eol:editorCommon.EndOfLinePreference=editorCommon.EndOfLinePreference.TextDefined): string {\n\t\tvar range = this.validateRange(rawRange);\n\n\t\tif (range.isEmpty()) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn this._lines[range.startLineNumber - 1].text.substring(range.startColumn - 1, range.endColumn - 1);\n\t\t}\n\n\t\tvar lineEnding = this._getEndOfLine(eol),\n\t\t\tstartLineIndex = range.startLineNumber - 1,\n\t\t\tendLineIndex = range.endLineNumber - 1,\n\t\t\tresultLines:string[] = [];\n\n\t\tresultLines.push(this._lines[startLineIndex].text.substring(range.startColumn - 1));\n\t\tfor (var i = startLineIndex + 1; i < endLineIndex; i++) {\n\t\t\tresultLines.push(this._lines[i].text);\n\t\t}\n\t\tresultLines.push(this._lines[endLineIndex].text.substring(0, range.endColumn - 1));\n\n\t\treturn resultLines.join(lineEnding);\n\t}\n\n\tpublic getValueLengthInRange(rawRange:editorCommon.IRange, eol:editorCommon.EndOfLinePreference=editorCommon.EndOfLinePreference.TextDefined): number {\n\t\tvar range = this.validateRange(rawRange);\n\n\t\tif (range.isEmpty()) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn (range.endColumn - range.startColumn);\n\t\t}\n\n\t\tlet startOffset = this.getOffsetAt(new Position(range.startLineNumber, range.startColumn));\n\t\tlet endOffset = this.getOffsetAt(new Position(range.endLineNumber, range.endColumn));\n\t\treturn endOffset - startOffset;\n\t}\n\n\tpublic isDominatedByLongLines(): boolean {\n\t\tvar smallLineCharCount = 0,\n\t\t\tlongLineCharCount = 0,\n\t\t\ti: number,\n\t\t\tlen: number,\n\t\t\tlines = this._lines,\n\t\t\tlineLength: number;\n\n\t\tfor (i = 0, len = this._lines.length; i < len; i++) {\n\t\t\tlineLength = lines[i].text.length;\n\t\t\tif (lineLength >= LONG_LINE_BOUNDARY) {\n\t\t\t\tlongLineCharCount += lineLength;\n\t\t\t} else {\n\t\t\t\tsmallLineCharCount += lineLength;\n\t\t\t}\n\t\t}\n\n\t\treturn (longLineCharCount > smallLineCharCount);\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lines.length;\n\t}\n\n\tpublic getLineContent(lineNumber:number): string {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\treturn this._lines[lineNumber - 1].text;\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\tvar r: string[] = [];\n\t\tfor (var i = 0, len = this._lines.length; i < len; i++) {\n\t\t\tr[i] = this._lines[i].text;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic getEOL(): string {\n\t\treturn this._EOL;\n\t}\n\n\tpublic setEOL(eol: editorCommon.EndOfLineSequence): void {\n\t\tvar newEOL = (eol === editorCommon.EndOfLineSequence.CRLF ? '\\r\\n' : '\\n');\n\t\tif (this._EOL === newEOL) {\n\t\t\t// Nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tvar oldFullModelRange = this.getFullModelRange();\n\t\tvar oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n\t\tvar endLineNumber = this.getLineCount();\n\t\tvar endColumn = this.getLineMaxColumn(endLineNumber);\n\n\t\tthis._EOL = newEOL;\n\t\tthis._lineStarts = null;\n\t\tthis._increaseVersionId();\n\n\t\tvar e = this._createContentChangedFlushEvent();\n\t\te.detail = this.toRawText();\n\t\te.versionId = this._versionId;\n\n\t\tthis._emitModelContentChangedFlushEvent(e);\n\t\tthis._emitContentChanged2(1, 1, endLineNumber, endColumn, oldModelValueLength, this.getValue(), false, false);\n\t}\n\n\tpublic getLineMinColumn(lineNumber:number): number {\n\t\treturn 1;\n\t}\n\n\tpublic getLineMaxColumn(lineNumber:number): number {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\treturn this._lines[lineNumber - 1].text.length + 1;\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\tvar result = strings.firstNonWhitespaceIndex(this._lines[lineNumber - 1].text);\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 1;\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\tvar result = strings.lastNonWhitespaceIndex(this._lines[lineNumber - 1].text);\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 2;\n\t}\n\n\tpublic validateLineNumber(lineNumber:number): number {\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t}\n\t\tif (lineNumber > this._lines.length) {\n\t\t\tlineNumber = this._lines.length;\n\t\t}\n\t\treturn lineNumber;\n\t}\n\n\tpublic validatePosition(position:editorCommon.IPosition): Position {\n\t\tvar lineNumber = position.lineNumber ? position.lineNumber : 1;\n\t\tvar column = position.column ? position.column : 1;\n\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tcolumn = 1;\n\t\t}\n\t\telse if (lineNumber > this._lines.length) {\n\t\t\tlineNumber = this._lines.length;\n\t\t\tcolumn = this.getLineMaxColumn(lineNumber);\n\t\t}\n\t\telse {\n\t\t\tvar maxColumn = this.getLineMaxColumn(lineNumber);\n\t\t\tif (column < 1) {\n\t\t\t\tcolumn = 1;\n\t\t\t}\n\t\t\telse if (column > maxColumn) {\n\t\t\t\tcolumn = maxColumn;\n\t\t\t}\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic validateRange(range:editorCommon.IRange): Range {\n\t\tvar start = this.validatePosition(new Position(range.startLineNumber, range.startColumn));\n\t\tvar end = this.validatePosition(new Position(range.endLineNumber, range.endColumn));\n\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t}\n\n\tpublic modifyPosition(rawPosition: editorCommon.IPosition, offset: number) : Position {\n\t\treturn this.getPositionAt(this.getOffsetAt(rawPosition) + offset);\n\t}\n\n\tpublic getFullModelRange(): Range {\n\t\tvar lineCount = this.getLineCount();\n\t\treturn new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n\t}\n\n\t_emitModelContentChangedFlushEvent(e:editorCommon.IModelContentChangedFlushEvent): void {\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelRawContentChanged, e);\n\t\t}\n\t}\n\n\tpublic static toRawText(rawText:string, opts:editorCommon.ITextModelCreationOptions): editorCommon.IRawText {\n\t\t// Count the number of lines that end with \\r\\n\n\t\tvar carriageReturnCnt = 0,\n\t\t\tlastCarriageReturnIndex = -1;\n\t\twhile ((lastCarriageReturnIndex = rawText.indexOf('\\r', lastCarriageReturnIndex + 1)) !== -1) {\n\t\t\tcarriageReturnCnt++;\n\t\t}\n\n\t\t// Split the text into liens\n\t\tvar lines = rawText.split(/\\r\\n|\\r|\\n/);\n\n\t\t// Remove the BOM (if present)\n\t\tvar BOM = '';\n\t\tif (strings.startsWithUTF8BOM(lines[0])) {\n\t\t\tBOM = strings.UTF8_BOM_CHARACTER;\n\t\t\tlines[0] = lines[0].substr(1);\n\t\t}\n\n\t\tvar lineFeedCnt = lines.length - 1;\n\t\tvar EOL = '';\n\t\tif (lineFeedCnt === 0) {\n\t\t\t// This is an empty file or a file with precisely one line\n\t\t\tEOL = (opts.defaultEOL === editorCommon.DefaultEndOfLine.LF ? '\\n' : '\\r\\n');\n\t\t} else if (carriageReturnCnt > lineFeedCnt / 2) {\n\t\t\t// More than half of the file contains \\r\\n ending lines\n\t\t\tEOL = '\\r\\n';\n\t\t} else {\n\t\t\t// At least one line more ends in \\n\n\t\t\tEOL = '\\n';\n\t\t}\n\n\t\tlet resolvedOpts: editorCommon.ITextModelResolvedOptions;\n\t\tif (opts.detectIndentation) {\n\t\t\tlet guessedIndentation = guessIndentation(lines, opts.tabSize, opts.insertSpaces);\n\t\t\tresolvedOpts = {\n\t\t\t\ttabSize: guessedIndentation.tabSize,\n\t\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\t\ttrimAutoWhitespace: opts.trimAutoWhitespace,\n\t\t\t\tdefaultEOL: opts.defaultEOL\n\t\t\t};\n\t\t} else {\n\t\t\tresolvedOpts = {\n\t\t\t\ttabSize: opts.tabSize,\n\t\t\t\tinsertSpaces: opts.insertSpaces,\n\t\t\t\ttrimAutoWhitespace: opts.trimAutoWhitespace,\n\t\t\t\tdefaultEOL: opts.defaultEOL\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tBOM: BOM,\n\t\t\tEOL: EOL,\n\t\t\tlines: lines,\n\t\t\tlength: rawText.length,\n\t\t\toptions: resolvedOpts\n\t\t};\n\t}\n\n\t_constructLines(rawText:editorCommon.IRawText): void {\n\t\tvar rawLines = rawText.lines,\n\t\t\tmodelLines: ModelLine[] = [],\n\t\t\ti: number,\n\t\t\tlen: number;\n\n\t\tfor (i = 0, len = rawLines.length; i < len; i++) {\n\t\t\tmodelLines.push(new ModelLine(i + 1, rawLines[i]));\n\t\t}\n\t\tthis._BOM = rawText.BOM;\n\t\tthis._EOL = rawText.EOL;\n\t\tthis._lines = modelLines;\n\t\tthis._lineStarts = null;\n\t}\n\n\tprivate _getEndOfLine(eol:editorCommon.EndOfLinePreference): string {\n\t\tswitch (eol) {\n\t\t\tcase editorCommon.EndOfLinePreference.LF:\n\t\t\t\treturn '\\n';\n\t\t\tcase editorCommon.EndOfLinePreference.CRLF:\n\t\t\t\treturn '\\r\\n';\n\t\t\tcase editorCommon.EndOfLinePreference.TextDefined:\n\t\t\t\treturn this.getEOL();\n\t\t}\n\t\tthrow new Error('Unknown EOL preference');\n\t}\n\n\tpublic findMatches(searchString:string, rawSearchScope:any, isRegex:boolean, matchCase:boolean, wholeWord:boolean, limitResultCount:number = LIMIT_FIND_COUNT): Range[] {\n\t\tvar regex = strings.createSafeRegExp(searchString, isRegex, matchCase, wholeWord);\n\t\tif (!regex) {\n\t\t\treturn [];\n\t\t}\n\n\t\tvar searchRange:Range;\n\t\tif (Range.isIRange(rawSearchScope)) {\n\t\t\tsearchRange = rawSearchScope;\n\t\t} else {\n\t\t\tsearchRange = this.getFullModelRange();\n\t\t}\n\n\t\treturn this._doFindMatches(searchRange, regex, limitResultCount);\n\t}\n\n\tpublic findNextMatch(searchString:string, rawSearchStart:editorCommon.IPosition, isRegex:boolean, matchCase:boolean, wholeWord:boolean): Range {\n\t\tvar regex = strings.createSafeRegExp(searchString, isRegex, matchCase, wholeWord);\n\t\tif (!regex) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar searchStart = this.validatePosition(rawSearchStart),\n\t\t\tlineCount = this.getLineCount(),\n\t\t\tstartLineNumber = searchStart.lineNumber,\n\t\t\ttext: string,\n\t\t\tr: Range;\n\n\t\t// Look in first line\n\t\ttext = this._lines[startLineNumber - 1].text.substring(searchStart.column - 1);\n\t\tr = this._findMatchInLine(regex, text, startLineNumber, searchStart.column - 1);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\n\t\tfor (var i = 1; i <= lineCount; i++) {\n\t\t\tvar lineIndex = (startLineNumber + i - 1) % lineCount;\n\t\t\ttext = this._lines[lineIndex].text;\n\t\t\tr = this._findMatchInLine(regex, text, lineIndex + 1, 0);\n\t\t\tif (r) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findPreviousMatch(searchString:string, rawSearchStart:editorCommon.IPosition, isRegex:boolean, matchCase:boolean, wholeWord:boolean): Range {\n\t\tvar regex = strings.createSafeRegExp(searchString, isRegex, matchCase, wholeWord);\n\t\tif (!regex) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar searchStart = this.validatePosition(rawSearchStart),\n\t\t\tlineCount = this.getLineCount(),\n\t\t\tstartLineNumber = searchStart.lineNumber,\n\t\t\ttext: string,\n\t\t\tr: Range;\n\n\t\t// Look in first line\n\t\ttext = this._lines[startLineNumber - 1].text.substring(0, searchStart.column - 1);\n\t\tr = this._findLastMatchInLine(regex, text, startLineNumber);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\n\t\tfor (var i = 1; i <= lineCount; i++) {\n\t\t\tvar lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n\t\t\ttext = this._lines[lineIndex].text;\n\t\t\tr = this._findLastMatchInLine(regex, text, lineIndex + 1);\n\t\t\tif (r) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _doFindMatches(searchRange:Range, searchRegex:RegExp, limitResultCount:number): Range[] {\n\t\tvar result:Range[] = [],\n\t\t\ttext: string,\n\t\t\tcounter = 0;\n\n\t\t// Early case for a search range that starts & stops on the same line number\n\t\tif (searchRange.startLineNumber === searchRange.endLineNumber) {\n\t\t\ttext = this._lines[searchRange.startLineNumber - 1].text.substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n\t\t\tcounter = this._findMatchesInLine(searchRegex, text, searchRange.startLineNumber, searchRange.startColumn - 1, counter, result, limitResultCount);\n\t\t\treturn result;\n\t\t}\n\n\t\t// Collect results from first line\n\t\ttext = this._lines[searchRange.startLineNumber - 1].text.substring(searchRange.startColumn - 1);\n\t\tcounter = this._findMatchesInLine(searchRegex, text, searchRange.startLineNumber, searchRange.startColumn - 1, counter, result, limitResultCount);\n\n\t\t// Collect results from middle lines\n\t\tfor (var lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && counter < limitResultCount; lineNumber++) {\n\t\t\tcounter = this._findMatchesInLine(searchRegex, this._lines[lineNumber - 1].text, lineNumber, 0, counter, result, limitResultCount);\n\t\t}\n\n\t\t// Collect results from last line\n\t\tif (counter < limitResultCount) {\n\t\t\ttext = this._lines[searchRange.endLineNumber - 1].text.substring(0, searchRange.endColumn - 1);\n\t\t\tcounter = this._findMatchesInLine(searchRegex, text, searchRange.endLineNumber, 0, counter, result, limitResultCount);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _findMatchInLine(searchRegex:RegExp, text:string, lineNumber:number, deltaOffset:number): Range {\n\t\tvar m = searchRegex.exec(text);\n\t\tif (!m) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset);\n\t}\n\n\tprivate _findLastMatchInLine(searchRegex:RegExp, text:string, lineNumber:number): Range {\n\t\tlet bestResult: Range = null;\n\t\tlet m:RegExpExecArray;\n\t\twhile ((m = searchRegex.exec(text))) {\n\t\t\tlet result = new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length);\n\t\t\tif (result.equalsRange(bestResult)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbestResult = result;\n\t\t}\n\t\treturn bestResult;\n\t}\n\n\tprivate _findMatchesInLine(searchRegex:RegExp, text:string, lineNumber:number, deltaOffset:number, counter:number, result:Range[], limitResultCount:number): number {\n\t\tvar m:RegExpExecArray;\n\t\t// Reset regex to search from the beginning\n\t\tsearchRegex.lastIndex = 0;\n\t\tdo {\n\t\t\tm = searchRegex.exec(text);\n\t\t\tif (m) {\n\t\t\t\tvar range = new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset);\n\t\t\t\t// Exit early if the regex matches the same range\n\t\t\t\tif (range.equalsRange(result[result.length - 1])) {\n\t\t\t\t\treturn counter;\n\t\t\t\t}\n\t\t\t\tresult.push(range);\n\t\t\t\tcounter++;\n\t\t\t\tif (counter >= limitResultCount) {\n\t\t\t\t\treturn counter;\n\t\t\t\t}\n\t\t\t}\n\t\t} while(m);\n\t\treturn counter;\n\t}\n}\n\nexport class RawText {\n\n\tpublic static fromString(rawText:string, opts:editorCommon.ITextModelCreationOptions): editorCommon.IRawText {\n\t\treturn TextModel.toRawText(rawText, opts);\n\t}\n\n\tpublic static fromStringWithModelOptions(rawText:string, model:editorCommon.IModel): editorCommon.IRawText {\n\t\tlet opts = model.getOptions();\n\t\treturn TextModel.toRawText(rawText, {\n\t\t\ttabSize: opts.tabSize,\n\t\t\tinsertSpaces: opts.insertSpaces,\n\t\t\ttrimAutoWhitespace: opts.trimAutoWhitespace,\n\t\t\tdetectIndentation: false,\n\t\t\tdefaultEOL: opts.defaultEOL\n\t\t});\n\t}\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as modes from 'vs/editor/common/modes';\nimport {USUAL_WORD_SEPARATORS} from 'vs/editor/common/config/defaultConfig';\n\nexport class NullState implements modes.IState {\n\n\tprivate mode: modes.IMode;\n\tprivate stateData: modes.IState;\n\n\tconstructor(mode: modes.IMode, stateData: modes.IState) {\n\t\tthis.mode = mode;\n\t\tthis.stateData = stateData;\n\t}\n\n\tpublic clone(): modes.IState {\n\t\tvar stateDataClone:modes.IState = (this.stateData ? this.stateData.clone() : null);\n\t\treturn new NullState(this.mode, stateDataClone);\n\t}\n\n\tpublic equals(other:modes.IState): boolean {\n\t\tif (this.mode !== other.getMode()) {\n\t\t\treturn false;\n\t\t}\n\t\tvar otherStateData = other.getStateData();\n\t\tif (!this.stateData && !otherStateData) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.stateData && otherStateData) {\n\t\t\treturn this.stateData.equals(otherStateData);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getMode(): modes.IMode {\n\t\treturn this.mode;\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\t\tstream.advanceToEOS();\n\t\treturn { type:'' };\n\t}\n\n\tpublic getStateData(): modes.IState {\n\t\treturn this.stateData;\n\t}\n\n\tpublic setStateData(stateData:modes.IState):void {\n\t\tthis.stateData = stateData;\n\t}\n}\n\nexport class NullMode implements modes.IMode {\n\n\t/**\n\t * Create a word definition regular expression based on default word separators.\n\t * Optionally provide allowed separators that should be included in words.\n\t *\n\t * The default would look like this:\n\t * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n\t */\n\tpublic static createWordRegExp(allowInWords:string = ''): RegExp {\n\t\tvar usualSeparators = USUAL_WORD_SEPARATORS;\n\t\tvar source = '(-?\\\\d*\\\\.\\\\d\\\\w*)|([^';\n\t\tfor (var i = 0; i < usualSeparators.length; i++) {\n\t\t\tif (allowInWords.indexOf(usualSeparators[i]) >= 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsource += '\\\\' + usualSeparators[i];\n\t\t}\n\t\tsource += '\\\\s]+)';\n\t\treturn new RegExp(source, 'g');\n\t}\n\n\t// catches numbers (including floating numbers) in the first group, and alphanum in the second\n\tstatic DEFAULT_WORD_REGEXP = NullMode.createWordRegExp();\n\n\tpublic static ID = 'vs.editor.modes.nullMode';\n\n\tpublic richEditSupport: modes.IRichEditSupport;\n\n\tconstructor() {\n\t\tthis.richEditSupport = {\n\t\t\twordDefinition: NullMode.DEFAULT_WORD_REGEXP\n\t\t};\n\t}\n\n\tpublic getId():string {\n\t\treturn NullMode.ID;\n\t}\n\n\tpublic toSimplifiedMode(): modes.IMode {\n\t\treturn this;\n\t}\n}\n\nexport function nullTokenize(mode: modes.IMode, buffer:string, state: modes.IState, deltaOffset:number = 0, stopAtOffset?:number): modes.ILineTokens {\n\tvar tokens:modes.IToken[] = [\n\t\t{\n\t\t\tstartIndex: deltaOffset,\n\t\t\ttype: ''\n\t\t}\n\t];\n\n\tvar modeTransitions:modes.IModeTransition[] = [\n\t\t{\n\t\t\tstartIndex: deltaOffset,\n\t\t\tmode: mode\n\t\t}\n\t];\n\n\treturn {\n\t\ttokens: tokens,\n\t\tactualStopOffset: deltaOffset + buffer.length,\n\t\tendState: state,\n\t\tmodeTransitions: modeTransitions\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IPosition, IWordAtPosition} from 'vs/editor/common/editorCommon';\nimport {IMode, IModeTransition} from 'vs/editor/common/modes';\nimport {NullMode} from 'vs/editor/common/modes/nullMode';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\n\nexport interface ITextSource {\n\n\t_lineIsTokenized(lineNumber:number): boolean;\n\n\tgetLineContent(lineNumber:number): string;\n\n\tgetMode(): IMode;\n\n\t_getLineModeTransitions(lineNumber:number): ModeTransition[];\n}\n\nexport interface INonWordTokenMap {\n\t[key:string]:boolean;\n}\n\nexport class WordHelper {\n\n\tprivate static _safeGetWordDefinition(mode:IMode): RegExp {\n\t\treturn (mode.richEditSupport ? mode.richEditSupport.wordDefinition : null);\n\t}\n\n\tpublic static ensureValidWordDefinition(wordDefinition?:RegExp): RegExp {\n\t\tvar result: RegExp = NullMode.DEFAULT_WORD_REGEXP;\n\n\t\tif (wordDefinition && (wordDefinition instanceof RegExp)) {\n\t\t\tif (!wordDefinition.global) {\n\t\t\t\tvar flags = 'g';\n\t\t\t\tif (wordDefinition.ignoreCase) {\n\t\t\t\t\tflags += 'i';\n\t\t\t\t}\n\t\t\t\tif (wordDefinition.multiline) {\n\t\t\t\t\tflags += 'm';\n\t\t\t\t}\n\t\t\t\tresult = new RegExp(wordDefinition.source, flags);\n\t\t\t} else {\n\t\t\t\tresult = wordDefinition;\n\t\t\t}\n\t\t}\n\n\t\tresult.lastIndex = 0;\n\n\t\treturn result;\n\t}\n\n\tpublic static massageWordDefinitionOf(mode:IMode): RegExp {\n\t\treturn WordHelper.ensureValidWordDefinition(WordHelper._safeGetWordDefinition(mode));\n\t}\n\n\tprivate static _getWordAtColumn(txt:string, column:number, modeIndex: number, modeTransitions:IModeTransition[]): IWordAtPosition {\n\t\tvar modeStartIndex = modeTransitions[modeIndex].startIndex,\n\t\t\tmodeEndIndex = (modeIndex + 1 < modeTransitions.length ? modeTransitions[modeIndex + 1].startIndex : txt.length),\n\t\t\tmode = modeTransitions[modeIndex].mode;\n\n\t\treturn WordHelper._getWordAtText(\n\t\t\tcolumn, WordHelper.massageWordDefinitionOf(mode),\n\t\t\ttxt.substring(modeStartIndex, modeEndIndex), modeStartIndex\n\t\t);\n\t}\n\n\tpublic static getWordAtPosition(textSource:ITextSource, position:IPosition): IWordAtPosition {\n\n\t\tif (!textSource._lineIsTokenized(position.lineNumber)) {\n\t\t\treturn WordHelper._getWordAtText(position.column, WordHelper.massageWordDefinitionOf(textSource.getMode()), textSource.getLineContent(position.lineNumber), 0);\n\t\t}\n\n\t\tvar result: IWordAtPosition = null;\n\t\tvar txt = textSource.getLineContent(position.lineNumber),\n\t\t\tmodeTransitions = textSource._getLineModeTransitions(position.lineNumber),\n\t\t\tcolumnIndex = position.column - 1,\n\t\t\tmodeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, columnIndex);\n\n\t\tresult = WordHelper._getWordAtColumn(txt, position.column, modeIndex, modeTransitions);\n\n\t\tif (!result && modeIndex > 0 && modeTransitions[modeIndex].startIndex === columnIndex) {\n\t\t\t// The position is right at the beginning of `modeIndex`, so try looking at `modeIndex` - 1 too\n\t\t\tresult = WordHelper._getWordAtColumn(txt, position.column, modeIndex - 1, modeTransitions);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tstatic _getWordAtText(column:number, wordDefinition:RegExp, text:string, textOffset:number): IWordAtPosition {\n\n\t\t// console.log('_getWordAtText: ', column, text, textOffset);\n\n\t\tvar words = text.match(wordDefinition),\n\t\t\tk:number,\n\t\t\tstartWord:number,\n\t\t\tendWord:number,\n\t\t\tstartColumn:number,\n\t\t\tendColumn:number,\n\t\t\tword:string;\n\n\t\tif (words) {\n\t\t\tfor (k = 0; k < words.length; k++) {\n\t\t\t\tword = words[k].trim();\n\t\t\t\tif (word.length > 0) {\n\t\t\t\t\tstartWord = text.indexOf(word, endWord);\n\t\t\t\t\tendWord = startWord + word.length;\n\n\t\t\t\t\tstartColumn = textOffset + startWord + 1;\n\t\t\t\t\tendColumn = textOffset + endWord + 1;\n\n\t\t\t\t\tif (startColumn <= column && column <= endColumn) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tword: word,\n\t\t\t\t\t\t\tstartColumn: startColumn,\n\t\t\t\t\t\t\tendColumn: endColumn\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {ICommentsConfiguration, IRichEditBrackets, IRichEditCharacterPair, IAutoClosingPair,\n\tIAutoClosingPairConditional, IRichEditOnEnter, IRichEditSupport, CharacterPair} from 'vs/editor/common/modes';\nimport {NullMode} from 'vs/editor/common/modes/nullMode';\nimport {CharacterPairSupport} from 'vs/editor/common/modes/supports/characterPair';\nimport {BracketElectricCharacterSupport, IBracketElectricCharacterContribution} from 'vs/editor/common/modes/supports/electricCharacter';\nimport {IIndentationRules, IOnEnterRegExpRules, IOnEnterSupportOptions, OnEnterSupport} from 'vs/editor/common/modes/supports/onEnter';\nimport {RichEditBrackets} from 'vs/editor/common/modes/supports/richEditBrackets';\n\nexport interface CommentRule {\n\tlineComment?: string;\n\tblockComment?: CharacterPair;\n}\n\nexport interface IRichLanguageConfiguration {\n\tcomments?: CommentRule;\n\tbrackets?: CharacterPair[];\n\twordPattern?: RegExp;\n\tindentationRules?: IIndentationRules;\n\tonEnterRules?: IOnEnterRegExpRules[];\n\tautoClosingPairs?: IAutoClosingPairConditional[];\n\tsurroundingPairs?: IAutoClosingPair[];\n\t__electricCharacterSupport?: IBracketElectricCharacterContribution;\n}\n\nexport class RichEditSupport implements IRichEditSupport {\n\n\tprivate _conf: IRichLanguageConfiguration;\n\n\tpublic electricCharacter: BracketElectricCharacterSupport;\n\tpublic comments: ICommentsConfiguration;\n\tpublic characterPair: IRichEditCharacterPair;\n\tpublic wordDefinition: RegExp;\n\tpublic onEnter: IRichEditOnEnter;\n\tpublic brackets: IRichEditBrackets;\n\n\tconstructor(modeId:string, previous:IRichEditSupport, rawConf:IRichLanguageConfiguration) {\n\n\t\tlet prev:IRichLanguageConfiguration = null;\n\t\tif (previous instanceof RichEditSupport) {\n\t\t\tprev = previous._conf;\n\t\t}\n\n\t\tthis._conf = RichEditSupport._mergeConf(prev, rawConf);\n\n\t\tif (this._conf.brackets) {\n\t\t\tthis.brackets = new RichEditBrackets(modeId, this._conf.brackets);\n\t\t}\n\n\t\tthis._handleOnEnter(modeId, this._conf);\n\n\t\tthis._handleComments(modeId, this._conf);\n\n\t\tif (this._conf.autoClosingPairs) {\n\t\t\tthis.characterPair = new CharacterPairSupport(modeId, this._conf);\n\t\t}\n\n\t\tif (this._conf.__electricCharacterSupport || this._conf.brackets) {\n\t\t\tthis.electricCharacter = new BracketElectricCharacterSupport(modeId, this.brackets, this._conf.__electricCharacterSupport);\n\t\t}\n\n\t\tthis.wordDefinition = this._conf.wordPattern || NullMode.DEFAULT_WORD_REGEXP;\n\t}\n\n\tprivate static _mergeConf(prev:IRichLanguageConfiguration, current:IRichLanguageConfiguration): IRichLanguageConfiguration {\n\t\treturn {\n\t\t\tcomments: (prev ? current.comments || prev.comments : current.comments),\n\t\t\tbrackets: (prev ? current.brackets || prev.brackets : current.brackets),\n\t\t\twordPattern: (prev ? current.wordPattern || prev.wordPattern : current.wordPattern),\n\t\t\tindentationRules: (prev ? current.indentationRules || prev.indentationRules : current.indentationRules),\n\t\t\tonEnterRules: (prev ? current.onEnterRules || prev.onEnterRules : current.onEnterRules),\n\t\t\tautoClosingPairs: (prev ? current.autoClosingPairs || prev.autoClosingPairs : current.autoClosingPairs),\n\t\t\tsurroundingPairs: (prev ? current.surroundingPairs || prev.surroundingPairs : current.surroundingPairs),\n\t\t\t__electricCharacterSupport: (prev ? current.__electricCharacterSupport || prev.__electricCharacterSupport : current.__electricCharacterSupport),\n\t\t};\n\t}\n\n\tprivate _handleOnEnter(modeId:string, conf:IRichLanguageConfiguration): void {\n\t\t// on enter\n\t\tlet onEnter: IOnEnterSupportOptions = {};\n\t\tlet empty = true;\n\n\t\tif (conf.brackets) {\n\t\t\tempty = false;\n\t\t\tonEnter.brackets = conf.brackets;\n\t\t}\n\t\tif (conf.indentationRules) {\n\t\t\tempty = false;\n\t\t\tonEnter.indentationRules = conf.indentationRules;\n\t\t}\n\t\tif (conf.onEnterRules) {\n\t\t\tempty = false;\n\t\t\tonEnter.regExpRules = conf.onEnterRules;\n\t\t}\n\n\t\tif (!empty) {\n\t\t\tthis.onEnter = new OnEnterSupport(modeId, onEnter);\n\t\t}\n\t}\n\n\tprivate _handleComments(modeId:string, conf:IRichLanguageConfiguration): void {\n\t\tlet commentRule = conf.comments;\n\n\t\t// comment configuration\n\t\tif (commentRule) {\n\t\t\tthis.comments = {};\n\n\t\t\tif (commentRule.lineComment) {\n\t\t\t\tthis.comments.lineCommentToken = commentRule.lineComment;\n\t\t\t}\n\t\t\tif (commentRule.blockComment) {\n\t\t\t\tlet [blockStart, blockEnd] = commentRule.blockComment;\n\t\t\t\tthis.comments.blockCommentStartToken = blockStart;\n\t\t\t\tthis.comments.blockCommentEndToken = blockEnd;\n\t\t\t}\n\t\t}\n\t}\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport * as modes from 'vs/editor/common/modes';\nimport {LineStream} from 'vs/editor/common/modes/lineStream';\nimport {NullMode, NullState, nullTokenize} from 'vs/editor/common/modes/nullMode';\nimport {Token} from 'vs/editor/common/modes/supports';\n\nexport interface ILeavingNestedModeData {\n\t/**\n\t * The part of the line that will be tokenized by the nested mode\n\t */\n\tnestedModeBuffer: string;\n\n\t/**\n\t * The part of the line that will be tokenized by the parent mode when it continues after the nested mode\n\t */\n\tbufferAfterNestedMode: string;\n\n\t/**\n\t * The state that will be used for continuing tokenization by the parent mode after the nested mode\n\t */\n\tstateAfterNestedMode: modes.IState;\n}\n\nexport interface IEnteringNestedModeData {\n\tmode:modes.IMode;\n\tmissingModePromise:TPromise<void>;\n}\n\nexport interface ITokenizationCustomization {\n\n\tgetInitialState():modes.IState;\n\n\tenterNestedMode?: (state:modes.IState) => boolean;\n\n\tgetNestedMode?: (state:modes.IState) => IEnteringNestedModeData;\n\n\tgetNestedModeInitialState?: (myState:modes.IState) => { state:modes.IState; missingModePromise:TPromise<void>; };\n\n\t/**\n\t * Return null if the line does not leave the nested mode\n\t */\n\tgetLeavingNestedModeData?: (line:string, state:modes.IState) => ILeavingNestedModeData;\n\n\t/**\n\t * Callback for when leaving a nested mode and returning to the outer mode.\n\t * @param myStateAfterNestedMode The outer mode's state that will begin to tokenize\n\t * @param lastNestedModeState The nested mode's last state\n\t */\n\tonReturningFromNestedMode?: (myStateAfterNestedMode:modes.IState, lastNestedModeState:modes.IState)=> void;\n}\n\nfunction isFunction(something) {\n\treturn typeof something === 'function';\n}\n\nexport class TokenizationSupport implements modes.ITokenizationSupport, IDisposable {\n\n\tstatic MAX_EMBEDDED_LEVELS = 5;\n\n\tprivate customization:ITokenizationCustomization;\n\tprivate defaults: {\n\t\tenterNestedMode: boolean;\n\t\tgetNestedMode: boolean;\n\t\tgetNestedModeInitialState: boolean;\n\t\tgetLeavingNestedModeData: boolean;\n\t\tonReturningFromNestedMode: boolean;\n\t};\n\n\tpublic shouldGenerateEmbeddedModels:boolean;\n\tpublic supportsNestedModes:boolean;\n\n\tprivate _mode:modes.IMode;\n\tprivate _embeddedModesListeners: { [modeId:string]: IDisposable; };\n\n\tconstructor(mode:modes.IMode, customization:ITokenizationCustomization, supportsNestedModes:boolean, shouldGenerateEmbeddedModels:boolean) {\n\t\tthis._mode = mode;\n\t\tthis.customization = customization;\n\t\tthis.supportsNestedModes = supportsNestedModes;\n\t\tthis._embeddedModesListeners = {};\n\t\tif (this.supportsNestedModes) {\n\t\t\tif (!this._mode.registerSupport) {\n\t\t\t\tthrow new Error('Cannot be a mode with nested modes unless I can emit a tokenizationSupport changed event!');\n\t\t\t}\n\t\t}\n\t\tthis.shouldGenerateEmbeddedModels = shouldGenerateEmbeddedModels;\n\t\tthis.defaults = {\n\t\t\tenterNestedMode: !isFunction(customization.enterNestedMode),\n\t\t\tgetNestedMode: !isFunction(customization.getNestedMode),\n\t\t\tgetNestedModeInitialState: !isFunction(customization.getNestedModeInitialState),\n\t\t\tgetLeavingNestedModeData: !isFunction(customization.getLeavingNestedModeData),\n\t\t\tonReturningFromNestedMode: !isFunction(customization.onReturningFromNestedMode)\n\t\t};\n\t}\n\n\tpublic dispose() : void {\n\t\tfor (var listener in this._embeddedModesListeners) {\n\t\t\tthis._embeddedModesListeners[listener].dispose();\n\t\t\tdelete this._embeddedModesListeners[listener];\n\t\t}\n\t}\n\n\tpublic getInitialState(): modes.IState {\n\t\treturn this.customization.getInitialState();\n\t}\n\n\tpublic tokenize(line:string, state:modes.IState, deltaOffset:number = 0, stopAtOffset:number = deltaOffset + line.length):modes.ILineTokens {\n\t\tif (state.getMode() !== this._mode) {\n\t\t\treturn this._nestedTokenize(line, state, deltaOffset, stopAtOffset, [], []);\n\t\t} else {\n\t\t\treturn this._myTokenize(line, state, deltaOffset, stopAtOffset, [], []);\n\t\t}\n\t}\n\n\t/**\n\t * Precondition is: nestedModeState.getMode() !== this\n\t * This means we are in a nested mode when parsing starts on this line.\n\t */\n\tprivate _nestedTokenize(buffer:string, nestedModeState:modes.IState, deltaOffset:number, stopAtOffset:number, prependTokens:modes.IToken[], prependModeTransitions:modes.IModeTransition[]):modes.ILineTokens {\n\t\tvar myStateBeforeNestedMode = nestedModeState.getStateData();\n\t\tvar leavingNestedModeData = this.getLeavingNestedModeData(buffer, myStateBeforeNestedMode);\n\n\t\t// Be sure to give every embedded mode the\n\t\t// opportunity to leave nested mode.\n\t\t// i.e. Don't go straight to the most nested mode\n\t\tvar stepOnceNestedState = nestedModeState;\n\t\twhile (stepOnceNestedState.getStateData() && stepOnceNestedState.getStateData().getMode() !== this._mode) {\n\t\t\tstepOnceNestedState = stepOnceNestedState.getStateData();\n\t\t}\n\t\tvar nestedMode = stepOnceNestedState.getMode();\n\n\t\tif (!leavingNestedModeData) {\n\t\t\t// tokenization will not leave nested mode\n\t\t\tvar result:modes.ILineTokens;\n\t\t\tif (nestedMode.tokenizationSupport) {\n\t\t\t\tresult = nestedMode.tokenizationSupport.tokenize(buffer, nestedModeState, deltaOffset, stopAtOffset);\n\t\t\t} else {\n\t\t\t\t// The nested mode doesn't have tokenization support,\n\t\t\t\t// unfortunatelly this means we have to fake it\n\t\t\t\tresult = nullTokenize(nestedMode, buffer, nestedModeState, deltaOffset);\n\t\t\t}\n\t\t\tresult.tokens = prependTokens.concat(result.tokens);\n\t\t\tresult.modeTransitions = prependModeTransitions.concat(result.modeTransitions);\n\t\t\treturn result;\n\t\t}\n\n\t\tvar nestedModeBuffer = leavingNestedModeData.nestedModeBuffer;\n\t\tif (nestedModeBuffer.length > 0) {\n\t\t\t// Tokenize with the nested mode\n\t\t\tvar nestedModeLineTokens:modes.ILineTokens;\n\t\t\tif (nestedMode.tokenizationSupport) {\n\t\t\t\tnestedModeLineTokens = nestedMode.tokenizationSupport.tokenize(nestedModeBuffer, nestedModeState, deltaOffset, stopAtOffset);\n\t\t\t} else {\n\t\t\t\t// The nested mode doesn't have tokenization support,\n\t\t\t\t// unfortunatelly this means we have to fake it\n\t\t\t\tnestedModeLineTokens = nullTokenize(nestedMode, nestedModeBuffer, nestedModeState, deltaOffset);\n\t\t\t}\n\n\t\t\t// Save last state of nested mode\n\t\t\tnestedModeState = nestedModeLineTokens.endState;\n\n\t\t\t// Prepend nested mode's result to our result\n\t\t\tprependTokens = prependTokens.concat(nestedModeLineTokens.tokens);\n\t\t\tprependModeTransitions = prependModeTransitions.concat(nestedModeLineTokens.modeTransitions);\n\t\t}\n\n\t\tvar bufferAfterNestedMode = leavingNestedModeData.bufferAfterNestedMode;\n\t\tvar myStateAfterNestedMode = leavingNestedModeData.stateAfterNestedMode;\n\t\tmyStateAfterNestedMode.setStateData(myStateBeforeNestedMode.getStateData());\n\t\tthis.onReturningFromNestedMode(myStateAfterNestedMode, nestedModeState);\n\n\t\treturn this._myTokenize(bufferAfterNestedMode, myStateAfterNestedMode, deltaOffset + nestedModeBuffer.length, stopAtOffset, prependTokens, prependModeTransitions);\n\t}\n\n\t/**\n\t * Precondition is: state.getMode() === this\n\t * This means we are in the current mode when parsing starts on this line.\n\t */\n\tprivate _myTokenize(buffer:string, myState:modes.IState, deltaOffset:number, stopAtOffset:number, prependTokens:modes.IToken[], prependModeTransitions:modes.IModeTransition[]):modes.ILineTokens {\n\t\tvar lineStream = new LineStream(buffer);\n\t\tvar tokenResult:modes.ITokenizationResult, beforeTokenizeStreamPos:number;\n\t\tvar previousType:string = null;\n\t\tvar retokenize:TPromise<void> = null;\n\n\t\tmyState = myState.clone();\n\t\tif (prependModeTransitions.length <= 0 || prependModeTransitions[prependModeTransitions.length-1].mode !== this._mode) {\n\t\t\t// Avoid transitioning to the same mode (this can happen in case of empty embedded modes)\n\t\t\tprependModeTransitions.push({\n\t\t\t\tstartIndex: deltaOffset,\n\t\t\t\tmode: this._mode\n\t\t\t});\n\t\t}\n\n\t\tvar maxPos = Math.min(stopAtOffset - deltaOffset, buffer.length);\n\t\twhile (lineStream.pos() < maxPos) {\n\t\t\tbeforeTokenizeStreamPos = lineStream.pos();\n\n\t\t\tdo {\n\t\t\t\ttokenResult = myState.tokenize(lineStream);\n\t\t\t\tif (tokenResult === null || tokenResult === undefined ||\n\t\t\t\t\t((tokenResult.type === undefined || tokenResult.type === null) &&\n\t\t\t\t\t(tokenResult.nextState === undefined || tokenResult.nextState === null))) {\n\t\t\t\t\tthrow new Error('Tokenizer must return a valid state');\n\t\t\t\t}\n\n\t\t\t\tif (tokenResult.nextState) {\n\t\t\t\t\ttokenResult.nextState.setStateData(myState.getStateData());\n\t\t\t\t\tmyState = tokenResult.nextState;\n\t\t\t\t}\n\t\t\t\tif (lineStream.pos() <= beforeTokenizeStreamPos) {\n\t\t\t\t\tthrow new Error('Stream did not advance while tokenizing. Mode id is ' + this._mode.getId() + ' (stuck at token type: \"' + tokenResult.type + '\", prepend tokens: \"' + (prependTokens.map(t => t.type).join(',')) + '\").');\n\t\t\t\t}\n\t\t\t} while (!tokenResult.type && tokenResult.type !== '');\n\n\t\t\tif (previousType !== tokenResult.type || tokenResult.dontMergeWithPrev || previousType === null) {\n\t\t\t\tprependTokens.push(new Token(beforeTokenizeStreamPos + deltaOffset, tokenResult.type));\n\t\t\t}\n\n\t\t\tpreviousType = tokenResult.type;\n\n\t\t\tif (this.supportsNestedModes && this.enterNestedMode(myState)) {\n\t\t\t\tvar currentEmbeddedLevels = this._getEmbeddedLevel(myState);\n\t\t\t\tif (currentEmbeddedLevels < TokenizationSupport.MAX_EMBEDDED_LEVELS) {\n\t\t\t\t\tvar nestedModeState = this.getNestedModeInitialState(myState);\n\n\t\t\t\t\t// Re-emit tokenizationSupport change events from all modes that I ever embedded\n\t\t\t\t\tvar embeddedMode = nestedModeState.state.getMode();\n\t\t\t\t\tif (typeof embeddedMode.addSupportChangedListener === 'function' && !this._embeddedModesListeners.hasOwnProperty(embeddedMode.getId())) {\n\t\t\t\t\t\tvar emitting = false;\n\t\t\t\t\t\tthis._embeddedModesListeners[embeddedMode.getId()] = embeddedMode.addSupportChangedListener((e) => {\n\t\t\t\t\t\t\tif (emitting) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (e.tokenizationSupport) {\n\t\t\t\t\t\t\t\temitting = true;\n\t\t\t\t\t\t\t\tthis._mode.registerSupport(modes.MutableSupport.TokenizationSupport, (mode) => {\n\t\t\t\t\t\t\t\t\treturn mode.tokenizationSupport;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\temitting = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (!lineStream.eos()) {\n\t\t\t\t\t\t// There is content from the embedded mode\n\t\t\t\t\t\tvar restOfBuffer = buffer.substr(lineStream.pos());\n\t\t\t\t\t\tvar result = this._nestedTokenize(restOfBuffer, nestedModeState.state, deltaOffset + lineStream.pos(), stopAtOffset, prependTokens, prependModeTransitions);\n\t\t\t\t\t\tresult.retokenize = result.retokenize || nestedModeState.missingModePromise;\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Transition to the nested mode state\n\t\t\t\t\t\tmyState = nestedModeState.state;\n\t\t\t\t\t\tretokenize = nestedModeState.missingModePromise;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttokens: prependTokens,\n\t\t\tactualStopOffset: lineStream.pos() + deltaOffset,\n\t\t\tmodeTransitions: prependModeTransitions,\n\t\t\tendState: myState,\n\t\t\tretokenize: retokenize\n\t\t};\n\t}\n\n\tprivate _getEmbeddedLevel(state:modes.IState): number {\n\t\tvar result = -1;\n\t\twhile(state) {\n\t\t\tresult++;\n\t\t\tstate = state.getStateData();\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate enterNestedMode(state:modes.IState): boolean {\n\t\tif (this.defaults.enterNestedMode) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.customization.enterNestedMode(state);\n\n\t}\n\n\tprivate getNestedMode(state:modes.IState): IEnteringNestedModeData {\n\t\tif (this.defaults.getNestedMode) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.customization.getNestedMode(state);\n\t}\n\n\tprivate static _validatedNestedMode(input:IEnteringNestedModeData): IEnteringNestedModeData {\n\t\tvar mode: modes.IMode = new NullMode(),\n\t\t\tmissingModePromise: TPromise<void> = null;\n\n\t\tif (input && input.mode) {\n\t\t\tmode = input.mode;\n\t\t}\n\t\tif (input && input.missingModePromise) {\n\t\t\tmissingModePromise = input.missingModePromise;\n\t\t}\n\n\t\treturn {\n\t\t\tmode: mode,\n\t\t\tmissingModePromise: missingModePromise\n\t\t};\n\t}\n\n\tprivate getNestedModeInitialState(state:modes.IState): { state:modes.IState; missingModePromise:TPromise<void>; } {\n\t\tif (this.defaults.getNestedModeInitialState) {\n\t\t\tvar nestedMode = TokenizationSupport._validatedNestedMode(this.getNestedMode(state));\n\t\t\tvar missingModePromise = nestedMode.missingModePromise;\n\t\t\tvar nestedModeState: modes.IState;\n\n\t\t\tif (nestedMode.mode.tokenizationSupport) {\n\t\t\t\tnestedModeState = nestedMode.mode.tokenizationSupport.getInitialState();\n\t\t\t} else {\n\t\t\t\tnestedModeState = new NullState(nestedMode.mode, null);\n\t\t\t}\n\n\t\t\tnestedModeState.setStateData(state);\n\n\t\t\treturn {\n\t\t\t\tstate: nestedModeState,\n\t\t\t\tmissingModePromise: missingModePromise\n\t\t\t};\n\t\t}\n\t\treturn this.customization.getNestedModeInitialState(state);\n\t}\n\n\tprivate getLeavingNestedModeData(line:string, state:modes.IState): ILeavingNestedModeData {\n\t\tif (this.defaults.getLeavingNestedModeData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.customization.getLeavingNestedModeData(line, state);\n\t}\n\n\tprivate onReturningFromNestedMode(myStateAfterNestedMode:modes.IState, lastNestedModeState:modes.IState): void {\n\t\tif (this.defaults.onReturningFromNestedMode) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.customization.onReturningFromNestedMode(myStateAfterNestedMode, lastNestedModeState);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\n\nimport * as modes from 'vs/editor/common/modes';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {LineStream} from 'vs/editor/common/modes/lineStream';\nimport * as monarchCommon from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {IEnteringNestedModeData, TokenizationSupport} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {IModeService} from 'vs/editor/common/services/modeService';\n\n/**\n * The MonarchLexer class implements a monaco lexer that highlights source code.\n * It takes a compiled lexer to guide the tokenizer and maintains a stack of\n * lexer states.\n */\nexport class MonarchLexer extends AbstractState {\n\n\tstatic ID = 0;\n\n\tprivate modeService:IModeService;\n\n\tprivate id: number;\n\tprivate lexer: monarchCommon.ILexer;\n\tprivate stack: string[];\n\n\tpublic embeddedMode: string;\n\tpublic embeddedEntered: boolean;\n\n\tprivate groupActions: monarchCommon.IAction[];\n\tprivate groupMatches: string[];\n\tprivate groupMatched: string[];\n\tprivate groupRule: monarchCommon.IRule;\n\n\tconstructor(mode: modes.IMode, modeService:IModeService, lexer: monarchCommon.ILexer, stack?: string[], embeddedMode?: string) {\n\t\tsuper(mode);\n\t\tthis.id = MonarchLexer.ID++; // for debugging, assigns unique id to each instance\n\t\tthis.modeService = modeService;\n\n\t\tthis.lexer = lexer; // (compiled) lexer description\n\t\tthis.stack = (stack ? stack : [lexer.start]); // stack of states\n\t\tthis.embeddedMode = (embeddedMode ? embeddedMode : null); // are we scanning an embedded section?\n\n\t\t// did we encounter an embedded start on this line?\n\t\t// no need for cloning or equality since it is used only within a line\n\t\tthis.embeddedEntered = false;\n\n\t\t// regular expression group matching\n\t\t// these never need cloning or equality since they are only used within a line match\n\t\tthis.groupActions = null;\n\t\tthis.groupMatches = null;\n\t\tthis.groupMatched = null;\n\t\tthis.groupRule = null;\n\t}\n\n\tpublic makeClone(): MonarchLexer {\n\t\treturn new MonarchLexer(this.getMode(), this.modeService, this.lexer, this.stack.slice(0), this.embeddedMode);\n\t}\n\n\tpublic equals(other: modes.IState): boolean {\n\t\tif (!super.equals(other)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!(other instanceof MonarchLexer)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar otherm: MonarchLexer = <MonarchLexer>other;\n\t\tif ((this.stack.length !== otherm.stack.length) || (this.lexer.name !== otherm.lexer.name) ||\n\t\t\t(this.embeddedMode !== otherm.embeddedMode)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar idx: string;\n\t\tfor (idx in this.stack) {\n\t\t\tif (this.stack.hasOwnProperty(idx)) {\n\t\t\t\tif (this.stack[idx] !== otherm.stack[idx]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * The main tokenizer: this function gets called by monaco to tokenize lines\n\t * Note: we don't want to raise exceptions here and always keep going..\n\t *\n\t * TODO: there are many optimizations possible here for the common cases\n\t * but for now I concentrated on functionality and correctness.\n\t */\n\tpublic tokenize(stream: modes.IStream, noConsumeIsOk?: boolean): modes.ITokenizationResult {\n\t\tvar stackLen0 = this.stack.length;  // these are saved to check progress\n\t\tvar groupLen0 = 0;\n\t\tvar state: string = this.stack[0];  // the current state\n\t\tthis.embeddedEntered = false;\n\n\t\tvar matches: string[] = null;\n\t\tvar matched: string = null;\n\t\tvar action: monarchCommon.IAction = null;\n\t\tvar next: string = null;\n\t\tvar rule: monarchCommon.IRule = null;\n\n\t\t// check if we need to process group matches first\n\t\tif (this.groupActions) {\n\t\t\tgroupLen0 = this.groupActions.length;\n\t\t\tmatches = this.groupMatches;\n\t\t\tmatched = this.groupMatched.shift();\n\t\t\taction = this.groupActions.shift();\n\t\t\trule = this.groupRule;\n\n\t\t\t// cleanup if necessary\n\t\t\tif (this.groupActions.length === 0) {\n\t\t\t\tthis.groupActions = null;\n\t\t\t\tthis.groupMatches = null;\n\t\t\t\tthis.groupMatched = null;\n\t\t\t\tthis.groupRule = null;\n\t\t\t}\n\t\t}\n\t\t\t// otherwise we match on the token stream\n\t\telse {\n\t\t\t// nothing to do\n\t\t\tif (stream.eos()) {\n\t\t\t\treturn { type: '' };\n\t\t\t}\n\n\t\t\t// get the entire line\n\t\t\tvar line = stream.advanceToEOS();\n\t\t\tstream.goBack(line.length);\n\n\t\t\t// get the rules for this state\n\t\t\tvar rules = this.lexer.tokenizer[state];\n\t\t\tif (!rules) {\n\t\t\t\trules = monarchCommon.findRules(this.lexer, state); // do parent matching\n\t\t\t}\n\n\t\t\tif (!rules) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'tokenizer state is not defined: ' + state);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// try each rule until we match\n\t\t\t\trule = null;\n\t\t\t\tvar pos = stream.pos();\n\t\t\t\tvar idx: string;\n\t\t\t\tfor (idx in rules) {\n\t\t\t\t\tif (rules.hasOwnProperty(idx)) {\n\t\t\t\t\t\trule = rules[idx];\n\t\t\t\t\t\tif (pos === 0 || !rule.matchOnlyAtLineStart) {\n\t\t\t\t\t\t\tmatches = line.match(rule.regex);\n\t\t\t\t\t\t\tif (matches) {\n\t\t\t\t\t\t\t\tmatched = matches[0];\n\t\t\t\t\t\t\t\taction = rule.action;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// We matched 'rule' with 'matches' and 'action'\n\t\tif (!matches) {\n\t\t\tmatches = [''];\n\t\t\tmatched = '';\n\t\t}\n\t\tif (!action) {\n\t\t\t// bad: we didn't match anything, and there is no action to take\n\t\t\t// we need to advance the stream or we get progress trouble\n\t\t\tif (!stream.eos()) {\n\t\t\t\tmatches = [stream.peek()];\n\t\t\t\tmatched = matches[0];\n\t\t\t}\n\t\t\taction = this.lexer.defaultToken;\n\t\t}\n\n\t\t// advance stream\n\t\tstream.advance(matched.length);\n\n\t\t// maybe call action function (used for 'cases')\n\t\twhile (action.test) {\n\t\t\tvar callres = action.test(matched, matches, state, stream.eos());\n\t\t\taction = callres;\n\t\t}\n\n\t\t// set the result: either a string or an array of actions\n\t\tvar result = null;\n\t\tif (typeof (action) === 'string' || Array.isArray(action)) {\n\t\t\tresult = action;\n\t\t}\n\t\telse if (action.group) {\n\t\t\tresult = action.group;\n\t\t}\n\t\telse if (action.token !== null && action.token !== undefined) {\n\t\t\tresult = action.token;\n\n\t\t\t// do $n replacements?\n\t\t\tif (action.tokenSubst) {\n\t\t\t\tresult = monarchCommon.substituteMatches(this.lexer, result, matched, matches, state);\n\t\t\t}\n\n\t\t\t// enter embedded mode?\n\t\t\tif (action.nextEmbedded) {\n\t\t\t\tif (action.nextEmbedded === '@pop') {\n\t\t\t\t\tif (!this.embeddedMode) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'cannot pop embedded mode if not inside one');\n\t\t\t\t\t}\n\t\t\t\t\tthis.embeddedMode = null;\n\t\t\t\t}\n\t\t\t\telse if (this.embeddedMode) {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'cannot enter embedded mode from within an embedded mode');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.embeddedMode = monarchCommon.substituteMatches(this.lexer, action.nextEmbedded, matched, matches, state);\n\n\t\t\t\t\t// substitute language alias to known modes to support syntax highlighting\n\t\t\t\t\tvar embeddedMode = this.modeService.getModeIdForLanguageName(this.embeddedMode);\n\t\t\t\t\tif (this.embeddedMode && embeddedMode) {\n\t\t\t\t\t\tthis.embeddedMode = embeddedMode;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.embeddedEntered = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// state transformations\n\t\t\tif (action.goBack) { // back up the stream..\n\t\t\t\tstream.goBack(action.goBack);\n\t\t\t}\n\t\t\tif (action.switchTo && typeof action.switchTo === 'string') {\n\t\t\t\tvar nextState = monarchCommon.substituteMatches(this.lexer, action.switchTo, matched, matches, state);  // switch state without a push...\n\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t}\n\t\t\t\tif (!monarchCommon.findRules(this.lexer, nextState)) {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + rule.name);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.stack[0] = nextState;\n\t\t\t\t}\n\t\t\t\tnext = null;\n\t\t\t}\n\t\t\telse if (action.transform && typeof action.transform === 'function') {\n\t\t\t\tthis.stack = action.transform(this.stack); // if you need to do really funky stuff...\n\t\t\t\tnext = null;\n\t\t\t}\n\t\t\telse if (action.next) {\n\t\t\t\tif (action.next === '@push') {\n\t\t\t\t\tif (this.stack.length >= this.lexer.maxStack) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'maximum tokenizer stack size reached: [' +\n\t\t\t\t\t\t\tthis.stack[0] + ',' + this.stack[1] + ',...,' +\n\t\t\t\t\t\t\tthis.stack[this.stack.length - 2] + ',' + this.stack[this.stack.length - 1] + ']');\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.stack.unshift(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (action.next === '@pop') {\n\t\t\t\t\tif (this.stack.length <= 1) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'trying to pop an empty stack in rule: ' + rule.name);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.stack.shift();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (action.next === '@popall') {\n\t\t\t\t\tif (this.stack.length > 1) {\n\t\t\t\t\t\tthis.stack = [this.stack[this.stack.length - 1]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar nextState = monarchCommon.substituteMatches(this.lexer, action.next, matched, matches, state);\n\t\t\t\t\tif (nextState[0] === '@') {\n\t\t\t\t\t\tnextState = nextState.substr(1); // peel off starting '@'\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!monarchCommon.findRules(this.lexer, nextState)) {\n\t\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + rule.name);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.stack.unshift(nextState);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (action.log && typeof (action.log) === 'string') {\n\t\t\t\tmonarchCommon.log(this.lexer, this.lexer.displayName + ': ' + monarchCommon.substituteMatches(this.lexer, action.log, matched, matches, state));\n\t\t\t}\n\t\t}\n\n\t\t// check result\n\t\tif (result === null) {\n\t\t\tmonarchCommon.throwError(this.lexer, 'lexer rule has no well-defined action in rule: ' + rule.name);\n\t\t\tresult = this.lexer.defaultToken;\n\t\t}\n\n\t\t// is the result a group match?\n\t\tif (Array.isArray(result)) {\n\t\t\tif (this.groupActions && this.groupActions.length > 0) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'groups cannot be nested: ' + rule.name);\n\t\t\t}\n\t\t\tif (matches.length !== result.length + 1) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'matched number of groups does not match the number of actions in rule: ' + rule.name);\n\t\t\t}\n\t\t\tvar totalLen = 0;\n\t\t\tfor (var i = 1; i < matches.length; i++) {\n\t\t\t\ttotalLen += matches[i].length;\n\t\t\t}\n\t\t\tif (totalLen !== matched.length) {\n\t\t\t\tmonarchCommon.throwError(this.lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + rule.name);\n\t\t\t}\n\t\t\tthis.groupMatches = matches;\n\t\t\tthis.groupMatched = matches.slice(1);\n\t\t\tthis.groupActions = result.slice(0);\n\t\t\tthis.groupRule = rule;\n\t\t\tstream.goBack(matched.length);\n\t\t\treturn this.tokenize(stream);  // call recursively to initiate first result match\n\t\t}\n\t\t\t// regular result\n\t\telse {\n\t\t\t// check for '@rematch'\n\t\t\tif (result === '@rematch') {\n\t\t\t\tstream.goBack(matched.length);\n\t\t\t\tmatched = '';  // better set the next state too..\n\t\t\t\tmatches = null;\n\t\t\t\tresult = '';\n\t\t\t}\n\n\t\t\t// check progress\n\t\t\tif (matched.length === 0) {\n\t\t\t\tif (stackLen0 !== this.stack.length || state !== this.stack[0]\n\t\t\t\t\t|| (!this.groupActions ? 0 : this.groupActions.length) !== groupLen0) {\n\t\t\t\t\tif (!noConsumeIsOk) { // used for nested modes..\n\t\t\t\t\t\treturn this.tokenize(stream); // tokenize again in the new state\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, 'no progress in tokenizer in rule: ' + rule.name);\n\t\t\t\t\tstream.advanceToEOS(); // must make progress or editor loops\n\t\t\t\t\t// result='';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// return the result (and check for brace matching)\n\t\t\t// todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\n\t\t\tif (result.indexOf('@brackets') === 0) {\n\t\t\t\tvar rest = result.substr('@brackets'.length);\n\t\t\t\tvar bracket = findBracket(this.lexer, matched);\n\t\t\t\tif (!bracket) {\n\t\t\t\t\tmonarchCommon.throwError(this.lexer, '@brackets token returned but no bracket defined as: ' + matched);\n\t\t\t\t\tbracket = { token: '', bracketType: monarchCommon.MonarchBracket.None };\n\t\t\t\t}\n\t\t\t\treturn { type: monarchCommon.sanitize(bracket.token + rest) };\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar token = (result === '' ? '' : result + this.lexer.tokenPostfix);\n\t\t\t\treturn { type: monarchCommon.sanitize(token) };\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Searches for a bracket in the 'brackets' attribute that matches the input.\n */\nfunction findBracket(lexer: monarchCommon.ILexer, matched: string) {\n\tif (!matched) {\n\t\treturn null;\n\t}\n\tmatched = monarchCommon.fixCase(lexer, matched);\n\n\tvar brackets = lexer.brackets;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tvar bracket = brackets[i];\n\t\tif (bracket.open === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Open };\n\t\t}\n\t\telse if (bracket.close === matched) {\n\t\t\treturn { token: bracket.token, bracketType: monarchCommon.MonarchBracket.Close };\n\t\t}\n\t}\n\treturn null;\n}\n\nexport function createTokenizationSupport(modeService:IModeService, mode:modes.IMode, lexer: monarchCommon.ILexer): modes.ITokenizationSupport {\n\treturn new TokenizationSupport(mode, {\n\t\tgetInitialState: (): modes.IState => {\n\t\t\treturn new MonarchLexer(mode, modeService, lexer);\n\t\t},\n\n\t\tenterNestedMode: (state: modes.IState): boolean => {\n\t\t\tif (state instanceof MonarchLexer) {\n\t\t\t\treturn state.embeddedEntered;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\tgetNestedMode: (rawState: modes.IState): IEnteringNestedModeData => {\n\t\t\tvar mime = (<MonarchLexer>rawState).embeddedMode;\n\n\t\t\tif (!modeService.isRegisteredMode(mime)) {\n\t\t\t\t// unknown mode\n\t\t\t\treturn {\n\t\t\t\t\tmode: modeService.getMode('text/plain'),\n\t\t\t\t\tmissingModePromise: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar mode = modeService.getMode(mime);\n\t\t\tif (mode) {\n\t\t\t\t// mode is available\n\t\t\t\treturn {\n\t\t\t\t\tmode: mode,\n\t\t\t\t\tmissingModePromise: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// mode is not yet loaded\n\t\t\treturn {\n\t\t\t\tmode: modeService.getMode('text/plain'),\n\t\t\t\tmissingModePromise: modeService.getOrCreateMode(mime).then(() => null)\n\t\t\t};\n\t\t},\n\n\t\tgetLeavingNestedModeData: (line: string, state: modes.IState) => {\n\t\t\t// state = state.clone();\n\t\t\tvar mstate = <MonarchLexer>state.clone();\n\t\t\tvar stream = new LineStream(line);\n\t\t\twhile (!stream.eos() && mstate.embeddedMode) {\n\t\t\t\tmstate.tokenize(stream, true); // allow no consumption for @rematch\n\t\t\t}\n\t\t\tif (mstate.embeddedMode) {\n\t\t\t\treturn null;  // don't leave yet\n\t\t\t}\n\n\t\t\tvar end = stream.pos();\n\t\t\treturn {\n\t\t\t\tnestedModeBuffer: line.substring(0, end),\n\t\t\t\tbufferAfterNestedMode: line.substring(end),\n\t\t\t\tstateAfterNestedMode: mstate\n\t\t\t};\n\t\t}\n\t}, lexer.usesEmbedded, false);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {RunOnceScheduler} from 'vs/base/common/async';\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {IDisposable, dispose} from 'vs/base/common/lifecycle';\nimport {StopWatch} from 'vs/base/common/stopwatch';\nimport * as timer from 'vs/base/common/timer';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ModelLine} from 'vs/editor/common/model/modelLine';\nimport {TextModel} from 'vs/editor/common/model/textModel';\nimport {WordHelper} from 'vs/editor/common/model/textModelWithTokensHelpers';\nimport {TokenIterator} from 'vs/editor/common/model/tokenIterator';\nimport {ILineContext, ILineTokens, IToken, IModeTransition, IMode, IState} from 'vs/editor/common/modes';\nimport {NullMode, NullState, nullTokenize} from 'vs/editor/common/modes/nullMode';\nimport {ignoreBracketsInToken} from 'vs/editor/common/modes/supports';\nimport {BracketsUtils} from 'vs/editor/common/modes/supports/richEditBrackets';\nimport {ModeTransition} from 'vs/editor/common/core/modeTransition';\nimport {LineToken} from 'vs/editor/common/model/lineToken';\nimport {TokensInflatorMap} from 'vs/editor/common/model/tokensBinaryEncoding';\nimport {Position} from 'vs/editor/common/core/position';\n\nclass ModeToModelBinder implements IDisposable {\n\n\tprivate _modePromise:TPromise<IMode>;\n\tprivate _externalModePromise:TPromise<boolean>;\n\tprivate _externalModePromise_c:(value:boolean)=>void;\n\tprivate _externalModePromise_e:(err:any)=>void;\n\tprivate _model:TextModelWithTokens;\n\tprivate _isDisposed:boolean;\n\n\tconstructor(modePromise:TPromise<IMode>, model:TextModelWithTokens) {\n\t\tthis._modePromise = modePromise;\n\t\t// Create an external mode promise that fires after the mode is set to the model\n\t\tthis._externalModePromise = new TPromise<boolean>((c, e, p) => {\n\t\t\tthis._externalModePromise_c = c;\n\t\t\tthis._externalModePromise_e = e;\n\t\t}, () => {\n\t\t\t// this promise cannot be canceled\n\t\t});\n\t\tthis._model = model;\n\t\tthis._isDisposed = false;\n\n\t\t// Ensure asynchronicity\n\t\tTPromise.timeout(0).then(() => {\n\t\t\treturn this._modePromise;\n\t\t}).then((mode:IMode) => {\n\t\t\tif (this._isDisposed) {\n\t\t\t\tthis._externalModePromise_c(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar model = this._model;\n\t\t\tthis.dispose();\n\t\t\tmodel.setMode(mode);\n\t\t\tmodel._warmUpTokens();\n\t\t\tthis._externalModePromise_c(true);\n\t\t}).done(null, (err) => {\n\t\t\tthis._externalModePromise_e(err);\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t}\n\n\tpublic getModePromise(): TPromise<boolean> {\n\t\treturn this._externalModePromise;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._modePromise = null;\n\t\tthis._model = null;\n\t\tthis._isDisposed = true;\n\t}\n}\n\nexport interface IRetokenizeRequest extends IDisposable {\n\n\tisFulfilled: boolean;\n\n\t/**\n\t * If null, the entire model will be retokenzied, use null with caution\n\t */\n\tgetRange(): editorCommon.IRange;\n}\n\nexport class FullModelRetokenizer implements IRetokenizeRequest {\n\n\tpublic isFulfilled: boolean;\n\n\t_model:TextModelWithTokens;\n\tprivate _retokenizePromise:TPromise<void>;\n\tprivate _isDisposed: boolean;\n\n\tconstructor(retokenizePromise:TPromise<void>, model:TextModelWithTokens) {\n\t\tthis._retokenizePromise = retokenizePromise;\n\t\tthis._model = model;\n\t\tthis._isDisposed = false;\n\t\tthis.isFulfilled = false;\n\n\t\t// Ensure asynchronicity\n\t\tTPromise.timeout(0).then(() => {\n\t\t\treturn this._retokenizePromise;\n\t\t}).then(() => {\n\t\t\tif (this._isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.isFulfilled = true;\n\t\t\tthis._model.onRetokenizerFulfilled();\n\t\t}).done(null, onUnexpectedError);\n\t}\n\n\tpublic getRange(): editorCommon.IRange {\n\t\treturn null;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._retokenizePromise = null;\n\t\tthis._model = null;\n\t\tthis._isDisposed = true;\n\t}\n}\n\nclass LineContext implements ILineContext {\n\n\tpublic modeTransitions:ModeTransition[];\n\tprivate _text:string;\n\tprivate _lineTokens:editorCommon.ILineTokens;\n\n\tconstructor (topLevelMode:IMode, line:ModelLine) {\n\t\tthis.modeTransitions = line.getModeTransitions(topLevelMode);\n\t\tthis._text = line.text;\n\t\tthis._lineTokens = line.getTokens();\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic getTokenCount(): number {\n\t\treturn this._lineTokens.getTokenCount();\n\t}\n\n\tpublic getTokenStartIndex(tokenIndex:number): number {\n\t\treturn this._lineTokens.getTokenStartIndex(tokenIndex);\n\t}\n\n\tpublic getTokenEndIndex(tokenIndex:number): number {\n\t\treturn this._lineTokens.getTokenEndIndex(tokenIndex, this._text.length);\n\t}\n\n\tpublic getTokenType(tokenIndex:number): string {\n\t\treturn this._lineTokens.getTokenType(tokenIndex);\n\t}\n\n\tpublic getTokenText(tokenIndex:number): string {\n\t\tvar startIndex = this._lineTokens.getTokenStartIndex(tokenIndex);\n\t\tvar endIndex = this._lineTokens.getTokenEndIndex(tokenIndex, this._text.length);\n\t\treturn this._text.substring(startIndex, endIndex);\n\t}\n\n\tpublic findIndexOfOffset(offset:number): number {\n\t\treturn this._lineTokens.findIndexOfOffset(offset);\n\t}\n}\n\nexport class TextModelWithTokens extends TextModel implements editorCommon.ITokenizedModel {\n\n\tprivate static MODE_TOKENIZATION_FAILED_MSG = nls.localize('mode.tokenizationSupportFailed', \"The mode has failed while tokenizing the input.\");\n\n\tprivate _shouldAutoTokenize:boolean;\n\tprivate _mode: IMode;\n\tprivate _modeListener: IDisposable;\n\tprivate _modeToModelBinder:ModeToModelBinder;\n\tprivate _tokensInflatorMap:TokensInflatorMap;\n\n\tprivate _invalidLineStartIndex:number;\n\tprivate _lastState:IState;\n\n\tprivate _revalidateTokensTimeout:number;\n\tprivate _scheduleRetokenizeNow: RunOnceScheduler;\n\tprivate _retokenizers:IRetokenizeRequest[];\n\n\tconstructor(allowedEventTypes:string[], rawText:editorCommon.IRawText, shouldAutoTokenize:boolean, modeOrPromise:IMode|TPromise<IMode>) {\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelTokensChanged);\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelModeChanged);\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelModeSupportChanged);\n\t\tsuper(allowedEventTypes, rawText);\n\n\t\tthis._shouldAutoTokenize = shouldAutoTokenize;\n\t\tthis._mode = null;\n\t\tthis._modeListener = null;\n\t\tthis._modeToModelBinder = null;\n\t\tthis._tokensInflatorMap = null;\n\n\t\tthis._invalidLineStartIndex = 0;\n\t\tthis._lastState = null;\n\n\t\tthis._revalidateTokensTimeout = -1;\n\t\tthis._scheduleRetokenizeNow = null;\n\t\tthis._retokenizers = null;\n\n\t\tif (!modeOrPromise) {\n\t\t\tthis._mode = new NullMode();\n\t\t} else if (TPromise.is(modeOrPromise)) {\n\t\t\t// TODO@Alex: To avoid mode id changes, we check if this promise is resolved\n\t\t\tlet promiseValue = <IMode>(<any>modeOrPromise)._value;\n\n\t\t\tif (promiseValue && typeof promiseValue.getId === 'function') {\n\t\t\t\t// The promise is already resolved\n\t\t\t\tthis._mode = this._massageMode(promiseValue);\n\t\t\t\tthis._resetModeListener(this._mode);\n\t\t\t} else {\n\t\t\t\tvar modePromise = <TPromise<IMode>>modeOrPromise;\n\t\t\t\tthis._modeToModelBinder = new ModeToModelBinder(modePromise, this);\n\t\t\t\tthis._mode = new NullMode();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._mode = this._massageMode(<IMode>modeOrPromise);\n\t\t\tthis._resetModeListener(this._mode);\n\t\t}\n\n\t\tthis._revalidateTokensTimeout = -1;\n\t\tthis._scheduleRetokenizeNow = new RunOnceScheduler(() => this._retokenizeNow(), 200);\n\t\tthis._retokenizers = [];\n\n\t\tthis._resetTokenizationState();\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._modeToModelBinder) {\n\t\t\tthis._modeToModelBinder.dispose();\n\t\t\tthis._modeToModelBinder = null;\n\t\t}\n\t\tthis._resetModeListener(null);\n\t\tthis._clearTimers();\n\t\tthis._mode = null;\n\t\tthis._lastState = null;\n\t\tthis._tokensInflatorMap = null;\n\t\tthis._retokenizers = dispose(this._retokenizers);\n\t\tthis._scheduleRetokenizeNow.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate _massageMode(mode: IMode): IMode {\n\t\tif (this.isTooLargeForHavingAMode()) {\n\t\t\treturn new NullMode();\n\t\t}\n\t\tif (this.isTooLargeForHavingARichMode()) {\n\t\t\treturn mode.toSimplifiedMode();\n\t\t}\n\t\treturn mode;\n\t}\n\n\tpublic whenModeIsReady(): TPromise<IMode> {\n\t\tif (this._modeToModelBinder) {\n\t\t\t// Still waiting for some mode to load\n\t\t\treturn this._modeToModelBinder.getModePromise().then(() => this._mode);\n\t\t}\n\t\treturn TPromise.as(this._mode);\n\t}\n\n\tpublic onRetokenizerFulfilled(): void {\n\t\tthis._scheduleRetokenizeNow.schedule();\n\t}\n\n\tprivate _retokenizeNow(): void {\n\t\tvar fulfilled = this._retokenizers.filter(r => r.isFulfilled);\n\t\tthis._retokenizers = this._retokenizers.filter(r => !r.isFulfilled);\n\n\t\tvar hasFullModel = false;\n\t\tfor (var i = 0; i < fulfilled.length; i++) {\n\t\t\tif (!fulfilled[i].getRange()) {\n\t\t\t\thasFullModel = true;\n\t\t\t}\n\t\t}\n\n\t\tif (hasFullModel) {\n\t\t\t// Just invalidate all the lines\n\t\t\tfor (var i = 0, len = this._lines.length; i < len; i++) {\n\t\t\t\tthis._lines[i].isInvalid = true;\n\t\t\t}\n\t\t\tthis._invalidLineStartIndex = 0;\n\t\t} else {\n\t\t\tvar minLineNumber = Number.MAX_VALUE;\n\t\t\tfor (var i = 0; i < fulfilled.length; i++) {\n\t\t\t\tvar range = fulfilled[i].getRange();\n\t\t\t\tminLineNumber = Math.min(minLineNumber, range.startLineNumber);\n\t\t\t\tfor (var lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n\t\t\t\t\tthis._lines[lineNumber - 1].isInvalid = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (minLineNumber - 1 < this._invalidLineStartIndex) {\n\t\t\t\tif (this._invalidLineStartIndex < this._lines.length) {\n\t\t\t\t\tthis._lines[this._invalidLineStartIndex].isInvalid = true;\n\t\t\t\t}\n\t\t\t\tthis._invalidLineStartIndex = minLineNumber - 1;\n\t\t\t}\n\t\t}\n\n\t\tthis._beginBackgroundTokenization();\n\n\t\tfor (var i = 0; i < fulfilled.length; i++) {\n\t\t\tfulfilled[i].dispose();\n\t\t}\n\t}\n\n\t_createRetokenizer(retokenizePromise:TPromise<void>, lineNumber:number): IRetokenizeRequest {\n\t\treturn new FullModelRetokenizer(retokenizePromise, this);\n\t}\n\n\t_resetValue(e:editorCommon.IModelContentChangedFlushEvent, newValue:editorCommon.IRawText): void {\n\t\tsuper._resetValue(e, newValue);\n\t\t// Cancel tokenization, clear all tokens and begin tokenizing\n\t\tthis._resetTokenizationState();\n\t}\n\n\t_resetMode(e:editorCommon.IModelModeChangedEvent, newMode:IMode): void {\n\t\t// Cancel tokenization, clear all tokens and begin tokenizing\n\t\tthis._mode = newMode;\n\t\tthis._resetModeListener(newMode);\n\t\tthis._resetTokenizationState();\n\n\t\tthis.emitModelTokensChangedEvent(1, this.getLineCount());\n\t}\n\n\tprivate _resetModeListener(newMode: IMode): void {\n\t\tif (this._modeListener) {\n\t\t\tthis._modeListener.dispose();\n\t\t\tthis._modeListener = null;\n\t\t}\n\t\tif (newMode && typeof newMode.addSupportChangedListener === 'function') {\n\t\t\tthis._modeListener = newMode.addSupportChangedListener( (e) => this._onModeSupportChanged(e) );\n\t\t}\n\t}\n\n\tprivate _onModeSupportChanged(e: editorCommon.IModeSupportChangedEvent): void {\n\t\tthis._emitModelModeSupportChangedEvent(e);\n\t\tif (e.tokenizationSupport) {\n\t\t\tthis._resetTokenizationState();\n\t\t\tthis.emitModelTokensChangedEvent(1, this.getLineCount());\n\t\t}\n\t}\n\n\t_resetTokenizationState(): void {\n\t\tthis._retokenizers = dispose(this._retokenizers);\n\t\tthis._scheduleRetokenizeNow.cancel();\n\t\tthis._clearTimers();\n\t\tfor (var i = 0; i < this._lines.length; i++) {\n\t\t\tthis._lines[i].setState(null);\n\t\t}\n\t\tthis._initializeTokenizationState();\n\t}\n\n\tprivate _clearTimers(): void {\n\t\tif (this._revalidateTokensTimeout !== -1) {\n\t\t\tclearTimeout(this._revalidateTokensTimeout);\n\t\t\tthis._revalidateTokensTimeout = -1;\n\t\t}\n\t}\n\n\tprivate _initializeTokenizationState(): void {\n\t\t// Initialize tokenization states\n\t\tvar initialState:IState = null;\n\t\tif (this._mode.tokenizationSupport) {\n\t\t\ttry {\n\t\t\t\tinitialState = this._mode.tokenizationSupport.getInitialState();\n\t\t\t} catch (e) {\n\t\t\t\te.friendlyMessage = TextModelWithTokens.MODE_TOKENIZATION_FAILED_MSG;\n\t\t\t\tonUnexpectedError(e);\n\t\t\t\tthis._mode = new NullMode();\n\t\t\t}\n\t\t}\n\t\tif (!initialState) {\n\t\t\tinitialState = new NullState(this._mode, null);\n\t\t}\n\n\t\tthis._lines[0].setState(initialState);\n\t\tthis._lastState = null;\n\t\tthis._tokensInflatorMap = new TokensInflatorMap();\n\t\tthis._invalidLineStartIndex = 0;\n\t\tthis._beginBackgroundTokenization();\n\t}\n\n\tpublic getLineTokens(lineNumber:number, inaccurateTokensAcceptable:boolean = false): editorCommon.ILineTokens {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\tif (!inaccurateTokensAcceptable) {\n\t\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\t}\n\t\treturn this._lines[lineNumber - 1].getTokens();\n\t}\n\n\tpublic getLineContext(lineNumber:number): ILineContext {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\n\t\treturn new LineContext(this._mode, this._lines[lineNumber - 1]);\n\t}\n\n\t_getInternalTokens(lineNumber:number): editorCommon.ILineTokens {\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\treturn this._lines[lineNumber - 1].getTokens();\n\t}\n\n\tpublic getMode(): IMode {\n\t\treturn this._mode;\n\t}\n\n\tpublic setMode(newModeOrPromise:IMode|TPromise<IMode>): void {\n\t\tif (!newModeOrPromise) {\n\t\t\t// There's nothing to do\n\t\t\treturn;\n\t\t}\n\t\tif (this._modeToModelBinder) {\n\t\t\tthis._modeToModelBinder.dispose();\n\t\t\tthis._modeToModelBinder = null;\n\t\t}\n\t\tif (TPromise.is(newModeOrPromise)) {\n\t\t\tthis._modeToModelBinder = new ModeToModelBinder(<TPromise<IMode>>newModeOrPromise, this);\n\t\t} else {\n\t\t\tvar actualNewMode = this._massageMode(<IMode>newModeOrPromise);\n\t\t\tif (this._mode !== actualNewMode) {\n\t\t\t\tvar e2:editorCommon.IModelModeChangedEvent = {\n\t\t\t\t\toldMode: this._mode,\n\t\t\t\t\tnewMode: actualNewMode\n\t\t\t\t};\n\t\t\t\tthis._resetMode(e2, actualNewMode);\n\t\t\t\tthis._emitModelModeChangedEvent(e2);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getModeAtPosition(_lineNumber:number, _column:number): IMode {\n\t\tvar validPosition = this.validatePosition({\n\t\t\tlineNumber: _lineNumber,\n\t\t\tcolumn: _column\n\t\t});\n\n\t\tvar lineNumber = validPosition.lineNumber;\n\t\tvar column = validPosition.column;\n\n\t\tif (column === 1) {\n\t\t\treturn this.getStateBeforeLine(lineNumber).getMode();\n\t\t} else if (column === this.getLineMaxColumn(lineNumber)) {\n\t\t\treturn this.getStateAfterLine(lineNumber).getMode();\n\t\t} else {\n\t\t\tvar modeTransitions = this._getLineModeTransitions(lineNumber);\n\t\t\tvar modeTransitionIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, column - 1);\n\t\t\treturn modeTransitions[modeTransitionIndex].mode;\n\t\t}\n\t}\n\n\t_invalidateLine(lineIndex:number): void {\n\t\tthis._lines[lineIndex].isInvalid = true;\n\t\tif (lineIndex < this._invalidLineStartIndex) {\n\t\t\tif (this._invalidLineStartIndex < this._lines.length) {\n\t\t\t\tthis._lines[this._invalidLineStartIndex].isInvalid = true;\n\t\t\t}\n\t\t\tthis._invalidLineStartIndex = lineIndex;\n\t\t\tthis._beginBackgroundTokenization();\n\t\t}\n\t}\n\n\tprivate static _toLineTokens(tokens:IToken[]): LineToken[] {\n\t\tif (!tokens || tokens.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (tokens[0] instanceof LineToken) {\n\t\t\treturn <LineToken[]>tokens;\n\t\t}\n\t\tlet result:LineToken[] = [];\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tresult[i] = new LineToken(tokens[i].startIndex, tokens[i].type);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _toModeTransitions(modeTransitions:IModeTransition[]): ModeTransition[] {\n\t\tif (!modeTransitions || modeTransitions.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (modeTransitions[0] instanceof ModeTransition) {\n\t\t\treturn <ModeTransition[]>modeTransitions;\n\t\t}\n\t\tlet result:ModeTransition[] = [];\n\t\tfor (let i = 0, len = modeTransitions.length; i < len; i++) {\n\t\t\tresult[i] = new ModeTransition(modeTransitions[i].startIndex, modeTransitions[i].mode);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _updateLineTokens(lineIndex:number, map:TokensInflatorMap, topLevelMode:IMode, r:ILineTokens): void {\n\t\tthis._lines[lineIndex].setTokens(map, TextModelWithTokens._toLineTokens(r.tokens), topLevelMode, TextModelWithTokens._toModeTransitions(r.modeTransitions));\n\t}\n\n\tprivate _beginBackgroundTokenization(): void {\n\t\tif (this._shouldAutoTokenize && this._revalidateTokensTimeout === -1) {\n\t\t\tthis._revalidateTokensTimeout = setTimeout(() => {\n\t\t\t\tthis._revalidateTokensTimeout = -1;\n\t\t\t\tthis._revalidateTokensNow();\n\t\t\t}, 0);\n\t\t}\n\t}\n\n\t_warmUpTokens(): void {\n\t\t// Warm up first 100 lines (if it takes less than 50ms)\n\t\tvar maxLineNumber = Math.min(100, this.getLineCount());\n\t\tvar toLineNumber = maxLineNumber;\n\t\tfor (var lineNumber = 1; lineNumber <= maxLineNumber; lineNumber++) {\n\t\t\tvar text = this._lines[lineNumber - 1].text;\n\t\t\tif (text.length >= 200) {\n\t\t\t\t// This line is over 200 chars long, so warm up without it\n\t\t\t\ttoLineNumber = lineNumber - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis._revalidateTokensNow(toLineNumber);\n\t}\n\n\tprivate _revalidateTokensNow(toLineNumber:number = this._invalidLineStartIndex + 1000000): void {\n\n\t\tvar t1 = timer.start(timer.Topic.EDITOR, 'backgroundTokenization');\n\t\ttoLineNumber = Math.min(this._lines.length, toLineNumber);\n\n\t\tvar MAX_ALLOWED_TIME = 20,\n\t\t\tfromLineNumber = this._invalidLineStartIndex + 1,\n\t\t\ttokenizedChars = 0,\n\t\t\tcurrentCharsToTokenize = 0,\n\t\t\tcurrentEstimatedTimeToTokenize = 0,\n\t\t\tsw = StopWatch.create(false),\n\t\t\telapsedTime: number;\n\n\t\t// Tokenize at most 1000 lines. Estimate the tokenization speed per character and stop when:\n\t\t// - MAX_ALLOWED_TIME is reached\n\t\t// - tokenizing the next line would go above MAX_ALLOWED_TIME\n\n\t\tfor (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n\t\t\telapsedTime = sw.elapsed();\n\t\t\tif (elapsedTime > MAX_ALLOWED_TIME) {\n\t\t\t\t// Stop if MAX_ALLOWED_TIME is reached\n\t\t\t\ttoLineNumber = lineNumber - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Compute how many characters will be tokenized for this line\n\t\t\tcurrentCharsToTokenize = this._lines[lineNumber - 1].text.length;\n\n\t\t\tif (tokenizedChars > 0) {\n\t\t\t\t// If we have enough history, estimate how long tokenizing this line would take\n\t\t\t\tcurrentEstimatedTimeToTokenize = (elapsedTime / tokenizedChars) * currentCharsToTokenize;\n\t\t\t\tif (elapsedTime + currentEstimatedTimeToTokenize > MAX_ALLOWED_TIME) {\n\t\t\t\t\t// Tokenizing this line will go above MAX_ALLOWED_TIME\n\t\t\t\t\ttoLineNumber = lineNumber - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._updateTokensUntilLine(lineNumber, false);\n\t\t\ttokenizedChars += currentCharsToTokenize;\n\t\t}\n\n\t\telapsedTime = sw.elapsed();\n\n\t\tif (fromLineNumber <= toLineNumber) {\n\t\t\tthis.emitModelTokensChangedEvent(fromLineNumber, toLineNumber);\n\t\t}\n\n\t\tif (this._invalidLineStartIndex < this._lines.length) {\n\t\t\tthis._beginBackgroundTokenization();\n\t\t}\n\n\t\tt1.stop();\n\t}\n\n\tprivate getStateBeforeLine(lineNumber:number): IState {\n\t\tthis._updateTokensUntilLine(lineNumber - 1, true);\n\t\treturn this._lines[lineNumber - 1].getState();\n\t}\n\n\tprivate getStateAfterLine(lineNumber:number): IState {\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\treturn lineNumber < this._lines.length ? this._lines[lineNumber].getState() : this._lastState;\n\t}\n\n\t_getLineModeTransitions(lineNumber:number): ModeTransition[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\t\tthis._updateTokensUntilLine(lineNumber, true);\n\t\treturn this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t}\n\n\tprivate _updateTokensUntilLine(lineNumber:number, emitEvents:boolean): void {\n\t\tvar linesLength = this._lines.length;\n\t\tvar endLineIndex = lineNumber - 1;\n\t\tvar stopLineTokenizationAfter = 1000000000; // 1 billion, if a line is so long, you have other trouble :).\n\n\t\tvar fromLineNumber = this._invalidLineStartIndex + 1, toLineNumber = lineNumber;\n\n\t\t// Validate all states up to and including endLineIndex\n\t\tfor (var lineIndex = this._invalidLineStartIndex; lineIndex <= endLineIndex; lineIndex++) {\n\t\t\tvar endStateIndex = lineIndex + 1;\n\t\t\tvar r:ILineTokens = null;\n\t\t\tvar text = this._lines[lineIndex].text;\n\t\t\tif (this._mode.tokenizationSupport) {\n\n\t\t\t\ttry {\n\t\t\t\t\t// Tokenize only the first X characters\n\t\t\t\t\tr = this._mode.tokenizationSupport.tokenize(this._lines[lineIndex].text, this._lines[lineIndex].getState(), 0, stopLineTokenizationAfter);\n\t\t\t\t} catch (e) {\n\t\t\t\t\te.friendlyMessage = TextModelWithTokens.MODE_TOKENIZATION_FAILED_MSG;\n\t\t\t\t\tonUnexpectedError(e);\n\t\t\t\t}\n\n\t\t\t\tif (r && r.retokenize) {\n\t\t\t\t\tthis._retokenizers.push(this._createRetokenizer(r.retokenize, lineIndex + 1));\n\t\t\t\t}\n\n\t\t\t\tif (r && r.tokens && r.tokens.length > 0) {\n\t\t\t\t\t// Cannot have a stop offset before the last token\n\t\t\t\t\tr.actualStopOffset = Math.max(r.actualStopOffset, r.tokens[r.tokens.length - 1].startIndex + 1);\n\t\t\t\t}\n\n\t\t\t\tif (r && r.actualStopOffset < text.length) {\n\t\t\t\t\t// Treat the rest of the line (if above limit) as one default token\n\t\t\t\t\tr.tokens.push({\n\t\t\t\t\t\tstartIndex: r.actualStopOffset,\n\t\t\t\t\t\ttype: ''\n\t\t\t\t\t});\n\n\t\t\t\t\t// Use as end state the starting state\n\t\t\t\t\tr.endState = this._lines[lineIndex].getState();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!r) {\n\t\t\t\tr = nullTokenize(this._mode, text, this._lines[lineIndex].getState());\n\t\t\t}\n\t\t\tif (!r.modeTransitions) {\n\t\t\t\tr.modeTransitions = [];\n\t\t\t}\n\t\t\tif (r.modeTransitions.length === 0) {\n\t\t\t\t// Make sure there is at least the transition to the top-most mode\n\t\t\t\tr.modeTransitions.push({\n\t\t\t\t\tstartIndex: 0,\n\t\t\t\t\tmode: this._mode\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._updateLineTokens(lineIndex, this._tokensInflatorMap, this._mode, r);\n\n\t\t\tif (this._lines[lineIndex].isInvalid) {\n\t\t\t\tthis._lines[lineIndex].isInvalid = false;\n\t\t\t}\n\n\t\t\tif (endStateIndex < linesLength) {\n\t\t\t\tif (this._lines[endStateIndex].getState() !== null && r.endState.equals(this._lines[endStateIndex].getState())) {\n\t\t\t\t\t// The end state of this line remains the same\n\t\t\t\t\tvar nextInvalidLineIndex = lineIndex + 1;\n\t\t\t\t\twhile (nextInvalidLineIndex < linesLength) {\n\t\t\t\t\t\tif (this._lines[nextInvalidLineIndex].isInvalid) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (nextInvalidLineIndex + 1 < linesLength) {\n\t\t\t\t\t\t\tif (this._lines[nextInvalidLineIndex + 1].getState() === null) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (this._lastState === null) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextInvalidLineIndex++;\n\t\t\t\t\t}\n\t\t\t\t\tthis._invalidLineStartIndex = Math.max(this._invalidLineStartIndex, nextInvalidLineIndex);\n\t\t\t\t\tlineIndex = nextInvalidLineIndex - 1; // -1 because the outer loop increments it\n\t\t\t\t} else {\n\t\t\t\t\tthis._lines[endStateIndex].setState(r.endState);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._lastState = r.endState;\n\t\t\t}\n\t\t}\n\t\tthis._invalidLineStartIndex = Math.max(this._invalidLineStartIndex, endLineIndex + 1);\n\n\t\tif (emitEvents && fromLineNumber <= toLineNumber) {\n\t\t\tthis.emitModelTokensChangedEvent(fromLineNumber, toLineNumber);\n\t\t}\n\t}\n\n\tprivate emitModelTokensChangedEvent(fromLineNumber:number, toLineNumber:number): void {\n\t\tvar e:editorCommon.IModelTokensChangedEvent = {\n\t\t\tfromLineNumber: fromLineNumber,\n\t\t\ttoLineNumber: toLineNumber\n\t\t};\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelTokensChanged, e);\n\t\t}\n\t}\n\n\tprivate _emitModelModeChangedEvent(e:editorCommon.IModelModeChangedEvent): void {\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelModeChanged, e);\n\t\t}\n\t}\n\n\tprivate _emitModelModeSupportChangedEvent(e:editorCommon.IModeSupportChangedEvent): void {\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelModeSupportChanged, e);\n\t\t}\n\t}\n\n\t// Having tokens allows implementing additional helper methods\n\n\t_lineIsTokenized(lineNumber:number): boolean {\n\t\treturn this._invalidLineStartIndex > lineNumber - 1;\n\t}\n\n\t_getWordDefinition(): RegExp {\n\t\treturn WordHelper.massageWordDefinitionOf(this._mode);\n\t}\n\n\tpublic getWordAtPosition(position:editorCommon.IPosition): editorCommon.IWordAtPosition {\n\t\treturn WordHelper.getWordAtPosition(this, this.validatePosition(position));\n\t}\n\n\tpublic getWordUntilPosition(position: editorCommon.IPosition): editorCommon.IWordAtPosition {\n\t\tvar wordAtPosition = this.getWordAtPosition(position);\n\t\tif (!wordAtPosition) {\n\t\t\treturn {\n\t\t\t\tword: '',\n\t\t\t\tstartColumn: position.column,\n\t\t\t\tendColumn: position.column\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tword: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n\t\t\tstartColumn: wordAtPosition.startColumn,\n\t\t\tendColumn: position.column\n\t\t};\n\t}\n\n\tpublic tokenIterator(position:editorCommon.IPosition, callback:(it:TokenIterator)=>any): any {\n\t\tvar iter = new TokenIterator(this, this.validatePosition(position));\n\t\tvar result = callback(iter);\n\t\titer._invalidate();\n\t\treturn result;\n\t}\n\n\tpublic findMatchingBracketUp(bracket:string, _position:editorCommon.IPosition): Range {\n\t\tlet position = this.validatePosition(_position);\n\t\tlet modeTransitions = this._lines[position.lineNumber - 1].getModeTransitions(this._mode);\n\t\tlet currentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\tlet currentMode = modeTransitions[currentModeIndex];\n\t\tlet currentModeBrackets = currentMode.mode.richEditSupport ? currentMode.mode.richEditSupport.brackets : null;\n\n\t\tif (!currentModeBrackets) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet data = currentModeBrackets.textIsBracket[bracket];\n\n\t\tif (!data) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._findMatchingBracketUp(data, position);\n\t}\n\n\tpublic matchBracket(position:editorCommon.IPosition): [Range,Range] {\n\t\treturn this._matchBracket(this.validatePosition(position));\n\t}\n\n\tprivate _matchBracket(position:Position): [Range,Range] {\n\t\tlet lineNumber = position.lineNumber;\n\t\tlet lineText = this._lines[lineNumber - 1].text;\n\n\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\tlet currentTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\n\t\tlet currentTokenStart = lineTokens.getTokenStartIndex(currentTokenIndex);\n\n\t\tlet modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t\tlet currentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\tlet currentMode = modeTransitions[currentModeIndex];\n\t\tlet currentModeBrackets = currentMode.mode.richEditSupport ? currentMode.mode.richEditSupport.brackets : null;\n\n\t\t// If position is in between two tokens, try first looking in the previous token\n\t\tif (currentTokenIndex > 0 && currentTokenStart === position.column - 1) {\n\t\t\tlet prevTokenIndex = currentTokenIndex - 1;\n\t\t\tlet prevTokenType = lineTokens.getTokenType(prevTokenIndex);\n\n\t\t\t// check that previous token is not to be ignored\n\t\t\tif (!ignoreBracketsInToken(prevTokenType)) {\n\t\t\t\tlet prevTokenStart = lineTokens.getTokenStartIndex(prevTokenIndex);\n\n\t\t\t\tlet prevMode = currentMode;\n\t\t\t\tlet prevModeBrackets = currentModeBrackets;\n\t\t\t\t// check if previous token is in a different mode\n\t\t\t\tif (currentModeIndex > 0 && currentMode.startIndex === position.column - 1) {\n\t\t\t\t\tprevMode = modeTransitions[currentModeIndex - 1];\n\t\t\t\t\tprevModeBrackets = prevMode.mode.richEditSupport ? prevMode.mode.richEditSupport.brackets : null;\n\t\t\t\t}\n\n\t\t\t\tif (prevModeBrackets) {\n\t\t\t\t\t// limit search in case previous token is very large, there's no need to go beyond `maxBracketLength`\n\t\t\t\t\tprevTokenStart = Math.max(prevTokenStart, position.column - 1 - prevModeBrackets.maxBracketLength);\n\n\t\t\t\t\tlet foundBracket = BracketsUtils.findPrevBracketInToken(prevModeBrackets.reversedRegex, lineNumber, lineText, prevTokenStart, currentTokenStart);\n\n\t\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\t\tif (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n\t\t\t\t\t\tlet foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1);\n\t\t\t\t\t\tlet r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText]);\n\n\t\t\t\t\t\t// check that we can actually match this bracket\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// check that the token is not to be ignored\n\t\tif (!ignoreBracketsInToken(lineTokens.getTokenType(currentTokenIndex))) {\n\n\t\t\tif (currentModeBrackets) {\n\t\t\t\t// limit search to not go before `maxBracketLength`\n\t\t\t\tcurrentTokenStart = Math.max(currentTokenStart, position.column - 1 - currentModeBrackets.maxBracketLength);\n\n\t\t\t\t// limit search to not go after `maxBracketLength`\n\t\t\t\tlet currentTokenEnd = lineTokens.getTokenEndIndex(currentTokenIndex, lineText.length);\n\t\t\t\tcurrentTokenEnd = Math.min(currentTokenEnd, position.column - 1 + currentModeBrackets.maxBracketLength);\n\n\t\t\t\t// it might still be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n\t\t\t\twhile(true) {\n\t\t\t\t\tlet foundBracket = BracketsUtils.findNextBracketInText(currentModeBrackets.forwardRegex, lineNumber, lineText.substring(currentTokenStart, currentTokenEnd), currentTokenStart);\n\t\t\t\t\tif (!foundBracket) {\n\t\t\t\t\t\t// there are no brackets in this text\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// check that we didn't hit a bracket too far away from position\n\t\t\t\t\tif (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n\t\t\t\t\t\tlet foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1);\n\t\t\t\t\t\tlet r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText]);\n\n\t\t\t\t\t\t// check that we can actually match this bracket\n\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentTokenStart = foundBracket.endColumn - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _matchFoundBracket(foundBracket:Range, data:editorCommon.IRichEditBracket, isOpen:boolean): [Range,Range] {\n\t\tif (isOpen) {\n\t\t\tlet matched = this._findMatchingBracketDown(data, foundBracket.getEndPosition());\n\t\t\tif (matched) {\n\t\t\t\treturn [foundBracket, matched];\n\t\t\t}\n\t\t} else {\n\t\t\tlet matched = this._findMatchingBracketUp(data, foundBracket.getStartPosition());\n\t\t\tif (matched) {\n\t\t\t\treturn [foundBracket, matched];\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _findMatchingBracketUp(bracket:editorCommon.IRichEditBracket, position:Position): Range {\n\t\t// console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tlet modeId = bracket.modeId;\n\t\tlet reversedBracketRegex = bracket.reversedRegex;\n\t\tlet count = -1;\n\n\t\tfor (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\t\t\tlet modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t\t\tlet currentModeIndex = modeTransitions.length - 1;\n\t\t\tlet currentModeStart = modeTransitions[currentModeIndex].startIndex;\n\t\t\tlet currentModeId = modeTransitions[currentModeIndex].mode.getId();\n\n\t\t\tlet tokensLength = lineTokens.getTokenCount() - 1;\n\t\t\tlet currentTokenEnd = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokensLength = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenEnd = position.column - 1;\n\n\t\t\t\tcurrentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\t\t\tcurrentModeStart = modeTransitions[currentModeIndex].startIndex;\n\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = tokensLength; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tlet currentTokenType = lineTokens.getTokenType(tokenIndex);\n\t\t\t\tlet currentTokenStart = lineTokens.getTokenStartIndex(tokenIndex);\n\n\t\t\t\tif (currentTokenStart < currentModeStart) {\n\t\t\t\t\tcurrentModeIndex--;\n\t\t\t\t\tcurrentModeStart = modeTransitions[currentModeIndex].startIndex;\n\t\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t\t}\n\n\t\t\t\tif (currentModeId === modeId && !ignoreBracketsInToken(currentTokenType)) {\n\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tlet r = BracketsUtils.findPrevBracketInToken(reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\t\tif (!r) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1);\n\n\t\t\t\t\t\tif (hitText === bracket.open) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t} else if (hitText === bracket.close) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentTokenEnd = r.startColumn - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenEnd = currentTokenStart;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _findMatchingBracketDown(bracket:editorCommon.IRichEditBracket, position:Position): Range {\n\t\t// console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n\n\t\tlet modeId = bracket.modeId;\n\t\tlet bracketRegex = bracket.forwardRegex;\n\t\tlet count = 1;\n\n\t\tfor (let lineNumber = position.lineNumber, lineCount = this.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\t\t\tlet modeTransitions = this._lines[lineNumber - 1].getModeTransitions(this._mode);\n\t\t\tlet currentModeIndex = 0;\n\t\t\tlet nextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\n\t\t\tlet currentModeId = modeTransitions[currentModeIndex].mode.getId();\n\n\t\t\tlet startTokenIndex = 0;\n\t\t\tlet currentTokenStart = lineTokens.getTokenStartIndex(startTokenIndex);\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\tstartTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenStart = Math.max(currentTokenStart, position.column - 1);\n\n\t\t\t\tcurrentModeIndex = ModeTransition.findIndexInSegmentsArray(modeTransitions, position.column - 1);\n\t\t\t\tnextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\n\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = startTokenIndex, tokensLength = lineTokens.getTokenCount(); tokenIndex < tokensLength; tokenIndex++) {\n\t\t\t\tlet currentTokenType = lineTokens.getTokenType(tokenIndex);\n\t\t\t\tlet currentTokenEnd = lineTokens.getTokenEndIndex(tokenIndex, lineText.length);\n\n\t\t\t\tif (currentTokenStart >= nextModeStart) {\n\t\t\t\t\tcurrentModeIndex++;\n\t\t\t\t\tnextModeStart = (currentModeIndex + 1 < modeTransitions.length ? modeTransitions[currentModeIndex + 1].startIndex : lineText.length + 1);\n\t\t\t\t\tcurrentModeId = modeTransitions[currentModeIndex].mode.getId();\n\t\t\t\t}\n\n\t\t\t\tif (currentModeId === modeId && !ignoreBracketsInToken(currentTokenType)) {\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tlet r = BracketsUtils.findNextBracketInToken(bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\t\tif (!r) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1);\n\n\t\t\t\t\t\tif (hitText === bracket.open) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t} else if (hitText === bracket.close) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentTokenStart = r.endColumn - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenStart = currentTokenEnd;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findPrevBracket(_position:editorCommon.IPosition): editorCommon.IFoundBracket {\n\t\tlet position = this.validatePosition(_position);\n\n\t\tlet reversedBracketRegex = /[\\(\\)\\[\\]\\{\\}]/; // TODO@Alex: use mode's brackets\n\n\t\tfor (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\n\t\t\tlet tokensLength = lineTokens.getTokenCount() - 1;\n\t\t\tlet currentTokenEnd = lineText.length;\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\ttokensLength = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenEnd = position.column - 1;\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = tokensLength; tokenIndex >= 0; tokenIndex--) {\n\t\t\t\tlet currentTokenType = lineTokens.getTokenType(tokenIndex);\n\t\t\t\tlet currentTokenStart = lineTokens.getTokenStartIndex(tokenIndex);\n\n\t\t\t\tif (!ignoreBracketsInToken(currentTokenType)) {\n\t\t\t\t\tlet r = BracketsUtils.findPrevBracketInToken(reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\treturn this._toFoundBracket(r);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenEnd = currentTokenStart;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic findNextBracket(_position:editorCommon.IPosition): editorCommon.IFoundBracket {\n\t\tlet position = this.validatePosition(_position);\n\n\t\tlet bracketRegex = /[\\(\\)\\[\\]\\{\\}]/; // TODO@Alex: use mode's brackets\n\n\t\tfor (let lineNumber = position.lineNumber, lineCount = this.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\t\tlet lineTokens = this._lines[lineNumber - 1].getTokens();\n\t\t\tlet lineText = this._lines[lineNumber - 1].text;\n\n\t\t\tlet startTokenIndex = 0;\n\t\t\tlet currentTokenStart = lineTokens.getTokenStartIndex(startTokenIndex);\n\t\t\tif (lineNumber === position.lineNumber) {\n\t\t\t\tstartTokenIndex = lineTokens.findIndexOfOffset(position.column - 1);\n\t\t\t\tcurrentTokenStart = Math.max(currentTokenStart, position.column - 1);\n\t\t\t}\n\n\t\t\tfor (let tokenIndex = startTokenIndex, tokensLength = lineTokens.getTokenCount(); tokenIndex < tokensLength; tokenIndex++) {\n\t\t\t\tlet currentTokenType = lineTokens.getTokenType(tokenIndex);\n\t\t\t\tlet currentTokenEnd = lineTokens.getTokenEndIndex(tokenIndex, lineText.length);\n\n\t\t\t\tif (!ignoreBracketsInToken(currentTokenType)) {\n\t\t\t\t\tlet r = BracketsUtils.findNextBracketInToken(bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd);\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\treturn this._toFoundBracket(r);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurrentTokenStart = currentTokenEnd;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _toFoundBracket(r:Range): editorCommon.IFoundBracket {\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet text = this.getValueInRange(r);\n\n\t\t// TODO@Alex: use mode's brackets\n\t\tswitch (text) {\n\t\t\tcase '(': return { range: r, open: '(', close: ')', isOpen: true };\n\t\t\tcase ')': return { range: r, open: '(', close: ')', isOpen: false };\n\t\t\tcase '[': return { range: r, open: '[', close: ']', isOpen: true };\n\t\t\tcase ']': return { range: r, open: '[', close: ']', isOpen: false };\n\t\t\tcase '{': return { range: r, open: '{', close: '}', isOpen: true };\n\t\t\tcase '}': return { range: r, open: '{', close: '}', isOpen: false };\n\t\t}\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {dispose} from 'vs/base/common/lifecycle';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ModelLine} from 'vs/editor/common/model/modelLine';\nimport {TextModel} from 'vs/editor/common/model/textModel';\nimport {TextModelWithTokens} from 'vs/editor/common/model/textModelWithTokens';\nimport {IMode} from 'vs/editor/common/modes';\nimport {IResourceService} from 'vs/editor/common/services/resourceService';\nimport {Range} from 'vs/editor/common/core/range';\nimport {Position} from 'vs/editor/common/core/position';\n\nexport interface IMirrorModelEvents {\n\tcontentChanged: editorCommon.IModelContentChangedEvent[];\n}\n\nexport class AbstractMirrorModel extends TextModelWithTokens implements editorCommon.IMirrorModel {\n\n\t_associatedResource:URI;\n\n\tconstructor(allowedEventTypes:string[], versionId:number, value:editorCommon.IRawText, mode:IMode|TPromise<IMode>, associatedResource?:URI) {\n\t\tsuper(allowedEventTypes.concat([editorCommon.EventType.ModelDispose]), value, false, mode);\n\n\t\tthis._setVersionId(versionId);\n\t\tthis._associatedResource = associatedResource;\n\t}\n\n\tpublic getModeId(): string {\n\t\treturn this.getMode().getId();\n\t}\n\n\tpublic getEmbeddedAtPosition(position:editorCommon.IPosition):editorCommon.IMirrorModel {\n\t\treturn null;\n\t}\n\n\tpublic getAllEmbedded():editorCommon.IMirrorModel[] {\n\t\treturn [];\n\t}\n\n\tpublic _constructLines(rawText:editorCommon.IRawText):void {\n\t\tsuper._constructLines(rawText);\n\t\t// Force EOL to be \\n\n\t\tthis._EOL = '\\n';\n\t}\n\n\tpublic destroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.emit(editorCommon.EventType.ModelDispose);\n\t\tsuper.dispose();\n\t}\n\n\tpublic get uri(): URI {\n\t\treturn this._associatedResource;\n\t}\n\n\tpublic getRangeFromOffsetAndLength(offset:number, length:number): Range {\n\t\tlet startPosition = this.getPositionAt(offset);\n\t\tlet endPosition = this.getPositionAt(offset + length);\n\t\treturn new Range(\n\t\t\tstartPosition.lineNumber,\n\t\t\tstartPosition.column,\n\t\t\tendPosition.lineNumber,\n\t\t\tendPosition.column\n\t\t);\n\t}\n\n\tpublic getOffsetAndLengthFromRange(range:editorCommon.IRange):{offset:number; length:number;} {\n\t\tlet startOffset = this.getOffsetAt(new Position(range.startLineNumber, range.startColumn));\n\t\tlet endOffset = this.getOffsetAt(new Position(range.endLineNumber, range.endColumn));\n\t\treturn {\n\t\t\toffset: startOffset,\n\t\t\tlength: endOffset - startOffset\n\t\t};\n\t}\n\n\tpublic getPositionFromOffset(offset:number): Position {\n\t\treturn this.getPositionAt(offset);\n\t}\n\n\tpublic getOffsetFromPosition(position:editorCommon.IPosition): number {\n\t\treturn this.getOffsetAt(position);\n\t}\n\n\tpublic getLineStart(lineNumber:number): number {\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t}\n\t\tif (lineNumber > this.getLineCount()) {\n\t\t\tlineNumber = this.getLineCount();\n\t\t}\n\t\treturn this.getOffsetAt(new Position(lineNumber, 1));\n\t}\n\n\tpublic getAllWordsWithRange(): editorCommon.IRangeWithText[] {\n\t\tif (this._lines.length > 10000) {\n\t\t\t// This is a very heavy method, unavailable for very heavy models\n\t\t\treturn [];\n\t\t}\n\n\t\tvar result:editorCommon.IRangeWithText[] = [],\n\t\t\ti:number;\n\n\t\tvar toTextRange = function (info: editorCommon.IWordRange) {\n\t\t\tvar s = line.text.substring(info.start, info.end);\n\t\t\tvar r = { startLineNumber: i + 1, startColumn: info.start + 1, endLineNumber: i + 1, endColumn: info.end + 1 };\n\t\t\tresult.push({ text: s, range: r});\n\t\t};\n\n\t\tfor(i = 0; i < this._lines.length; i++) {\n\t\t\tvar line = this._lines[i];\n\t\t\tthis.wordenize(line.text).forEach(toTextRange);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getAllWords(): string[] {\n\t\tvar result:string[] = [];\n\t\tthis._lines.forEach((line) => {\n\t\t\tthis.wordenize(line.text).forEach((info) => {\n\t\t\t\tresult.push(line.text.substring(info.start, info.end));\n\t\t\t});\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic getAllUniqueWords(skipWordOnce?:string) : string[] {\n\t\tvar foundSkipWord = false;\n\t\tvar uniqueWords = {};\n\t\treturn this.getAllWords().filter((word) => {\n\t\t\tif (skipWordOnce && !foundSkipWord && skipWordOnce === word) {\n\t\t\t\tfoundSkipWord = true;\n\t\t\t\treturn false;\n\t\t\t} else if (uniqueWords[word]) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tuniqueWords[word] = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t}\n\n//\t// TODO@Joh, TODO@Alex - remove these and make sure the super-things work\n\tprivate wordenize(content:string): editorCommon.IWordRange[] {\n\t\tvar result:editorCommon.IWordRange[] = [];\n\t\tvar match:RegExpExecArray;\n\t\tvar wordsRegexp = this._getWordDefinition();\n\t\twhile (match = wordsRegexp.exec(content)) {\n\t\t\tresult.push({ start: match.index, end: match.index + match[0].length });\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class MirrorModelEmbedded extends AbstractMirrorModel implements editorCommon.IMirrorModel {\n\n\tprivate _actualModel:MirrorModel;\n\n\tconstructor(actualModel:MirrorModel, includeRanges:editorCommon.IRange[], mode:IMode, url:URI) {\n\t\tsuper(['changed'], actualModel.getVersionId(), MirrorModelEmbedded._getMirrorValueWithinRanges(actualModel, includeRanges), mode, url);\n\t\tthis._actualModel = actualModel;\n\t}\n\n\tprivate static _getMirrorValueWithinRanges(actualModel:MirrorModel, includeRanges:editorCommon.IRange[]): editorCommon.IRawText {\n\n\t\tvar\tresultingText = '',\n\t\t\tprevLineAdded = 1,\n\t\t\tprevColumnAdded = 1,\n\t\t\ti:number;\n\n\t\tfor (i = 0; i < includeRanges.length; i++) {\n\t\t\tvar includeRange = includeRanges[i];\n\n\t\t\tresultingText += actualModel.getEmptiedValueInRange({\n\t\t\t\tstartLineNumber: prevLineAdded,\n\t\t\t\tstartColumn: prevColumnAdded,\n\t\t\t\tendLineNumber: includeRange.startLineNumber,\n\t\t\t\tendColumn: includeRange.startColumn\n\t\t\t}, ' ');\n\n\t\t\tresultingText += actualModel.getValueInRange(includeRange);\n\n\t\t\tprevLineAdded = includeRange.endLineNumber;\n\t\t\tprevColumnAdded = includeRange.endColumn;\n\t\t}\n\n\t\tvar lastLineNumber = actualModel.getLineCount(),\n\t\t\tlastColumn = actualModel.getLineMaxColumn(lastLineNumber);\n\n\t\tresultingText += actualModel.getEmptiedValueInRange({\n\t\t\tstartLineNumber: prevLineAdded,\n\t\t\tstartColumn: prevColumnAdded,\n\t\t\tendLineNumber: lastLineNumber,\n\t\t\tendColumn: lastColumn\n\t\t}, ' ');\n\n\t\tlet actualModelOptions = actualModel.getOptions();\n\t\treturn TextModel.toRawText(resultingText, {\n\t\t\ttabSize: actualModelOptions.tabSize,\n\t\t\tinsertSpaces: actualModelOptions.insertSpaces,\n\t\t\tdetectIndentation: false,\n\t\t\tdefaultEOL: actualModelOptions.defaultEOL,\n\t\t\ttrimAutoWhitespace: actualModelOptions.trimAutoWhitespace\n\t\t});\n\t}\n\n\tpublic setIncludedRanges(newIncludedRanges:editorCommon.IRange[]): void {\n\t\tvar prevVersionId = this.getVersionId();\n\n\t\t// Force recreating of line starts (when used)\n\t\tthis._constructLines(MirrorModelEmbedded._getMirrorValueWithinRanges(this._actualModel, newIncludedRanges));\n\t\tthis._resetTokenizationState();\n\n\t\tthis._setVersionId(prevVersionId + 1);\n\n\t\tthis.emit('changed', {});\n\t}\n\n}\n\nclass EmbeddedModeRange {\n\tpublic mode: IMode;\n\tpublic ranges: editorCommon.IRange[];\n\n\tpublic constructor(mode: IMode) {\n\t\tthis.mode = mode;\n\t\tthis.ranges = [];\n\t}\n}\n\nexport function createTestMirrorModelFromString(value:string, mode:IMode = null, associatedResource?:URI): MirrorModel {\n\treturn new MirrorModel(null, 0, TextModel.toRawText(value, TextModel.DEFAULT_CREATION_OPTIONS), mode, associatedResource);\n}\n\nexport class MirrorModel extends AbstractMirrorModel implements editorCommon.IMirrorModel {\n\n\tprivate _resourceService: IResourceService;\n\tprivate _embeddedModels: {[modeId:string]:MirrorModelEmbedded;};\n\n\tconstructor(resourceService:IResourceService, versionId:number, value:editorCommon.IRawText, mode:IMode|TPromise<IMode>, associatedResource?:URI) {\n\t\tsuper(['changed'], versionId, value, mode, associatedResource);\n\n\t\tthis._resourceService = resourceService;\n\t\tthis._embeddedModels = {};\n\t\tthis._updateEmbeddedModels();\n\t}\n\n\tpublic getEmbeddedAtPosition(position:editorCommon.IPosition):editorCommon.IMirrorModel {\n\t\tvar modeAtPosition = this.getModeAtPosition(position.lineNumber, position.column);\n\t\tif (this._embeddedModels.hasOwnProperty(modeAtPosition.getId())) {\n\t\t\treturn this._embeddedModels[modeAtPosition.getId()];\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getAllEmbedded():editorCommon.IMirrorModel[] {\n\t\treturn Object.keys(this._embeddedModels).map((embeddedModeId) => this._embeddedModels[embeddedModeId]);\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t\tvar embeddedModels = Object.keys(this._embeddedModels).map((modeId) => this._embeddedModels[modeId]);\n\t\tembeddedModels.forEach((embeddedModel) => this._resourceService.remove(embeddedModel.uri));\n\t\tdispose(embeddedModels);\n\t\tthis._embeddedModels = {};\n\t}\n\n\tpublic setMode(newModeOrPromise:IMode|TPromise<IMode>): void {\n\t\tsuper.setMode(newModeOrPromise);\n\t\tthis._updateEmbeddedModels();\n\t}\n\n\tprivate static _getModesRanges(model: editorCommon.IMirrorModel): {[modeId:string]:EmbeddedModeRange} {\n\t\tvar encounteredModesRanges:{[modeId:string]:EmbeddedModeRange} = {};\n\n\t\tvar getOrCreateEmbeddedModeRange = (modeId:string, mode:IMode) => {\n\t\t\tif (!encounteredModesRanges.hasOwnProperty(modeId)) {\n\t\t\t\tencounteredModesRanges[modeId] = new EmbeddedModeRange(mode);\n\t\t\t}\n\t\t\treturn encounteredModesRanges[modeId];\n\t\t};\n\n\t\tvar lineCount = model.getLineCount();\n\t\tvar currentModeId = model.getMode().getId();\n\t\tvar currentMode = model.getMode();\n\t\tvar currentStartLineNumber = 1, currentStartColumn = 1;\n\n\t\tfor (var lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n\t\t\tvar modeTransitions = model._getLineModeTransitions(lineNumber);\n\n\t\t\tfor (var i = 0; i < modeTransitions.length; i++) {\n\t\t\t\tvar modeTransition = modeTransitions[i];\n\t\t\t\tif (modeTransition.mode.getId() !== currentModeId) {\n\n\t\t\t\t\tvar modeRange = getOrCreateEmbeddedModeRange(currentModeId, currentMode);\n\t\t\t\t\tmodeRange.ranges.push({\n\t\t\t\t\t\tstartLineNumber: currentStartLineNumber,\n\t\t\t\t\t\tstartColumn: currentStartColumn,\n\t\t\t\t\t\tendLineNumber: lineNumber,\n\t\t\t\t\t\tendColumn: modeTransition.startIndex + 1\n\t\t\t\t\t});\n\n\t\t\t\t\tcurrentModeId = modeTransition.mode.getId();\n\t\t\t\t\tcurrentMode = modeTransition.mode;\n\t\t\t\t\tcurrentStartLineNumber = lineNumber;\n\t\t\t\t\tcurrentStartColumn = modeTransition.startIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar lastLineNumber = lineCount;\n\t\tvar lastColumn = model.getLineMaxColumn(lastLineNumber);\n\n\t\tif (currentStartLineNumber !== lastLineNumber || currentStartColumn !== lastColumn) {\n\t\t\tvar modeRange = getOrCreateEmbeddedModeRange(currentModeId, currentMode);\n\t\t\tmodeRange.ranges.push({\n\t\t\t\tstartLineNumber: currentStartLineNumber,\n\t\t\t\tstartColumn: currentStartColumn,\n\t\t\t\tendLineNumber: lastLineNumber,\n\t\t\t\tendColumn: lastColumn\n\t\t\t});\n\t\t}\n\n\t\treturn encounteredModesRanges;\n\t}\n\n\tprivate _updateEmbeddedModels(): boolean {\n\t\tif (!this._resourceService || !this.getMode().tokenizationSupport || !this.getMode().tokenizationSupport.shouldGenerateEmbeddedModels) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar newModesRanges = MirrorModel._getModesRanges(this);\n\n\t\t// Empty out embedded models that have disappeared\n\t\tvar oldNestedModesIds = Object.keys(this._embeddedModels);\n\t\tfor (var i = 0; i < oldNestedModesIds.length; i++) {\n\t\t\tvar oldNestedModeId = oldNestedModesIds[i];\n\t\t\tif (!newModesRanges.hasOwnProperty(oldNestedModeId)) {\n\t\t\t\tthis._embeddedModels[oldNestedModeId].setIncludedRanges([{\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tendLineNumber: 1,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t}]);\n\t\t\t}\n\t\t}\n\n\t\tvar newNestedModesIds = Object.keys(newModesRanges);\n\t\tfor (var i = 0; i < newNestedModesIds.length; i++) {\n\t\t\tvar newNestedModeId = newNestedModesIds[i];\n\t\t\tif (this._embeddedModels.hasOwnProperty(newNestedModeId)) {\n\t\t\t\tthis._embeddedModels[newNestedModeId].setIncludedRanges(newModesRanges[newNestedModeId].ranges);\n\t\t\t} else {\n\t\t\t\t// TODO@Alex: implement derived resources (embedded mirror models) better\n\t\t\t\tvar embeddedModelUrl = this.uri.with({ fragment: this.uri.fragment + 'URL_MARSHAL_REMOVE' + newNestedModeId });\n\t\t\t\tthis._embeddedModels[newNestedModeId] = new MirrorModelEmbedded(this, newModesRanges[newNestedModeId].ranges, newModesRanges[newNestedModeId].mode, embeddedModelUrl);\n\t\t\t\tthis._resourceService.insert(this._embeddedModels[newNestedModeId].uri, this._embeddedModels[newNestedModeId]);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic onEvents(events:IMirrorModelEvents) : boolean {\n\t\tlet changed = false;\n\t\tfor (let i = 0, len = events.contentChanged.length; i < len; i++) {\n\t\t\tlet contentChangedEvent = events.contentChanged[i];\n\n\t\t\tthis._setVersionId(contentChangedEvent.versionId);\n\t\t\tswitch (contentChangedEvent.changeType) {\n\t\t\t\tcase editorCommon.EventType.ModelRawContentChangedFlush:\n\t\t\t\t\tthis._onLinesFlushed(<editorCommon.IModelContentChangedFlushEvent>contentChangedEvent);\n\t\t\t\t\tchanged = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase editorCommon.EventType.ModelRawContentChangedLinesDeleted:\n\t\t\t\t\tthis._onLinesDeleted(<editorCommon.IModelContentChangedLinesDeletedEvent>contentChangedEvent);\n\t\t\t\t\tchanged = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase editorCommon.EventType.ModelRawContentChangedLinesInserted:\n\t\t\t\t\tthis._onLinesInserted(<editorCommon.IModelContentChangedLinesInsertedEvent>contentChangedEvent);\n\t\t\t\t\tchanged = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase editorCommon.EventType.ModelRawContentChangedLineChanged:\n\t\t\t\t\tthis._onLineChanged(<editorCommon.IModelContentChangedLineChangedEvent>contentChangedEvent);\n\t\t\t\t\tchanged = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tvar shouldFlushMarkers = false;\n\t\tif (changed) {\n\t\t\tthis.emit('changed', {});\n\t\t\tshouldFlushMarkers = this._updateEmbeddedModels();\n\t\t}\n\t\treturn shouldFlushMarkers;\n\t}\n\n\tprivate _onLinesFlushed(e:editorCommon.IModelContentChangedFlushEvent): void {\n\t\t// Flush my lines\n\t\tthis._constructLines(e.detail);\n\t\tthis._resetTokenizationState();\n\t}\n\n\tprivate _onLineChanged(e:editorCommon.IModelContentChangedLineChangedEvent) : void {\n\t\tthis._lines[e.lineNumber - 1].applyEdits({}, [{\n\t\t\tstartColumn: 1,\n\t\t\tendColumn: Number.MAX_VALUE,\n\t\t\ttext: e.detail,\n\t\t\tforceMoveMarkers: false\n\t\t}]);\n\t\tif (this._lineStarts) {\n\t\t\t// update prefix sum\n\t\t\tthis._lineStarts.changeValue(e.lineNumber - 1, this._lines[e.lineNumber - 1].text.length + this._EOL.length);\n\t\t}\n\n\t\tthis._invalidateLine(e.lineNumber - 1);\n\t}\n\n\tprivate _onLinesDeleted(e:editorCommon.IModelContentChangedLinesDeletedEvent) : void {\n\t\tvar fromLineIndex = e.fromLineNumber - 1,\n\t\t\ttoLineIndex = e.toLineNumber - 1;\n\n\t\t// Save first line's state\n\t\tvar firstLineState = this._lines[fromLineIndex].getState();\n\n\t\tthis._lines.splice(fromLineIndex, toLineIndex - fromLineIndex + 1);\n\t\tif (this._lineStarts) {\n\t\t\t// update prefix sum\n\t\t\tthis._lineStarts.removeValues(fromLineIndex, toLineIndex - fromLineIndex + 1);\n\t\t}\n\n\t\tif (fromLineIndex < this._lines.length) {\n\t\t\t// This check is always true in real world, but the tests forced this\n\n\t\t\t// Restore first line's state\n\t\t\tthis._lines[fromLineIndex].setState(firstLineState);\n\n\t\t\t// Invalidate line\n\t\t\tthis._invalidateLine(fromLineIndex);\n\t\t}\n\t}\n\n\tprivate _onLinesInserted(e:editorCommon.IModelContentChangedLinesInsertedEvent) : void {\n\t\tvar lineIndex:number,\n\t\t\ti:number,\n\t\t\tsplitLines = e.detail.split('\\n');\n\n\t\tlet newLengths:number[] = [];\n\t\tfor (lineIndex = e.fromLineNumber - 1, i = 0; lineIndex < e.toLineNumber; lineIndex++, i++) {\n\t\t\tthis._lines.splice(lineIndex, 0, new ModelLine(0, splitLines[i]));\n\t\t\tnewLengths.push(splitLines[i].length + this._EOL.length);\n\t\t}\n\t\tif (this._lineStarts) {\n\t\t\t// update prefix sum\n\t\t\tthis._lineStarts.insertValues(e.fromLineNumber - 1, newLengths);\n\t\t}\n\n\t\tif (e.fromLineNumber >= 2) {\n\t\t\t// This check is always true in real world, but the tests forced this\n\t\t\tthis._invalidateLine(e.fromLineNumber - 2);\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IdGenerator} from 'vs/base/common/idGenerator';\nimport {Position} from 'vs/editor/common/core/position';\nimport {IModelContentChangedFlushEvent, IRawText, IReadOnlyLineMarker, ITextModelWithMarkers} from 'vs/editor/common/editorCommon';\nimport {ILineMarker, ModelLine} from 'vs/editor/common/model/modelLine';\nimport {TextModelWithTokens} from 'vs/editor/common/model/textModelWithTokens';\nimport {IMode} from 'vs/editor/common/modes';\n\nexport interface IMarkerIdToMarkerMap {\n\t[key:string]:ILineMarker;\n}\n\nexport interface INewMarker {\n\tlineNumber:number;\n\tcolumn:number;\n\tstickToPreviousCharacter:boolean;\n}\n\nexport class LineMarker implements ILineMarker {\n\n\tid:string;\n\tcolumn:number;\n\tstickToPreviousCharacter:boolean;\n\toldLineNumber:number;\n\toldColumn:number;\n\tline:ModelLine;\n\n\tconstructor(id:string, column:number, stickToPreviousCharacter:boolean) {\n\t\tthis.id = id;\n\t\tthis.column = column;\n\t\tthis.stickToPreviousCharacter = stickToPreviousCharacter;\n\t\tthis.oldLineNumber = 0;\n\t\tthis.oldColumn = 0;\n\t\tthis.line = null;\n\t}\n\n\tpublic toString(): string {\n\t\treturn '{\\'' + this.id + '\\';' + this.column + ',' + this.stickToPreviousCharacter + ',[' + this.oldLineNumber + ',' + this.oldColumn + ']}';\n\t}\n}\n\nvar _INSTANCE_COUNT = 0;\n\nexport class TextModelWithMarkers extends TextModelWithTokens implements ITextModelWithMarkers {\n\n\tprivate _markerIdGenerator: IdGenerator;\n\tprotected _markerIdToMarker: IMarkerIdToMarkerMap;\n\tconstructor(allowedEventTypes:string[], rawText:IRawText, modeOrPromise:IMode|TPromise<IMode>) {\n\t\tsuper(allowedEventTypes, rawText, true, modeOrPromise);\n\t\tthis._markerIdGenerator = new IdGenerator((++_INSTANCE_COUNT) + ';');\n\t\tthis._markerIdToMarker = {};\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._markerIdToMarker = null;\n\t\tsuper.dispose();\n\t}\n\n\t_resetValue(e:IModelContentChangedFlushEvent, newValue:IRawText): void {\n\t\tsuper._resetValue(e, newValue);\n\n\t\t// Destroy all my markers\n\t\tthis._markerIdToMarker = {};\n\t}\n\n\t_addMarker(lineNumber:number, column:number, stickToPreviousCharacter:boolean): string {\n\t\tvar pos = this.validatePosition(new Position(lineNumber, column));\n\n\t\tvar marker = new LineMarker(this._markerIdGenerator.nextId(), pos.column, stickToPreviousCharacter);\n\t\tthis._markerIdToMarker[marker.id] = marker;\n\n\t\tthis._lines[pos.lineNumber - 1].addMarker(marker);\n\n\t\treturn marker.id;\n\t}\n\n\tprotected _addMarkers(newMarkers:INewMarker[]): string[] {\n\t\tlet addMarkersPerLine: {\n\t\t\t[lineNumber:number]: LineMarker[];\n\t\t} = Object.create(null);\n\n\t\tlet result:string[] = [];\n\t\tfor (let i = 0, len = newMarkers.length; i < len; i++) {\n\t\t\tlet newMarker = newMarkers[i];\n\n\t\t\tlet marker = new LineMarker(this._markerIdGenerator.nextId(), newMarker.column, newMarker.stickToPreviousCharacter);\n\t\t\tthis._markerIdToMarker[marker.id] = marker;\n\n\t\t\tif (!addMarkersPerLine[newMarker.lineNumber]) {\n\t\t\t\taddMarkersPerLine[newMarker.lineNumber] = [];\n\t\t\t}\n\t\t\taddMarkersPerLine[newMarker.lineNumber].push(marker);\n\n\t\t\tresult.push(marker.id);\n\t\t}\n\n\t\tlet lineNumbers = Object.keys(addMarkersPerLine);\n\t\tfor (let i = 0, len = lineNumbers.length; i < len; i++) {\n\t\t\tlet lineNumber = parseInt(lineNumbers[i], 10);\n\t\t\tthis._lines[lineNumber - 1].addMarkers(addMarkersPerLine[lineNumbers[i]]);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_changeMarker(id:string, lineNumber:number, column:number): void {\n\t\tif (this._markerIdToMarker.hasOwnProperty(id)) {\n\t\t\tvar marker = this._markerIdToMarker[id];\n\t\t\tvar newPos = this.validatePosition(new Position(lineNumber, column));\n\n\t\t\tif (newPos.lineNumber !== marker.line.lineNumber) {\n\t\t\t\t// Move marker between lines\n\t\t\t\tmarker.line.removeMarker(marker);\n\t\t\t\tthis._lines[newPos.lineNumber - 1].addMarker(marker);\n\t\t\t}\n\n\t\t\t// Update marker column\n\t\t\tmarker.column = newPos.column;\n\t\t}\n\t}\n\n\t_changeMarkerStickiness(id:string, newStickToPreviousCharacter:boolean): void {\n\t\tif (this._markerIdToMarker.hasOwnProperty(id)) {\n\t\t\tvar marker = this._markerIdToMarker[id];\n\n\t\t\tif (marker.stickToPreviousCharacter !== newStickToPreviousCharacter) {\n\t\t\t\tmarker.stickToPreviousCharacter = newStickToPreviousCharacter;\n\t\t\t}\n\t\t}\n\t}\n\n\t_getMarker(id:string): Position {\n\t\tif (this._markerIdToMarker.hasOwnProperty(id)) {\n\t\t\tvar marker = this._markerIdToMarker[id];\n\t\t\treturn new Position(marker.line.lineNumber, marker.column);\n\t\t}\n\t\treturn null;\n\t}\n\n\t_getMarkersCount(): number {\n\t\treturn Object.keys(this._markerIdToMarker).length;\n\t}\n\n\t_getLineMarkers(lineNumber: number): IReadOnlyLineMarker[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new Error('Illegal value ' + lineNumber + ' for `lineNumber`');\n\t\t}\n\n\t\treturn this._lines[lineNumber - 1].getMarkers();\n\t}\n\n\t_removeMarker(id:string): void {\n\t\tif (this._markerIdToMarker.hasOwnProperty(id)) {\n\t\t\tvar marker = this._markerIdToMarker[id];\n\t\t\tmarker.line.removeMarker(marker);\n\t\t\tdelete this._markerIdToMarker[id];\n\t\t}\n\t}\n\n\tprotected _removeMarkers(ids:string[]): void {\n\t\tlet removeMarkersPerLine: {\n\t\t\t[lineNumber:number]: {\n\t\t\t\t[markerId:string]: boolean;\n\t\t\t};\n\t\t} = Object.create(null);\n\n\t\tfor (let i = 0, len = ids.length; i < len; i++) {\n\t\t\tlet id = ids[i];\n\n\t\t\tif (!this._markerIdToMarker.hasOwnProperty(id)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet marker = this._markerIdToMarker[id];\n\n\t\t\tlet lineNumber = marker.line.lineNumber;\n\t\t\tif (!removeMarkersPerLine[lineNumber]) {\n\t\t\t\tremoveMarkersPerLine[lineNumber] = Object.create(null);\n\t\t\t}\n\t\t\tremoveMarkersPerLine[lineNumber][id] = true;\n\n\t\t\tdelete this._markerIdToMarker[id];\n\t\t}\n\n\t\tlet lineNumbers = Object.keys(removeMarkersPerLine);\n\t\tfor (let i = 0, len = lineNumbers.length; i < len; i++) {\n\t\t\tlet lineNumber = parseInt(lineNumbers[i], 10);\n\t\t\tthis._lines[lineNumber - 1].removeMarkers(removeMarkersPerLine[lineNumbers[i]]);\n\t\t}\n\t}\n\n\t_getMarkersInMap(markersMap:{[markerId:string]:boolean;}): ILineMarker[] {\n\t\tlet result: ILineMarker[] = [];\n\t\tlet keys = Object.keys(markersMap);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet markerId = keys[i];\n\t\t\tif (this._markerIdToMarker.hasOwnProperty(markerId)) {\n\t\t\t\tresult.push(this._markerIdToMarker[markerId]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IdGenerator} from 'vs/base/common/idGenerator';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {ILineMarker} from 'vs/editor/common/model/modelLine';\nimport {INewMarker, TextModelWithMarkers} from 'vs/editor/common/model/textModelWithMarkers';\nimport {FullModelRetokenizer, IRetokenizeRequest} from 'vs/editor/common/model/textModelWithTokens';\nimport {IMode} from 'vs/editor/common/modes';\nimport {Position} from 'vs/editor/common/core/position';\n\ninterface ITrackedRange {\n\tid:string;\n\tstartMarkerId:string;\n\tendMarkerId:string;\n}\n\ninterface ITrackedRangesMap {\n\t[key:string]:ITrackedRange;\n}\n\ninterface IMarkerIdToRangeIdMap {\n\t[key:string]:string;\n}\n\nclass TrackedRangeModelRetokenizer extends FullModelRetokenizer {\n\n\tprivate trackedRangeId: string;\n\n\tconstructor(retokenizePromise:TPromise<void>, lineNumber:number, model:TextModelWithTrackedRanges) {\n\t\tsuper(retokenizePromise, model);\n\t\tthis.trackedRangeId = model.addTrackedRange({\n\t\t\tstartLineNumber: lineNumber,\n\t\t\tstartColumn : 1,\n\t\t\tendLineNumber: lineNumber,\n\t\t\tendColumn: model.getLineMaxColumn(lineNumber)\n\t\t}, editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n\t}\n\n\tpublic getRange(): editorCommon.IRange {\n\t\treturn (<TextModelWithTrackedRanges>this._model).getTrackedRange(this.trackedRangeId);\n\t}\n\n\tpublic dispose(): void {\n\t\tvar model = (<TextModelWithTrackedRanges>this._model);\n\t\t// if this .dispose() is being called as part of the model.dispose(), then the tracked ranges might no longer be available (e.g. throw exceptions)\n\t\tif (model.isValidTrackedRange(this.trackedRangeId)) {\n\t\t\tmodel.removeTrackedRange(this.trackedRangeId);\n\t\t}\n\t\tsuper.dispose();\n\t}\n}\n\nclass TrackedRange implements ITrackedRange {\n\tid:string;\n\tstartMarkerId:string;\n\tendMarkerId:string;\n\n\tconstructor(id:string, startMarkedId:string, endMarkerId:string) {\n\t\tthis.id = id;\n\t\tthis.startMarkerId = startMarkedId;\n\t\tthis.endMarkerId = endMarkerId;\n\t}\n}\n\nvar _INSTANCE_COUNT = 0;\n\nexport class TextModelWithTrackedRanges extends TextModelWithMarkers implements editorCommon.ITextModelWithTrackedRanges {\n\n\tprivate _rangeIdGenerator: IdGenerator;\n\tprivate _ranges:ITrackedRangesMap;\n\tprivate _markerIdToRangeId:IMarkerIdToRangeIdMap;\n\tprivate _multiLineTrackedRanges: { [key:string]: boolean; };\n\n\tconstructor(allowedEventTypes:string[], rawText:editorCommon.IRawText, modeOrPromise:IMode|TPromise<IMode>) {\n\t\tsuper(allowedEventTypes, rawText, modeOrPromise);\n\t\tthis._rangeIdGenerator = new IdGenerator((++_INSTANCE_COUNT) + ';');\n\t\tthis._ranges = {};\n\t\tthis._markerIdToRangeId = {};\n\t\tthis._multiLineTrackedRanges = {};\n\t}\n\n\t_createRetokenizer(retokenizePromise:TPromise<void>, lineNumber:number): IRetokenizeRequest {\n\t\treturn new TrackedRangeModelRetokenizer(retokenizePromise, lineNumber, this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._ranges = null;\n\t\tthis._markerIdToRangeId = null;\n\t\tthis._multiLineTrackedRanges = null;\n\t\tsuper.dispose();\n\t}\n\n\t_resetValue(e:editorCommon.IModelContentChangedFlushEvent, newValue:editorCommon.IRawText): void {\n\t\tsuper._resetValue(e, newValue);\n\n\t\t// Destroy all my tracked ranges\n\t\tthis._ranges = {};\n\t\tthis._markerIdToRangeId = {};\n\t\tthis._multiLineTrackedRanges = {};\n\t}\n\n\tprivate _setRangeIsMultiLine(rangeId: string, rangeIsMultiLine: boolean): void {\n\t\tvar rangeWasMultiLine = this._multiLineTrackedRanges.hasOwnProperty(rangeId);\n\t\tif (!rangeWasMultiLine && rangeIsMultiLine) {\n\t\t\tthis._multiLineTrackedRanges[rangeId] = true;\n\t\t} else if (rangeWasMultiLine && !rangeIsMultiLine) {\n\t\t\tdelete this._multiLineTrackedRanges[rangeId];\n\t\t}\n\t}\n\n\tprivate _shouldStartMarkerSticksToPreviousCharacter(stickiness:editorCommon.TrackedRangeStickiness): boolean {\n\t\tif (stickiness === editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges || stickiness === editorCommon.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _shouldEndMarkerSticksToPreviousCharacter(stickiness:editorCommon.TrackedRangeStickiness): boolean {\n\t\tif (stickiness === editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges || stickiness === editorCommon.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t_getTrackedRangesCount(): number {\n\t\treturn Object.keys(this._ranges).length;\n\t}\n\n\tpublic addTrackedRange(textRange:editorCommon.IRange, stickiness:editorCommon.TrackedRangeStickiness): string {\n\t\ttextRange = this.validateRange(textRange);\n\n\t\tvar startMarkerSticksToPreviousCharacter = this._shouldStartMarkerSticksToPreviousCharacter(stickiness);\n\t\tvar endMarkerSticksToPreviousCharacter = this._shouldEndMarkerSticksToPreviousCharacter(stickiness);\n\n\t\tvar startMarkerId = this._addMarker(textRange.startLineNumber, textRange.startColumn, startMarkerSticksToPreviousCharacter);\n\t\tvar endMarkerId = this._addMarker(textRange.endLineNumber, textRange.endColumn, endMarkerSticksToPreviousCharacter);\n\n\t\tvar range = new TrackedRange(this._rangeIdGenerator.nextId(), startMarkerId, endMarkerId);\n\t\tthis._ranges[range.id] = range;\n\t\tthis._markerIdToRangeId[startMarkerId] = range.id;\n\t\tthis._markerIdToRangeId[endMarkerId] = range.id;\n\n\t\tthis._setRangeIsMultiLine(range.id, (textRange.startLineNumber !== textRange.endLineNumber));\n\n\t\treturn range.id;\n\t}\n\n\tprotected _addTrackedRanges(textRanges:editorCommon.IRange[], stickinessArr:editorCommon.TrackedRangeStickiness[]): string[] {\n\t\tlet addMarkers: INewMarker[] = [];\n\t\tfor (let i = 0, len = textRanges.length; i < len; i++) {\n\t\t\tlet textRange = textRanges[i];\n\t\t\tlet stickiness = stickinessArr[i];\n\n\t\t\taddMarkers.push({\n\t\t\t\tlineNumber: textRange.startLineNumber,\n\t\t\t\tcolumn: textRange.startColumn,\n\t\t\t\tstickToPreviousCharacter: this._shouldStartMarkerSticksToPreviousCharacter(stickiness)\n\t\t\t});\n\t\t\taddMarkers.push({\n\t\t\t\tlineNumber: textRange.endLineNumber,\n\t\t\t\tcolumn: textRange.endColumn,\n\t\t\t\tstickToPreviousCharacter: this._shouldEndMarkerSticksToPreviousCharacter(stickiness)\n\t\t\t});\n\t\t}\n\n\t\tlet markerIds = this._addMarkers(addMarkers);\n\n\t\tlet result:string[] = [];\n\t\tfor (let i = 0, len = textRanges.length; i < len; i++) {\n\t\t\tlet textRange = textRanges[i];\n\t\t\tlet startMarkerId = markerIds[2 * i];\n\t\t\tlet endMarkerId = markerIds[2 * i + 1];\n\n\t\t\tlet range = new TrackedRange(this._rangeIdGenerator.nextId(), startMarkerId, endMarkerId);\n\t\t\tthis._ranges[range.id] = range;\n\t\t\tthis._markerIdToRangeId[startMarkerId] = range.id;\n\t\t\tthis._markerIdToRangeId[endMarkerId] = range.id;\n\n\t\t\tthis._setRangeIsMultiLine(range.id, (textRange.startLineNumber !== textRange.endLineNumber));\n\n\t\t\tresult.push(range.id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic changeTrackedRange(rangeId:string, newTextRange:editorCommon.IRange): void {\n\t\tif (this._ranges.hasOwnProperty(rangeId)) {\n\t\t\tnewTextRange = this.validateRange(newTextRange);\n\n\t\t\tvar range = this._ranges[rangeId];\n\t\t\tthis._changeMarker(range.startMarkerId, newTextRange.startLineNumber, newTextRange.startColumn);\n\t\t\tthis._changeMarker(range.endMarkerId, newTextRange.endLineNumber, newTextRange.endColumn);\n\n\t\t\tthis._setRangeIsMultiLine(range.id, (newTextRange.startLineNumber !== newTextRange.endLineNumber));\n\t\t}\n\t}\n\n\tpublic changeTrackedRangeStickiness(rangeId:string, newStickiness:editorCommon.TrackedRangeStickiness): void {\n\t\tif (this._ranges.hasOwnProperty(rangeId)) {\n\t\t\tvar range = this._ranges[rangeId];\n\t\t\tthis._changeMarkerStickiness(range.startMarkerId, this._shouldStartMarkerSticksToPreviousCharacter(newStickiness));\n\t\t\tthis._changeMarkerStickiness(range.endMarkerId, this._shouldEndMarkerSticksToPreviousCharacter(newStickiness));\n\t\t}\n\t}\n\n\tpublic isValidTrackedRange(rangeId:string): boolean {\n\t\tif (this._isDisposed || !this._ranges) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._ranges.hasOwnProperty(rangeId);\n\t}\n\n\tpublic removeTrackedRange(rangeId:string): void {\n\t\tif (this._ranges.hasOwnProperty(rangeId)) {\n\t\t\tvar range = this._ranges[rangeId];\n\n\t\t\tthis._removeMarker(range.startMarkerId);\n\t\t\tthis._removeMarker(range.endMarkerId);\n\n\t\t\tthis._setRangeIsMultiLine(range.id, false);\n\t\t\tdelete this._ranges[range.id];\n\t\t\tdelete this._markerIdToRangeId[range.startMarkerId];\n\t\t\tdelete this._markerIdToRangeId[range.endMarkerId];\n\t\t}\n\t}\n\n\tprotected removeTrackedRanges(ids:string[]): void {\n\t\tlet removeMarkers: string[] = [];\n\n\t\tfor (let i = 0, len = ids.length; i < len; i++) {\n\t\t\tlet rangeId = ids[i];\n\n\t\t\tif (!this._ranges.hasOwnProperty(rangeId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet range = this._ranges[rangeId];\n\n\t\t\tremoveMarkers.push(range.startMarkerId);\n\t\t\tremoveMarkers.push(range.endMarkerId);\n\n\t\t\tthis._setRangeIsMultiLine(range.id, false);\n\t\t\tdelete this._ranges[range.id];\n\t\t\tdelete this._markerIdToRangeId[range.startMarkerId];\n\t\t\tdelete this._markerIdToRangeId[range.endMarkerId];\n\t\t}\n\n\t\tif (removeMarkers.length > 0) {\n\t\t\tthis._removeMarkers(removeMarkers);\n\t\t}\n\t}\n\n\tprivate _newEditorRange(startPosition: Position, endPosition: Position): Range {\n\t\tif (endPosition.isBefore(startPosition)) {\n\t\t\t// This tracked range has turned in on itself (end marker before start marker)\n\t\t\t// This can happen in extreme editing conditions where lots of text is removed and lots is added\n\n\t\t\t// Treat it as a collapsed range\n\t\t\treturn new Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column);\n\t\t}\n\t\treturn new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t}\n\n\tpublic getTrackedRange(rangeId:string): Range {\n\t\tvar range = this._ranges[rangeId];\n\t\tvar startMarker = this._getMarker(range.startMarkerId);\n\t\tvar endMarker = this._getMarker(range.endMarkerId);\n\n\t\treturn this._newEditorRange(startMarker, endMarker);\n\t}\n\n\t/**\n\t * Fetch only multi-line ranges that intersect with the given line number range\n\t */\n\tprivate _getMultiLineTrackedRanges(filterStartLineNumber: number, filterEndLineNumber: number): editorCommon.IModelTrackedRange[] {\n\t\tlet result: editorCommon.IModelTrackedRange[] = [];\n\n\t\tlet keys = Object.keys(this._multiLineTrackedRanges);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet rangeId = keys[i];\n\t\t\tlet range = this._ranges[rangeId];\n\n\t\t\tlet startMarker = this._getMarker(range.startMarkerId);\n\t\t\tif (startMarker.lineNumber > filterEndLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet endMarker = this._getMarker(range.endMarkerId);\n\t\t\tif (endMarker.lineNumber < filterStartLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push({\n\t\t\t\tid: range.id,\n\t\t\t\trange: this._newEditorRange(startMarker, endMarker)\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getLinesTrackedRanges(startLineNumber:number, endLineNumber:number): editorCommon.IModelTrackedRange[] {\n\t\tvar result = this._getMultiLineTrackedRanges(startLineNumber, endLineNumber),\n\t\t\tresultMap: { [rangeId:string]: boolean; } = {},\n\t\t\tlineMarkers: editorCommon.IReadOnlyLineMarker[],\n\t\t\tlineMarker: editorCommon.IReadOnlyLineMarker,\n\t\t\trangeId: string,\n\t\t\ti: number,\n\t\t\tlen: number,\n\t\t\tlineNumber: number,\n\t\t\tstartMarker: Position,\n\t\t\tendMarker: Position;\n\n\t\tfor (i = 0, len = result.length; i < len; i++) {\n\t\t\tresultMap[result[i].id] = true;\n\t\t}\n\n\t\tfor (lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tlineMarkers = this._getLineMarkers(lineNumber);\n\t\t\tfor (i = 0, len = lineMarkers.length; i < len; i++) {\n\t\t\t\tlineMarker = lineMarkers[i];\n\n\t\t\t\tif (this._markerIdToRangeId.hasOwnProperty(lineMarker.id)) {\n\t\t\t\t\trangeId = this._markerIdToRangeId[lineMarker.id];\n\t\t\t\t\tif (!resultMap.hasOwnProperty(rangeId)) {\n\t\t\t\t\t\tstartMarker = this._getMarker(this._ranges[rangeId].startMarkerId);\n\t\t\t\t\t\tendMarker = this._getMarker(this._ranges[rangeId].endMarkerId);\n\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\tid: rangeId,\n\t\t\t\t\t\t\trange: this._newEditorRange(startMarker, endMarker)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresultMap[rangeId] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_onChangedMarkers(changedMarkers:ILineMarker[]): editorCommon.IChangedTrackedRanges {\n\t\tvar changedRanges:editorCommon.IChangedTrackedRanges = {},\n\t\t\tchangedRange:editorCommon.IRange,\n\t\t\trange:ITrackedRange,\n\t\t\trangeId:string,\n\t\t\tmarker:ILineMarker,\n\t\t\ti:number,\n\t\t\tlen:number;\n\n\t\tfor (i = 0, len = changedMarkers.length; i < len; i++) {\n\t\t\tmarker = changedMarkers[i];\n\n\t\t\tif (this._markerIdToRangeId.hasOwnProperty(marker.id)) {\n\t\t\t\trangeId = this._markerIdToRangeId[marker.id];\n\n\t\t\t\trange = this._ranges[rangeId];\n\n\t\t\t\tif (changedRanges.hasOwnProperty(range.id)) {\n\t\t\t\t\tchangedRange = changedRanges[range.id];\n\t\t\t\t} else {\n\t\t\t\t\tchangedRange = {\n\t\t\t\t\t\tstartLineNumber: 0,\n\t\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\t\tendColumn: 0\n\t\t\t\t\t};\n\t\t\t\t\tchangedRanges[range.id] = changedRange;\n\t\t\t\t}\n\n\t\t\t\tif (marker.id === range.startMarkerId) {\n\t\t\t\t\tchangedRange.startLineNumber = marker.oldLineNumber;\n\t\t\t\t\tchangedRange.startColumn = marker.oldColumn;\n\t\t\t\t} else {\n\t\t\t\t\tchangedRange.endLineNumber = marker.oldLineNumber;\n\t\t\t\t\tchangedRange.endColumn = marker.oldColumn;\n\t\t\t\t}\n\n\t\t\t\tthis._setRangeIsMultiLine(range.id, (this._getMarker(range.startMarkerId).lineNumber !== this._getMarker(range.endMarkerId).lineNumber));\n\t\t\t}\n\t\t}\n\t\treturn changedRanges;\n\t}\n\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {IHTMLContentElement, htmlContentElementArrEquals} from 'vs/base/common/htmlContent';\nimport * as strings from 'vs/base/common/strings';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IdGenerator} from 'vs/base/common/idGenerator';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {TextModelWithTrackedRanges} from 'vs/editor/common/model/textModelWithTrackedRanges';\nimport {IMode} from 'vs/editor/common/modes';\n\nexport class DeferredEventsBuilder {\n\n\tpublic changedMarkers:{[markerId:string]:boolean;};\n\n\tpublic oldDecorationRange:{[decorationId:string]:editorCommon.IRange;};\n\tpublic oldDecorationOptions:{[decorationId:string]:editorCommon.IModelDecorationOptions;};\n\n\tpublic newOrChangedDecorations:{[decorationId:string]:boolean;};\n\tpublic removedDecorations:{[decorationId:string]:boolean;};\n\n\tconstructor() {\n\t\tthis.changedMarkers = {};\n\t\tthis.oldDecorationRange = {};\n\t\tthis.oldDecorationOptions = {};\n\t\tthis.newOrChangedDecorations = {};\n\t\tthis.removedDecorations = {};\n\t}\n\n\t// --- Build decoration events\n\n\tpublic addNewDecoration(id:string): void {\n\t\tthis.newOrChangedDecorations[id] = true;\n\t}\n\n\tpublic addRemovedDecoration(id:string, ownerId:number, range:editorCommon.IRange, options:editorCommon.IModelDecorationOptions): void {\n\t\tif (this.newOrChangedDecorations.hasOwnProperty(id)) {\n\t\t\tdelete this.newOrChangedDecorations[id];\n\t\t}\n\t\tif (!this.oldDecorationRange.hasOwnProperty(id)) {\n\t\t\tthis.oldDecorationRange[id] = range;\n\t\t}\n\t\tif (!this.oldDecorationOptions.hasOwnProperty(id)) {\n\t\t\tthis.oldDecorationOptions[id] = options;\n\t\t}\n\t\tthis.removedDecorations[id] = true;\n\t}\n\n\tpublic addMovedDecoration(id:string, oldRange:editorCommon.IRange): void {\n\t\tif (!this.oldDecorationRange.hasOwnProperty(id)) {\n\t\t\tthis.oldDecorationRange[id] = oldRange;\n\t\t}\n\t\tthis.newOrChangedDecorations[id] = true;\n\t}\n\n\tpublic addUpdatedDecoration(id:string, oldOptions:editorCommon.IModelDecorationOptions): void {\n\t\tif (!this.oldDecorationOptions.hasOwnProperty(id)) {\n\t\t\tthis.oldDecorationOptions[id] = oldOptions;\n\t\t}\n\t\tthis.newOrChangedDecorations[id] = true;\n\t}\n}\n\ninterface IInternalDecoration {\n\tid:string;\n\townerId:number;\n\trangeId:string;\n\toptions:ModelDecorationOptions;\n}\n\ninterface IInternalDecorationsMap {\n\t[key:string]:IInternalDecoration;\n}\n\ninterface IRangeIdToDecorationIdMap {\n\t[key:string]:string;\n}\n\ninterface IOldDecoration {\n\trange: Range;\n\toptions: ModelDecorationOptions;\n\tid: string;\n}\n\nvar _INSTANCE_COUNT = 0;\n\nexport class TextModelWithDecorations extends TextModelWithTrackedRanges implements editorCommon.ITextModelWithDecorations {\n\n\tprivate _currentDeferredEvents:DeferredEventsBuilder;\n\tprivate _decorationIdGenerator: IdGenerator;\n\tprivate decorations:IInternalDecorationsMap;\n\tprivate rangeIdToDecorationId:IRangeIdToDecorationIdMap;\n\n\tconstructor(allowedEventTypes:string[], rawText:editorCommon.IRawText, modeOrPromise:IMode|TPromise<IMode>) {\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelDecorationsChanged);\n\t\tsuper(allowedEventTypes, rawText, modeOrPromise);\n\n\t\t// Initialize decorations\n\t\tthis._decorationIdGenerator = new IdGenerator((++_INSTANCE_COUNT) + ';');\n\t\tthis.decorations = {};\n\t\tthis.rangeIdToDecorationId = {};\n\t\tthis._currentDeferredEvents = null;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.decorations = null;\n\t\tthis.rangeIdToDecorationId = null;\n\t\tsuper.dispose();\n\t}\n\n\t_resetValue(e:editorCommon.IModelContentChangedFlushEvent, newValue:editorCommon.IRawText): void {\n\t\tsuper._resetValue(e, newValue);\n\n\t\t// Destroy all my decorations\n\t\tthis.decorations = {};\n\t\tthis.rangeIdToDecorationId = {};\n\t}\n\n\tpublic changeDecorations(callback: (changeAccessor:editorCommon.IModelDecorationsChangeAccessor)=>any, ownerId:number=0): any {\n\t\treturn this._withDeferredEvents((deferredEventsBuilder:DeferredEventsBuilder) => {\n\t\t\tvar changeAccessor:editorCommon.IModelDecorationsChangeAccessor = {\n\t\t\t\taddDecoration: (range:editorCommon.IRange, options:editorCommon.IModelDecorationOptions): string => {\n\t\t\t\t\treturn this._addDecorationImpl(deferredEventsBuilder, ownerId, this.validateRange(range), _normalizeOptions(options));\n\t\t\t\t},\n\t\t\t\tchangeDecoration: (id:string, newRange:editorCommon.IRange): void => {\n\t\t\t\t\tthis._changeDecorationImpl(deferredEventsBuilder, id, this.validateRange(newRange));\n\t\t\t\t},\n\t\t\t\tchangeDecorationOptions: (id: string, options:editorCommon.IModelDecorationOptions) => {\n\t\t\t\t\tthis._changeDecorationOptionsImpl(deferredEventsBuilder, id, _normalizeOptions(options));\n\t\t\t\t},\n\t\t\t\tremoveDecoration: (id:string): void => {\n\t\t\t\t\tthis._removeDecorationImpl(deferredEventsBuilder, id);\n\t\t\t\t},\n\t\t\t\tdeltaDecorations: (oldDecorations:string[], newDecorations:editorCommon.IModelDeltaDecoration[]): string[] => {\n\t\t\t\t\treturn this._deltaDecorationsImpl(deferredEventsBuilder, ownerId, oldDecorations, this._normalizeDeltaDecorations(newDecorations));\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar result: any = null;\n\t\t\ttry {\n\t\t\t\tresult = callback(changeAccessor);\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedError(e);\n\t\t\t}\n\t\t\t// Invalidate change accessor\n\t\t\tchangeAccessor.addDecoration = null;\n\t\t\tchangeAccessor.changeDecoration = null;\n\t\t\tchangeAccessor.removeDecoration = null;\n\t\t\tchangeAccessor.deltaDecorations = null;\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic deltaDecorations(oldDecorations:string[], newDecorations:editorCommon.IModelDeltaDecoration[], ownerId:number=0): string[] {\n\t\tif (!oldDecorations) {\n\t\t\toldDecorations = [];\n\t\t}\n\t\treturn this.changeDecorations((changeAccessor) => {\n\t\t\treturn changeAccessor.deltaDecorations(oldDecorations, newDecorations);\n\t\t}, ownerId);\n\t}\n\n\tpublic removeAllDecorationsWithOwnerId(ownerId:number): void {\n\t\tlet toRemove:string[] = [];\n\n\t\tlet keys = Object.keys(this.decorations);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet decorationId = keys[i];\n\t\t\tlet decoration = this.decorations[decorationId];\n\n\t\t\tif (decoration.ownerId === ownerId) {\n\t\t\t\ttoRemove.push(decoration.id);\n\t\t\t}\n\t\t}\n\n\t\tthis._removeDecorationsImpl(null, toRemove);\n\t}\n\n\tpublic getDecorationOptions(decorationId:string): editorCommon.IModelDecorationOptions {\n\t\tif (this.decorations.hasOwnProperty(decorationId)) {\n\t\t\treturn this.decorations[decorationId].options;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getDecorationRange(decorationId:string): Range {\n\t\tif (this.decorations.hasOwnProperty(decorationId)) {\n\t\t\tvar decoration = this.decorations[decorationId];\n\t\t\treturn this.getTrackedRange(decoration.rangeId);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getLineDecorations(lineNumber:number, ownerId:number=0, filterOutValidation:boolean=false): editorCommon.IModelDecoration[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n\t}\n\n\tprivate _getDecorationsInRange(startLineNumber:number, startColumn:number, endLineNumber:number, endColumn:number, ownerId:number, filterOutValidation:boolean): editorCommon.IModelDecoration[] {\n\t\tvar result:editorCommon.IModelDecoration[] = [],\n\t\t\tdecoration:IInternalDecoration,\n\t\t\tlineRanges = this.getLinesTrackedRanges(startLineNumber, endLineNumber),\n\t\t\ti:number,\n\t\t\tlineRange: editorCommon.IModelTrackedRange,\n\t\t\tlen:number;\n\n\t\tfor (i = 0, len = lineRanges.length; i < len; i++) {\n\t\t\tlineRange = lineRanges[i];\n\n\t\t\t// Look at line range only if there is a corresponding decoration for it\n\t\t\tif (this.rangeIdToDecorationId.hasOwnProperty(lineRange.id)) {\n\t\t\t\tdecoration = this.decorations[this.rangeIdToDecorationId[lineRange.id]];\n\n\t\t\t\tif (ownerId && decoration.ownerId && decoration.ownerId !== ownerId) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (filterOutValidation) {\n\t\t\t\t\tif (decoration.options.className === editorCommon.ClassName.EditorErrorDecoration || decoration.options.className === editorCommon.ClassName.EditorWarningDecoration) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (lineRange.range.startLineNumber === startLineNumber && lineRange.range.endColumn < startColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (lineRange.range.endLineNumber === endLineNumber && lineRange.range.startColumn > endColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tresult.push({\n\t\t\t\t\tid: decoration.id,\n\t\t\t\t\townerId: decoration.ownerId,\n\t\t\t\t\trange: lineRange.range,\n\t\t\t\t\toptions: decoration.options\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getLinesDecorations(startLineNumber: number, endLineNumber: number, ownerId:number=0, filterOutValidation:boolean=false): editorCommon.IModelDecoration[] {\n\t\tvar lineCount = this.getLineCount();\n\t\tstartLineNumber = Math.min(lineCount, Math.max(1, startLineNumber));\n\t\tendLineNumber = Math.min(lineCount, Math.max(1, endLineNumber));\n\t\treturn this._getDecorationsInRange(startLineNumber, 1, endLineNumber, Number.MAX_VALUE, ownerId, filterOutValidation);\n\t}\n\n\tpublic getDecorationsInRange(range: editorCommon.IRange, ownerId?: number, filterOutValidation?: boolean): editorCommon.IModelDecoration[] {\n\t\tvar validatedRange = this.validateRange(range);\n\t\treturn this._getDecorationsInRange(validatedRange.startLineNumber, validatedRange.startColumn, validatedRange.endLineNumber, validatedRange.endColumn, ownerId, filterOutValidation);\n\t}\n\n\tpublic getAllDecorations(ownerId:number=0, filterOutValidation:boolean=false): editorCommon.IModelDecoration[] {\n\t\tlet result:editorCommon.IModelDecoration[] = [];\n\n\t\tlet keys = Object.keys(this.decorations);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet decorationId = keys[i];\n\t\t\tlet decoration = this.decorations[decorationId];\n\n\t\t\tif (ownerId && decoration.ownerId && decoration.ownerId !== ownerId) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (filterOutValidation) {\n\t\t\t\tif (decoration.options.className === editorCommon.ClassName.EditorErrorDecoration || decoration.options.className === editorCommon.ClassName.EditorWarningDecoration) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push({\n\t\t\t\tid: decoration.id,\n\t\t\t\townerId: decoration.ownerId,\n\t\t\t\trange: this.getTrackedRange(decoration.rangeId),\n\t\t\t\toptions: decoration.options\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_withDeferredEvents(callback:(deferredEventsBuilder:DeferredEventsBuilder)=>any): any {\n\t\treturn this.deferredEmit(() => {\n\t\t\tvar createDeferredEvents = this._currentDeferredEvents ? false : true;\n\t\t\tif (createDeferredEvents) {\n\t\t\t\tthis._currentDeferredEvents = new DeferredEventsBuilder();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tvar result = callback(this._currentDeferredEvents);\n\t\t\t\tif (createDeferredEvents) {\n\t\t\t\t\tthis._handleCollectedEvents(this._currentDeferredEvents);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (createDeferredEvents) {\n\t\t\t\t\tthis._currentDeferredEvents = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tprivate _handleCollectedEvents(b:DeferredEventsBuilder): void {\n\t\t// Normalize changed markers into an array\n\t\tvar changedMarkers = this._getMarkersInMap(b.changedMarkers);\n\n\t\t// Collect changed tracked ranges\n\t\tvar changedRanges = this._onChangedMarkers(changedMarkers);\n\n\t\t// Collect decoration change events with the deferred event builder\n\t\tthis._onChangedRanges(b, changedRanges);\n\n\t\t// Emit a single decorations changed event\n\t\tthis._handleCollectedDecorationsEvents(b);\n\n\t\t// Reset markers for next round of events\n\t\tfor (var i = 0, len = changedMarkers.length; i < len; i++) {\n\t\t\tchangedMarkers[i].oldLineNumber = 0;\n\t\t\tchangedMarkers[i].oldColumn = 0;\n\t\t}\n\t}\n\n\tprivate _onChangedRanges(eventBuilder:DeferredEventsBuilder, changedRanges:editorCommon.IChangedTrackedRanges): void {\n\t\tlet keys = Object.keys(changedRanges);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet rangeId = keys[i];\n\t\t\tif (this.rangeIdToDecorationId.hasOwnProperty(rangeId)) {\n\t\t\t\tlet decorationId = this.rangeIdToDecorationId[rangeId];\n\n\t\t\t\teventBuilder.addMovedDecoration(decorationId, changedRanges[rangeId]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handleCollectedDecorationsEvents(b:DeferredEventsBuilder): void {\n\t\tvar addedOrChangedDecorations:editorCommon.IModelDecorationsChangedEventDecorationData[] = [],\n\t\t\tremovedDecorations:string[] = [],\n\t\t\tdecorationIds:string[] = [],\n\t\t\tdecorationData:editorCommon.IModelDecorationsChangedEventDecorationData,\n\t\t\toldRange:editorCommon.IRange;\n\n\t\tlet keys = Object.keys(b.newOrChangedDecorations);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet decorationId = keys[i];\n\n\t\t\tdecorationIds.push(decorationId);\n\t\t\tdecorationData = this._getDecorationData(decorationId);\n\t\t\tdecorationData.isForValidation = (decorationData.options.className === editorCommon.ClassName.EditorErrorDecoration || decorationData.options.className === editorCommon.ClassName.EditorWarningDecoration);\n\t\t\taddedOrChangedDecorations.push(decorationData);\n\t\t\tif (b.oldDecorationRange.hasOwnProperty(decorationId)) {\n\t\t\t\toldRange = b.oldDecorationRange[decorationId];\n\t\t\t\toldRange.startLineNumber = oldRange.startLineNumber || decorationData.range.startLineNumber;\n\t\t\t\toldRange.startColumn = oldRange.startColumn || decorationData.range.startColumn;\n\t\t\t\toldRange.endLineNumber = oldRange.endLineNumber || decorationData.range.endLineNumber;\n\t\t\t\toldRange.endColumn = oldRange.endColumn || decorationData.range.endColumn;\n\t\t\t}\n\t\t}\n\n\t\tkeys = Object.keys(b.removedDecorations);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet decorationId = keys[i];\n\t\t\tdecorationIds.push(decorationId);\n\t\t\tremovedDecorations.push(decorationId);\n\t\t}\n\n\t\tif (decorationIds.length > 0) {\n\t\t\tvar e:editorCommon.IModelDecorationsChangedEvent = {\n\t\t\t\tids: decorationIds,\n\t\t\t\taddedOrChangedDecorations: addedOrChangedDecorations,\n\t\t\t\tremovedDecorations: removedDecorations,\n\t\t\t\toldOptions: b.oldDecorationOptions,\n\t\t\t\toldRanges: b.oldDecorationRange\n\t\t\t};\n\t\t\tthis.emitModelDecorationsChangedEvent(e);\n\t\t}\n\t}\n\n\tprivate _getDecorationData(decorationId:string): editorCommon.IModelDecorationsChangedEventDecorationData {\n\t\tvar decoration = this.decorations[decorationId];\n\t\treturn {\n\t\t\tid: decoration.id,\n\t\t\townerId: decoration.ownerId,\n\t\t\trange: this.getTrackedRange(decoration.rangeId),\n\t\t\tisForValidation: false,\n\t\t\toptions: decoration.options\n\t\t};\n\t}\n\n\tprivate emitModelDecorationsChangedEvent(e:editorCommon.IModelDecorationsChangedEvent): void {\n\t\tif (!this._isDisposing) {\n\t\t\tthis.emit(editorCommon.EventType.ModelDecorationsChanged, e);\n\t\t}\n\t}\n\n\tprivate _normalizeDeltaDecorations(deltaDecorations:editorCommon.IModelDeltaDecoration[]): ModelDeltaDecoration[] {\n\t\tlet result:ModelDeltaDecoration[] = [];\n\t\tfor (let i = 0, len = deltaDecorations.length; i < len; i++) {\n\t\t\tlet deltaDecoration = deltaDecorations[i];\n\t\t\tresult.push(new ModelDeltaDecoration(i, this.validateRange(deltaDecoration.range), _normalizeOptions(deltaDecoration.options)));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _addDecorationImpl(eventBuilder:DeferredEventsBuilder, ownerId:number, range:Range, options:ModelDecorationOptions): string {\n\t\tvar rangeId = this.addTrackedRange(range, options.stickiness);\n\n\t\tvar decoration = new ModelInternalDecoration(this._decorationIdGenerator.nextId(), ownerId, rangeId, options);\n\n\t\tthis.decorations[decoration.id] = decoration;\n\t\tthis.rangeIdToDecorationId[rangeId] = decoration.id;\n\n\t\teventBuilder.addNewDecoration(decoration.id);\n\n\t\treturn decoration.id;\n\t}\n\n\tprivate _addDecorationsImpl(eventBuilder:DeferredEventsBuilder, ownerId:number, newDecorations: ModelDeltaDecoration[]): string[] {\n\t\tvar rangeIds = this._addTrackedRanges(newDecorations.map(d => d.range), newDecorations.map(d => d.options.stickiness));\n\t\tvar result: string[] = [];\n\n\t\tfor (let i = 0, len = newDecorations.length; i < len; i++) {\n\t\t\tlet rangeId = rangeIds[i];\n\n\t\t\tvar decoration = new ModelInternalDecoration(this._decorationIdGenerator.nextId(), ownerId, rangeId, newDecorations[i].options);\n\n\t\t\tthis.decorations[decoration.id] = decoration;\n\t\t\tthis.rangeIdToDecorationId[rangeId] = decoration.id;\n\n\t\t\teventBuilder.addNewDecoration(decoration.id);\n\n\t\t\tresult.push(decoration.id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _changeDecorationImpl(eventBuilder:DeferredEventsBuilder, id:string, newRange:Range): void {\n\t\tif (this.decorations.hasOwnProperty(id)) {\n\t\t\tvar decoration = this.decorations[id];\n\t\t\tvar oldRange = this.getTrackedRange(decoration.rangeId);\n\n\t\t\tthis.changeTrackedRange(decoration.rangeId, newRange);\n\n\t\t\teventBuilder.addMovedDecoration(id, oldRange);\n\t\t}\n\t}\n\n\tprivate _changeDecorationOptionsImpl(eventBuilder:DeferredEventsBuilder, id:string, options:ModelDecorationOptions): void {\n\t\tif (this.decorations.hasOwnProperty(id)) {\n\t\t\tvar decoration = this.decorations[id];\n\t\t\tvar oldOptions = decoration.options;\n\n\t\t\tif (oldOptions.stickiness !== options.stickiness) {\n\t\t\t\tthis.changeTrackedRangeStickiness(decoration.rangeId, options.stickiness);\n\t\t\t}\n\n\t\t\tdecoration.options = options;\n\n\t\t\teventBuilder.addUpdatedDecoration(id, oldOptions);\n\t\t}\n\t}\n\n\tprivate _removeDecorationImpl(eventBuilder:DeferredEventsBuilder, id:string): void {\n\t\tif (this.decorations.hasOwnProperty(id)) {\n\t\t\tvar decoration = this.decorations[id];\n\t\t\tvar oldRange:Range = null;\n\t\t\tif (eventBuilder) {\n\t\t\t\toldRange = this.getTrackedRange(decoration.rangeId);\n\t\t\t}\n\n\t\t\tthis.removeTrackedRange(decoration.rangeId);\n\t\t\tdelete this.rangeIdToDecorationId[decoration.rangeId];\n\t\t\tdelete this.decorations[id];\n\n\t\t\tif (eventBuilder) {\n\t\t\t\teventBuilder.addRemovedDecoration(id, decoration.ownerId, oldRange, decoration.options);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _removeDecorationsImpl(eventBuilder:DeferredEventsBuilder, ids:string[]): void {\n\t\tvar removeTrackedRanges: string[] = [];\n\n\t\tfor (let i = 0, len = ids.length; i < len; i++) {\n\t\t\tlet id = ids[i];\n\n\t\t\tif (!this.decorations.hasOwnProperty(id)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet decoration = this.decorations[id];\n\n\t\t\tif (eventBuilder) {\n\t\t\t\tlet oldRange = this.getTrackedRange(decoration.rangeId);\n\t\t\t\teventBuilder.addRemovedDecoration(id, decoration.ownerId, oldRange, decoration.options);\n\t\t\t}\n\n\t\t\tremoveTrackedRanges.push(decoration.rangeId);\n\t\t\tdelete this.rangeIdToDecorationId[decoration.rangeId];\n\t\t\tdelete this.decorations[id];\n\t\t}\n\n\t\tif (removeTrackedRanges.length > 0) {\n\t\t\tthis.removeTrackedRanges(removeTrackedRanges);\n\t\t}\n\t}\n\n\tprivate _resolveOldDecorations(oldDecorations:string[]): IOldDecoration[] {\n\t\tlet result:IOldDecoration[] = [];\n\t\tfor (let i = 0, len = oldDecorations.length; i < len; i++) {\n\t\t\tlet id = oldDecorations[i];\n\t\t\tif (!this.decorations.hasOwnProperty(id)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet decoration = this.decorations[id];\n\n\t\t\tresult.push({\n\t\t\t\tid: id,\n\t\t\t\trange: this.getTrackedRange(decoration.rangeId),\n\t\t\t\toptions: decoration.options\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _deltaDecorationsImpl(eventBuilder:DeferredEventsBuilder, ownerId:number, oldDecorationsIds:string[], newDecorations: ModelDeltaDecoration[]): string[] {\n\n\t\tif (oldDecorationsIds.length === 0) {\n\t\t\t// Nothing to remove\n\t\t\treturn this._addDecorationsImpl(eventBuilder, ownerId, newDecorations);\n\t\t}\n\n\t\tif (newDecorations.length === 0) {\n\t\t\t// Nothing to add\n\t\t\tthis._removeDecorationsImpl(eventBuilder, oldDecorationsIds);\n\t\t\treturn [];\n\t\t}\n\n\t\tlet oldDecorations = this._resolveOldDecorations(oldDecorationsIds);\n\n\t\toldDecorations.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\tnewDecorations.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\n\t\tlet result:string[] = [],\n\t\t\toldDecorationsIndex = 0,\n\t\t\toldDecorationsLength = oldDecorations.length,\n\t\t\tnewDecorationsIndex = 0,\n\t\t\tnewDecorationsLength = newDecorations.length,\n\t\t\tdecorationsToAdd: ModelDeltaDecoration[] = [],\n\t\t\tdecorationsToRemove: string[] = [];\n\n\t\twhile (oldDecorationsIndex < oldDecorationsLength && newDecorationsIndex < newDecorationsLength) {\n\t\t\tlet oldDecoration = oldDecorations[oldDecorationsIndex];\n\t\t\tlet newDecoration = newDecorations[newDecorationsIndex];\n\t\t\tlet comparison = Range.compareRangesUsingStarts(oldDecoration.range, newDecoration.range);\n\n\t\t\tif (comparison < 0) {\n\t\t\t\t// `oldDecoration` is before `newDecoration` => remove `oldDecoration`\n\t\t\t\tdecorationsToRemove.push(oldDecoration.id);\n\t\t\t\toldDecorationsIndex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (comparison > 0) {\n\t\t\t\t// `newDecoration` is before `oldDecoration` => add `newDecoration`\n\t\t\t\tdecorationsToAdd.push(newDecoration);\n\t\t\t\tnewDecorationsIndex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// The ranges of `oldDecoration` and `newDecoration` are equal\n\n\t\t\tif (!oldDecoration.options.equals(newDecoration.options)) {\n\t\t\t\t// The options do not match => remove `oldDecoration`\n\t\t\t\tdecorationsToRemove.push(oldDecoration.id);\n\t\t\t\toldDecorationsIndex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Bingo! We can reuse `oldDecoration` for `newDecoration`\n\t\t\tresult[newDecoration.index] = oldDecoration.id;\n\t\t\toldDecorationsIndex++;\n\t\t\tnewDecorationsIndex++;\n\t\t}\n\n\t\twhile (oldDecorationsIndex < oldDecorationsLength) {\n\t\t\t// No more new decorations => remove decoration at `oldDecorationsIndex`\n\t\t\tdecorationsToRemove.push(oldDecorations[oldDecorationsIndex].id);\n\t\t\toldDecorationsIndex++;\n\t\t}\n\n\t\twhile (newDecorationsIndex < newDecorationsLength) {\n\t\t\t// No more old decorations => add decoration at `newDecorationsIndex`\n\t\t\tdecorationsToAdd.push(newDecorations[newDecorationsIndex]);\n\t\t\tnewDecorationsIndex++;\n\t\t}\n\n\t\t// Remove `decorationsToRemove`\n\t\tif (decorationsToRemove.length > 0) {\n\t\t\tthis._removeDecorationsImpl(eventBuilder, decorationsToRemove);\n\t\t}\n\n\t\t// Add `decorationsToAdd`\n\t\tif (decorationsToAdd.length > 0) {\n\t\t\tlet newIds = this._addDecorationsImpl(eventBuilder, ownerId, decorationsToAdd);\n\t\t\tfor (let i = 0, len = decorationsToAdd.length; i < len; i++) {\n\t\t\t\tresult[decorationsToAdd[i].index] = newIds[i];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nfunction cleanClassName(className:string): string {\n\treturn className.replace(/[^a-z0-9\\-]/gi, ' ');\n}\n\nclass ModelInternalDecoration implements IInternalDecoration {\n\tid:string;\n\townerId:number;\n\trangeId:string;\n\toptions:ModelDecorationOptions;\n\n\tconstructor(id:string, ownerId:number, rangeId:string, options:ModelDecorationOptions) {\n\t\tthis.id = id;\n\t\tthis.ownerId = ownerId;\n\t\tthis.rangeId = rangeId;\n\t\tthis.options = options;\n\t}\n}\n\nclass ModelDecorationOptions implements editorCommon.IModelDecorationOptions {\n\n\tstickiness:editorCommon.TrackedRangeStickiness;\n\tclassName:string;\n\thoverMessage:string;\n\thtmlMessage:IHTMLContentElement[];\n\tisWholeLine:boolean;\n\tshowInOverviewRuler:string;\n\toverviewRuler:editorCommon.IModelDecorationOverviewRulerOptions;\n\tglyphMarginClassName:string;\n\tlinesDecorationsClassName:string;\n\tinlineClassName:string;\n\n\tconstructor(options:editorCommon.IModelDecorationOptions) {\n\t\tthis.stickiness = options.stickiness||editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges;\n\t\tthis.className = cleanClassName(options.className||strings.empty);\n\t\tthis.hoverMessage = options.hoverMessage||strings.empty;\n\t\tthis.htmlMessage = options.htmlMessage||[];\n\t\tthis.isWholeLine = options.isWholeLine||false;\n\t\tthis.overviewRuler = _normalizeOverviewRulerOptions(options.overviewRuler, options.showInOverviewRuler);\n\t\tthis.glyphMarginClassName = cleanClassName(options.glyphMarginClassName||strings.empty);\n\t\tthis.linesDecorationsClassName = cleanClassName(options.linesDecorationsClassName||strings.empty);\n\t\tthis.inlineClassName = cleanClassName(options.inlineClassName||strings.empty);\n\t}\n\n\tprivate static _overviewRulerEquals(a:editorCommon.IModelDecorationOverviewRulerOptions, b:editorCommon.IModelDecorationOverviewRulerOptions): boolean {\n\t\treturn (\n\t\t\ta.color === b.color\n\t\t\t&& a.position === b.position\n\t\t\t&& a.darkColor === b.darkColor\n\t\t);\n\t}\n\n\tpublic equals(other:ModelDecorationOptions): boolean {\n\t\treturn (\n\t\t\tthis.stickiness === other.stickiness\n\t\t\t&& this.className === other.className\n\t\t\t&& this.hoverMessage === other.hoverMessage\n\t\t\t&& this.isWholeLine === other.isWholeLine\n\t\t\t&& this.showInOverviewRuler === other.showInOverviewRuler\n\t\t\t&& this.glyphMarginClassName === other.glyphMarginClassName\n\t\t\t&& this.linesDecorationsClassName === other.linesDecorationsClassName\n\t\t\t&& this.inlineClassName === other.inlineClassName\n\t\t\t&& htmlContentElementArrEquals(this.htmlMessage, other.htmlMessage)\n\t\t\t&& ModelDecorationOptions._overviewRulerEquals(this.overviewRuler, other.overviewRuler)\n\t\t);\n\t}\n}\n\nclass ModelDeltaDecoration implements editorCommon.IModelDeltaDecoration {\n\n\tindex: number;\n\trange: Range;\n\toptions: ModelDecorationOptions;\n\n\tconstructor(index: number, range: Range, options: ModelDecorationOptions) {\n\t\tthis.index = index;\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\nfunction _normalizeOptions(options:editorCommon.IModelDecorationOptions): ModelDecorationOptions {\n\treturn new ModelDecorationOptions(options);\n}\n\nclass ModelDecorationOverviewRulerOptions implements editorCommon.IModelDecorationOverviewRulerOptions {\n\tcolor: string;\n\tdarkColor: string;\n\tposition: editorCommon.OverviewRulerLane;\n\n\tconstructor(options:editorCommon.IModelDecorationOverviewRulerOptions, legacyShowInOverviewRuler:string) {\n\t\tthis.color = strings.empty;\n\t\tthis.darkColor = strings.empty;\n\t\tthis.position = editorCommon.OverviewRulerLane.Center;\n\n\t\tif (legacyShowInOverviewRuler) {\n\t\t\tthis.color = legacyShowInOverviewRuler;\n\t\t}\n\t\tif (options && options.color) {\n\t\t\tthis.color = options.color;\n\t\t}\n\t\tif (options && options.darkColor) {\n\t\t\tthis.darkColor = options.darkColor;\n\t\t}\n\t\tif (options && options.hasOwnProperty('position')) {\n\t\t\tthis.position = options.position;\n\t\t}\n\t}\n}\n\nfunction _normalizeOverviewRulerOptions(options:editorCommon.IModelDecorationOverviewRulerOptions, legacyShowInOverviewRuler: string = null): editorCommon.IModelDecorationOverviewRulerOptions {\n\treturn new ModelDecorationOverviewRulerOptions(options, legacyShowInOverviewRuler);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {EditStack} from 'vs/editor/common/model/editStack';\nimport {ILineEdit, ILineMarker, ModelLine} from 'vs/editor/common/model/modelLine';\nimport {DeferredEventsBuilder, TextModelWithDecorations} from 'vs/editor/common/model/textModelWithDecorations';\nimport {IMode} from 'vs/editor/common/modes';\nimport * as strings from 'vs/base/common/strings';\nimport {Selection} from 'vs/editor/common/core/selection';\nimport {IDisposable} from 'vs/base/common/lifecycle';\n\nexport interface IValidatedEditOperation {\n\tsortIndex: number;\n\tidentifier: editorCommon.ISingleEditOperationIdentifier;\n\trange: Range;\n\trangeLength: number;\n\tlines: string[];\n\tforceMoveMarkers: boolean;\n\tisAutoWhitespaceEdit: boolean;\n}\n\ninterface IIdentifiedLineEdit extends ILineEdit{\n\tlineNumber: number;\n}\n\nexport class EditableTextModel extends TextModelWithDecorations implements editorCommon.IEditableTextModel {\n\n\tpublic onDidChangeRawContent(listener: (e:editorCommon.IModelContentChangedEvent)=>void): IDisposable {\n\t\treturn this.addListener2(editorCommon.EventType.ModelRawContentChanged, listener);\n\t}\n\tpublic onDidChangeContent(listener: (e:editorCommon.IModelContentChangedEvent2)=>void): IDisposable {\n\t\treturn this.addListener2(editorCommon.EventType.ModelContentChanged2, listener);\n\t}\n\n\tprivate _commandManager:EditStack;\n\n\t// for extra details about change events:\n\tprivate _isUndoing:boolean;\n\tprivate _isRedoing:boolean;\n\n\t// editable range\n\tprivate _hasEditableRange:boolean;\n\tprivate _editableRangeId:string;\n\n\tprivate _trimAutoWhitespaceLines: number[];\n\n\tconstructor(allowedEventTypes:string[], rawText:editorCommon.IRawText, modeOrPromise:IMode|TPromise<IMode>) {\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelRawContentChanged);\n\t\tallowedEventTypes.push(editorCommon.EventType.ModelContentChanged2);\n\t\tsuper(allowedEventTypes, rawText, modeOrPromise);\n\n\t\tthis._commandManager = new EditStack(this);\n\n\t\tthis._isUndoing = false;\n\t\tthis._isRedoing = false;\n\n\t\tthis._hasEditableRange = false;\n\t\tthis._editableRangeId = null;\n\t\tthis._trimAutoWhitespaceLines = null;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._commandManager = null;\n\t\tsuper.dispose();\n\t}\n\n\t_resetValue(e:editorCommon.IModelContentChangedFlushEvent, newValue:editorCommon.IRawText): void {\n\t\tsuper._resetValue(e, newValue);\n\n\t\t// Destroy my edit history and settings\n\t\tthis._commandManager = new EditStack(this);\n\t\tthis._hasEditableRange = false;\n\t\tthis._editableRangeId = null;\n\t\tthis._trimAutoWhitespaceLines = null;\n\t}\n\n\tpublic pushStackElement(): void {\n\t\tthis._commandManager.pushStackElement();\n\t}\n\n\tpublic pushEditOperations(beforeCursorState:Selection[], editOperations:editorCommon.IIdentifiedSingleEditOperation[], cursorStateComputer:editorCommon.ICursorStateComputer): Selection[] {\n\t\treturn this.deferredEmit(() => {\n\t\t\tif (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n\t\t\t\t// Go through each saved line number and insert a trim whitespace edit\n\t\t\t\t// if it is safe to do so (no conflicts with other edits).\n\n\t\t\t\tlet incomingEdits = editOperations.map((op) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\trange: this.validateRange(op.range),\n\t\t\t\t\t\ttext: op.text\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\t// Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n\t\t\t\t// We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n\t\t\t\tlet editsAreNearCursors = true;\n\t\t\t\tfor (let i = 0, len = beforeCursorState.length; i < len; i++) {\n\t\t\t\t\tlet sel = beforeCursorState[i];\n\t\t\t\t\tlet foundEditNearSel = false;\n\t\t\t\t\tfor (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n\t\t\t\t\t\tlet editRange = incomingEdits[j].range;\n\t\t\t\t\t\tlet selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n\t\t\t\t\t\tlet selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n\t\t\t\t\t\tif (!selIsAbove && !selIsBelow) {\n\t\t\t\t\t\t\tfoundEditNearSel = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!foundEditNearSel) {\n\t\t\t\t\t\teditsAreNearCursors = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (editsAreNearCursors) {\n\t\t\t\t\tfor (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n\t\t\t\t\t\tlet trimLineNumber = this._trimAutoWhitespaceLines[i];\n\t\t\t\t\t\tlet maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n\n\t\t\t\t\t\tlet allowTrimLine = true;\n\t\t\t\t\t\tfor (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n\t\t\t\t\t\t\tlet editRange = incomingEdits[j].range;\n\t\t\t\t\t\t\tlet editText = incomingEdits[j].text;\n\n\t\t\t\t\t\t\tif (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n\t\t\t\t\t\t\t\t// `trimLine` is completely outside this edit\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// At this point:\n\t\t\t\t\t\t\t//   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttrimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n\t\t\t\t\t\t\t\t&& editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n'\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t// This edit inserts a new line (and maybe other text) after `trimLine`\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Looks like we can't trim this line as it would interfere with an incoming edit\n\t\t\t\t\t\t\tallowTrimLine = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (allowTrimLine) {\n\t\t\t\t\t\t\teditOperations.push({\n\t\t\t\t\t\t\t\tidentifier: null,\n\t\t\t\t\t\t\t\trange: new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn),\n\t\t\t\t\t\t\t\ttext: null,\n\t\t\t\t\t\t\t\tforceMoveMarkers: false,\n\t\t\t\t\t\t\t\tisAutoWhitespaceEdit: false\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._trimAutoWhitespaceLines = null;\n\t\t\t}\n\t\t\treturn this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer);\n\t\t});\n\t}\n\n\t/**\n\t * Transform operations such that they represent the same logic edit,\n\t * but that they also do not cause OOM crashes.\n\t */\n\tprivate _reduceOperations(operations:IValidatedEditOperation[]): IValidatedEditOperation[] {\n\t\tif (operations.length < 1000) {\n\t\t\t// We know from empirical testing that a thousand edits work fine regardless of their shape.\n\t\t\treturn operations;\n\t\t}\n\n\t\t// At one point, due to how events are emitted and how each operation is handled,\n\t\t// some operations can trigger a high ammount of temporary string allocations,\n\t\t// that will immediately get edited again.\n\t\t// e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\n\t\t// Therefore, the strategy is to collapse all the operations into a huge single edit operation\n\t\treturn [this._toSingleEditOperation(operations)];\n\t}\n\n\t_toSingleEditOperation(operations:IValidatedEditOperation[]): IValidatedEditOperation {\n\t\tlet forceMoveMarkers = false,\n\t\t\tfirstEditRange = operations[0].range,\n\t\t\tlastEditRange = operations[operations.length-1].range,\n\t\t\tentireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn),\n\t\t\tlastEndLineNumber = firstEditRange.startLineNumber,\n\t\t\tlastEndColumn = firstEditRange.startColumn,\n\t\t\tresult: string[] = [];\n\n\t\tfor (let i = 0, len = operations.length; i < len; i++) {\n\t\t\tlet operation = operations[i],\n\t\t\t\trange = operation.range;\n\n\t\t\tforceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\n\n\t\t\t// (1) -- Push old text\n\t\t\tfor (let lineNumber = lastEndLineNumber; lineNumber < range.startLineNumber; lineNumber++) {\n\t\t\t\tif (lineNumber === lastEndLineNumber) {\n\t\t\t\t\tresult.push(this._lines[lineNumber - 1].text.substring(lastEndColumn - 1));\n\t\t\t\t} else {\n\t\t\t\t\tresult.push('\\n');\n\t\t\t\t\tresult.push(this._lines[lineNumber - 1].text);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (range.startLineNumber === lastEndLineNumber) {\n\t\t\t\tresult.push(this._lines[range.startLineNumber - 1].text.substring(lastEndColumn - 1, range.startColumn - 1));\n\t\t\t} else {\n\t\t\t\tresult.push('\\n');\n\t\t\t\tresult.push(this._lines[range.startLineNumber - 1].text.substring(0, range.startColumn - 1));\n\t\t\t}\n\n\t\t\t// (2) -- Push new text\n\t\t\tif (operation.lines) {\n\t\t\t\tfor (let j = 0, lenJ = operation.lines.length; j < lenJ; j++) {\n\t\t\t\t\tif (j !== 0) {\n\t\t\t\t\t\tresult.push('\\n');\n\t\t\t\t\t}\n\t\t\t\t\tresult.push(operation.lines[j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastEndLineNumber = operation.range.endLineNumber;\n\t\t\tlastEndColumn = operation.range.endColumn;\n\t\t}\n\n\t\treturn {\n\t\t\tsortIndex: 0,\n\t\t\tidentifier: operations[0].identifier,\n\t\t\trange: entireEditRange,\n\t\t\trangeLength: this.getValueLengthInRange(entireEditRange),\n\t\t\tlines: result.join('').split('\\n'),\n\t\t\tforceMoveMarkers: forceMoveMarkers,\n\t\t\tisAutoWhitespaceEdit: false\n\t\t};\n\t}\n\n\tprivate static _sortOpsAscending(a:IValidatedEditOperation, b:IValidatedEditOperation): number {\n\t\tlet r = Range.compareRangesUsingEnds(a.range, b.range);\n\t\tif (r === 0) {\n\t\t\treturn a.sortIndex - b.sortIndex;\n\t\t}\n\t\treturn r;\n\t}\n\n\tprivate static _sortOpsDescending(a:IValidatedEditOperation, b:IValidatedEditOperation): number {\n\t\tlet r = Range.compareRangesUsingEnds(a.range, b.range);\n\t\tif (r === 0) {\n\t\t\treturn b.sortIndex - a.sortIndex;\n\t\t}\n\t\treturn -r;\n\t}\n\n\tpublic applyEdits(rawOperations:editorCommon.IIdentifiedSingleEditOperation[]): editorCommon.IIdentifiedSingleEditOperation[] {\n\t\tif (rawOperations.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet operations:IValidatedEditOperation[] = [];\n\t\tfor (let i = 0; i < rawOperations.length; i++) {\n\t\t\tlet op = rawOperations[i];\n\t\t\tlet validatedRange = this.validateRange(op.range);\n\t\t\toperations[i] = {\n\t\t\t\tsortIndex: i,\n\t\t\t\tidentifier: op.identifier,\n\t\t\t\trange: validatedRange,\n\t\t\t\trangeLength: this.getValueLengthInRange(validatedRange),\n\t\t\t\tlines: op.text ? op.text.split(/\\r\\n|\\r|\\n/) : null,\n\t\t\t\tforceMoveMarkers: op.forceMoveMarkers,\n\t\t\t\tisAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\n\t\t\t};\n\t\t}\n\n\t\t// Sort operations ascending\n\t\toperations.sort(EditableTextModel._sortOpsAscending);\n\n\t\tfor (let i = 0, count = operations.length - 1; i < count; i++) {\n\t\t\tlet rangeEnd = operations[i].range.getEndPosition();\n\t\t\tlet nextRangeStart = operations[i + 1].range.getStartPosition();\n\n\t\t\tif (nextRangeStart.isBefore(rangeEnd)) {\n\t\t\t\t// overlapping ranges\n\t\t\t\tthrow new Error('Overlapping ranges are not allowed!');\n\t\t\t}\n\t\t}\n\n\t\toperations = this._reduceOperations(operations);\n\n\t\tlet editableRange = this.getEditableRange();\n\t\tlet editableRangeStart = editableRange.getStartPosition();\n\t\tlet editableRangeEnd = editableRange.getEndPosition();\n\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\tlet operationRange = operations[i].range;\n\t\t\tif (!editableRangeStart.isBeforeOrEqual(operationRange.getStartPosition()) || !operationRange.getEndPosition().isBeforeOrEqual(editableRangeEnd)) {\n\t\t\t\tthrow new Error('Editing outside of editable range not allowed!');\n\t\t\t}\n\t\t}\n\n\t\t// Delta encode operations\n\t\tlet reverseRanges = EditableTextModel._getInverseEditRanges(operations);\n\t\tlet reverseOperations: editorCommon.IIdentifiedSingleEditOperation[] = [];\n\n\t\tlet newTrimAutoWhitespaceCandidates: { lineNumber:number,oldContent:string }[] = [];\n\n\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\tlet op = operations[i];\n\t\t\tlet reverseRange = reverseRanges[i];\n\n\t\t\treverseOperations[i] = {\n\t\t\t\tidentifier: op.identifier,\n\t\t\t\trange: reverseRange,\n\t\t\t\ttext: this.getValueInRange(op.range),\n\t\t\t\tforceMoveMarkers: op.forceMoveMarkers\n\t\t\t};\n\n\t\t\tif (this._options.trimAutoWhitespace && op.isAutoWhitespaceEdit && op.range.isEmpty()) {\n\t\t\t\t// Record already the future line numbers that might be auto whitespace removal candidates on next edit\n\t\t\t\tfor (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\n\t\t\t\t\tlet currentLineContent = '';\n\t\t\t\t\tif (lineNumber === reverseRange.startLineNumber) {\n\t\t\t\t\t\tcurrentLineContent = this.getLineContent(op.range.startLineNumber);\n\t\t\t\t\t\tif (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnewTrimAutoWhitespaceCandidates.push({ lineNumber:lineNumber, oldContent:currentLineContent });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._applyEdits(operations);\n\n\t\tthis._trimAutoWhitespaceLines = null;\n\t\tif (this._options.trimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\n\t\t\t// sort line numbers auto whitespace removal candidates for next edit descending\n\t\t\tnewTrimAutoWhitespaceCandidates.sort((a,b) => b.lineNumber - a.lineNumber);\n\n\t\t\tthis._trimAutoWhitespaceLines = [];\n\t\t\tfor (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\n\t\t\t\tlet lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\n\t\t\t\tif (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\n\t\t\t\t\t// Do not have the same line number twice\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\n\t\t\t\tlet lineContent = this.getLineContent(lineNumber);\n\n\t\t\t\tif (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis._trimAutoWhitespaceLines.push(lineNumber);\n\t\t\t}\n\t\t}\n\n\t\treturn reverseOperations;\n\t}\n\n\t/**\n\t * Assumes `operations` are validated and sorted ascending\n\t */\n\tpublic static _getInverseEditRanges(operations:IValidatedEditOperation[]): Range[] {\n\t\tlet result:Range[] = [];\n\n\t\tlet prevOpEndLineNumber: number;\n\t\tlet prevOpEndColumn: number;\n\t\tlet prevOp:IValidatedEditOperation = null;\n\t\tfor (let i = 0, len = operations.length; i < len; i++) {\n\t\t\tlet op = operations[i];\n\n\t\t\tlet startLineNumber: number;\n\t\t\tlet startColumn: number;\n\n\t\t\tif (prevOp) {\n\t\t\t\tif (prevOp.range.endLineNumber === op.range.startLineNumber) {\n\t\t\t\t\tstartLineNumber = prevOpEndLineNumber;\n\t\t\t\t\tstartColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\n\t\t\t\t} else {\n\t\t\t\t\tstartLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\n\t\t\t\t\tstartColumn = op.range.startColumn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstartLineNumber = op.range.startLineNumber;\n\t\t\t\tstartColumn = op.range.startColumn;\n\t\t\t}\n\n\t\t\tlet resultRange: Range;\n\n\t\t\tif (op.lines && op.lines.length > 0) {\n\t\t\t\t// the operation inserts something\n\t\t\t\tlet lineCount = op.lines.length;\n\t\t\t\tlet firstLine = op.lines[0];\n\t\t\t\tlet lastLine = op.lines[lineCount - 1];\n\n\t\t\t\tif (lineCount === 1) {\n\t\t\t\t\t// single line insert\n\t\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + firstLine.length);\n\t\t\t\t} else {\n\t\t\t\t\t// multi line insert\n\t\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, lastLine.length + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// There is nothing to insert\n\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n\t\t\t}\n\n\t\t\tprevOpEndLineNumber = resultRange.endLineNumber;\n\t\t\tprevOpEndColumn = resultRange.endColumn;\n\n\t\t\tresult.push(resultRange);\n\t\t\tprevOp = op;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _applyEdits(operations:IValidatedEditOperation[]): void {\n\n\t\t// Sort operations descending\n\t\toperations.sort(EditableTextModel._sortOpsDescending);\n\n\n\t\tthis._withDeferredEvents((deferredEventsBuilder:DeferredEventsBuilder) => {\n\t\t\tlet contentChangedEvents: editorCommon.IModelContentChangedEvent[] = [];\n\t\t\tlet contentChanged2Events: editorCommon.IModelContentChangedEvent2[] = [];\n\t\t\tlet lineEditsQueue: IIdentifiedLineEdit[] = [];\n\n\t\t\tlet queueLineEdit = (lineEdit:IIdentifiedLineEdit) => {\n\t\t\t\tif (lineEdit.startColumn === lineEdit.endColumn && lineEdit.text.length === 0) {\n\t\t\t\t\t// empty edit => ignore it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlineEditsQueue.push(lineEdit);\n\t\t\t};\n\n\t\t\tlet flushLineEdits = () => {\n\t\t\t\tif (lineEditsQueue.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlineEditsQueue.reverse();\n\n\t\t\t\t// `lineEditsQueue` now contains edits from smaller (line number,column) to larger (line number,column)\n\t\t\t\tlet currentLineNumber = lineEditsQueue[0].lineNumber;\n\t\t\t\tlet currentLineNumberStart = 0;\n\n\t\t\t\tfor (let i = 1, len = lineEditsQueue.length; i < len; i++) {\n\t\t\t\t\tlet lineNumber = lineEditsQueue[i].lineNumber;\n\n\t\t\t\t\tif (lineNumber === currentLineNumber) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._invalidateLine(currentLineNumber - 1);\n\t\t\t\t\tthis._lines[currentLineNumber - 1].applyEdits(deferredEventsBuilder.changedMarkers, lineEditsQueue.slice(currentLineNumberStart, i));\n\t\t\t\t\tif (this._lineStarts) {\n\t\t\t\t\t\t// update prefix sum\n\t\t\t\t\t\tthis._lineStarts.changeValue(currentLineNumber - 1, this._lines[currentLineNumber - 1].text.length + this._EOL.length);\n\t\t\t\t\t}\n\t\t\t\t\tcontentChangedEvents.push(this._createLineChangedEvent(currentLineNumber));\n\n\t\t\t\t\tcurrentLineNumber = lineNumber;\n\t\t\t\t\tcurrentLineNumberStart = i;\n\t\t\t\t}\n\n\t\t\t\tthis._invalidateLine(currentLineNumber - 1);\n\t\t\t\tthis._lines[currentLineNumber - 1].applyEdits(deferredEventsBuilder.changedMarkers, lineEditsQueue.slice(currentLineNumberStart, lineEditsQueue.length));\n\t\t\t\tif (this._lineStarts) {\n\t\t\t\t\t// update prefix sum\n\t\t\t\t\tthis._lineStarts.changeValue(currentLineNumber - 1, this._lines[currentLineNumber - 1].text.length + this._EOL.length);\n\t\t\t\t}\n\t\t\t\tcontentChangedEvents.push(this._createLineChangedEvent(currentLineNumber));\n\n\t\t\t\tlineEditsQueue = [];\n\t\t\t};\n\n\t\t\tlet minTouchedLineNumber = operations[operations.length - 1].range.startLineNumber;\n\t\t\tlet maxTouchedLineNumber = operations[0].range.endLineNumber + 1;\n\t\t\tlet totalLinesCountDelta = 0;\n\n\t\t\tfor (let i = 0, len = operations.length; i < len; i++) {\n\t\t\t\tlet op = operations[i];\n\n\t\t\t\t// console.log();\n\t\t\t\t// console.log('-------------------');\n\t\t\t\t// console.log('OPERATION #' + (i));\n\t\t\t\t// console.log('op: ', op);\n\t\t\t\t// console.log('<<<\\n' + this._lines.map(l => l.text).join('\\n') + '\\n>>>');\n\n\t\t\t\tlet startLineNumber = op.range.startLineNumber;\n\t\t\t\tlet startColumn = op.range.startColumn;\n\t\t\t\tlet endLineNumber = op.range.endLineNumber;\n\t\t\t\tlet endColumn = op.range.endColumn;\n\n\t\t\t\tif (startLineNumber === endLineNumber && startColumn === endColumn && (!op.lines || op.lines.length === 0)) {\n\t\t\t\t\t// no-op\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet deletingLinesCnt = endLineNumber - startLineNumber;\n\t\t\t\tlet insertingLinesCnt = (op.lines ? op.lines.length - 1 : 0);\n\t\t\t\tlet editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n\n\t\t\t\ttotalLinesCountDelta += (insertingLinesCnt - deletingLinesCnt);\n\n\t\t\t\t// Iterating descending to overlap with previous op\n\t\t\t\t// in case there are common lines being edited in both\n\t\t\t\tfor (let j = editingLinesCnt; j >= 0; j--) {\n\t\t\t\t\tlet editLineNumber = startLineNumber + j;\n\n\t\t\t\t\tqueueLineEdit({\n\t\t\t\t\t\tlineNumber: editLineNumber,\n\t\t\t\t\t\tstartColumn: (editLineNumber === startLineNumber ? startColumn : 1),\n\t\t\t\t\t\tendColumn: (editLineNumber === endLineNumber ? endColumn : this.getLineMaxColumn(editLineNumber)),\n\t\t\t\t\t\ttext: (op.lines ? op.lines[j] : ''),\n\t\t\t\t\t\tforceMoveMarkers: op.forceMoveMarkers\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < deletingLinesCnt) {\n\t\t\t\t\t// Must delete some lines\n\n\t\t\t\t\t// Flush any pending line edits\n\t\t\t\t\tflushLineEdits();\n\n\t\t\t\t\tlet spliceStartLineNumber = startLineNumber + editingLinesCnt;\n\t\t\t\t\tlet spliceStartColumn = this.getLineMaxColumn(spliceStartLineNumber);\n\n\t\t\t\t\tlet endLineRemains = this._lines[endLineNumber - 1].split(deferredEventsBuilder.changedMarkers, endColumn, false);\n\t\t\t\t\tthis._invalidateLine(spliceStartLineNumber - 1);\n\n\t\t\t\t\tlet spliceCnt = endLineNumber - spliceStartLineNumber;\n\n\t\t\t\t\t// Collect all these markers\n\t\t\t\t\tlet markersOnDeletedLines: ILineMarker[] = [];\n\t\t\t\t\tfor (let j = 0; j < spliceCnt; j++) {\n\t\t\t\t\t\tlet deleteLineIndex = spliceStartLineNumber + j;\n\t\t\t\t\t\tmarkersOnDeletedLines = markersOnDeletedLines.concat(this._lines[deleteLineIndex].deleteLine(deferredEventsBuilder.changedMarkers, spliceStartColumn, deleteLineIndex + 1));\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._lines.splice(spliceStartLineNumber, spliceCnt);\n\t\t\t\t\tif (this._lineStarts) {\n\t\t\t\t\t\t// update prefix sum\n\t\t\t\t\t\tthis._lineStarts.removeValues(spliceStartLineNumber, spliceCnt);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reconstruct first line\n\t\t\t\t\tthis._lines[spliceStartLineNumber - 1].append(deferredEventsBuilder.changedMarkers, endLineRemains);\n\t\t\t\t\tif (this._lineStarts) {\n\t\t\t\t\t\t// update prefix sum\n\t\t\t\t\t\tthis._lineStarts.changeValue(spliceStartLineNumber - 1, this._lines[spliceStartLineNumber - 1].text.length + this._EOL.length);\n\t\t\t\t\t}\n\t\t\t\t\tthis._lines[spliceStartLineNumber - 1].addMarkers(markersOnDeletedLines);\n\t\t\t\t\tcontentChangedEvents.push(this._createLineChangedEvent(spliceStartLineNumber));\n\n\t\t\t\t\tcontentChangedEvents.push(this._createLinesDeletedEvent(spliceStartLineNumber + 1, spliceStartLineNumber + spliceCnt));\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < insertingLinesCnt) {\n\t\t\t\t\t// Must insert some lines\n\n\t\t\t\t\t// Flush any pending line edits\n\t\t\t\t\tflushLineEdits();\n\n\t\t\t\t\tlet spliceLineNumber = startLineNumber + editingLinesCnt;\n\t\t\t\t\tlet spliceColumn = (spliceLineNumber === startLineNumber ? startColumn : 1);\n\t\t\t\t\tif (op.lines) {\n\t\t\t\t\t\tspliceColumn += op.lines[editingLinesCnt].length;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Split last line\n\t\t\t\t\tlet leftoverLine = this._lines[spliceLineNumber - 1].split(deferredEventsBuilder.changedMarkers, spliceColumn, op.forceMoveMarkers);\n\t\t\t\t\tif (this._lineStarts) {\n\t\t\t\t\t\t// update prefix sum\n\t\t\t\t\t\tthis._lineStarts.changeValue(spliceLineNumber - 1, this._lines[spliceLineNumber - 1].text.length + this._EOL.length);\n\t\t\t\t\t}\n\t\t\t\t\tcontentChangedEvents.push(this._createLineChangedEvent(spliceLineNumber));\n\t\t\t\t\tthis._invalidateLine(spliceLineNumber - 1);\n\n\t\t\t\t\t// Lines in the middle\n\t\t\t\t\tlet newLinesContent:string[] = [];\n\t\t\t\t\tlet newLinesLengths:number[] = [];\n\t\t\t\t\tfor (let j = editingLinesCnt + 1; j <= insertingLinesCnt; j++) {\n\t\t\t\t\t\tlet newLineNumber = startLineNumber + j;\n\t\t\t\t\t\tthis._lines.splice(newLineNumber - 1, 0, new ModelLine(newLineNumber, op.lines[j]));\n\t\t\t\t\t\tnewLinesContent.push(op.lines[j]);\n\t\t\t\t\t\tnewLinesLengths.push(op.lines[j].length + this._EOL.length);\n\t\t\t\t\t}\n\t\t\t\t\tnewLinesContent[newLinesContent.length - 1] += leftoverLine.text;\n\t\t\t\t\tif (this._lineStarts) {\n\t\t\t\t\t\t// update prefix sum\n\t\t\t\t\t\tthis._lineStarts.insertValues(startLineNumber + editingLinesCnt, newLinesLengths);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Last line\n\t\t\t\t\tthis._lines[startLineNumber + insertingLinesCnt - 1].append(deferredEventsBuilder.changedMarkers, leftoverLine);\n\t\t\t\t\tif (this._lineStarts) {\n\t\t\t\t\t\t// update prefix sum\n\t\t\t\t\t\tthis._lineStarts.changeValue(startLineNumber + insertingLinesCnt - 1, this._lines[startLineNumber + insertingLinesCnt - 1].text.length + this._EOL.length);\n\t\t\t\t\t}\n\t\t\t\t\tcontentChangedEvents.push(this._createLinesInsertedEvent(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLinesContent.join('\\n')));\n\t\t\t\t}\n\n\t\t\t\tcontentChanged2Events.push({\n\t\t\t\t\trange: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n\t\t\t\t\trangeLength: op.rangeLength,\n\t\t\t\t\ttext: op.lines ? op.lines.join(this.getEOL()) : '',\n\t\t\t\t\teol: this._EOL,\n\t\t\t\t\tversionId: -1,\n\t\t\t\t\tisUndoing: this._isUndoing,\n\t\t\t\t\tisRedoing: this._isRedoing\n\t\t\t\t});\n\n\t\t\t\t// console.log('AFTER:');\n\t\t\t\t// console.log('<<<\\n' + this._lines.map(l => l.text).join('\\n') + '\\n>>>');\n\t\t\t}\n\n\t\t\tflushLineEdits();\n\n\t\t\tmaxTouchedLineNumber = Math.max(1, Math.min(this.getLineCount(), maxTouchedLineNumber + totalLinesCountDelta));\n\t\t\tif (totalLinesCountDelta !== 0) {\n\t\t\t\t// must update line numbers all the way to the bottom\n\t\t\t\tmaxTouchedLineNumber = this.getLineCount();\n\t\t\t}\n\n\t\t\tfor (let lineNumber = minTouchedLineNumber; lineNumber <= maxTouchedLineNumber; lineNumber++) {\n\t\t\t\tthis._lines[lineNumber - 1].updateLineNumber(deferredEventsBuilder.changedMarkers, lineNumber);\n\t\t\t}\n\n\t\t\tif (contentChangedEvents.length !== 0 || contentChanged2Events.length !== 0) {\n\t\t\t\tif (contentChangedEvents.length === 0) {\n\t\t\t\t\t// Fabricate a fake line changed event to get an event out\n\t\t\t\t\t// This most likely occurs when there edit operations are no-ops\n\t\t\t\t\tcontentChangedEvents.push(this._createLineChangedEvent(minTouchedLineNumber));\n\t\t\t\t}\n\n\t\t\t\tlet versionBumps = Math.max(contentChangedEvents.length, contentChanged2Events.length);\n\t\t\t\tlet finalVersionId = this.getVersionId() + versionBumps;\n\t\t\t\tthis._setVersionId(finalVersionId);\n\n\t\t\t\tfor (let i = contentChangedEvents.length - 1, versionId = finalVersionId; i >= 0; i--, versionId--) {\n\t\t\t\t\tcontentChangedEvents[i].versionId = versionId;\n\t\t\t\t}\n\t\t\t\tfor (let i = contentChanged2Events.length - 1, versionId = finalVersionId; i >= 0; i--, versionId--) {\n\t\t\t\t\tcontentChanged2Events[i].versionId = versionId;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, len = contentChangedEvents.length; i < len; i++) {\n\t\t\t\t\tthis.emit(editorCommon.EventType.ModelRawContentChanged, contentChangedEvents[i]);\n\t\t\t\t}\n\t\t\t\tfor (let i = 0, len = contentChanged2Events.length; i < len; i++) {\n\t\t\t\t\tthis.emit(editorCommon.EventType.ModelContentChanged2, contentChanged2Events[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// this._assertLineNumbersOK();\n\t\t});\n\t}\n\n\tpublic _assertLineNumbersOK(): void {\n\t\tlet foundMarkersCnt = 0;\n\t\tfor (let i = 0, len = this._lines.length; i < len; i++) {\n\t\t\tlet line = this._lines[i];\n\t\t\tlet lineNumber = i + 1;\n\n\t\t\tif (line.lineNumber !== lineNumber) {\n\t\t\t\tthrow new Error('Invalid lineNumber at line: ' + lineNumber + '; text is: ' + this.getValue());\n\t\t\t}\n\n\t\t\tlet markers = line.getMarkers();\n\t\t\tfor (let j = 0, lenJ = markers.length; j < lenJ; j++) {\n\t\t\t\tfoundMarkersCnt++;\n\t\t\t\tlet markerId = markers[j].id;\n\t\t\t\tlet marker = this._markerIdToMarker[markerId];\n\t\t\t\tif (marker.line !== line) {\n\t\t\t\t\tthrow new Error('Misplaced marker with id ' + markerId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet totalMarkersCnt = Object.keys(this._markerIdToMarker).length;\n\t\tif (totalMarkersCnt !== foundMarkersCnt) {\n\t\t\tthrow new Error('There are misplaced markers!');\n\t\t}\n\t}\n\n\tpublic undo(): Selection[] {\n\t\treturn this._withDeferredEvents(() => {\n\t\t\tthis._isUndoing = true;\n\t\t\tlet r = this._commandManager.undo();\n\t\t\tthis._isUndoing = false;\n\n\t\t\tif (!r) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tthis._overwriteAlternativeVersionId(r.recordedVersionId);\n\n\t\t\treturn r.selections;\n\t\t});\n\t}\n\n\tpublic redo(): Selection[] {\n\t\treturn this._withDeferredEvents(() => {\n\t\t\tthis._isRedoing = true;\n\t\t\tlet r = this._commandManager.redo();\n\t\t\tthis._isRedoing = false;\n\n\t\t\tif (!r) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tthis._overwriteAlternativeVersionId(r.recordedVersionId);\n\n\t\t\treturn r.selections;\n\t\t});\n\t}\n\n\tpublic setEditableRange(range:editorCommon.IRange): void {\n\t\tthis._commandManager.clear();\n\t\tif (this._hasEditableRange) {\n\t\t\tthis.removeTrackedRange(this._editableRangeId);\n\t\t\tthis._editableRangeId = null;\n\t\t\tthis._hasEditableRange = false;\n\t\t}\n\n\t\tif (range) {\n\t\t\tthis._hasEditableRange = true;\n\t\t\tthis._editableRangeId = this.addTrackedRange(range, editorCommon.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n\t\t}\n\t}\n\n\tpublic hasEditableRange(): boolean {\n\t\treturn this._hasEditableRange;\n\t}\n\n\tpublic getEditableRange(): Range {\n\t\tif (this._hasEditableRange) {\n\t\t\treturn this.getTrackedRange(this._editableRangeId);\n\t\t} else {\n\t\t\treturn this.getFullModelRange();\n\t\t}\n\t}\n\n\tprivate _createLineChangedEvent(lineNumber: number): editorCommon.IModelContentChangedLineChangedEvent {\n\t\treturn {\n\t\t\tchangeType: editorCommon.EventType.ModelRawContentChangedLineChanged,\n\t\t\tlineNumber: lineNumber,\n\t\t\tdetail: this._lines[lineNumber - 1].text,\n\t\t\tversionId: -1,\n\t\t\tisUndoing: this._isUndoing,\n\t\t\tisRedoing: this._isRedoing\n\t\t};\n\t}\n\n\tprivate _createLinesDeletedEvent(fromLineNumber: number, toLineNumber: number): editorCommon.IModelContentChangedLinesDeletedEvent {\n\t\treturn {\n\t\t\tchangeType: editorCommon.EventType.ModelRawContentChangedLinesDeleted,\n\t\t\tfromLineNumber: fromLineNumber,\n\t\t\ttoLineNumber: toLineNumber,\n\t\t\tversionId: -1,\n\t\t\tisUndoing: this._isUndoing,\n\t\t\tisRedoing: this._isRedoing\n\t\t};\n\t}\n\n\tprivate _createLinesInsertedEvent(fromLineNumber: number, toLineNumber: number, newLinesContent: string): editorCommon.IModelContentChangedLinesInsertedEvent {\n\t\treturn {\n\t\t\tchangeType: editorCommon.EventType.ModelRawContentChangedLinesInserted,\n\t\t\tfromLineNumber: fromLineNumber,\n\t\t\ttoLineNumber: toLineNumber,\n\t\t\tdetail: newLinesContent,\n\t\t\tversionId: -1,\n\t\t\tisUndoing: this._isUndoing,\n\t\t\tisRedoing: this._isRedoing\n\t\t};\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {\n\tEventType, IModel, ITextModelCreationOptions, IModeSupportChangedEvent, IModelDecorationsChangedEvent,\n\tIModelOptionsChangedEvent, IModelModeChangedEvent\n} from 'vs/editor/common/editorCommon';\nimport {EditableTextModel} from 'vs/editor/common/model/editableTextModel';\nimport {TextModel} from 'vs/editor/common/model/textModel';\nimport {IMode} from 'vs/editor/common/modes';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {BulkListenerCallback} from 'vs/base/common/eventEmitter';\n\n// The hierarchy is:\n// Model -> EditableTextModel -> TextModelWithDecorations -> TextModelWithTrackedRanges -> TextModelWithMarkers -> TextModelWithTokens -> TextModel\n\nvar MODEL_ID = 0;\n\nvar aliveModels:{[modelId:string]:boolean;} = {};\n\n// var LAST_CNT = 0;\n// setInterval(() => {\n// \tvar cnt = Object.keys(aliveModels).length;\n// \tif (cnt === LAST_CNT) {\n// \t\treturn;\n// \t}\n// \tconsole.warn('ALIVE MODELS:');\n// \tconsole.log(Object.keys(aliveModels).join('\\n'));\n// \tLAST_CNT = cnt;\n// }, 100);\n\nexport class Model extends EditableTextModel implements IModel {\n\n\tpublic onDidChangeModeSupport(listener: (e:IModeSupportChangedEvent)=>void): IDisposable {\n\t\treturn this.addListener2(EventType.ModelModeSupportChanged, listener);\n\t}\n\tpublic onDidChangeDecorations(listener: (e:IModelDecorationsChangedEvent)=>void): IDisposable {\n\t\treturn this.addListener2(EventType.ModelDecorationsChanged, listener);\n\t}\n\tpublic onDidChangeOptions(listener: (e:IModelOptionsChangedEvent)=>void): IDisposable {\n\t\treturn this.addListener2(EventType.ModelOptionsChanged, listener);\n\t}\n\tpublic onWillDispose(listener: ()=>void): IDisposable {\n\t\treturn this.addListener2(EventType.ModelDispose, listener);\n\t}\n\tpublic onDidChangeMode(listener: (e:IModelModeChangedEvent)=>void): IDisposable {\n\t\treturn this.addListener2(EventType.ModelModeChanged, listener);\n\t}\n\n\tpublic addBulkListener(listener:BulkListenerCallback):IDisposable {\n\t\treturn super.addBulkListener(listener);\n\t}\n\n\tpublic static DEFAULT_CREATION_OPTIONS: ITextModelCreationOptions = TextModel.DEFAULT_CREATION_OPTIONS;\n\n\tpublic id:string;\n\n\tprivate _associatedResource:URI;\n\tprivate _attachedEditorCount:number;\n\n\t/**\n\t * Instantiates a new model\n\t * @param rawText\n\t *   The raw text buffer. It may start with a UTF-16 BOM, which can be\n\t *   optionally preserved when doing a getValue call. The lines may be\n\t *   separated by different EOL combinations, such as \\n or \\r\\n. These\n\t *   can also be preserved when doing a getValue call.\n\t * @param mode\n\t *   The language service name this model is bound to.\n\t * @param associatedResource\n\t *   The resource associated with this model. If the value is not provided an\n\t *   unique in memory URL is constructed as the associated resource.\n\t */\n\tconstructor(rawText:string, options:ITextModelCreationOptions, modeOrPromise:IMode|TPromise<IMode>, associatedResource:URI=null) {\n\t\tsuper([\n\t\t\tEventType.ModelDispose\n\t\t], TextModel.toRawText(rawText, options), modeOrPromise);\n\n\t\t// Generate a new unique model id\n\t\tMODEL_ID++;\n\t\tthis.id = '$model' + MODEL_ID;\n\n\t\tif (typeof associatedResource === 'undefined' || associatedResource === null) {\n\t\t\tthis._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n\t\t} else {\n\t\t\tthis._associatedResource = associatedResource;\n\t\t}\n\n\n\t\tif (aliveModels[String(this._associatedResource)]) {\n\t\t\tthrow new Error('Cannot instantiate a second Model with the same URI!');\n\t\t}\n\n\t\tthis._attachedEditorCount = 0;\n\n\t\taliveModels[String(this._associatedResource)] = true;\n\t\t// console.log('ALIVE MODELS: ' + Object.keys(aliveModels).join('\\n'));\n\t}\n\n\tpublic getModeId(): string {\n\t\treturn this.getMode().getId();\n\t}\n\n\tpublic destroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposing = true;\n\t\tdelete aliveModels[String(this._associatedResource)];\n\t\tthis.emit(EventType.ModelDispose);\n\t\tsuper.dispose();\n\t\tthis._isDisposing = false;\n\t\t// console.log('ALIVE MODELS: ' + Object.keys(aliveModels).join('\\n'));\n\t}\n\n\tpublic onBeforeAttached(): void {\n\t\tthis._attachedEditorCount++;\n\n\t\t// Warm up tokens for the editor\n\t\tthis._warmUpTokens();\n\t}\n\n\tpublic onBeforeDetached(): void {\n\t\tthis._attachedEditorCount--;\n\n\t\t// Intentional empty (for now)\n\t}\n\n\tpublic isAttachedToEditor(): boolean {\n\t\treturn this._attachedEditorCount > 0;\n\t}\n\n\tpublic get uri(): URI {\n\t\treturn this._associatedResource;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {illegalArgument} from 'vs/base/common/errors';\nimport * as instantiation from './instantiation';\n\nexport class AbstractDescriptor<T> {\n\n\tconstructor(private _staticArguments: any[]) {\n\t\t// empty\n\t}\n\n\tpublic appendStaticArguments(more: any[]): void {\n\t\tthis._staticArguments.push.apply(this._staticArguments, more);\n\t}\n\n\tpublic staticArguments(): any[];\n\tpublic staticArguments(nth: number): any;\n\tpublic staticArguments(nth?: number): any[] {\n\t\tif (isNaN(nth)) {\n\t\t\treturn this._staticArguments.slice(0);\n\t\t} else {\n\t\t\treturn this._staticArguments[nth];\n\t\t}\n\t}\n\n\t_validate(type: T): void {\n\t\tif (!type) {\n\t\t\tthrow illegalArgument('can not be falsy');\n\t\t}\n\t}\n}\n\nexport class SyncDescriptor<T> extends AbstractDescriptor<T> {\n\n\tconstructor(private _ctor: any, ...staticArguments: any[]) {\n\t\tsuper(staticArguments);\n\t}\n\n\tpublic get ctor(): any {\n\t\treturn this._ctor;\n\t}\n\n\tprotected bind(...moreStaticArguments): SyncDescriptor<T> {\n\t\tlet allArgs = [];\n\t\tallArgs = allArgs.concat(this.staticArguments());\n\t\tallArgs = allArgs.concat(moreStaticArguments);\n\t\treturn new SyncDescriptor<T>(this._ctor, ...allArgs);\n\t}\n}\n\nexport interface CreateSyncFunc {\n\n\t<T>(ctor: instantiation.IConstructorSignature0<T>): SyncDescriptor0<T>;\n\n\t<A1, T>(ctor: instantiation.IConstructorSignature1<A1, T>): SyncDescriptor1<A1, T>;\n\t<A1, T>(ctor: instantiation.IConstructorSignature1<A1, T>, a1: A1): SyncDescriptor0<T>;\n\n\t<A1, A2, T>(ctor: instantiation.IConstructorSignature2<A1, A2, T>): SyncDescriptor2<A1, A2, T>;\n\t<A1, A2, T>(ctor: instantiation.IConstructorSignature2<A1, A2, T>, a1: A1): SyncDescriptor1<A2, T>;\n\t<A1, A2, T>(ctor: instantiation.IConstructorSignature2<A1, A2, T>, a1: A1, a2: A2): SyncDescriptor0<T>;\n\n\t<A1, A2, A3, T>(ctor: instantiation.IConstructorSignature3<A1, A2, A3, T>): SyncDescriptor3<A1, A2, A3, T>;\n\t<A1, A2, A3, T>(ctor: instantiation.IConstructorSignature3<A1, A2, A3, T>, a1: A1): SyncDescriptor2<A2, A3, T>;\n\t<A1, A2, A3, T>(ctor: instantiation.IConstructorSignature3<A1, A2, A3, T>, a1: A1, a2: A2): SyncDescriptor1<A3, T>;\n\t<A1, A2, A3, T>(ctor: instantiation.IConstructorSignature3<A1, A2, A3, T>, a1: A1, a2: A2, a3: A3): SyncDescriptor0<T>;\n\n\t<A1, A2, A3, A4, T>(ctor: instantiation.IConstructorSignature4<A1, A2, A3, A4, T>): SyncDescriptor4<A1, A2, A3, A4, T>;\n\t<A1, A2, A3, A4, T>(ctor: instantiation.IConstructorSignature4<A1, A2, A3, A4, T>, a1: A1): SyncDescriptor3<A2, A3, A4, T>;\n\t<A1, A2, A3, A4, T>(ctor: instantiation.IConstructorSignature4<A1, A2, A3, A4, T>, a1: A1, a2: A2): SyncDescriptor2<A3, A4, T>;\n\t<A1, A2, A3, A4, T>(ctor: instantiation.IConstructorSignature4<A1, A2, A3, A4, T>, a1: A1, a2: A2, a3: A3): SyncDescriptor1<A4, T>;\n\t<A1, A2, A3, A4, T>(ctor: instantiation.IConstructorSignature4<A1, A2, A3, A4, T>, a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor0<T>;\n\n\t<A1, A2, A3, A4, A5, T>(ctor: instantiation.IConstructorSignature5<A1, A2, A3, A4, A5, T>): SyncDescriptor5<A1, A2, A3, A4, A5, T>;\n\t<A1, A2, A3, A4, A5, T>(ctor: instantiation.IConstructorSignature5<A1, A2, A3, A4, A5, T>, a1: A1): SyncDescriptor4<A2, A3, A4, A5, T>;\n\t<A1, A2, A3, A4, A5, T>(ctor: instantiation.IConstructorSignature5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2): SyncDescriptor3<A3, A4, A5, T>;\n\t<A1, A2, A3, A4, A5, T>(ctor: instantiation.IConstructorSignature5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3): SyncDescriptor2<A4, A5, T>;\n\t<A1, A2, A3, A4, A5, T>(ctor: instantiation.IConstructorSignature5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor1<A5, T>;\n\t<A1, A2, A3, A4, A5, T>(ctor: instantiation.IConstructorSignature5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor0<T>;\n\n\t<A1, A2, A3, A4, A5, A6, T>(ctor: instantiation.IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>): SyncDescriptor6<A1, A2, A3, A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(ctor: instantiation.IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, a1: A1): SyncDescriptor5<A2, A3, A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(ctor: instantiation.IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2): SyncDescriptor4<A3, A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(ctor: instantiation.IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3): SyncDescriptor3<A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(ctor: instantiation.IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor2<A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(ctor: instantiation.IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor1<A6, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(ctor: instantiation.IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): SyncDescriptor0<T>;\n\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>): SyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1): SyncDescriptor6<A2, A3, A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2): SyncDescriptor5<A3, A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3): SyncDescriptor4<A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor3<A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor2<A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): SyncDescriptor1<A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(ctor: instantiation.IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): SyncDescriptor0<T>;\n\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>): SyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1): SyncDescriptor7<A2, A3, A4, A5, A6, A7, A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2): SyncDescriptor6<A3, A4, A5, A6, A7, A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3): SyncDescriptor5<A4, A5, A6, A7, A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor4<A5, A6, A7, A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor3<A6, A7, A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): SyncDescriptor2<A7, A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): SyncDescriptor1<A8, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: instantiation.IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): SyncDescriptor0<T>;\n}\nexport const createSyncDescriptor: CreateSyncFunc = <T>(ctor: any, ...staticArguments: any[]): any => {\n\treturn new SyncDescriptor<T>(ctor, ...staticArguments);\n};\n\nexport interface SyncDescriptor0<T> {\n\tctor: any;\n\tbind(): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor1<A1, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor2<A1, A2, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor1<A2, T>;\n\tbind(a1: A1, a2: A2): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor3<A1, A2, A3, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor2<A2, A3, T>;\n\tbind(a1: A1, a2: A2): SyncDescriptor1<A3, T>;\n\tbind(a1: A1, a2: A2, a3: A3): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor4<A1, A2, A3, A4, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor3<A2, A3, A4, T>;\n\tbind(a1: A1, a2: A2): SyncDescriptor2<A3, A4, T>;\n\tbind(a1: A1, a2: A2, a3: A3): SyncDescriptor1<A4, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor5<A1, A2, A3, A4, A5, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor4<A2, A3, A4, A5, T>;\n\tbind(a1: A1, a2: A2): SyncDescriptor3<A3, A4, A5, T>;\n\tbind(a1: A1, a2: A2, a3: A3): SyncDescriptor2<A4, A5, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor1<A5, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor6<A1, A2, A3, A4, A5, A6, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor5<A2, A3, A4, A5, A6, T>;\n\tbind(a1: A1, a2: A2): SyncDescriptor4<A3, A4, A5, A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3): SyncDescriptor3<A4, A5, A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor2<A5, A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor1<A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor6<A2, A3, A4, A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2): SyncDescriptor5<A3, A4, A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3): SyncDescriptor4<A4, A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor3<A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor2<A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): SyncDescriptor1<A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): SyncDescriptor0<T>;\n}\nexport interface SyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T> {\n\tctor: any;\n\tbind(a1: A1): SyncDescriptor7<A2, A3, A4, A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2): SyncDescriptor6<A3, A4, A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3): SyncDescriptor5<A4, A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): SyncDescriptor4<A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): SyncDescriptor3<A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): SyncDescriptor2<A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): SyncDescriptor1<A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): SyncDescriptor0<T>;\n}\n\nexport class AsyncDescriptor<T> extends AbstractDescriptor<T> implements AsyncDescriptor0<T> {\n\n\tpublic static create<T>(moduleName: string, ctorName: string): AsyncDescriptor<T> {\n\t\treturn new AsyncDescriptor<T>(moduleName, ctorName);\n\t}\n\n\tconstructor(private _moduleName: string, private _ctorName?: string, ...staticArguments: any[]) {\n\t\tsuper(staticArguments);\n\t\tif (typeof _moduleName !== 'string') {\n\t\t\tthrow new Error('Invalid AsyncDescriptor arguments, expected `moduleName` to be a string!');\n\t\t}\n\t}\n\n\tpublic get moduleName(): string {\n\t\treturn this._moduleName;\n\t}\n\n\tpublic get ctorName(): string {\n\t\treturn this._ctorName;\n\t}\n\n\tbind(...moreStaticArguments): AsyncDescriptor<T> {\n\t\tlet allArgs = [];\n\t\tallArgs = allArgs.concat(this.staticArguments());\n\t\tallArgs = allArgs.concat(moreStaticArguments);\n\t\treturn new AsyncDescriptor<T>(this.moduleName, this.ctorName, ...allArgs);\n\t}\n}\n\nexport interface CreateAsyncFunc0 {\n\t<T>(moduleName: string, ctorName: string): AsyncDescriptor0<T>;\n\t<A1, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor0<T>;\n\t<A1, A2, T>(moduleName: string, ctorName: string, a1: A1, a2: A2): AsyncDescriptor0<T>;\n\t<A1, A2, A3, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3): AsyncDescriptor0<T>;\n\t<A1, A2, A3, A4, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor0<T>;\n\t<A1, A2, A3, A4, A5, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor0<T>;\n\t<A1, A2, A3, A4, A5, A6, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): AsyncDescriptor0<T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): AsyncDescriptor0<T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): AsyncDescriptor0<T>;\n}\n\nexport interface CreateAsyncFunc1 {\n\t<A1, T>(moduleName: string, ctorName: string): AsyncDescriptor1<A1, T>;\n\t<A1, A2, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor1<A2, T>;\n\t<A1, A2, A3, T>(moduleName: string, ctorName: string, a1: A1, a2: A2): AsyncDescriptor1<A3, T>;\n\t<A1, A2, A3, A4, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3): AsyncDescriptor1<A4, T>;\n\t<A1, A2, A3, A4, A5, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor1<A5, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor1<A6, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): AsyncDescriptor1<A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): AsyncDescriptor1<A8, T>;\n}\n\nexport interface CreateAsyncFunc2 {\n\t<A1, A2, T>(moduleName: string, ctorName: string): AsyncDescriptor2<A1, A2, T>;\n\t<A1, A2, A3, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor2<A2, A3, T>;\n\t<A1, A2, A3, A4, T>(moduleName: string, ctorName: string, a1: A1, a2: A2): AsyncDescriptor2<A3, A4, T>;\n\t<A1, A2, A3, A4, A5, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3): AsyncDescriptor2<A4, A5, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor2<A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor2<A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): AsyncDescriptor2<A7, A8, T>;\n}\n\nexport interface CreateAsyncFunc3 {\n\t<A1, A2, A3, T>(moduleName: string, ctorName: string): AsyncDescriptor3<A1, A2, A3, T>;\n\t<A1, A2, A3, A4, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor3<A2, A3, A4, T>;\n\t<A1, A2, A3, A4, A5, T>(moduleName: string, ctorName: string, a1: A1, a2: A2): AsyncDescriptor3<A3, A4, A5, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3): AsyncDescriptor3<A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor3<A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor3<A6, A7, A8, T>;\n}\n\nexport interface CreateAsyncFunc4 {\n\t<A1, A2, A3, A4, T>(moduleName: string, ctorName: string): AsyncDescriptor4<A1, A2, A3, A4, T>;\n\t<A1, A2, A3, A4, A5, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor4<A2, A3, A4, A5, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(moduleName: string, ctorName: string, a1: A1, a2: A2): AsyncDescriptor4<A3, A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3): AsyncDescriptor4<A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor4<A5, A6, A7, A8, T>;\n}\n\nexport interface CreateAsyncFunc5 {\n\t<A1, A2, A3, A4, A5, T>(moduleName: string, ctorName: string): AsyncDescriptor5<A1, A2, A3, A4, A5, T>;\n\t<A1, A2, A3, A4, A5, A6, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor5<A2, A3, A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string, a1: A1, a2: A2): AsyncDescriptor5<A3, A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1, a2: A2, a3: A3): AsyncDescriptor5<A4, A5, A6, A7, A8, T>;\n}\n\nexport interface CreateAsyncFunc6 {\n\t<A1, A2, A3, A4, A5, A6, T>(moduleName: string, ctorName: string): AsyncDescriptor6<A1, A2, A3, A4, A5, A6, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor6<A2, A3, A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1, a2: A2): AsyncDescriptor6<A3, A4, A5, A6, A7, A8, T>;\n}\n\nexport interface CreateAsyncFunc7 {\n\t<A1, A2, A3, A4, A5, A6, A7, T>(moduleName: string, ctorName: string): AsyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>;\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string, a1: A1): AsyncDescriptor7<A2, A3, A4, A5, A6, A7, A8, T>;\n}\n\nexport interface CreateAsyncFunc8 {\n\t<A1, A2, A3, A4, A5, A6, A7, A8, T>(moduleName: string, ctorName: string): AsyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>;\n}\n\nlet _createAsyncDescriptor = <T>(moduleName: string, ctorName: string, ...staticArguments: any[]): any => {\n\treturn new AsyncDescriptor<T>(moduleName, ctorName, ...staticArguments);\n};\nexport const createAsyncDescriptor0: CreateAsyncFunc0 = _createAsyncDescriptor;\nexport const createAsyncDescriptor1: CreateAsyncFunc1 = _createAsyncDescriptor;\nexport const createAsyncDescriptor2: CreateAsyncFunc2 = _createAsyncDescriptor;\nexport const createAsyncDescriptor3: CreateAsyncFunc3 = _createAsyncDescriptor;\nexport const createAsyncDescriptor4: CreateAsyncFunc4 = _createAsyncDescriptor;\nexport const createAsyncDescriptor5: CreateAsyncFunc5 = _createAsyncDescriptor;\nexport const createAsyncDescriptor6: CreateAsyncFunc6 = _createAsyncDescriptor;\nexport const createAsyncDescriptor7: CreateAsyncFunc7 = _createAsyncDescriptor;\n\nexport interface AsyncDescriptor0<T> {\n\tmoduleName: string;\n\tbind(): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor1<A1, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor2<A1, A2, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor1<A2, T>;\n\tbind(a1: A1, a2: A2): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor3<A1, A2, A3, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor2<A2, A3, T>;\n\tbind(a1: A1, a2: A2): AsyncDescriptor1<A3, T>;\n\tbind(a1: A1, a2: A2, a3: A3): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor4<A1, A2, A3, A4, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor3<A2, A3, A4, T>;\n\tbind(a1: A1, a2: A2): AsyncDescriptor2<A3, A4, T>;\n\tbind(a1: A1, a2: A2, a3: A3): AsyncDescriptor1<A4, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor5<A1, A2, A3, A4, A5, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor4<A2, A3, A4, A5, T>;\n\tbind(a1: A1, a2: A2): AsyncDescriptor3<A3, A4, A5, T>;\n\tbind(a1: A1, a2: A2, a3: A3): AsyncDescriptor2<A4, A5, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor1<A5, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor6<A1, A2, A3, A4, A5, A6, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor5<A2, A3, A4, A5, A6, T>;\n\tbind(a1: A1, a2: A2): AsyncDescriptor4<A3, A4, A5, A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3): AsyncDescriptor3<A4, A5, A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor2<A5, A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor1<A6, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor6<A2, A3, A4, A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2): AsyncDescriptor5<A3, A4, A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3): AsyncDescriptor4<A4, A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor3<A5, A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor2<A6, A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): AsyncDescriptor1<A7, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): AsyncDescriptor0<T>;\n}\nexport interface AsyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T> {\n\tmoduleName: string;\n\tbind(a1: A1): AsyncDescriptor7<A2, A3, A4, A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2): AsyncDescriptor6<A3, A4, A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3): AsyncDescriptor5<A4, A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4): AsyncDescriptor4<A5, A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): AsyncDescriptor3<A6, A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): AsyncDescriptor2<A7, A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): AsyncDescriptor1<A8, T>;\n\tbind(a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): AsyncDescriptor0<T>;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ServiceCollection} from './serviceCollection';\nimport * as descriptors from './descriptors';\n\n// ------ internal util\n\nexport namespace _util {\n\n\texport const DI_TARGET = '$di$target';\n\texport const DI_DEPENDENCIES = '$di$dependencies';\n\n\texport function getServiceDependencies(ctor: any): { id: ServiceIdentifier<any>, index: number, optional: boolean }[] {\n\t\treturn ctor[DI_DEPENDENCIES] || [];\n\t}\n}\n\n// --- interfaces ------\n\nexport interface IConstructorSignature0<T> {\n\tnew (...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature1<A1, T> {\n\tnew (first: A1, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature2<A1, A2, T> {\n\tnew (first: A1, second: A2, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature3<A1, A2, A3, T> {\n\tnew (first: A1, second: A2, third: A3, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature4<A1, A2, A3, A4, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature5<A1, A2, A3, A4, A5, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature6<A1, A2, A3, A4, A5, A6, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T> {\n\tnew (first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8, ...services: { serviceId: ServiceIdentifier<any>; }[]): T;\n}\n\nexport interface ServicesAccessor {\n\tget<T>(id: ServiceIdentifier<T>, isOptional?: typeof optional): T;\n}\n\nexport interface IFunctionSignature0<R> {\n\t(accessor: ServicesAccessor): R;\n}\n\nexport interface IFunctionSignature1<A1, R> {\n\t(accessor: ServicesAccessor, first: A1): R;\n}\n\nexport interface IFunctionSignature2<A1, A2, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2): R;\n}\n\nexport interface IFunctionSignature3<A1, A2, A3, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3): R;\n}\n\nexport interface IFunctionSignature4<A1, A2, A3, A4, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4): R;\n}\n\nexport interface IFunctionSignature5<A1, A2, A3, A4, A5, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5): R;\n}\n\nexport interface IFunctionSignature6<A1, A2, A3, A4, A5, A6, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6): R;\n}\n\nexport interface IFunctionSignature7<A1, A2, A3, A4, A5, A6, A7, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7): R;\n}\n\nexport interface IFunctionSignature8<A1, A2, A3, A4, A5, A6, A7, A8, R> {\n\t(accessor: ServicesAccessor, first: A1, second: A2, third: A3, forth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8): R;\n}\n\nexport var IInstantiationService = createDecorator<IInstantiationService>('instantiationService');\n\nexport interface IInstantiationService {\n\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Synchronously creates an instance that is denoted by\n\t * the descriptor\n\t */\n\tcreateInstance<T>(descriptor: descriptors.SyncDescriptor0<T>): T;\n\tcreateInstance<A1, T>(descriptor: descriptors.SyncDescriptor1<A1, T>, a1: A1): T;\n\tcreateInstance<A1, A2, T>(descriptor: descriptors.SyncDescriptor2<A1, A2, T>, a1: A1, a2: A2): T;\n\tcreateInstance<A1, A2, A3, T>(descriptor: descriptors.SyncDescriptor3<A1, A2, A3, T>, a1: A1, a2: A2, a3: A3): T;\n\tcreateInstance<A1, A2, A3, A4, T>(descriptor: descriptors.SyncDescriptor4<A1, A2, A3, A4, T>, a1: A1, a2: A2, a3: A3, a4: A4): T;\n\tcreateInstance<A1, A2, A3, A4, A5, T>(descriptor: descriptors.SyncDescriptor5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, T>(descriptor: descriptors.SyncDescriptor6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, T>(descriptor: descriptors.SyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(descriptor: descriptors.SyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): T;\n\n\tcreateInstance<T>(ctor: IConstructorSignature0<T>): T;\n\tcreateInstance<A1, T>(ctor: IConstructorSignature1<A1, T>, first: A1): T;\n\tcreateInstance<A1, A2, T>(ctor: IConstructorSignature2<A1, A2, T>, first: A1, second: A2): T;\n\tcreateInstance<A1, A2, A3, T>(ctor: IConstructorSignature3<A1, A2, A3, T>, first: A1, second: A2, third: A3): T;\n\tcreateInstance<A1, A2, A3, A4, T>(ctor: IConstructorSignature4<A1, A2, A3, A4, T>, first: A1, second: A2, third: A3, fourth: A4): T;\n\tcreateInstance<A1, A2, A3, A4, A5, T>(ctor: IConstructorSignature5<A1, A2, A3, A4, A5, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, T>(ctor: IConstructorSignature6<A1, A2, A3, A4, A5, A6, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, T>(ctor: IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(ctor: IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8): T;\n\n\t/**\n\t * Asynchronously creates an instance that is denoted by\n\t * the descriptor\n\t */\n\tcreateInstance<T>(descriptor: descriptors.AsyncDescriptor0<T>): TPromise<T>;\n\tcreateInstance<A1, T>(descriptor: descriptors.AsyncDescriptor1<A1, T>, a1: A1): TPromise<T>;\n\tcreateInstance<A1, A2, T>(descriptor: descriptors.AsyncDescriptor2<A1, A2, T>, a1: A1, a2: A2): TPromise<T>;\n\tcreateInstance<A1, A2, A3, T>(descriptor: descriptors.AsyncDescriptor3<A1, A2, A3, T>, a1: A1, a2: A2, a3: A3): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, T>(descriptor: descriptors.AsyncDescriptor4<A1, A2, A3, A4, T>, a1: A1, a2: A2, a3: A3, a4: A4): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, T>(descriptor: descriptors.AsyncDescriptor5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, T>(descriptor: descriptors.AsyncDescriptor6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, T>(descriptor: descriptors.AsyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): TPromise<T>;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(descriptor: descriptors.AsyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): TPromise<T>;\n\n\t/**\n\t *\n\t */\n\tinvokeFunction<R>(ctor: IFunctionSignature0<R>): R;\n\tinvokeFunction<A1, R>(ctor: IFunctionSignature1<A1, R>, first: A1): R;\n\tinvokeFunction<A1, A2, R>(ctor: IFunctionSignature2<A1, A2, R>, first: A1, second: A2): R;\n\tinvokeFunction<A1, A2, A3, R>(ctor: IFunctionSignature3<A1, A2, A3, R>, first: A1, second: A2, third: A3): R;\n\tinvokeFunction<A1, A2, A3, A4, R>(ctor: IFunctionSignature4<A1, A2, A3, A4, R>, first: A1, second: A2, third: A3, fourth: A4): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, R>(ctor: IFunctionSignature5<A1, A2, A3, A4, A5, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, A6, R>(ctor: IFunctionSignature6<A1, A2, A3, A4, A5, A6, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, A6, A7, R>(ctor: IFunctionSignature7<A1, A2, A3, A4, A5, A6, A7, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7): R;\n\tinvokeFunction<A1, A2, A3, A4, A5, A6, A7, A8, R>(ctor: IFunctionSignature8<A1, A2, A3, A4, A5, A6, A7, A8, R>, first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8): R;\n\n\t/**\n\t * Creates a child of this service which inherts all current services\n\t * and adds/overwrites the given services\n\t */\n\tcreateChild(services: ServiceCollection): IInstantiationService;\n}\n\n\n/**\n * Identifies a service of type T\n */\nexport interface ServiceIdentifier<T> {\n\t(...args: any[]): void;\n\ttype: T;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number, optional: boolean): void {\n\tif (target[_util.DI_TARGET] === target) {\n\t\ttarget[_util.DI_DEPENDENCIES].push({ id, index, optional });\n\t} else {\n\t\ttarget[_util.DI_DEPENDENCIES] = [{ id, index, optional }];\n\t\ttarget[_util.DI_TARGET] = target;\n\t}\n}\n\n/**\n * A *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator<T>(serviceId: string): { (...args: any[]): void; type: T; } {\n\n\tlet id = function(target: Function, key: string, index: number): any {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@IServiceName-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(id, target, index, false);\n\t};\n\n\tid.toString = () => serviceId;\n\n\treturn <any>id;\n}\n\n/**\n * Mark a service dependency as optional.\n */\nexport function optional<T>(serviceIdentifier: ServiceIdentifier<T>) {\n\n\treturn function (target: Function, key: string, index: number){\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@optional-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(serviceIdentifier, target, index, true);\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\nimport {IChange, ILineChange, IPosition, IRange} from 'vs/editor/common/editorCommon';\nimport {IInplaceReplaceSupportResult, ILink, ISuggestResult} from 'vs/editor/common/modes';\n\nexport var ID_EDITOR_WORKER_SERVICE = 'editorWorkerService';\nexport var IEditorWorkerService = createDecorator<IEditorWorkerService>(ID_EDITOR_WORKER_SERVICE);\n\nexport interface IEditorWorkerService {\n\tserviceId: ServiceIdentifier<any>;\n\n\tcomputeDiff(original:URI, modified:URI, ignoreTrimWhitespace:boolean):TPromise<ILineChange[]>;\n\tcomputeDirtyDiff(original:URI, modified:URI, ignoreTrimWhitespace:boolean):TPromise<IChange[]>;\n\tcomputeLinks(resource:URI):TPromise<ILink[]>;\n\ttextualSuggest(resource: URI, position: IPosition): TPromise<ISuggestResult[]>;\n\tnavigateValueSet(resource: URI, range:IRange, up:boolean): TPromise<IInplaceReplaceSupportResult>;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Event from 'vs/base/common/event';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\nimport * as modes from 'vs/editor/common/modes';\nimport {ILanguage} from 'vs/editor/common/modes/monarch/monarchTypes';\nimport {IRichLanguageConfiguration} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\n\nexport var IModeService = createDecorator<IModeService>('modeService');\n\nexport interface IModeLookupResult {\n\tmodeId: string;\n\tisInstantiated: boolean;\n}\n\nexport interface ILanguageExtensionPoint {\n\tid: string;\n\textensions?: string[];\n\tfilenames?: string[];\n\tfilenamePatterns?: string[];\n\tfirstLine?: string;\n\taliases?: string[];\n\tmimetypes?: string[];\n\tconfiguration?: string;\n}\n\nexport interface IValidLanguageExtensionPoint {\n\tid: string;\n\textensions: string[];\n\tfilenames: string[];\n\tfilenamePatterns: string[];\n\tfirstLine: string;\n\taliases: string[];\n\tmimetypes: string[];\n\tconfiguration: string;\n}\n\nexport interface IModeService {\n\tserviceId: ServiceIdentifier<any>;\n\n\tonDidAddModes: Event<string[]>;\n\tonDidCreateMode: Event<modes.IMode>;\n\n\tconfigureMode(modeName: string, options: any): void;\n\tconfigureModeById(modeId: string, options: any): void;\n\tconfigureAllModes(config:any): void;\n\tgetConfigurationForMode(modeId:string): any;\n\n\t// --- reading\n\tisRegisteredMode(mimetypeOrModeId: string): boolean;\n\tisCompatMode(modeId: string): boolean;\n\tgetRegisteredModes(): string[];\n\tgetRegisteredLanguageNames(): string[];\n\tgetExtensions(alias: string): string[];\n\tgetMimeForMode(modeId: string): string;\n\tgetLanguageName(modeId:string): string;\n\tgetModeIdForLanguageName(alias:string): string;\n\tgetModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string): string;\n\tgetConfigurationFiles(modeId: string): string[];\n\n\t// --- instantiation\n\tlookup(commaSeparatedMimetypesOrCommaSeparatedIds: string): IModeLookupResult[];\n\tgetMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): modes.IMode;\n\tgetOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): TPromise<modes.IMode>;\n\tgetOrCreateModeByLanguageName(languageName: string): TPromise<modes.IMode>;\n\tgetOrCreateModeByFilenameOrFirstLine(filename: string, firstLine?:string): TPromise<modes.IMode>;\n\n\tregisterRichEditSupport(modeId: string, support: IRichLanguageConfiguration): IDisposable;\n\tregisterTokenizationSupport(modeId: string, callback: (mode: modes.IMode) => modes.ITokenizationSupport): IDisposable;\n\tregisterTokenizationSupport2(modeId: string, support: modes.TokensProvider): IDisposable;\n\tregisterMonarchDefinition(modelService: IModelService, editorWorkerService: IEditorWorkerService, modeId:string, language:ILanguage): IDisposable;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Event from 'vs/base/common/event';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\nimport {IModel, ITextModelCreationOptions} from 'vs/editor/common/editorCommon';\nimport {IMode} from 'vs/editor/common/modes';\n\nexport var IModelService = createDecorator<IModelService>('modelService');\n\nexport interface IModelService {\n\tserviceId: ServiceIdentifier<any>;\n\n\tcreateModel(value:string, modeOrPromise:TPromise<IMode>|IMode, resource: URI): IModel;\n\n\tdestroyModel(resource: URI): void;\n\n\tgetModels(): IModel[];\n\n\tgetCreationOptions(): ITextModelCreationOptions;\n\n\tgetModel(resource: URI): IModel;\n\n\tonModelAdded: Event<IModel>;\n\n\tonModelRemoved: Event<IModel>;\n\n\tonModelModeChanged: Event<{ model: IModel; oldModeId: string; }>;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EmitterEvent, ListenerCallback} from 'vs/base/common/eventEmitter';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport URI from 'vs/base/common/uri';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\nimport {IMirrorModel} from 'vs/editor/common/editorCommon';\n\n// Resource Service\n\nexport var ResourceEvents = {\n\tADDED: 'resource.added',\n\tREMOVED: 'resource.removed',\n\tCHANGED: 'resource.changed'\n};\n\nexport interface IResourceAddedEvent {\n\turl: URI;\n\taddedElement: IMirrorModel;\n}\n\nexport interface IResourceRemovedEvent {\n\turl: URI;\n\tremovedElement: IMirrorModel;\n}\n\nexport interface IResourceChangedEvent {\n\turl: URI;\n\toriginalEvents: EmitterEvent[];\n}\n\nexport var IResourceService = createDecorator<IResourceService>('resourceService');\n\nexport interface IResourceService {\n\tserviceId: ServiceIdentifier<any>;\n\tinsert(url: URI, element: IMirrorModel): void;\n\tget(url: URI): IMirrorModel;\n\tall(): IMirrorModel[];\n\tcontains(url: URI): boolean;\n\tremove(url: URI): void;\n\taddListener2_(eventType: 'resource.added', listener: (event: IResourceAddedEvent) => void): IDisposable;\n\taddListener2_(eventType: 'resource.removed', listener: (event: IResourceRemovedEvent) => void): IDisposable;\n\taddListener2_(eventType: 'resource.changed', listener: (event: IResourceChangedEvent) => void): IDisposable;\n\taddListener2_(eventType: string, listener: ListenerCallback): IDisposable;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EventEmitter, EmitterEvent, ListenerCallback} from 'vs/base/common/eventEmitter';\nimport {IDisposable, dispose} from 'vs/base/common/lifecycle';\nimport URI from 'vs/base/common/uri';\nimport {IMirrorModel} from 'vs/editor/common/editorCommon';\nimport {IResourceAddedEvent, IResourceChangedEvent, IResourceRemovedEvent, IResourceService, ResourceEvents} from 'vs/editor/common/services/resourceService';\n\nexport class ResourceService extends EventEmitter implements IResourceService {\n\tpublic serviceId = IResourceService;\n\tprivate data:{[url:string]:IMirrorModel;};\n\tprivate unbinds:{[url:string]:IDisposable[];};\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.data = {};\n\t\tthis.unbinds = {};\n\t}\n\n\tpublic addListener2_(eventType: string, listener: ListenerCallback): IDisposable {\n\t\treturn super.addListener2(eventType, listener);\n\t}\n\n\tprivate _anonymousModelId(input:string): string {\n\t\tvar r = '';\n\t\tfor (var i = 0; i < input.length; i++) {\n\t\t\tvar ch = input[i];\n\t\t\tif (ch >= '0' && ch <= '9') {\n\t\t\t\tr += '0';\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\t\tr += 'a';\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (ch >= 'A' && ch <= 'Z') {\n\t\t\t\tr += 'A';\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tr += ch;\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic insert(url:URI, element:IMirrorModel): void {\n\t\t// console.log('INSERT: ' + url.toString());\n\t\tif (this.contains(url)) {\n\t\t\t// There already exists a model with this id => this is a programmer error\n\t\t\tthrow new Error('ResourceService: Cannot add model ' + this._anonymousModelId(url.toString()) + ' because it already exists!');\n\t\t}\n\n\t\t// add resource\n\t\tvar key = url.toString();\n\t\tthis.data[key] = element;\n\t\tthis.unbinds[key] = [];\n\t\tthis.unbinds[key].push(element.addBulkListener2((value:EmitterEvent[]) => {\n\t\t\tthis.emit(ResourceEvents.CHANGED, <IResourceChangedEvent>{ url: url, originalEvents: value });\n\t\t}));\n\n\t\t// event\n\t\tthis.emit(ResourceEvents.ADDED, <IResourceAddedEvent>{ url: url, addedElement: element });\n\t}\n\n\tpublic get(url:URI):IMirrorModel {\n\t\tif(!this.data[url.toString()]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.data[url.toString()];\n\t}\n\n\tpublic all():IMirrorModel[] {\n\t\treturn Object.keys(this.data).map((key) => {\n\t\t\treturn this.data[key];\n\t\t});\n\t}\n\n\tpublic contains(url:URI):boolean {\n\t\treturn !!this.data[url.toString()];\n\t}\n\n\tpublic remove(url:URI):void {\n\t\t// console.log('REMOVE: ' + url.toString());\n\t\tif(!this.contains(url)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar key = url.toString(),\n\t\t\telement = this.data[key];\n\n\t\t// stop listen\n\t\tthis.unbinds[key] = dispose(this.unbinds[key]);\n\n\t\t// removal\n\t\tdelete this.unbinds[key];\n\t\tdelete this.data[key];\n\n\t\t// event\n\t\tthis.emit(ResourceEvents.REMOVED, <IResourceRemovedEvent>{ url: url, removedElement: element });\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {RunOnceScheduler} from 'vs/base/common/async';\nimport {EmitterEvent} from 'vs/base/common/eventEmitter';\nimport {IDisposable, dispose} from 'vs/base/common/lifecycle';\nimport URI from 'vs/base/common/uri';\nimport {IMirrorModel} from 'vs/editor/common/editorCommon';\nimport {IResourceAddedEvent, IResourceRemovedEvent, IResourceService, ResourceEvents} from 'vs/editor/common/services/resourceService';\n\ninterface IValidationHelperFilter {\n\t(resource:IMirrorModel): boolean;\n}\n\nexport interface IValidationHelperCallback {\n\t(toValidate:URI[]): void;\n}\n\nclass ValidationModel implements IDisposable {\n\n\tprivate _toDispose: IDisposable[];\n\tprivate _changeCallback: (model:ValidationModel)=>void;\n\tprivate _model: IMirrorModel;\n\tprivate _isDirty: boolean;\n\n\tpublic constructor(model: IMirrorModel, changeCallback:(model:ValidationModel)=>void) {\n\t\tthis._toDispose = [];\n\t\tthis._changeCallback = changeCallback;\n\t\tthis._model = model;\n\t\tthis._isDirty = false;\n\t\tthis._toDispose.push(model.addBulkListener2((events) => this._onModelChanged(events)));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\t\tthis._changeCallback = null;\n\t}\n\n\tpublic markAsClean(): void {\n\t\tthis._isDirty = false;\n\t}\n\n\tpublic markAsDirty(): void {\n\t\tthis._isDirty = true;\n\t}\n\n\tpublic isDirty(): boolean {\n\t\treturn this._isDirty;\n\t}\n\n\tpublic getMirrorModel(): IMirrorModel {\n\t\treturn this._model;\n\t}\n\n\tprivate _onModelChanged(events:EmitterEvent[]): void {\n\t\tvar containsChanged = false;\n\t\tfor (var i = 0; !containsChanged && i < events.length; i++) {\n\t\t\tif (events[i].getType() === 'changed') {\n\t\t\t\tcontainsChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (containsChanged) {\n\t\t\tthis._changeCallback(this);\n\t\t}\n\t}\n}\n\nexport class ValidationHelper implements IDisposable {\n\n\tprivate _toDispose:IDisposable[];\n\n\tprivate _isEnabled:boolean;\n\tprivate _validate:RunOnceScheduler;\n\tprivate _resourceService:IResourceService;\n\tprivate _callback:IValidationHelperCallback;\n\tprivate _filter:IValidationHelperFilter;\n\tprivate _validationDelay:number;\n\tprivate _models:{[url:string]:ValidationModel;};\n\tprivate _isDueToConfigurationChange:boolean;\n\n\tpublic constructor(resourceService:IResourceService, modeId: string, callback:IValidationHelperCallback) {\n\t\tthis._toDispose = [];\n\t\tthis._resourceService = resourceService;\n\t\tthis._callback = callback;\n\t\tthis._filter = (resource) => (resource.getMode().getId() === modeId);\n\t\tthis._validationDelay = 500;\n\t\tthis._models = {};\n\t\tthis._isDueToConfigurationChange = false;\n\n\t\tthis._toDispose.push(this._resourceService.addListener2_(ResourceEvents.ADDED, (e) => {\n\t\t\tthis._onResourceAdded(e);\n\t\t}));\n\n\t\tthis._toDispose.push(this._resourceService.addListener2_(ResourceEvents.REMOVED, (e) => {\n\t\t\tthis._onResourceRemoved(e);\n\t\t}));\n\n\t\tthis._validate = new RunOnceScheduler(() => this._invokeCallback(), this._validationDelay);\n\t\tthis._toDispose.push(this._validate);\n\n\t\tthis._resourceService.all().forEach((element) => this._addElement(element));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\n\t\tdispose(Object.keys(this._models).map((modelUrl) => this._models[modelUrl]));\n\t\tthis._models = null;\n\t}\n\n\tpublic trigger(): void {\n\t\tthis._validate.schedule();\n\t}\n\n\tpublic triggerDueToConfigurationChange(): void {\n\t\tthis._isDueToConfigurationChange = true;\n\t\tthis._validate.schedule();\n\t}\n\n\tprivate _addElement(element:IMirrorModel): void {\n\t\tif (!this._filter(element)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar model = <IMirrorModel>element;\n\n\t\tvar validationModel = new ValidationModel(model, (model) => this._onChanged(model));\n\t\tthis._models[model.uri.toString()] = validationModel;\n\t\tthis._onChanged(validationModel);\n\t}\n\n\tprivate _onResourceAdded(e:IResourceAddedEvent): void {\n\t\tvar stringUrl = e.url.toString();\n\n\t\tif (this._models.hasOwnProperty(stringUrl)) {\n\t\t\tthis._models[stringUrl].dispose();\n\t\t}\n\n\t\tthis._addElement(e.addedElement);\n\t}\n\n\tprivate _onResourceRemoved(e:IResourceRemovedEvent): void {\n\t\tvar stringUrl = e.url.toString();\n\n\t\tif (this._models.hasOwnProperty(stringUrl)) {\n\t\t\tthis._models[stringUrl].dispose();\n\t\t\tdelete this._models[stringUrl];\n\t\t}\n\t}\n\n\tprivate _onChanged(model:ValidationModel): void {\n\t\tmodel.markAsDirty();\n\t\tthis._validate.schedule();\n\t}\n\n\tprivate _invokeCallback(): void {\n\t\tif (!this._isEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar dirtyModels: URI[] = [];\n\t\tvar cleanModels: URI[] = [];\n\n\t\tObject.keys(this._models)\n\t\t\t.map((modelUrl) => this._models[modelUrl])\n\t\t\t.forEach((model) => {\n\t\t\t\tif (model.isDirty()) {\n\t\t\t\t\tdirtyModels.push(model.getMirrorModel().uri);\n\t\t\t\t\tmodel.markAsClean();\n\t\t\t\t} else {\n\t\t\t\t\tcleanModels.push(model.getMirrorModel().uri);\n\t\t\t\t}\n\t\t\t});\n\n\t\tvar isDueToConfigurationChange = this._isDueToConfigurationChange;\n\t\tthis._isDueToConfigurationChange = false;\n\n\t\tlet toValidate: URI[] = dirtyModels;\n\t\tif (isDueToConfigurationChange) {\n\t\t\ttoValidate = toValidate.concat(cleanModels);\n\t\t}\n\n\t\tthis._callback(toValidate);\n\t}\n\n\tpublic enable(): void {\n\t\tthis._isEnabled = true;\n\t\tthis.trigger();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport Event from 'vs/base/common/event';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {JSONPath} from 'vs/base/common/json';\n\nexport const IConfigurationService = createDecorator<IConfigurationService>('configurationService');\n\nexport interface IConfigurationService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Fetches the appropriate section of the configuration JSON file.\n\t * This will be an object keyed off the section name.\n\t */\n\tgetConfiguration<T>(section?: string): T;\n\n\t/**\n\t * Similar to #getConfiguration() but ensures that the latest configuration\n\t * from disk is fetched.\n\t */\n\tloadConfiguration<T>(section?: string): TPromise<T>;\n\n\t/**\n\t * Returns iff the workspace has configuration or not.\n\t */\n\thasWorkspaceConfiguration(): boolean;\n\n\t/**\n\t * Event that fires when the configuration changes.\n\t */\n\tonDidUpdateConfiguration: Event<IConfigurationServiceEvent>;\n\n\t/**\n\t * Sets a user configuration. An the setting does not yet exist in the settings, it will be\n\t * added.\n\t */\n\tsetUserConfiguration(key: string | JSONPath, value: any) : Thenable<void>;\n}\n\nexport interface IConfigurationServiceEvent {\n\tconfig: any;\n}\n\nexport function getConfigurationValue<T>(config: any, settingPath: string, defaultValue?: T): T {\n\tfunction accessSetting(config: any, path: string[]): any {\n\t\tlet current = config;\n\t\tfor (let i = 0; i < path.length; i++) {\n\t\t\tcurrent = current[path[i]];\n\t\t\tif (!current) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t\treturn <T> current;\n\t}\n\n\tlet path = settingPath.split('.');\n\tlet result = accessSetting(config, path);\n\treturn typeof result === 'undefined'\n\t\t? defaultValue\n\t\t: result;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IEventEmitter} from 'vs/base/common/eventEmitter';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IEventService = createDecorator<IEventService>('eventService');\n\nexport interface IEventService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Allows to add a listener to the platform event bus for all emitters that are known to the platform.\n\t */\n\taddListener2(eventType: string, listener: (event: any) => void): IDisposable;\n\n\t/**\n\t * Allows to add an event emitter to the platform bus such as Events from the emitter\n\t * can be received from all listeners on the bus.\n\t */\n\taddEmitter2(eventEmitter: IEventEmitter, emitterType?: string): IDisposable;\n\n\t/**\n\t * Emits an event of the given type into the platform event bus.\n\t * Note: Instead of emitting directly to the platform bus, it is also possible to register\n\t * as event emitter to the bus using addEmitter() with a emitterType specified. This\n\t * makes it possible to scope Events on the bus to a specific namespace, depending on the\n\t * emitter and avoids polluting the global namespace in the bus with Events.\n\t */\n\temit(eventType: string, e?: any): void;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EventEmitter} from 'vs/base/common/eventEmitter';\nimport {IEventService} from './event';\n\n// --- implementation ------------------------------------------\n\nexport class EventService extends EventEmitter implements IEventService {\n\tpublic serviceId = IEventService;\n\tconstructor() {\n\t\tsuper();\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Severity from 'vs/base/common/severity';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {ServiceIdentifier, createDecorator} from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IExtensionDescription {\n\tid: string;\n\tname: string;\n\tversion: string;\n\tpublisher: string;\n\tisBuiltin: boolean;\n\textensionFolderPath: string;\n\textensionDependencies?: string[];\n\tactivationEvents?: string[];\n\tengines: {\n\t\tvscode: string;\n\t};\n\tmain?: string;\n\tcontributes?: { [point: string]: any; };\n}\n\nexport interface IActivationEventListener {\n\t(): void;\n}\n\nexport interface IPointListener {\n\t(desc: IExtensionDescription[]): void;\n}\n\nexport const IExtensionService = createDecorator<IExtensionService>('extensionService');\n\nexport interface IMessage {\n\ttype: Severity;\n\tmessage: string;\n\tsource: string;\n}\n\nexport interface IExtensionsStatus {\n\tmessages: IMessage[];\n}\n\nexport interface IExtensionService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Send an activation event and activate interested extensions.\n\t */\n\tactivateByEvent(activationEvent: string): TPromise<void>;\n\n\t/**\n\t * Block on this signal any interactions with extensions.\n\t */\n\tonReady(): TPromise<boolean>;\n\n\t/**\n\t * Get information about extensions status.\n\t */\n\tgetExtensionsStatus(): { [id: string]: IExtensionsStatus };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport winjs = require('vs/base/common/winjs.base');\nimport paths = require('vs/base/common/paths');\nimport URI from 'vs/base/common/uri';\nimport glob = require('vs/base/common/glob');\nimport events = require('vs/base/common/events');\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IFileService = createDecorator<IFileService>('fileService');\n\nexport interface IFileService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Resolve the properties of a file identified by the resource.\n\t *\n\t * If the optional parameter \"resolveTo\" is specified in options, the stat service is asked\n\t * to provide a stat object that should contain the full graph of folders up to all of the\n\t * target resources.\n\t *\n\t * If the optional parameter \"resolveSingleChildDescendants\" is specified in options,\n\t * the stat service is asked to automatically resolve child folders that only\n\t * contain a single element.\n\t */\n\tresolveFile(resource: URI, options?: IResolveFileOptions): winjs.TPromise<IFileStat>;\n\n\t/**\n\t *Finds out if a file identified by the resource exists.\n\t */\n\texistsFile(resource: URI): winjs.TPromise<boolean>;\n\n\t/**\n\t * Resolve the contents of a file identified by the resource.\n\t *\n\t * The returned object contains properties of the file and the full value as string.\n\t */\n\tresolveContent(resource: URI, options?: IResolveContentOptions): winjs.TPromise<IContent>;\n\n\t/**\n\t * Returns the contents of all files by the given array of file resources.\n\t */\n\tresolveContents(resources: URI[]): winjs.TPromise<IContent[]>;\n\n\t/**\n\t * Updates the content replacing its previous value.\n\t */\n\tupdateContent(resource: URI, value: string, options?: IUpdateContentOptions): winjs.TPromise<IFileStat>;\n\n\t/**\n\t * Moves the file to a new path identified by the resource.\n\t *\n\t * The optional parameter overwrite can be set to replace an existing file at the location.\n\t */\n\tmoveFile(source: URI, target: URI, overwrite?: boolean): winjs.TPromise<IFileStat>;\n\n\t/**\n\t * Copies the file to a path identified by the resource.\n\t *\n\t * The optional parameter overwrite can be set to replace an existing file at the location.\n\t */\n\tcopyFile(source: URI, target: URI, overwrite?: boolean): winjs.TPromise<IFileStat>;\n\n\t/**\n\t * Creates a new file with the given path. The returned promise\n\t * will have the stat model object as a result.\n\t *\n\t * The optional parameter content can be used as value to fill into the new file.\n\t */\n\tcreateFile(resource: URI, content?: string): winjs.TPromise<IFileStat>;\n\n\t/**\n\t * Creates a new folder with the given path. The returned promise\n\t * will have the stat model object as a result.\n\t */\n\tcreateFolder(resource: URI): winjs.TPromise<IFileStat>;\n\n\t/**\n\t * Renames the provided file to use the new name. The returned promise\n\t * will have the stat model object as a result.\n\t */\n\trename(resource: URI, newName: string): winjs.TPromise<IFileStat>;\n\n\t/**\n\t * Deletes the provided file.  The optional useTrash parameter allows to\n\t * move the file to trash.\n\t */\n\tdel(resource: URI, useTrash?: boolean): winjs.TPromise<void>;\n\n\t/**\n\t * Imports the file to the parent identified by the resource.\n\t */\n\timportFile(source: URI, targetFolder: URI): winjs.TPromise<IImportResult>;\n\n\t/**\n\t * Allows to start a watcher that reports file change events on the provided resource.\n\t */\n\twatchFileChanges(resource: URI): void;\n\n\t/**\n\t * Allows to stop a watcher on the provided resource or absolute fs path.\n\t */\n\tunwatchFileChanges(resource: URI): void;\n\tunwatchFileChanges(fsPath: string): void;\n\n\t/**\n\t * Configures the file service with the provided options.\n\t */\n\tupdateOptions(options: any): void;\n\n\t/**\n\t * Frees up any resources occupied by this service.\n\t */\n\tdispose(): void;\n}\n\n\n/**\n * Possible changes that can occur to a file.\n */\nexport enum FileChangeType {\n\tUPDATED = 0,\n\tADDED = 1,\n\tDELETED = 2\n}\n\n/**\n * Possible events to subscribe to\n */\nexport var EventType = {\n\n\t/**\n\t* Send on file changes.\n\t*/\n\tFILE_CHANGES: 'files:fileChanges'\n};\n\n/**\n * Identifies a single change in a file.\n */\nexport interface IFileChange {\n\n\t/**\n\t * The type of change that occured to the file.\n\t */\n\ttype: FileChangeType;\n\n\t/**\n\t * The unified resource identifier of the file that changed.\n\t */\n\tresource: URI;\n}\n\nexport class FileChangesEvent extends events.Event {\n\tprivate _changes: IFileChange[];\n\n\tconstructor(changes: IFileChange[]) {\n\t\tsuper();\n\n\t\tthis._changes = changes;\n\t}\n\n\tpublic get changes() {\n\t\treturn this._changes;\n\t}\n\n\t/**\n\t * Returns true if this change event contains the provided file with the given change type. In case of\n\t * type DELETED, this method will also return true if a folder got deleted that is the parent of the\n\t * provided file path.\n\t */\n\tpublic contains(resource: URI, type: FileChangeType): boolean {\n\t\tif (!resource) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.containsAny([resource], type);\n\t}\n\n\t/**\n\t * Returns true if this change event contains any of the provided files with the given change type. In case of\n\t * type DELETED, this method will also return true if a folder got deleted that is the parent of any of the\n\t * provided file paths.\n\t */\n\tpublic containsAny(resources: URI[], type: FileChangeType): boolean {\n\t\tif (!resources || !resources.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._changes.some((change) => {\n\t\t\tif (change.type !== type) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// For deleted also return true when deleted folder is parent of target path\n\t\t\tif (type === FileChangeType.DELETED) {\n\t\t\t\treturn resources.some((a: URI) => {\n\t\t\t\t\tif (!a) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn paths.isEqualOrParent(a.fsPath, change.resource.fsPath);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn resources.some((a: URI) => {\n\t\t\t\tif (!a) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn a.fsPath === change.resource.fsPath;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns the changes that describe added files.\n\t */\n\tpublic getAdded(): IFileChange[] {\n\t\treturn this.getOfType(FileChangeType.ADDED);\n\t}\n\n\t/**\n\t * Returns if this event contains added files.\n\t */\n\tpublic gotAdded(): boolean {\n\t\treturn this.hasType(FileChangeType.ADDED);\n\t}\n\n\t/**\n\t * Returns the changes that describe deleted files.\n\t */\n\tpublic getDeleted(): IFileChange[] {\n\t\treturn this.getOfType(FileChangeType.DELETED);\n\t}\n\n\t/**\n\t * Returns if this event contains deleted files.\n\t */\n\tpublic gotDeleted(): boolean {\n\t\treturn this.hasType(FileChangeType.DELETED);\n\t}\n\n\t/**\n\t * Returns the changes that describe updated files.\n\t */\n\tpublic getUpdated(): IFileChange[] {\n\t\treturn this.getOfType(FileChangeType.UPDATED);\n\t}\n\n\t/**\n\t * Returns if this event contains updated files.\n\t */\n\tpublic gotUpdated(): boolean {\n\t\treturn this.hasType(FileChangeType.UPDATED);\n\t}\n\n\tprivate getOfType(type: FileChangeType): IFileChange[] {\n\t\treturn this._changes.filter((change) => change.type === type);\n\t}\n\n\tprivate hasType(type: FileChangeType): boolean {\n\t\treturn this._changes.some((change) => {\n\t\t\treturn change.type === type;\n\t\t});\n\t}\n}\n\nexport interface IBaseStat {\n\n\t/**\n\t * The unified resource identifier of this file or folder.\n\t */\n\tresource: URI;\n\n\t/**\n\t * The name which is the last segement\n\t * of the {{path}}.\n\t */\n\tname: string;\n\n\t/**\n\t * The last modifictaion date represented\n\t * as millis from unix epoch.\n\t */\n\tmtime: number;\n\n\t/**\n\t * A unique identifier thet represents the\n\t * current state of the file or directory.\n\t */\n\tetag: string;\n\n\t/**\n\t * The mime type string. Applicate for files\n\t * only.\n\t */\n\tmime: string;\n}\n\n/**\n * A file resource with meta information.\n */\nexport interface IFileStat extends IBaseStat {\n\n\t/**\n\t * The resource is a directory. Iff {{true}}\n\t * {{mime}} and {{encoding}} have no meaning.\n\t */\n\tisDirectory: boolean;\n\n\t/**\n\t * Return {{true}} when this is a directory\n\t * that is not empty.\n\t */\n\thasChildren: boolean;\n\n\t/**\n\t * The children of the file stat or undefined if none.\n\t */\n\tchildren?: IFileStat[];\n\n\t/**\n\t * The size of the file if known.\n\t */\n\tsize?: number;\n}\n\n/**\n * Content and meta information of a file.\n */\nexport interface IContent extends IBaseStat {\n\n\t/**\n\t * The content of a text file.\n\t */\n\tvalue: string;\n\n\t/**\n\t * The encoding of the content if known.\n\t */\n\tencoding: string;\n}\n\nexport interface IResolveContentOptions {\n\n\t/**\n\t * The optional acceptTextOnly parameter allows to fail this request early if the file\n\t * contents are not textual.\n\t */\n\tacceptTextOnly?: boolean;\n\n\t/**\n\t * The optional etag parameter allows to return a 304 (Not Modified) if the etag matches\n\t * with the remote resource. It is the task of the caller to makes sure to handle this\n\t * error case from the promise.\n\t */\n\tetag?: string;\n\n\t/**\n\t * The optional encoding parameter allows to specify the desired encoding when resolving\n\t * the contents of the file.\n\t */\n\tencoding?: string;\n}\n\nexport interface IUpdateContentOptions {\n\n\t/**\n\t * The encoding to use when updating a file.\n\t */\n\tencoding?: string;\n\n\t/**\n\t * If set to true, will enforce the selected encoding and not perform any detection using BOMs.\n\t */\n\toverwriteEncoding?: boolean;\n\n\t/**\n\t * Whether to overwrite a file even if it is readonly.\n\t */\n\toverwriteReadonly?: boolean;\n\n\t/**\n\t * The last known modification time of the file. This can be used to prevent dirty writes.\n\t */\n\tmtime?: number;\n\n\t/**\n\t * The etag of the file. This can be used to prevent dirty writes.\n\t */\n\tetag?: string;\n}\n\nexport interface IResolveFileOptions {\n\tresolveTo?: URI[];\n\tresolveSingleChildDescendants?: boolean;\n}\n\nexport interface IImportResult {\n\tstat: IFileStat;\n\tisNew: boolean;\n}\n\nexport interface IFileOperationResult {\n\tmessage: string;\n\tfileOperationResult: FileOperationResult;\n}\n\nexport enum FileOperationResult {\n\tFILE_IS_BINARY,\n\tFILE_IS_DIRECTORY,\n\tFILE_NOT_FOUND,\n\tFILE_NOT_MODIFIED_SINCE,\n\tFILE_MODIFIED_SINCE,\n\tFILE_MOVE_CONFLICT,\n\tFILE_READ_ONLY,\n\tFILE_TOO_LARGE\n}\n\nexport const MAX_FILE_SIZE = 50 * 1024 * 1024;\n\nexport const AutoSaveConfiguration = {\n\tOFF: 'off',\n\tAFTER_DELAY: 'afterDelay',\n\tON_FOCUS_CHANGE: 'onFocusChange'\n};\n\nexport interface IFilesConfiguration {\n\tfiles: {\n\t\tassociations: { [filepattern: string]: string };\n\t\texclude: glob.IExpression;\n\t\twatcherExclude: { [filepattern: string]: boolean };\n\t\tencoding: string;\n\t\ttrimTrailingWhitespace: boolean;\n\t\tautoSave: string;\n\t\tautoSaveDelay: number;\n\t\teol: string;\n\t};\n}\n\nexport const SUPPORTED_ENCODINGS: { [encoding: string]: { labelLong: string; labelShort: string; order: number; encodeOnly?: boolean; alias?: string } } = {\n\tutf8: {\n\t\tlabelLong: 'UTF-8',\n\t\tlabelShort: 'UTF-8',\n\t\torder: 1,\n\t\talias: 'utf8bom'\n\t},\n\tutf8bom: {\n\t\tlabelLong: 'UTF-8 with BOM',\n\t\tlabelShort: 'UTF-8 with BOM',\n\t\tencodeOnly: true,\n\t\torder: 2,\n\t\talias: 'utf8'\n\t},\n\tutf16le: {\n\t\tlabelLong: 'UTF-16 LE',\n\t\tlabelShort: 'UTF-16 LE',\n\t\torder: 3\n\t},\n\tutf16be: {\n\t\tlabelLong: 'UTF-16 BE',\n\t\tlabelShort: 'UTF-16 BE',\n\t\torder: 4\n\t},\n\twindows1252: {\n\t\tlabelLong: 'Western (Windows 1252)',\n\t\tlabelShort: 'Windows 1252',\n\t\torder: 5\n\t},\n\tiso88591: {\n\t\tlabelLong: 'Western (ISO 8859-1)',\n\t\tlabelShort: 'ISO 8859-1',\n\t\torder: 6\n\t},\n\tiso88593: {\n\t\tlabelLong: 'Western (ISO 8859-3)',\n\t\tlabelShort: 'ISO 8859-3',\n\t\torder: 7\n\t},\n\tiso885915: {\n\t\tlabelLong: 'Western (ISO 8859-15)',\n\t\tlabelShort: 'ISO 8859-15',\n\t\torder: 8\n\t},\n\tmacroman: {\n\t\tlabelLong: 'Western (Mac Roman)',\n\t\tlabelShort: 'Mac Roman',\n\t\torder: 9\n\t},\n\tcp437: {\n\t\tlabelLong: 'DOS (CP 437)',\n\t\tlabelShort: 'CP437',\n\t\torder: 10\n\t},\n\twindows1256: {\n\t\tlabelLong: 'Arabic (Windows 1256)',\n\t\tlabelShort: 'Windows 1256',\n\t\torder: 11\n\t},\n\tiso88596: {\n\t\tlabelLong: 'Arabic (ISO 8859-6)',\n\t\tlabelShort: 'ISO 8859-6',\n\t\torder: 12\n\t},\n\twindows1257: {\n\t\tlabelLong: 'Baltic (Windows 1257)',\n\t\tlabelShort: 'Windows 1257',\n\t\torder: 13\n\t},\n\tiso88594: {\n\t\tlabelLong: 'Baltic (ISO 8859-4)',\n\t\tlabelShort: 'ISO 8859-4',\n\t\torder: 14\n\t},\n\tiso885914: {\n\t\tlabelLong: 'Celtic (ISO 8859-14)',\n\t\tlabelShort: 'ISO 8859-14',\n\t\torder: 15\n\t},\n\twindows1250: {\n\t\tlabelLong: 'Central European (Windows 1250)',\n\t\tlabelShort: 'Windows 1250',\n\t\torder: 16\n\t},\n\tiso88592: {\n\t\tlabelLong: 'Central European (ISO 8859-2)',\n\t\tlabelShort: 'ISO 8859-2',\n\t\torder: 17\n\t},\n\twindows1251: {\n\t\tlabelLong: 'Cyrillic (Windows 1251)',\n\t\tlabelShort: 'Windows 1251',\n\t\torder: 18\n\t},\n\tcp866: {\n\t\tlabelLong: 'Cyrillic (CP 866)',\n\t\tlabelShort: 'CP 866',\n\t\torder: 19\n\t},\n\tiso88595: {\n\t\tlabelLong: 'Cyrillic (ISO 8859-5)',\n\t\tlabelShort: 'ISO 8859-5',\n\t\torder: 20\n\t},\n\tkoi8r: {\n\t\tlabelLong: 'Cyrillic (KOI8-R)',\n\t\tlabelShort: 'KOI8-R',\n\t\torder: 21\n\t},\n\tkoi8u: {\n\t\tlabelLong: 'Cyrillic (KOI8-U)',\n\t\tlabelShort: 'KOI8-U',\n\t\torder: 22\n\t},\n\tiso885913: {\n\t\tlabelLong: 'Estonian (ISO 8859-13)',\n\t\tlabelShort: 'ISO 8859-13',\n\t\torder: 23\n\t},\n\twindows1253: {\n\t\tlabelLong: 'Greek (Windows 1253)',\n\t\tlabelShort: 'Windows 1253',\n\t\torder: 24\n\t},\n\tiso88597: {\n\t\tlabelLong: 'Greek (ISO 8859-7)',\n\t\tlabelShort: 'ISO 8859-7',\n\t\torder: 25\n\t},\n\twindows1255: {\n\t\tlabelLong: 'Hebrew (Windows 1255)',\n\t\tlabelShort: 'Windows 1255',\n\t\torder: 26\n\t},\n\tiso88598: {\n\t\tlabelLong: 'Hebrew (ISO 8859-8)',\n\t\tlabelShort: 'ISO 8859-8',\n\t\torder: 27\n\t},\n\tiso885910: {\n\t\tlabelLong: 'Nordic (ISO 8859-10)',\n\t\tlabelShort: 'ISO 8859-10',\n\t\torder: 28\n\t},\n\tiso885916: {\n\t\tlabelLong: 'Romanian (ISO 8859-16)',\n\t\tlabelShort: 'ISO 8859-16',\n\t\torder: 29\n\t},\n\twindows1254: {\n\t\tlabelLong: 'Turkish (Windows 1254)',\n\t\tlabelShort: 'Windows 1254',\n\t\torder: 30\n\t},\n\tiso88599: {\n\t\tlabelLong: 'Turkish (ISO 8859-9)',\n\t\tlabelShort: 'ISO 8859-9',\n\t\torder: 31\n\t},\n\twindows1258: {\n\t\tlabelLong: 'Vietnamese (Windows 1258)',\n\t\tlabelShort: 'Windows 1258',\n\t\torder: 32\n\t},\n\tgbk: {\n\t\tlabelLong: 'Chinese (GBK)',\n\t\tlabelShort: 'GBK',\n\t\torder: 33\n\t},\n\tgb18030: {\n\t\tlabelLong: 'Chinese (GB18030)',\n\t\tlabelShort: 'GB18030',\n\t\torder: 34\n\t},\n\tcp950: {\n\t\tlabelLong: 'Traditional Chinese (Big5)',\n\t\tlabelShort: 'Big5',\n\t\torder: 35\n\t},\n\tbig5hkscs: {\n\t\tlabelLong: 'Traditional Chinese (Big5-HKSCS)',\n\t\tlabelShort: 'Big5-HKSCS',\n\t\torder: 36\n\t},\n\tshiftjis: {\n\t\tlabelLong: 'Japanese (Shift JIS)',\n\t\tlabelShort: 'Shift JIS',\n\t\torder: 37\n\t},\n\teucjp: {\n\t\tlabelLong: 'Japanese (EUC-JP)',\n\t\tlabelShort: 'EUC-JP',\n\t\torder: 38\n\t},\n\teuckr: {\n\t\tlabelLong: 'Korean (EUC-KR)',\n\t\tlabelShort: 'EUC-KR',\n\t\torder: 39\n\t},\n\twindows874: {\n\t\tlabelLong: 'Thai (Windows 874)',\n\t\tlabelShort: 'Windows 874',\n\t\torder: 40\n\t}\n\t, iso885911: {\n\t\tlabelLong: 'Latin/Thai (ISO 8859-11)',\n\t\tlabelShort: 'ISO 8859-11',\n\t\torder: 41\n\t},\n\t'koi8-ru': {\n\t\tlabelLong: 'Cyrillic (KOI8-RU)',\n\t\tlabelShort: 'KOI8-RU',\n\t\torder: 42\n\t},\n\t'koi8-t': {\n\t\tlabelLong: 'Tajik (KOI8-T)',\n\t\tlabelShort: 'KOI8-T',\n\t\torder: 43\n\t},\n\tGB2312: {\n\t\tlabelLong: 'Simplified Chinese (GB 2312)',\n\t\tlabelShort: 'GB 2312',\n\t\torder: 44\n\t}\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {binarySearch} from 'vs/base/common/arrays';\nimport {ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\nimport {SyncDescriptor} from './descriptors';\n\ntype Entry = [ServiceIdentifier<any>, any];\n\nexport class ServiceCollection {\n\n\tprivate _entries: Entry[] = [];\n\n\tconstructor(...entries:[ServiceIdentifier<any>, any][]) {\n\t\tfor (let entry of entries) {\n\t\t\tthis.set(entry[0], entry[1]);\n\t\t}\n\t}\n\n\tset<T>(id: ServiceIdentifier<T>, instanceOrDescriptor: T | SyncDescriptor<T>): T | SyncDescriptor<T> {\n\t\tconst entry: Entry = [id, instanceOrDescriptor];\n\t\tconst idx = binarySearch(this._entries, entry, ServiceCollection._entryCompare);\n\t\tif (idx < 0) {\n\t\t\t// new element\n\t\t\tthis._entries.splice(~idx, 0, entry);\n\t\t} else {\n\t\t\tconst old = this._entries[idx];\n\t\t\tthis._entries[idx] = entry;\n\t\t\treturn old[1];\n\t\t}\n\t}\n\n\tforEach(callback: (id: ServiceIdentifier<any>, instanceOrDescriptor: any) => any): void {\n\t\tfor (let entry of this._entries) {\n\t\t\tlet [id, instanceOrDescriptor] = entry;\n\t\t\tcallback(id, instanceOrDescriptor);\n\t\t}\n\t}\n\n\thas(id: ServiceIdentifier<any>): boolean {\n\t\treturn binarySearch(this._entries, ServiceCollection._searchEntry(id), ServiceCollection._entryCompare) >= 0;\n\t}\n\n\tget<T>(id: ServiceIdentifier<T>): T | SyncDescriptor<T> {\n\t\tconst idx = binarySearch(this._entries, ServiceCollection._searchEntry(id), ServiceCollection._entryCompare);\n\t\tif (idx >= 0) {\n\t\t\treturn this._entries[idx][1];\n\t\t}\n\t}\n\n\tprivate static _dummy: Entry = [undefined, undefined];\n\n\tprivate static _searchEntry(id: ServiceIdentifier<any>): Entry {\n\t\tServiceCollection._dummy[0] = id;\n\t\treturn ServiceCollection._dummy;\n\t}\n\n\tprivate static _entryCompare(a: Entry, b: Entry): number {\n\t\tconst _a = a[0].toString();\n\t\tconst _b = b[0].toString();\n\t\tif (_a < _b) {\n\t\t\treturn -1;\n\t\t} else if (_a > _b) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {illegalArgument, illegalState, canceled} from 'vs/base/common/errors';\nimport {create} from 'vs/base/common/types';\nimport * as assert from 'vs/base/common/assert';\nimport {Graph} from 'vs/base/common/graph';\nimport {SyncDescriptor, AsyncDescriptor} from 'vs/platform/instantiation/common/descriptors';\nimport {ServiceIdentifier, IInstantiationService, ServicesAccessor, _util, optional} from 'vs/platform/instantiation/common/instantiation';\nimport {ServiceCollection} from 'vs/platform/instantiation/common/serviceCollection';\n\n\nexport class InstantiationService implements IInstantiationService {\n\n\tserviceId: any;\n\n\tprivate _services: ServiceCollection;\n\tprivate _strict: boolean;\n\n\tconstructor(services: ServiceCollection = new ServiceCollection(), strict: boolean = false) {\n\t\tthis._services = services;\n\t\tthis._strict = strict;\n\n\t\tthis._services.set(IInstantiationService, this);\n\t}\n\n\tcreateChild(services: ServiceCollection): IInstantiationService {\n\t\tthis._services.forEach((id, thing) => {\n\t\t\tif (!services.has(id)) {\n\t\t\t\tservices.set(id, thing);\n\t\t\t}\n\t\t});\n\t\treturn new InstantiationService(services, this._strict);\n\t}\n\n\tinvokeFunction<R>(signature: (accessor: ServicesAccessor, ...more: any[]) => R, ...args: any[]): R {\n\t\tlet accessor: ServicesAccessor;\n\t\ttry {\n\t\t\taccessor = {\n\t\t\t\tget: <T>(id: ServiceIdentifier<T>, isOptional?: typeof optional) => {\n\t\t\t\t\tconst result = this._getOrCreateServiceInstance(id);\n\t\t\t\t\tif (!result && isOptional !== optional) {\n\t\t\t\t\t\tthrow new Error(`[invokeFunction] unkown service '${id}'`);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn signature.apply(undefined, [accessor].concat(args));\n\t\t} finally {\n\t\t\taccessor.get = function () {\n\t\t\t\tthrow illegalState('service accessor is only valid during the invocation of its target method');\n\t\t\t};\n\t\t}\n\t}\n\n\tcreateInstance<T>(param: any, ...rest:any[]): any {\n\n\t\tif (param instanceof AsyncDescriptor) {\n\t\t\t// async\n\t\t\treturn this._createInstanceAsync(param, rest);\n\n\t\t} else if (param instanceof SyncDescriptor) {\n\t\t\t// sync\n\t\t\treturn this._createInstance(param, rest);\n\n\t\t} else {\n\t\t\t// sync, just ctor\n\t\t\treturn this._createInstance(new SyncDescriptor(param), rest);\n\t\t}\n\t}\n\n\tprivate _createInstanceAsync<T>(descriptor: AsyncDescriptor<T>, args: any[]): TPromise<T> {\n\n\t\tlet canceledError: Error;\n\n\t\treturn new TPromise((c, e, p) => {\n\t\t\trequire([descriptor.moduleName], (_module?: any) => {\n\t\t\t\tif (canceledError) {\n\t\t\t\t\te(canceledError);\n\t\t\t\t}\n\n\t\t\t\tif (!_module) {\n\t\t\t\t\treturn e(illegalArgument('module not found: ' + descriptor.moduleName));\n\t\t\t\t}\n\n\t\t\t\tlet ctor: Function;\n\t\t\t\tif (!descriptor.ctorName) {\n\t\t\t\t\tctor = _module;\n\t\t\t\t} else {\n\t\t\t\t\tctor = _module[descriptor.ctorName];\n\t\t\t\t}\n\n\t\t\t\tif (typeof ctor !== 'function') {\n\t\t\t\t\treturn e(illegalArgument('not a function: ' + descriptor.ctorName || descriptor.moduleName));\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\targs.unshift.apply(args, descriptor.staticArguments()); // instead of spread in ctor call\n\t\t\t\t\tc(this._createInstance(new SyncDescriptor<T>(ctor), args));\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn e(error);\n\t\t\t\t}\n\t\t\t}, e);\n\t\t}, () => {\n\t\t\tcanceledError = canceled();\n\t\t});\n\t}\n\n\tprivate _createInstance<T>(desc: SyncDescriptor<T>, args: any[]): T {\n\n\t\t// arguments given by createInstance-call and/or the descriptor\n\t\tlet staticArgs = desc.staticArguments().concat(args);\n\n\t\t// arguments defined by service decorators\n\t\tlet serviceDependencies = _util.getServiceDependencies(desc.ctor).sort((a, b) => a.index - b.index);\n\t\tlet serviceArgs = serviceDependencies.map(dependency => {\n\t\t\tlet service = this._getOrCreateServiceInstance(dependency.id);\n\t\t\tif (!service && this._strict && !dependency.optional) {\n\t\t\t\tthrow new Error(`[createInstance] ${desc.ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n\t\t\t}\n\t\t\treturn service;\n\t\t});\n\t\tlet firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : staticArgs.length;\n\n\t\t// check for argument mismatches, adjust static args if needed\n\t\tif (staticArgs.length !== firstServiceArgPos) {\n\t\t\tconsole.warn(`[createInstance] First service dependency of ${desc.ctor.name} at position ${\n\t\t\t\tfirstServiceArgPos + 1} conflicts with ${staticArgs.length} static arguments`);\n\n\t\t\tlet delta = firstServiceArgPos - staticArgs.length;\n\t\t\tif (delta > 0) {\n\t\t\t\tstaticArgs = staticArgs.concat(new Array(delta));\n\t\t\t} else {\n\t\t\t\tstaticArgs = staticArgs.slice(0, firstServiceArgPos);\n\t\t\t}\n\t\t}\n\n\t\t// // check for missing args\n\t\t// for (let i = 0; i < serviceArgs.length; i++) {\n\t\t// \tif (!serviceArgs[i]) {\n\t\t// \t\tconsole.warn(`${desc.ctor.name} MISSES service dependency ${serviceDependencies[i].id}`, new Error().stack);\n\t\t// \t}\n\t\t// }\n\n\t\t// now create the instance\n\t\tconst argArray = [desc.ctor];\n\t\targArray.push(...staticArgs);\n\t\targArray.push(...serviceArgs);\n\n\t\tconst instance = create.apply(null, argArray);\n\t\tdesc._validate(instance);\n\t\treturn <T>instance;\n\t}\n\n\tprivate _getOrCreateServiceInstance<T>(id: ServiceIdentifier<T>): T {\n\t\tlet thing = this._services.get(id);\n\t\tif (thing instanceof SyncDescriptor) {\n\t\t\treturn this._createAndCacheServiceInstance(id, thing);\n\t\t} else {\n\t\t\treturn thing;\n\t\t}\n\t}\n\n\tprivate _createAndCacheServiceInstance<T>(id: ServiceIdentifier<T>, desc: SyncDescriptor<T>): T {\n\t\tassert.ok(this._services.get(id) instanceof SyncDescriptor);\n\n\t\tconst graph = new Graph<{ id: ServiceIdentifier<any>, desc: SyncDescriptor<any> }>(data => data.id.toString());\n\n\t\tfunction throwCycleError() {\n\t\t\tconst err = new Error('[createInstance] cyclic dependency between services');\n\t\t\terr.message = graph.toString();\n\t\t\tthrow err;\n\t\t}\n\n\t\tlet count = 0;\n\t\tconst stack = [{ id, desc }];\n\t\twhile (stack.length) {\n\t\t\tconst item = stack.pop();\n\t\t\tgraph.lookupOrInsertNode(item);\n\n\t\t\t// TODO@joh use the graph to find a cycle\n\t\t\t// a weak heuristic for cycle checks\n\t\t\tif (count++ > 100) {\n\t\t\t\tthrowCycleError();\n\t\t\t}\n\n\t\t\t// check all dependencies for existence and if the need to be created first\n\t\t\tlet dependencies = _util.getServiceDependencies(item.desc.ctor);\n\t\t\tfor (let dependency of dependencies) {\n\n\t\t\t\tlet instanceOrDesc = this._services.get(dependency.id);\n\t\t\t\tif (!instanceOrDesc) {\n\t\t\t\t\tconsole.warn(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`);\n\t\t\t\t}\n\n\t\t\t\tif (instanceOrDesc instanceof SyncDescriptor) {\n\t\t\t\t\tconst d = { id: dependency.id, desc: instanceOrDesc };\n\t\t\t\t\tgraph.insertEdge(item, d);\n\t\t\t\t\tstack.push(d);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twhile (true) {\n\t\t\tlet roots = graph.roots();\n\n\t\t\t// if there is no more roots but still\n\t\t\t// nodes in the graph we have a cycle\n\t\t\tif (roots.length === 0) {\n\t\t\t\tif (graph.length !== 0) {\n\t\t\t\t\tthrowCycleError();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tfor (let root of roots) {\n\t\t\t\t// create instance and overwrite the service collections\n\t\t\t\tconst instance = this._createInstance(root.data.desc, []);\n\t\t\t\tthis._services.set(root.data.id, instance);\n\t\t\t\tgraph.removeNode(root.data);\n\t\t\t}\n\t\t}\n\n\t\treturn <T> this._services.get(id);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport Severity from 'vs/base/common/severity';\nimport Event from 'vs/base/common/event';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IMarkerService = createDecorator<IMarkerService>('markerService');\n\nexport interface IMarkerService {\n\tserviceId: ServiceIdentifier<any>;\n\n\tgetStatistics(): MarkerStatistics;\n\n\tchangeOne(owner: string, resource: URI, markers: IMarkerData[]): void;\n\n\tchangeAll(owner: string, data: IResourceMarker[]): void;\n\n\tremove(owner: string, resources: URI[]): void;\n\n\tread(filter?: { owner?: string; resource?: URI; selector?: RegExp, take?: number; }): IMarker[];\n\n\tonMarkerChanged: Event<URI[]>;\n}\n\nexport enum MarkerType {\n\ttransient = 1,\n\tpermanent = 2\n}\n\nexport interface IMarkerData {\n\tcode?: string;\n\tseverity: Severity;\n\tmessage: string;\n\tsource?: string;\n\tstartLineNumber: number;\n\tstartColumn: number;\n\tendLineNumber: number;\n\tendColumn: number;\n}\n\nexport interface IResourceMarker {\n\tresource: URI;\n\tmarker: IMarkerData;\n}\n\nexport interface IMarker {\n\towner: string;\n\tresource: URI;\n\tseverity: Severity;\n\tcode?: string;\n\tmessage: string;\n\tsource?: string;\n\tstartLineNumber: number;\n\tstartColumn: number;\n\tendLineNumber: number;\n\tendColumn: number;\n}\n\nexport interface MarkerStatistics {\n\terrors: number;\n\twarnings: number;\n\tinfos: number;\n\tunknwons: number;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport Types = require('vs/base/common/types');\nimport Assert = require('vs/base/common/assert');\nimport {IInstantiationService, IConstructorSignature0} from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IRegistry {\n\n\t/**\n\t * Adds the extension functions and properties defined by data to the\n\t * platform. The provided id must be unique.\n\t * @param id a unique identifier\n\t * @param data a contribution\n\t */\n\tadd(id: string, data: any): void;\n\n\t/**\n\t * Returns true iff there is an extension with the provided id.\n\t * @param id an extension idenifier\n\t */\n\tknows(id: string): boolean;\n\n\t/**\n\t * Returns the extension functions and properties defined by the specified key or null.\n\t * @param id an extension idenifier\n\t */\n\tas(id: string): any;\n\tas<T>(id: string): T;\n}\n\nclass RegistryImpl implements IRegistry {\n\n\tprivate data: { [id: string]: any; };\n\n\tconstructor() {\n\t\tthis.data = {};\n\t}\n\n\tpublic add(id: string, data: any): void {\n\t\tAssert.ok(Types.isString(id));\n\t\tAssert.ok(Types.isObject(data));\n\t\tAssert.ok(!this.data.hasOwnProperty(id), 'There is already an extension with this id');\n\n\t\tthis.data[id] = data;\n\t}\n\n\tpublic knows(id: string): boolean {\n\t\treturn this.data.hasOwnProperty(id);\n\t}\n\n\tpublic as(id: string): any {\n\t\treturn this.data[id] || null;\n\t}\n}\n\nexport var Registry = <IRegistry>new RegistryImpl();\n\n/**\n * A base class for registries that leverage the instantiation service to create instances.\n */\nexport class BaseRegistry<T> {\n\tprivate toBeInstantiated: IConstructorSignature0<T>[] = [];\n\tprivate instances: T[] = [];\n\tprivate instantiationService: IInstantiationService;\n\n\tpublic setInstantiationService(service: IInstantiationService): void {\n\t\tthis.instantiationService = service;\n\n\t\twhile (this.toBeInstantiated.length > 0) {\n\t\t\tlet entry = this.toBeInstantiated.shift();\n\t\t\tthis.instantiate(entry);\n\t\t}\n\t}\n\n\tprivate instantiate(ctor: IConstructorSignature0<T>): void {\n\t\tlet instance = this.instantiationService.createInstance(ctor);\n\t\tthis.instances.push(instance);\n\t}\n\n\t_register(ctor: IConstructorSignature0<T>): void {\n\t\tif (this.instantiationService) {\n\t\t\tthis.instantiate(ctor);\n\t\t} else {\n\t\t\tthis.toBeInstantiated.push(ctor);\n\t\t}\n\t}\n\n\t_getInstances(): T[] {\n\t\treturn this.instances.slice(0);\n\t}\n\n\t_setInstances(instances: T[]): void {\n\t\tthis.instances = instances;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {Registry} from 'vs/platform/platform';\nimport {ILanguageExtensionPoint} from 'vs/editor/common/services/modeService';\n\nexport interface ILegacyLanguageDefinition {\n\tid: string;\n\textensions: string[];\n\tfilenames?: string[];\n\tfirstLine?: string;\n\taliases: string[];\n\tmimetypes: string[];\n\tmoduleId: string;\n\tctorName: string;\n}\n\n// Define extension point ids\nexport var Extensions = {\n\tModesRegistry: 'editor.modesRegistry'\n};\n\nexport class EditorModesRegistry {\n\n\tprivate _compatModes: ILegacyLanguageDefinition[];\n\tprivate _languages: ILanguageExtensionPoint[];\n\n\tprivate _onDidAddCompatModes: Emitter<ILegacyLanguageDefinition[]> = new Emitter<ILegacyLanguageDefinition[]>();\n\tpublic onDidAddCompatModes: Event<ILegacyLanguageDefinition[]> = this._onDidAddCompatModes.event;\n\n\tprivate _onDidAddLanguages: Emitter<ILanguageExtensionPoint[]> = new Emitter<ILanguageExtensionPoint[]>();\n\tpublic onDidAddLanguages: Event<ILanguageExtensionPoint[]> = this._onDidAddLanguages.event;\n\n\tconstructor() {\n\t\tthis._compatModes = [];\n\t\tthis._languages = [];\n\t}\n\n\t// --- compat modes\n\n\n\tpublic registerCompatModes(def:ILegacyLanguageDefinition[]): void {\n\t\tthis._compatModes = this._compatModes.concat(def);\n\t\tthis._onDidAddCompatModes.fire(def);\n\t}\n\tpublic registerCompatMode(def:ILegacyLanguageDefinition): void {\n\t\tthis._compatModes.push(def);\n\t\tthis._onDidAddCompatModes.fire([def]);\n\t}\n\tpublic getCompatModes(): ILegacyLanguageDefinition[] {\n\t\treturn this._compatModes.slice(0);\n\t}\n\n\t// --- languages\n\n\tpublic registerLanguage(def:ILanguageExtensionPoint): void {\n\t\tthis._languages.push(def);\n\t\tthis._onDidAddLanguages.fire([def]);\n\t}\n\tpublic registerLanguages(def:ILanguageExtensionPoint[]): void {\n\t\tthis._languages = this._languages.concat(def);\n\t\tthis._onDidAddLanguages.fire(def);\n\t}\n\tpublic getLanguages(): ILanguageExtensionPoint[] {\n\t\treturn this._languages.slice(0);\n\t}\n}\n\nexport var ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\n\nModesRegistry.registerLanguage({\n\tid: 'plaintext',\n\textensions: ['.txt', '.gitignore'],\n\taliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n\tmimetypes: ['text/plain']\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport * as mime from 'vs/base/common/mime';\nimport * as strings from 'vs/base/common/strings';\nimport {ILegacyLanguageDefinition, ModesRegistry} from 'vs/editor/common/modes/modesRegistry';\nimport {ILanguageExtensionPoint} from 'vs/editor/common/services/modeService';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport interface ICompatModeDescriptor {\n\tmoduleId: string;\n\tctorName: string;\n}\n\nexport class LanguagesRegistry {\n\n\tprivate knownModeIds: { [id: string]: boolean; };\n\tprivate mime2LanguageId: { [mimeType: string]: string; };\n\tprivate name2LanguageId: { [name: string]: string; };\n\tprivate id2Name: { [id: string]: string; };\n\tprivate id2Extensions: { [id: string]: string[]; };\n\tprivate compatModes: { [id: string]: ICompatModeDescriptor; };\n\tprivate lowerName2Id: { [name: string]: string; };\n\tprivate id2ConfigurationFiles: { [id:string]: string[]; };\n\n\tprivate _onDidAddModes: Emitter<string[]> = new Emitter<string[]>();\n\tpublic onDidAddModes: Event<string[]> = this._onDidAddModes.event;\n\n\tconstructor(useModesRegistry = true) {\n\t\tthis.knownModeIds = {};\n\t\tthis.mime2LanguageId = {};\n\t\tthis.name2LanguageId = {};\n\t\tthis.id2Name = {};\n\t\tthis.id2Extensions = {};\n\t\tthis.compatModes = {};\n\t\tthis.lowerName2Id = {};\n\t\tthis.id2ConfigurationFiles = {};\n\n\t\tif (useModesRegistry) {\n\t\t\tthis._registerCompatModes(ModesRegistry.getCompatModes());\n\t\t\tModesRegistry.onDidAddCompatModes((m) => this._registerCompatModes(m));\n\n\t\t\tthis._registerLanguages(ModesRegistry.getLanguages());\n\t\t\tModesRegistry.onDidAddLanguages((m) => this._registerLanguages(m));\n\t\t}\n\t}\n\n\t_registerCompatModes(defs:ILegacyLanguageDefinition[]): void {\n\t\tlet addedModes: string[] = [];\n\t\tfor (let i = 0; i < defs.length; i++) {\n\t\t\tlet def = defs[i];\n\n\t\t\tthis._registerLanguage({\n\t\t\t\tid: def.id,\n\t\t\t\textensions: def.extensions,\n\t\t\t\tfilenames: def.filenames,\n\t\t\t\tfirstLine: def.firstLine,\n\t\t\t\taliases: def.aliases,\n\t\t\t\tmimetypes: def.mimetypes\n\t\t\t});\n\n\t\t\tthis.compatModes[def.id] = {\n\t\t\t\tmoduleId: def.moduleId,\n\t\t\t\tctorName: def.ctorName\n\t\t\t};\n\n\t\t\taddedModes.push(def.id);\n\t\t}\n\t\tthis._onDidAddModes.fire(addedModes);\n\t}\n\n\t_registerLanguages(desc:ILanguageExtensionPoint[]): void {\n\t\tlet addedModes: string[] = [];\n\t\tfor (let i = 0; i < desc.length; i++) {\n\t\t\tthis._registerLanguage(desc[i]);\n\t\t\taddedModes.push(desc[i].id);\n\t\t}\n\t\tthis._onDidAddModes.fire(addedModes);\n\t}\n\n\tprivate _setLanguageName(languageId:string, languageName:string, force:boolean): void {\n\t\tlet prevName = this.id2Name[languageId];\n\t\tif (prevName) {\n\t\t\tif (!force) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdelete this.name2LanguageId[prevName];\n\t\t}\n\n\t\tthis.name2LanguageId[languageName] = languageId;\n\t\tthis.id2Name[languageId] = languageName;\n\t}\n\n\tprivate _registerLanguage(lang: ILanguageExtensionPoint): void {\n\t\tthis.knownModeIds[lang.id] = true;\n\n\t\tvar primaryMime: string = null;\n\n\t\tif (typeof lang.mimetypes !== 'undefined' && Array.isArray(lang.mimetypes)) {\n\t\t\tfor (var i = 0; i < lang.mimetypes.length; i++) {\n\t\t\t\tif (!primaryMime) {\n\t\t\t\t\tprimaryMime = lang.mimetypes[i];\n\t\t\t\t}\n\t\t\t\tthis.mime2LanguageId[lang.mimetypes[i]] = lang.id;\n\t\t\t}\n\t\t}\n\n\t\tif (!primaryMime) {\n\t\t\tprimaryMime = 'text/x-' + lang.id;\n\t\t\tthis.mime2LanguageId[primaryMime] = lang.id;\n\t\t}\n\n\t\tif (Array.isArray(lang.extensions)) {\n\t\t\tthis.id2Extensions[lang.id] = this.id2Extensions[lang.id] || [];\n\t\t\tfor (let extension of lang.extensions) {\n\t\t\t\tmime.registerTextMime({ mime: primaryMime, extension: extension });\n\t\t\t\tthis.id2Extensions[lang.id].push(extension);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(lang.filenames)) {\n\t\t\tfor (let filename of lang.filenames) {\n\t\t\t\tmime.registerTextMime({ mime: primaryMime, filename: filename });\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(lang.filenamePatterns)) {\n\t\t\tfor (let filenamePattern of lang.filenamePatterns) {\n\t\t\t\tmime.registerTextMime({ mime: primaryMime, filepattern: filenamePattern });\n\t\t\t}\n\t\t}\n\n\t\tif (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n\t\t\tvar firstLineRegexStr = lang.firstLine;\n\t\t\tif (firstLineRegexStr.charAt(0) !== '^') {\n\t\t\t\tfirstLineRegexStr = '^' + firstLineRegexStr;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar firstLineRegex = new RegExp(firstLineRegexStr);\n\t\t\t\tif (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\n\t\t\t\t\tmime.registerTextMime({ mime: primaryMime, firstline: firstLineRegex });\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t// Most likely, the regex was bad\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\tthis.lowerName2Id[lang.id.toLowerCase()] = lang.id;\n\n\t\tif (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n\t\t\tfor (var i = 0; i < lang.aliases.length; i++) {\n\t\t\t\tif (!lang.aliases[i] || lang.aliases[i].length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.lowerName2Id[lang.aliases[i].toLowerCase()] = lang.id;\n\t\t\t}\n\t\t}\n\n\t\tlet containsAliases = (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases) && lang.aliases.length > 0);\n\t\tif (containsAliases && lang.aliases[0] === null) {\n\t\t\t// signal that this language should not get a name\n\t\t} else {\n\t\t\tlet bestName = (containsAliases ? lang.aliases[0] : null) || lang.id;\n\t\t\tthis._setLanguageName(lang.id, bestName, containsAliases);\n\t\t}\n\n\t\tif (typeof lang.configuration === 'string') {\n\t\t\tthis.id2ConfigurationFiles[lang.id] = this.id2ConfigurationFiles[lang.id] || [];\n\t\t\tthis.id2ConfigurationFiles[lang.id].push(lang.configuration);\n\t\t}\n\t}\n\n\tpublic isRegisteredMode(mimetypeOrModeId: string): boolean {\n\t\t// Is this a known mime type ?\n\t\tif (hasOwnProperty.call(this.mime2LanguageId, mimetypeOrModeId)) {\n\t\t\treturn true;\n\t\t}\n\t\t// Is this a known mode id ?\n\t\treturn hasOwnProperty.call(this.knownModeIds, mimetypeOrModeId);\n\t}\n\n\tpublic getRegisteredModes(): string[] {\n\t\treturn Object.keys(this.knownModeIds);\n\t}\n\n\tpublic getRegisteredLanguageNames(): string[]{\n\t\treturn Object.keys(this.name2LanguageId);\n\t}\n\n\tpublic getLanguageName(modeId: string): string {\n\t\treturn this.id2Name[modeId] || null;\n\t}\n\n\tpublic getModeIdForLanguageNameLowercase(languageNameLower: string): string {\n\t\treturn this.lowerName2Id[languageNameLower] || null;\n\t}\n\n\tpublic getConfigurationFiles(modeId: string): string[] {\n\t\treturn this.id2ConfigurationFiles[modeId] || [];\n\t}\n\n\tpublic getMimeForMode(theModeId: string): string {\n\t\tlet keys = Object.keys(this.mime2LanguageId);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet _mime = keys[i];\n\t\t\tlet modeId = this.mime2LanguageId[_mime];\n\t\t\tif (modeId === theModeId) {\n\t\t\t\treturn _mime;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIdsOrName: string): string[] {\n\t\tif (!commaSeparatedMimetypesOrCommaSeparatedIdsOrName) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn (\n\t\t\tcommaSeparatedMimetypesOrCommaSeparatedIdsOrName.\n\t\t\t\tsplit(',').\n\t\t\t\tmap((mimeTypeOrIdOrName) => mimeTypeOrIdOrName.trim()).\n\t\t\t\tmap((mimeTypeOrIdOrName) => {\n\t\t\t\t\treturn this.mime2LanguageId[mimeTypeOrIdOrName] || mimeTypeOrIdOrName;\n\t\t\t\t}).\n\t\t\t\tfilter((modeId) => {\n\t\t\t\t\treturn this.knownModeIds[modeId];\n\t\t\t\t})\n\t\t);\n\t}\n\n\tpublic getModeIdsFromLanguageName(languageName: string): string[]{\n\t\tif (!languageName) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (hasOwnProperty.call(this.name2LanguageId, languageName)) {\n\t\t\treturn [this.name2LanguageId[languageName]];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tpublic getModeIdsFromFilenameOrFirstLine(filename: string, firstLine?:string): string[] {\n\t\tif (!filename && !firstLine) {\n\t\t\treturn [];\n\t\t}\n\t\tvar mimeTypes = mime.guessMimeTypes(filename, firstLine);\n\t\treturn this.extractModeIds(mimeTypes.join(','));\n\t}\n\n\tpublic getCompatMode(modeId: string): ICompatModeDescriptor {\n\t\treturn this.compatModes[modeId] || null;\n\t}\n\n\tpublic getExtensions(languageName: string): string[] {\n\t\tlet languageId = this.name2LanguageId[languageName];\n\t\tif (!languageId) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.id2Extensions[languageId];\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport {IJSONSchema} from 'vs/base/common/jsonSchema';\nimport platform = require('vs/platform/platform');\nimport {EventEmitter} from 'vs/base/common/eventEmitter';\nimport {IDisposable} from 'vs/base/common/lifecycle';\n\nexport const Extensions = {\n\tJSONContribution: 'base.contributions.json'\n};\n\nexport interface ISchemaContributions {\n\tschemas?: { [id: string]: IJSONSchema };\n}\n\nexport interface IJSONContributionRegistry {\n\n\t/**\n\t * Register a schema to the registry.\n\t */\n\tregisterSchema(uri: string, unresolvedSchemaContent: IJSONSchema): void;\n\n\t/**\n\t * Get all schemas\n\t */\n\tgetSchemaContributions(): ISchemaContributions;\n\n\t/**\n\t * Adds a change listener\n\t */\n\taddRegistryChangedListener(callback: (e: IJSONContributionRegistryEvent) => void): IDisposable;\n\n}\n\nexport interface IJSONContributionRegistryEvent {\n\n}\n\nfunction normalizeId(id: string) {\n\tif (id.length > 0 && id.charAt(id.length - 1) === '#') {\n\t\treturn id.substring(0, id.length - 1);\n\t}\n\treturn id;\n}\n\n\n\nclass JSONContributionRegistry implements IJSONContributionRegistry {\n\tprivate schemasById: { [id: string]: IJSONSchema };\n\tprivate eventEmitter: EventEmitter;\n\n\tconstructor() {\n\t\tthis.schemasById = {};\n\t\tthis.eventEmitter = new EventEmitter();\n\t}\n\n\tpublic addRegistryChangedListener(callback: (e: IJSONContributionRegistryEvent) => void): IDisposable {\n\t\treturn this.eventEmitter.addListener2('registryChanged', callback);\n\t}\n\n\tpublic registerSchema(uri: string, unresolvedSchemaContent: IJSONSchema): void {\n\t\tthis.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n\t\tthis.eventEmitter.emit('registryChanged', {});\n\t}\n\n\tpublic getSchemaContributions(): ISchemaContributions {\n\t\treturn {\n\t\t\tschemas: this.schemasById,\n\t\t};\n\t}\n\n}\n\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n\n// preload the schema-schema with a version that contains descriptions.\njsonContributionRegistry.registerSchema('http://json-schema.org/draft-04/schema#', {\n\t'id': 'http://json-schema.org/draft-04/schema#',\n\t'title': nls.localize('schema.json', 'Describes a JSON file using a schema. See json-schema.org for more info.'),\n\t'$schema': 'http://json-schema.org/draft-04/schema#',\n\t'definitions': {\n\t\t'schemaArray': {\n\t\t\t'type': 'array',\n\t\t\t'minItems': 1,\n\t\t\t'items': { '$ref': '#' }\n\t\t},\n\t\t'positiveInteger': {\n\t\t\t'type': 'integer',\n\t\t\t'minimum': 0\n\t\t},\n\t\t'positiveIntegerDefault0': {\n\t\t\t'allOf': [{ '$ref': '#/definitions/positiveInteger' }, { 'default': 0 }]\n\t\t},\n\t\t'simpleTypes': {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']\n\t\t},\n\t\t'stringArray': {\n\t\t\t'type': 'array',\n\t\t\t'items': { 'type': 'string' },\n\t\t\t'minItems': 1,\n\t\t\t'uniqueItems': true\n\t\t}\n\t},\n\t'type': 'object',\n\t'properties': {\n\t\t'id': {\n\t\t\t'type': 'string',\n\t\t\t'format': 'uri',\n\t\t\t'description': nls.localize('schema.json.id', 'A unique identifier for the schema.')\n\t\t},\n\t\t'$schema': {\n\t\t\t'type': 'string',\n\t\t\t'format': 'uri',\n\t\t\t'description': nls.localize('schema.json.$schema', 'The schema to verify this document against ')\n\t\t},\n\t\t'title': {\n\t\t\t'type': 'string',\n\t\t\t'description': nls.localize('schema.json.title', 'A descriptive title of the element')\n\t\t},\n\t\t'description': {\n\t\t\t'type': 'string',\n\t\t\t'description': nls.localize('schema.json.description', 'A long description of the element. Used in hover menus and suggestions.')\n\t\t},\n\t\t'default': {\n\t\t\t'description': nls.localize('schema.json.default', 'A default value. Used by suggestions.')\n\t\t},\n\t\t'multipleOf': {\n\t\t\t'type': 'number',\n\t\t\t'minimum': 0,\n\t\t\t'exclusiveMinimum': true,\n\t\t\t'description': nls.localize('schema.json.multipleOf', 'A number that should cleanly divide the current value (i.e. have no remainder)')\n\t\t},\n\t\t'maximum': {\n\t\t\t'type': 'number',\n\t\t\t'description': nls.localize('schema.json.maximum', 'The maximum numerical value, inclusive by default.')\n\t\t},\n\t\t'exclusiveMaximum': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('schema.json.exclusiveMaximum', 'Makes the maximum property exclusive.')\n\t\t},\n\t\t'minimum': {\n\t\t\t'type': 'number',\n\t\t\t'description': nls.localize('schema.json.minimum', 'The minimum numerical value, inclusive by default.')\n\t\t},\n\t\t'exclusiveMinimum': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('schema.json.exclusiveMininum', 'Makes the minimum property exclusive.')\n\t\t},\n\t\t'maxLength': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/positiveInteger' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.maxLength', 'The maximum length of a string.')\n\t\t},\n\t\t'minLength': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/positiveIntegerDefault0' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.minLength', 'The minimum length of a string.')\n\t\t},\n\t\t'pattern': {\n\t\t\t'type': 'string',\n\t\t\t'format': 'regex',\n\t\t\t'description': nls.localize('schema.json.pattern', 'A regular expression to match the string against. It is not implicitly anchored.')\n\t\t},\n\t\t'additionalItems': {\n\t\t\t'anyOf': [\n\t\t\t\t{ 'type': 'boolean' },\n\t\t\t\t{ '$ref': '#' }\n\t\t\t],\n\t\t\t'default': {},\n\t\t\t'description': nls.localize('schema.json.additionalItems', 'For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail.')\n\t\t},\n\t\t'items': {\n\t\t\t'anyOf': [\n\t\t\t\t{ '$ref': '#' },\n\t\t\t\t{ '$ref': '#/definitions/schemaArray' }\n\t\t\t],\n\t\t\t'default': {},\n\t\t\t'description': nls.localize('schema.json.items', 'For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on.')\n\t\t},\n\t\t'maxItems': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/positiveInteger' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.maxItems', 'The maximum number of items that can be inside an array. Inclusive.')\n\t\t},\n\t\t'minItems': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/positiveIntegerDefault0' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.minItems', 'The minimum number of items that can be inside an array. Inclusive.')\n\t\t},\n\t\t'uniqueItems': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': nls.localize('schema.json.uniqueItems', 'If all of the items in the array must be unique. Defaults to false.')\n\t\t},\n\t\t'maxProperties': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/positiveInteger' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.maxProperties', 'The maximum number of properties an object can have. Inclusive.')\n\t\t},\n\t\t'minProperties': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/positiveIntegerDefault0' },\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.minProperties', 'The minimum number of properties an object can have. Inclusive.')\n\t\t},\n\t\t'required': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/stringArray' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.required', 'An array of strings that lists the names of all properties required on this object.')\n\t\t},\n\t\t'additionalProperties': {\n\t\t\t'anyOf': [\n\t\t\t\t{ 'type': 'boolean' },\n\t\t\t\t{ '$ref': '#' }\n\t\t\t],\n\t\t\t'default': {},\n\t\t\t'description': nls.localize('schema.json.additionalProperties', 'Either a schema or a boolean. If a schema, then used to validate all properties not matched by \\'properties\\' or \\'patternProperties\\'. If false, then any properties not matched by either will cause this schema to fail.')\n\t\t},\n\t\t'definitions': {\n\t\t\t'type': 'object',\n\t\t\t'additionalProperties': { '$ref': '#' },\n\t\t\t'default': {},\n\t\t\t'description': nls.localize('schema.json.definitions', 'Not used for validation. Place subschemas here that you wish to reference inline with $ref')\n\t\t},\n\t\t'properties': {\n\t\t\t'type': 'object',\n\t\t\t'additionalProperties': { '$ref': '#' },\n\t\t\t'default': {},\n\t\t\t'description': nls.localize('schema.json.properties', 'A map of property names to schemas for each property.')\n\t\t},\n\t\t'patternProperties': {\n\t\t\t'type': 'object',\n\t\t\t'additionalProperties': { '$ref': '#' },\n\t\t\t'default': {},\n\t\t\t'description': nls.localize('schema.json.patternProperties', 'A map of regular expressions on property names to schemas for matching properties.')\n\t\t},\n\t\t'dependencies': {\n\t\t\t'type': 'object',\n\t\t\t'additionalProperties': {\n\t\t\t\t'anyOf': [\n\t\t\t\t\t{ '$ref': '#' },\n\t\t\t\t\t{ '$ref': '#/definitions/stringArray' }\n\t\t\t\t]\n\t\t\t},\n\t\t\t'description': nls.localize('schema.json.dependencies', 'A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object.')\n\t\t},\n\t\t'enum': {\n\t\t\t'type': 'array',\n\t\t\t'minItems': 1,\n\t\t\t'uniqueItems': true,\n\t\t\t'description': nls.localize('schema.json.enum', 'The set of literal values that are valid')\n\t\t},\n\t\t'type': {\n\t\t\t'anyOf': [\n\t\t\t\t{ '$ref': '#/definitions/simpleTypes' },\n\t\t\t\t{\n\t\t\t\t\t'type': 'array',\n\t\t\t\t\t'items': { '$ref': '#/definitions/simpleTypes' },\n\t\t\t\t\t'minItems': 1,\n\t\t\t\t\t'uniqueItems': true\n\t\t\t\t}\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.type', 'Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types.')\n\t\t},\n\t\t'format': {\n\t\t\t'anyOf': [\n\t\t\t\t{\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'description': nls.localize('schema.json.format', 'Describes the format expected for the value.'),\n\t\t\t\t\t'enum': ['date-time', 'uri', 'email', 'hostname', 'ipv4', 'ipv6', 'regex']\n\t\t\t\t}, {\n\t\t\t\t\t'type': 'string'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t'allOf': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/schemaArray' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.allOf', 'An array of schemas, all of which must match.')\n\t\t},\n\t\t'anyOf': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/schemaArray' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.anyOf', 'An array of schemas, where at least one must match.')\n\t\t},\n\t\t'oneOf': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#/definitions/schemaArray' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.oneOf', 'An array of schemas, exactly one of which must match.')\n\t\t},\n\t\t'not': {\n\t\t\t'allOf': [\n\t\t\t\t{ '$ref': '#' }\n\t\t\t],\n\t\t\t'description': nls.localize('schema.json.not', 'A schema which must not match.')\n\t\t}\n\t},\n\t'dependencies': {\n\t\t'exclusiveMaximum': ['maximum'],\n\t\t'exclusiveMinimum': ['minimum']\n\t},\n\t'default': {}\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport {IJSONSchema} from 'vs/base/common/jsonSchema';\nimport * as paths from 'vs/base/common/paths';\nimport Severity from 'vs/base/common/severity';\nimport {IActivationEventListener, IMessage, IExtensionDescription, IPointListener} from 'vs/platform/extensions/common/extensions';\nimport {Extensions, IJSONContributionRegistry} from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport {Registry} from 'vs/platform/platform';\n\nexport interface IExtensionMessageCollector {\n\terror(message: string): void;\n\twarn(message: string): void;\n\tinfo(message: string): void;\n}\n\nclass ExtensionMessageCollector implements IExtensionMessageCollector {\n\n\tprivate _messageHandler: (msg:IMessage)=>void;\n\tprivate _source: string;\n\n\tconstructor(messageHandler: (msg:IMessage)=>void, source:string) {\n\t\tthis._messageHandler = messageHandler;\n\t\tthis._source = source;\n\t}\n\n\tprivate _msg(type:Severity, message:string): void {\n\t\tthis._messageHandler({\n\t\t\ttype: type,\n\t\t\tmessage: message,\n\t\t\tsource: this._source\n\t\t});\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._msg(Severity.Error, message);\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._msg(Severity.Warning, message);\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._msg(Severity.Info, message);\n\t}\n\n}\n\nexport function isValidExtensionDescription(extensionFolderPath: string, extensionDescription: IExtensionDescription, notices: string[]): boolean {\n\tif (!extensionDescription) {\n\t\tnotices.push(nls.localize('extensionDescription.empty', \"Got empty extension description\"));\n\t\treturn false;\n\t}\n\tif (typeof extensionDescription.publisher !== 'string') {\n\t\tnotices.push(nls.localize('extensionDescription.publisher', \"property `{0}` is mandatory and must be of type `string`\", 'publisher'));\n\t\treturn false;\n\t}\n\tif (typeof extensionDescription.name !== 'string') {\n\t\tnotices.push(nls.localize('extensionDescription.name', \"property `{0}` is mandatory and must be of type `string`\", 'name'));\n\t\treturn false;\n\t}\n\tif (typeof extensionDescription.version !== 'string') {\n\t\tnotices.push(nls.localize('extensionDescription.version', \"property `{0}` is mandatory and must be of type `string`\", 'version'));\n\t\treturn false;\n\t}\n\tif (!extensionDescription.engines) {\n\t\tnotices.push(nls.localize('extensionDescription.engines', \"property `{0}` is mandatory and must be of type `object`\", 'engines'));\n\t\treturn false;\n\t}\n\tif (typeof extensionDescription.engines.vscode !== 'string') {\n\t\tnotices.push(nls.localize('extensionDescription.engines.vscode', \"property `{0}` is mandatory and must be of type `string`\", 'engines.vscode'));\n\t\treturn false;\n\t}\n\tif (typeof extensionDescription.extensionDependencies !== 'undefined') {\n\t\tif (!_isStringArray(extensionDescription.extensionDependencies)) {\n\t\t\tnotices.push(nls.localize('extensionDescription.extensionDependencies', \"property `{0}` can be omitted or must be of type `string[]`\", 'extensionDependencies'));\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (typeof extensionDescription.activationEvents !== 'undefined') {\n\t\tif (!_isStringArray(extensionDescription.activationEvents)) {\n\t\t\tnotices.push(nls.localize('extensionDescription.activationEvents1', \"property `{0}` can be omitted or must be of type `string[]`\", 'activationEvents'));\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof extensionDescription.main === 'undefined') {\n\t\t\tnotices.push(nls.localize('extensionDescription.activationEvents2', \"properties `{0}` and `{1}` must both be specified or must both be omitted\", 'activationEvents', 'main'));\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (typeof extensionDescription.main !== 'undefined') {\n\t\tif (typeof extensionDescription.main !== 'string') {\n\t\t\tnotices.push(nls.localize('extensionDescription.main1', \"property `{0}` can be omitted or must be of type `string`\", 'main'));\n\t\t\treturn false;\n\t\t} else {\n\t\t\tlet normalizedAbsolutePath = paths.normalize(paths.join(extensionFolderPath, extensionDescription.main));\n\n\t\t\tif (normalizedAbsolutePath.indexOf(extensionFolderPath)) {\n\t\t\t\tnotices.push(nls.localize('extensionDescription.main2', \"Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.\", normalizedAbsolutePath, extensionFolderPath));\n\t\t\t\t// not a failure case\n\t\t\t}\n\t\t}\n\t\tif (typeof extensionDescription.activationEvents === 'undefined') {\n\t\t\tnotices.push(nls.localize('extensionDescription.main3', \"properties `{0}` and `{1}` must both be specified or must both be omitted\", 'activationEvents', 'main'));\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ninterface IExtensionDescriptionMap {\n\t[extensionId: string]: IExtensionDescription;\n}\nconst hasOwnProperty = Object.hasOwnProperty;\nlet schemaRegistry = <IJSONContributionRegistry>Registry.as(Extensions.JSONContribution);\n\nexport interface IExtensionPointUser<T> {\n\tdescription: IExtensionDescription;\n\tvalue: T;\n\tcollector: IExtensionMessageCollector;\n}\n\nexport interface IExtensionPointHandler<T> {\n\t(extensions: IExtensionPointUser<T>[]): void;\n}\n\nexport interface IExtensionPoint<T> {\n\tname: string;\n\tsetHandler(handler: IExtensionPointHandler<T>): void;\n}\n\nexport interface IExtensionsRegistry {\n\tregisterExtensions(extensionDescriptions: IExtensionDescription[]): void;\n\n\tgetExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[];\n\tgetAllExtensionDescriptions(): IExtensionDescription[];\n\tgetExtensionDescription(extensionId: string): IExtensionDescription;\n\n\tregisterOneTimeActivationEventListener(activationEvent: string, listener: IActivationEventListener): void;\n\ttriggerActivationEventListeners(activationEvent: string): void;\n\n\tregisterExtensionPoint<T>(extensionPoint: string, jsonSchema: IJSONSchema): IExtensionPoint<T>;\n\thandleExtensionPoints(messageHandler: (msg:IMessage)=>void): void;\n}\n\nclass ExtensionPoint<T> implements IExtensionPoint<T> {\n\n\tpublic name: string;\n\tprivate _registry: ExtensionsRegistryImpl;\n\tprivate _handler: IExtensionPointHandler<T>;\n\tprivate _messageHandler: (msg:IMessage)=>void;\n\n\tconstructor(name: string, registry: ExtensionsRegistryImpl) {\n\t\tthis.name = name;\n\t\tthis._registry = registry;\n\t\tthis._handler = null;\n\t\tthis._messageHandler = null;\n\t}\n\n\tsetHandler(handler: IExtensionPointHandler<T>): void {\n\t\tif (this._handler) {\n\t\t\tthrow new Error('Handler already set!');\n\t\t}\n\t\tthis._handler = handler;\n\t\tthis._handle();\n\t}\n\n\thandle(messageHandler: (msg:IMessage)=>void): void {\n\t\tthis._messageHandler = messageHandler;\n\t\tthis._handle();\n\t}\n\n\tprivate _handle(): void {\n\t\tif (!this._handler || !this._messageHandler) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._registry.registerPointListener(this.name, (descriptions: IExtensionDescription[]) => {\n\t\t\tlet users = descriptions.map((desc) => {\n\t\t\t\treturn {\n\t\t\t\t\tdescription: desc,\n\t\t\t\t\tvalue: desc.contributes[this.name],\n\t\t\t\t\tcollector: new ExtensionMessageCollector(this._messageHandler, desc.extensionFolderPath)\n\t\t\t\t};\n\t\t\t});\n\t\t\tthis._handler(users);\n\t\t});\n\t}\n}\n\n\n\nconst schemaId = 'vscode://schemas/vscode-extensions';\nconst schema: IJSONSchema = {\n\tdefault: {\n\t\t'name': '{{name}}',\n\t\t'description': '{{description}}',\n\t\t'author': '{{author}}',\n\t\t'version': '{{1.0.0}}',\n\t\t'main': '{{pathToMain}}',\n\t\t'dependencies': {}\n\t},\n\tproperties: {\n\t\t// engines: {\n\t\t// \trequired: [ 'vscode' ],\n\t\t// \tproperties: {\n\t\t// \t\t'vscode': {\n\t\t// \t\t\ttype: 'string',\n\t\t// \t\t\tdescription: nls.localize('vscode.extension.engines.vscode', 'Specifies that this package only runs inside VSCode of the given version.'),\n\t\t// \t\t}\n\t\t// \t}\n\t\t// },\n\t\tdisplayName: {\n\t\t\tdescription: nls.localize('vscode.extension.displayName', 'The display name for the extension used in the VS Code gallery.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tcategories: {\n\t\t\tdescription: nls.localize('vscode.extension.categories', 'The categories used by the VS Code gallery to categorize the extension.'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: ['Languages', 'Snippets', 'Linters', 'Themes', 'Debuggers', 'Other']\n\t\t\t}\n\t\t},\n\t\tgalleryBanner: {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('vscode.extension.galleryBanner', 'Banner used in the VS Code marketplace.'),\n\t\t\tproperties: {\n\t\t\t\tcolor: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.galleryBanner.color', 'The banner color on the VS Code marketplace page header.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\ttheme: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.galleryBanner.theme', 'The color theme for the font used in the banner.'),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['dark', 'light']\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tpublisher: {\n\t\t\tdescription: nls.localize('vscode.extension.publisher', 'The publisher of the VS Code extension.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tactivationEvents: {\n\t\t\tdescription: nls.localize('vscode.extension.activationEvents', 'Activation events for the VS Code extension.'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\textensionDependencies: {\n\t\t\tdescription: nls.localize('vscode.extension.extensionDependencies', 'Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\tscripts: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\t'vscode:prepublish': {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.scripts.prepublish', 'Script executed before the package is published as a VS Code extension.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcontributes: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes', 'All contributions of the VS Code extension represented by this package.'),\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\t// extensions will fill in\n\t\t\t},\n\t\t\tdefault: {}\n\t\t}\n\t}\n};\n\ninterface IPointListenerEntry {\n\textensionPoint: string;\n\tlistener: IPointListener;\n}\n\nclass ExtensionsRegistryImpl implements IExtensionsRegistry {\n\n\tprivate _extensionsMap: IExtensionDescriptionMap;\n\tprivate _extensionsArr: IExtensionDescription[];\n\tprivate _activationMap: { [activationEvent: string]: IExtensionDescription[]; };\n\tprivate _pointListeners: IPointListenerEntry[];\n\tprivate _oneTimeActivationEventListeners: { [activationEvent: string]: IActivationEventListener[]; };\n\tprivate _extensionPoints: { [extPoint: string]: ExtensionPoint<any>; };\n\n\tconstructor() {\n\t\tthis._extensionsMap = {};\n\t\tthis._extensionsArr = [];\n\t\tthis._activationMap = {};\n\t\tthis._pointListeners = [];\n\t\tthis._extensionPoints = {};\n\t\tthis._oneTimeActivationEventListeners = {};\n\t}\n\n\tpublic registerPointListener(point: string, handler: IPointListener): void {\n\t\tlet entry = {\n\t\t\textensionPoint: point,\n\t\t\tlistener: handler\n\t\t};\n\t\tthis._pointListeners.push(entry);\n\t\tthis._triggerPointListener(entry, ExtensionsRegistryImpl._filterWithExtPoint(this.getAllExtensionDescriptions(), point));\n\t}\n\n\tpublic registerExtensionPoint<T>(extensionPoint: string, jsonSchema: IJSONSchema): IExtensionPoint<T> {\n\t\tif (hasOwnProperty.call(this._extensionPoints, extensionPoint)) {\n\t\t\tthrow new Error('Duplicate extension point: ' + extensionPoint);\n\t\t}\n\t\tlet result = new ExtensionPoint<T>(extensionPoint, this);\n\t\tthis._extensionPoints[extensionPoint] = result;\n\n\t\tschema.properties['contributes'].properties[extensionPoint] = jsonSchema;\n\t\tschemaRegistry.registerSchema(schemaId, schema);\n\n\t\treturn result;\n\t}\n\n\tpublic handleExtensionPoints(messageHandler: (msg:IMessage)=>void): void {\n\t\tObject.keys(this._extensionPoints).forEach((extensionPointName) => {\n\t\t\tthis._extensionPoints[extensionPointName].handle(messageHandler);\n\t\t});\n\t}\n\n\tprivate _triggerPointListener(handler: IPointListenerEntry, desc: IExtensionDescription[]): void {\n\t\t// console.log('_triggerPointListeners: ' + desc.length + ' OF ' + handler.extensionPoint);\n\t\tif (!desc || desc.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\thandler.listener(desc);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\t}\n\n\tpublic registerExtensions(extensionDescriptions: IExtensionDescription[]): void {\n\t\tfor (let i = 0, len = extensionDescriptions.length; i < len; i++) {\n\t\t\tlet extensionDescription = extensionDescriptions[i];\n\n\t\t\tif (hasOwnProperty.call(this._extensionsMap, extensionDescription.id)) {\n\t\t\t\t// No overwriting allowed!\n\t\t\t\tconsole.error('Extension `' + extensionDescription.id + '` is already registered');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._extensionsMap[extensionDescription.id] = extensionDescription;\n\t\t\tthis._extensionsArr.push(extensionDescription);\n\n\t\t\tif (Array.isArray(extensionDescription.activationEvents)) {\n\t\t\t\tfor (let j = 0, lenJ = extensionDescription.activationEvents.length; j < lenJ; j++) {\n\t\t\t\t\tlet activationEvent = extensionDescription.activationEvents[j];\n\t\t\t\t\tthis._activationMap[activationEvent] = this._activationMap[activationEvent] || [];\n\t\t\t\t\tthis._activationMap[activationEvent].push(extensionDescription);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, len = this._pointListeners.length; i < len; i++) {\n\t\t\tlet listenerEntry = this._pointListeners[i];\n\t\t\tlet descriptions = ExtensionsRegistryImpl._filterWithExtPoint(extensionDescriptions, listenerEntry.extensionPoint);\n\t\t\tthis._triggerPointListener(listenerEntry, descriptions);\n\t\t}\n\t}\n\n\tprivate static _filterWithExtPoint(input: IExtensionDescription[], point: string): IExtensionDescription[] {\n\t\treturn input.filter((desc) => {\n\t\t\treturn (desc.contributes && hasOwnProperty.call(desc.contributes, point));\n\t\t});\n\t}\n\n\tpublic getExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[] {\n\t\tif (!hasOwnProperty.call(this._activationMap, activationEvent)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._activationMap[activationEvent].slice(0);\n\t}\n\n\tpublic getAllExtensionDescriptions(): IExtensionDescription[] {\n\t\treturn this._extensionsArr.slice(0);\n\t}\n\n\tpublic getExtensionDescription(extensionId: string): IExtensionDescription {\n\t\tif (!hasOwnProperty.call(this._extensionsMap, extensionId)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._extensionsMap[extensionId];\n\t}\n\n\tpublic registerOneTimeActivationEventListener(activationEvent: string, listener: IActivationEventListener): void {\n\t\tif (!hasOwnProperty.call(this._oneTimeActivationEventListeners, activationEvent)) {\n\t\t\tthis._oneTimeActivationEventListeners[activationEvent] = [];\n\t\t}\n\t\tthis._oneTimeActivationEventListeners[activationEvent].push(listener);\n\t}\n\n\tpublic triggerActivationEventListeners(activationEvent: string): void {\n\t\tif (hasOwnProperty.call(this._oneTimeActivationEventListeners, activationEvent)) {\n\t\t\tlet listeners = this._oneTimeActivationEventListeners[activationEvent];\n\t\t\tdelete this._oneTimeActivationEventListeners[activationEvent];\n\n\t\t\tfor (let i = 0, len = listeners.length; i < len; i++) {\n\t\t\t\tlet listener = listeners[i];\n\t\t\t\ttry {\n\t\t\t\t\tlistener();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tonUnexpectedError(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunction _isStringArray(arr: string[]): boolean {\n\tif (!Array.isArray(arr)) {\n\t\treturn false;\n\t}\n\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\tif (typeof arr[i] !== 'string') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst PRExtensions = {\n\tExtensionsRegistry: 'ExtensionsRegistry'\n};\nRegistry.add(PRExtensions.ExtensionsRegistry, new ExtensionsRegistryImpl());\nexport const ExtensionsRegistry: IExtensionsRegistry = Registry.as(PRExtensions.ExtensionsRegistry);\n\nschemaRegistry.registerSchema(schemaId, schema);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport Event, {Emitter} from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport platform = require('vs/platform/platform');\nimport objects = require('vs/base/common/objects');\nimport {ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport JSONContributionRegistry = require('vs/platform/jsonschemas/common/jsonContributionRegistry');\n\n\nexport const Extensions = {\n\tConfiguration: 'base.contributions.configuration'\n};\n\nexport interface IConfigurationRegistry {\n\n\t/**\n\t * Register a configuration to the registry.\n\t */\n\tregisterConfiguration(configuration: IConfigurationNode): void;\n\n\t/**\n\t * Event that fires whenver a configuratio has been\n\t * registered.\n\t */\n\tonDidRegisterConfiguration: Event<IConfigurationRegistry>;\n\n\t/**\n\t * Returns all configurations contributed to this registry.\n\t */\n\tgetConfigurations(): IConfigurationNode[];\n}\n\nexport interface IConfigurationNode {\n\tid?: string;\n\torder?: number;\n\ttype?: string | string[];\n\ttitle?: string;\n\tdescription?: string;\n\tdefault?: any;\n\tproperties?: { [path: string]: IJSONSchema; };\n\tallOf?: IJSONSchema[];\n\tdefinitions?: { [path: string]: IJSONSchema; };\n}\n\nconst schemaId = 'vscode://schemas/settings';\nconst contributionRegistry = <JSONContributionRegistry.IJSONContributionRegistry>platform.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\n\nclass ConfigurationRegistry implements IConfigurationRegistry {\n\tprivate configurationContributors: IConfigurationNode[];\n\tprivate configurationSchema: IJSONSchema;\n\tprivate _onDidRegisterConfiguration: Emitter<IConfigurationRegistry>;\n\n\tconstructor() {\n\t\tthis.configurationContributors = [];\n\t\tthis.configurationSchema = { allOf: [] };\n\t\tthis._onDidRegisterConfiguration = new Emitter<IConfigurationRegistry>();\n\n\t\tcontributionRegistry.registerSchema(schemaId, this.configurationSchema);\n\t}\n\n\tpublic get onDidRegisterConfiguration() {\n\t\treturn this._onDidRegisterConfiguration.event;\n\t}\n\n\tpublic registerConfiguration(configuration: IConfigurationNode): void {\n\t\tthis.configurationContributors.push(configuration);\n\n\t\tthis.registerJSONConfiguration(configuration);\n\t\tthis._onDidRegisterConfiguration.fire(this);\n\t}\n\n\tpublic getConfigurations(): IConfigurationNode[] {\n\t\treturn this.configurationContributors.slice(0);\n\t}\n\n\tprivate registerJSONConfiguration(configuration: IConfigurationNode) {\n\t\tlet schema = <IJSONSchema>objects.clone(configuration);\n\t\tthis.configurationSchema.allOf.push(schema);\n\t\tcontributionRegistry.registerSchema(schemaId, this.configurationSchema);\n\t}\n}\n\nconst configurationRegistry = new ConfigurationRegistry();\nplatform.Registry.add(Extensions.Configuration, configurationRegistry);\n\nlet configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IConfigurationNode>('configuration', {\n\tdescription: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),\n\ttype: 'object',\n\tdefaultSnippets: [{ body: { title: '', properties: {} } }],\n\tproperties: {\n\t\ttitle: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.title', 'A summary of the settings. This label will be used in the settings file as separating comment.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tproperties: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: {\n\t\t\t\t$ref: 'http://json-schema.org/draft-04/schema#'\n\t\t\t}\n\t\t}\n\t}\n});\n\nconfigurationExtPoint.setHandler((extensions) => {\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet configuration = <IConfigurationNode>extensions[i].value;\n\t\tlet collector = extensions[i].collector;\n\n\t\tif (configuration.type && configuration.type !== 'object') {\n\t\t\tcollector.warn(nls.localize('invalid.type', \"if set, 'configuration.type' must be set to 'object\"));\n\t\t} else {\n\t\t\tconfiguration.type = 'object';\n\t\t}\n\n\t\tif (configuration.title && (typeof configuration.title !== 'string')) {\n\t\t\tcollector.error(nls.localize('invalid.title', \"'configuration.title' must be a string\"));\n\t\t}\n\n\t\tif (configuration.properties && (typeof configuration.properties !== 'object')) {\n\t\t\tcollector.error(nls.localize('invalid.properties', \"'configuration.properties' must be an object\"));\n\t\t\treturn;\n\t\t}\n\t\tlet clonedConfiguration = objects.clone(configuration);\n\t\tclonedConfiguration.id = extensions[i].description.id;\n\t\tconfigurationRegistry.registerConfiguration(clonedConfiguration);\n\t}\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IReadOnlyModel} from 'vs/editor/common/editorCommon';\nimport {ISuggestResult, ISuggestSupport} from 'vs/editor/common/modes';\nimport {IFilter, matchesStrictPrefix, fuzzyContiguousFilter} from 'vs/base/common/filters';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IConfigurationRegistry, Extensions} from 'vs/platform/configuration/common/configurationRegistry';\nimport {Registry} from 'vs/platform/platform';\nimport {localize} from 'vs/nls';\nimport {CancellationToken} from 'vs/base/common/cancellation';\nimport {wireCancellationToken} from 'vs/base/common/async';\nimport {Position} from 'vs/editor/common/core/position';\n\nexport class TextualSuggestSupport implements ISuggestSupport {\n\n\t/* tslint:disable */\n\tprivate static _c = Registry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t'editor.wordBasedSuggestions': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': localize('editor.wordBasedSuggestions', \"Enable word based suggestions.\"),\n\t\t\t\t'default': true\n\t\t\t}\n\t\t}\n\t});\n\t/* tslint:enable */\n\n\tpublic get triggerCharacters(): string[] {\n\t\treturn [];\n\t}\n\n\tpublic get shouldAutotriggerSuggest(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic get filter(): IFilter {\n\t\treturn matchesStrictPrefix;\n\t}\n\n\tprivate _editorWorkerService: IEditorWorkerService;\n\tprivate _configurationService: IConfigurationService;\n\n\tconstructor(editorWorkerService: IEditorWorkerService, configurationService: IConfigurationService) {\n\t\tthis._editorWorkerService = editorWorkerService;\n\t\tthis._configurationService = configurationService;\n\t}\n\n\tpublic provideCompletionItems(model:IReadOnlyModel, position:Position, token:CancellationToken): ISuggestResult[] | Thenable<ISuggestResult[]> {\n\t\tlet config = this._configurationService.getConfiguration<{ wordBasedSuggestions: boolean }>('editor');\n\t\tif (!config || config.wordBasedSuggestions) {\n\t\t\treturn wireCancellationToken(token, this._editorWorkerService.textualSuggest(model.uri, position));\n\t\t}\n\t\treturn <ISuggestResult[]>[];\n\t}\n}\n\nexport function filterSuggestions(value: ISuggestResult): ISuggestResult[] {\n\tif (!value) {\n\t\treturn;\n\t}\n\t// filter suggestions\n\tvar accept = fuzzyContiguousFilter,\n\t\tresult: ISuggestResult[] = [];\n\n\tresult.push({\n\t\tcurrentWord: value.currentWord,\n\t\tsuggestions: value.suggestions.filter((element) => !!accept(value.currentWord, element.label)),\n\t\tincomplete: value.incomplete\n\t});\n\n\treturn result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {EventEmitter} from 'vs/base/common/eventEmitter';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {AsyncDescriptor1, createAsyncDescriptor1} from 'vs/platform/instantiation/common/descriptors';\nimport {IInstantiationService, optional} from 'vs/platform/instantiation/common/instantiation';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IModeSupportChangedEvent} from 'vs/editor/common/editorCommon';\nimport * as modes from 'vs/editor/common/modes';\nimport {NullMode} from 'vs/editor/common/modes/nullMode';\nimport {TextualSuggestSupport} from 'vs/editor/common/modes/supports/suggestSupport';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\n\nexport function createWordRegExp(allowInWords:string = ''): RegExp {\n\treturn NullMode.createWordRegExp(allowInWords);\n}\n\nexport class ModeWorkerManager<W> {\n\n\tprivate _descriptor: modes.IModeDescriptor;\n\tprivate _workerDescriptor: AsyncDescriptor1<string, W>;\n\tprivate _superWorkerModuleId: string;\n\tprivate _instantiationService: IInstantiationService;\n\tprivate _workerPiecePromise:TPromise<W>;\n\n\tconstructor(\n\t\tdescriptor:modes.IModeDescriptor,\n\t\tworkerModuleId:string,\n\t\tworkerClassName:string,\n\t\tsuperWorkerModuleId:string,\n\t\tinstantiationService: IInstantiationService\n\t) {\n\t\tthis._descriptor = descriptor;\n\t\tthis._workerDescriptor = createAsyncDescriptor1(workerModuleId, workerClassName);\n\t\tthis._superWorkerModuleId = superWorkerModuleId;\n\t\tthis._instantiationService = instantiationService;\n\t\tthis._workerPiecePromise = null;\n\t}\n\n\tpublic worker<T>(runner:(worker:W)=>TPromise<T>): TPromise<T>\n\tpublic worker<T>(runner:(worker:W)=>T): TPromise<T> {\n\t\treturn this._getOrCreateWorker().then(runner);\n\t}\n\n\tprivate _getOrCreateWorker(): TPromise<W> {\n\t\tif (!this._workerPiecePromise) {\n\t\t\t// TODO@Alex: workaround for missing `bundles` config\n\n\t\t\t// First, load the code of the worker super class\n\t\t\tlet superWorkerCodePromise = (this._superWorkerModuleId ? ModeWorkerManager._loadModule(this._superWorkerModuleId) : TPromise.as(null));\n\n\t\t\tthis._workerPiecePromise = superWorkerCodePromise.then(() => {\n\t\t\t\t// Second, load the code of the worker (without instantiating it)\n\t\t\t\treturn ModeWorkerManager._loadModule(this._workerDescriptor.moduleName);\n\t\t\t}).then(() => {\n\t\t\t\t// Finally, create the mode worker instance\n\t\t\t\treturn this._instantiationService.createInstance<string, W>(this._workerDescriptor, this._descriptor.id);\n\t\t\t});\n\t\t}\n\n\t\treturn this._workerPiecePromise;\n\t}\n\n\tprivate static _loadModule(moduleName:string): TPromise<any> {\n\t\treturn new TPromise((c, e, p) => {\n\t\t\trequire([moduleName], c, e);\n\t\t}, () => {\n\t\t\t// Cannot cancel loading code\n\t\t});\n\t}\n}\n\nexport abstract class AbstractMode implements modes.IMode {\n\n\tprivate _modeId: string;\n\tprivate _eventEmitter: EventEmitter;\n\tprivate _simplifiedMode: modes.IMode;\n\n\tconstructor(modeId:string) {\n\t\tthis._modeId = modeId;\n\t\tthis._eventEmitter = new EventEmitter();\n\t\tthis._simplifiedMode = null;\n\t}\n\n\tpublic getId(): string {\n\t\treturn this._modeId;\n\t}\n\n\tpublic toSimplifiedMode(): modes.IMode {\n\t\tif (!this._simplifiedMode) {\n\t\t\tthis._simplifiedMode = new SimplifiedMode(this);\n\t\t}\n\t\treturn this._simplifiedMode;\n\t}\n\n\tpublic addSupportChangedListener(callback: (e: IModeSupportChangedEvent) => void) : IDisposable {\n\t\treturn this._eventEmitter.addListener2('modeSupportChanged', callback);\n\t}\n\n\tpublic registerSupport<T>(supportEnum:modes.MutableSupport, callback:(mode:modes.IMode) => T) : IDisposable {\n\t\tlet supportStr = modes.mutableSupportToString(supportEnum);\n\t\tvar supportImpl = callback(this);\n\t\tthis[supportStr] = supportImpl;\n\t\tthis._eventEmitter.emit('modeSupportChanged', _createModeSupportChangedEvent(supportEnum));\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tif (this[supportStr] === supportImpl) {\n\t\t\t\t\tdelete this[supportStr];\n\t\t\t\t\tthis._eventEmitter.emit('modeSupportChanged', _createModeSupportChangedEvent(supportEnum));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass SimplifiedMode implements modes.IMode {\n\n\ttokenizationSupport: modes.ITokenizationSupport;\n\trichEditSupport: modes.IRichEditSupport;\n\n\tprivate _sourceMode: modes.IMode;\n\tprivate _eventEmitter: EventEmitter;\n\tprivate _id: string;\n\n\tconstructor(sourceMode: modes.IMode) {\n\t\tthis._sourceMode = sourceMode;\n\t\tthis._eventEmitter = new EventEmitter();\n\t\tthis._id = 'vs.editor.modes.simplifiedMode:' + sourceMode.getId();\n\t\tthis._assignSupports();\n\n\t\tif (this._sourceMode.addSupportChangedListener) {\n\t\t\tthis._sourceMode.addSupportChangedListener((e) => {\n\t\t\t\tthis._assignSupports();\n\t\t\t\tthis._eventEmitter.emit('modeSupportChanged', e);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic toSimplifiedMode(): modes.IMode {\n\t\treturn this;\n\t}\n\n\tprivate _assignSupports(): void {\n\t\tthis.tokenizationSupport = this._sourceMode.tokenizationSupport;\n\t\tthis.richEditSupport = this._sourceMode.richEditSupport;\n\t}\n}\n\nexport var isDigit:(character:string, base:number)=>boolean = (function () {\n\n\tvar _0 = '0'.charCodeAt(0),\n\t\t_1 = '1'.charCodeAt(0),\n\t\t_2 = '2'.charCodeAt(0),\n\t\t_3 = '3'.charCodeAt(0),\n\t\t_4 = '4'.charCodeAt(0),\n\t\t_5 = '5'.charCodeAt(0),\n\t\t_6 = '6'.charCodeAt(0),\n\t\t_7 = '7'.charCodeAt(0),\n\t\t_8 = '8'.charCodeAt(0),\n\t\t_9 = '9'.charCodeAt(0),\n\t\t_a = 'a'.charCodeAt(0),\n\t\t_b = 'b'.charCodeAt(0),\n\t\t_c = 'c'.charCodeAt(0),\n\t\t_d = 'd'.charCodeAt(0),\n\t\t_e = 'e'.charCodeAt(0),\n\t\t_f = 'f'.charCodeAt(0),\n\t\t_A = 'A'.charCodeAt(0),\n\t\t_B = 'B'.charCodeAt(0),\n\t\t_C = 'C'.charCodeAt(0),\n\t\t_D = 'D'.charCodeAt(0),\n\t\t_E = 'E'.charCodeAt(0),\n\t\t_F = 'F'.charCodeAt(0);\n\n\treturn function isDigit(character:string, base:number):boolean {\n\t\tvar c = character.charCodeAt(0);\n\t\tswitch (base) {\n\t\t\tcase 1:\n\t\t\t\treturn c === _0;\n\t\t\tcase 2:\n\t\t\t\treturn c >= _0 && c <= _1;\n\t\t\tcase 3:\n\t\t\t\treturn c >= _0 && c <= _2;\n\t\t\tcase 4:\n\t\t\t\treturn c >= _0 && c <= _3;\n\t\t\tcase 5:\n\t\t\t\treturn c >= _0 && c <= _4;\n\t\t\tcase 6:\n\t\t\t\treturn c >= _0 && c <= _5;\n\t\t\tcase 7:\n\t\t\t\treturn c >= _0 && c <= _6;\n\t\t\tcase 8:\n\t\t\t\treturn c >= _0 && c <= _7;\n\t\t\tcase 9:\n\t\t\t\treturn c >= _0 && c <= _8;\n\t\t\tcase 10:\n\t\t\t\treturn c >= _0 && c <= _9;\n\t\t\tcase 11:\n\t\t\t\treturn (c >= _0 && c <= _9) || (c === _a) || (c === _A);\n\t\t\tcase 12:\n\t\t\t\treturn (c >= _0 && c <= _9) || (c >= _a && c <= _b) || (c >= _A && c <= _B);\n\t\t\tcase 13:\n\t\t\t\treturn (c >= _0 && c <= _9) || (c >= _a && c <= _c) || (c >= _A && c <= _C);\n\t\t\tcase 14:\n\t\t\t\treturn (c >= _0 && c <= _9) || (c >= _a && c <= _d) || (c >= _A && c <= _D);\n\t\t\tcase 15:\n\t\t\t\treturn (c >= _0 && c <= _9) || (c >= _a && c <= _e) || (c >= _A && c <= _E);\n\t\t\tdefault:\n\t\t\t\treturn (c >= _0 && c <= _9) || (c >= _a && c <= _f) || (c >= _A && c <= _F);\n\t\t}\n\t};\n})();\n\nexport class FrankensteinMode extends AbstractMode {\n\n\tconstructor(\n\t\tdescriptor: modes.IModeDescriptor,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@optional(IEditorWorkerService) editorWorkerService: IEditorWorkerService\n\t) {\n\t\tsuper(descriptor.id);\n\n\t\tif (editorWorkerService) {\n\t\t\tmodes.SuggestRegistry.register(this.getId(), new TextualSuggestSupport(editorWorkerService, configurationService), true);\n\t\t}\n\t}\n}\n\nfunction _createModeSupportChangedEvent(supportEnum:modes.MutableSupport): IModeSupportChangedEvent {\n\tlet e:IModeSupportChangedEvent = {\n\t\trichEditSupport: false,\n\t\ttokenizationSupport: false\n\t};\n\tif (supportEnum === modes.MutableSupport.RichEditSupport) {\n\t\te.richEditSupport = true;\n\t\treturn e;\n\t} else if (supportEnum === modes.MutableSupport.TokenizationSupport) {\n\t\te.tokenizationSupport = true;\n\t\treturn e;\n\t}\n\tthrow new Error('Illegal argument!');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport Severity from 'vs/base/common/severity';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IExtensionDescription, IExtensionService, IExtensionsStatus} from 'vs/platform/extensions/common/extensions';\nimport {ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\n\nconst hasOwnProperty = Object.hasOwnProperty;\n\nexport abstract class ActivatedExtension {\n\tactivationFailed: boolean;\n\n\tconstructor(activationFailed: boolean) {\n\t\tthis.activationFailed = activationFailed;\n\t}\n}\n\nexport interface IActivatedExtensionMap<T extends ActivatedExtension> {\n\t[extensionId: string]: T;\n}\n\ninterface IActivatingExtensionMap {\n\t[extensionId: string]: TPromise<void>;\n}\n\nexport abstract class AbstractExtensionService<T extends ActivatedExtension> implements IExtensionService {\n\tpublic serviceId = IExtensionService;\n\n\tprivate _activatingExtensions: IActivatingExtensionMap;\n\tprotected _activatedExtensions: IActivatedExtensionMap<T>;\n\tprivate _onReady: TPromise<boolean>;\n\tprivate _onReadyC: (v: boolean) => void;\n\n\tconstructor(isReadyByDefault: boolean) {\n\t\tif (isReadyByDefault) {\n\t\t\tthis._onReady = TPromise.as(true);\n\t\t\tthis._onReadyC = (v: boolean) => { /*no-op*/ };\n\t\t} else {\n\t\t\tthis._onReady = new TPromise<boolean>((c, e, p) => {\n\t\t\t\tthis._onReadyC = c;\n\t\t\t}, () => {\n\t\t\t\tconsole.warn('You should really not try to cancel this ready promise!');\n\t\t\t});\n\t\t}\n\t\tthis._activatingExtensions = {};\n\t\tthis._activatedExtensions = {};\n\t}\n\n\tprotected _triggerOnReady(): void {\n\t\tthis._onReadyC(true);\n\t}\n\n\tpublic onReady(): TPromise<boolean> {\n\t\treturn this._onReady;\n\t}\n\n\tpublic getExtensionsStatus(): { [id: string]: IExtensionsStatus } {\n\t\treturn null;\n\t}\n\n\tpublic isActivated(extensionId: string): boolean {\n\t\treturn hasOwnProperty.call(this._activatedExtensions, extensionId);\n\t}\n\n\tpublic activateByEvent(activationEvent: string): TPromise<void> {\n\t\treturn this._onReady.then(() => {\n\t\t\tExtensionsRegistry.triggerActivationEventListeners(activationEvent);\n\t\t\tlet activateExtensions = ExtensionsRegistry.getExtensionDescriptionsForActivationEvent(activationEvent);\n\t\t\treturn this._activateExtensions(activateExtensions, 0);\n\t\t});\n\t}\n\n\tpublic activateById(extensionId: string): TPromise<void> {\n\t\treturn this._onReady.then(() => {\n\t\t\tlet desc = ExtensionsRegistry.getExtensionDescription(extensionId);\n\t\t\tif (!desc) {\n\t\t\t\tthrow new Error('Extension `' + extensionId + '` is not known');\n\t\t\t}\n\n\t\t\treturn this._activateExtensions([desc], 0);\n\t\t});\n\t}\n\n\t/**\n\t * Handle semantics related to dependencies for `currentExtension`.\n\t * semantics: `redExtensions` must wait for `greenExtensions`.\n\t */\n\tprivate _handleActivateRequest(currentExtension: IExtensionDescription, greenExtensions: { [id: string]: IExtensionDescription; }, redExtensions: IExtensionDescription[]): void {\n\t\tlet depIds = (typeof currentExtension.extensionDependencies === 'undefined' ? [] : currentExtension.extensionDependencies);\n\t\tlet currentExtensionGetsGreenLight = true;\n\n\t\tfor (let j = 0, lenJ = depIds.length; j < lenJ; j++) {\n\t\t\tlet depId = depIds[j];\n\t\t\tlet depDesc = ExtensionsRegistry.getExtensionDescription(depId);\n\n\t\t\tif (!depDesc) {\n\t\t\t\t// Error condition 1: unknown dependency\n\t\t\t\tthis._showMessage(Severity.Error, nls.localize('unknownDep', \"Extension `{1}` failed to activate. Reason: unknown dependency `{0}`.\", depId, currentExtension.id));\n\t\t\t\tthis._activatedExtensions[currentExtension.id] = this._createFailedExtension();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (hasOwnProperty.call(this._activatedExtensions, depId)) {\n\t\t\t\tlet dep = this._activatedExtensions[depId];\n\t\t\t\tif (dep.activationFailed) {\n\t\t\t\t\t// Error condition 2: a dependency has already failed activation\n\t\t\t\t\tthis._showMessage(Severity.Error, nls.localize('failedDep1', \"Extension `{1}` failed to activate. Reason: dependency `{0}` failed to activate.\", depId, currentExtension.id));\n\t\t\t\t\tthis._activatedExtensions[currentExtension.id] = this._createFailedExtension();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// must first wait for the dependency to activate\n\t\t\t\tcurrentExtensionGetsGreenLight = false;\n\t\t\t\tgreenExtensions[depId] = depDesc;\n\t\t\t}\n\t\t}\n\n\t\tif (currentExtensionGetsGreenLight) {\n\t\t\tgreenExtensions[currentExtension.id] = currentExtension;\n\t\t} else {\n\t\t\tredExtensions.push(currentExtension);\n\t\t}\n\t}\n\n\tprivate _activateExtensions(extensionDescriptions: IExtensionDescription[], recursionLevel: number): TPromise<void> {\n\t\t// console.log(recursionLevel, '_activateExtensions: ', extensionDescriptions.map(p => p.id));\n\t\tif (extensionDescriptions.length === 0) {\n\t\t\treturn TPromise.as(void 0);\n\t\t}\n\n\t\textensionDescriptions = extensionDescriptions.filter((p) => !hasOwnProperty.call(this._activatedExtensions, p.id));\n\t\tif (extensionDescriptions.length === 0) {\n\t\t\treturn TPromise.as(void 0);\n\t\t}\n\n\t\tif (recursionLevel > 10) {\n\t\t\t// More than 10 dependencies deep => most likely a dependency loop\n\t\t\tfor (let i = 0, len = extensionDescriptions.length; i < len; i++) {\n\t\t\t\t// Error condition 3: dependency loop\n\t\t\t\tthis._showMessage(Severity.Error, nls.localize('failedDep2', \"Extension `{0}` failed to activate. Reason: more than 10 levels of dependencies (most likely a dependency loop).\", extensionDescriptions[i].id));\n\t\t\t\tthis._activatedExtensions[extensionDescriptions[i].id] = this._createFailedExtension();\n\t\t\t}\n\t\t\treturn TPromise.as(void 0);\n\t\t}\n\n\t\tlet greenMap: { [id: string]: IExtensionDescription; } = Object.create(null),\n\t\t\tred: IExtensionDescription[] = [];\n\n\t\tfor (let i = 0, len = extensionDescriptions.length; i < len; i++) {\n\t\t\tthis._handleActivateRequest(extensionDescriptions[i], greenMap, red);\n\t\t}\n\n\t\t// Make sure no red is also green\n\t\tfor (let i = 0, len = red.length; i < len; i++) {\n\t\t\tif (greenMap[red[i].id]) {\n\t\t\t\tdelete greenMap[red[i].id];\n\t\t\t}\n\t\t}\n\n\t\tlet green = Object.keys(greenMap).map(id => greenMap[id]);\n\n\t\t// console.log('greenExtensions: ', green.map(p => p.id));\n\t\t// console.log('redExtensions: ', red.map(p => p.id));\n\n\t\tif (red.length === 0) {\n\t\t\t// Finally reached only leafs!\n\t\t\treturn TPromise.join(green.map((p) => this._activateExtension(p))).then(_ => void 0);\n\t\t}\n\n\t\treturn this._activateExtensions(green, recursionLevel + 1).then(_ => {\n\t\t\treturn this._activateExtensions(red, recursionLevel + 1);\n\t\t});\n\t}\n\n\tprotected _activateExtension(extensionDescription: IExtensionDescription): TPromise<void> {\n\t\tif (hasOwnProperty.call(this._activatedExtensions, extensionDescription.id)) {\n\t\t\treturn TPromise.as(void 0);\n\t\t}\n\n\t\tif (hasOwnProperty.call(this._activatingExtensions, extensionDescription.id)) {\n\t\t\treturn this._activatingExtensions[extensionDescription.id];\n\t\t}\n\n\t\tthis._activatingExtensions[extensionDescription.id] = this._actualActivateExtension(extensionDescription).then(null, (err) => {\n\t\t\tthis._showMessage(Severity.Error, nls.localize('activationError', \"Activating extension `{0}` failed: {1}.\", extensionDescription.id, err.message));\n\t\t\tconsole.error('Activating extension `' + extensionDescription.id + '` failed: ', err.message);\n\t\t\tconsole.log('Here is the error stack: ', err.stack);\n\t\t\t// Treat the extension as being empty\n\t\t\treturn this._createFailedExtension();\n\t\t}).then((x: T) => {\n\t\t\tthis._activatedExtensions[extensionDescription.id] = x;\n\t\t\tdelete this._activatingExtensions[extensionDescription.id];\n\t\t});\n\n\t\treturn this._activatingExtensions[extensionDescription.id];\n\t}\n\n\tprotected abstract _showMessage(severity: Severity, message: string): void;\n\n\tprotected abstract _createFailedExtension(): T;\n\n\tprotected abstract _actualActivateExtension(extensionDescription: IExtensionDescription): TPromise<T>;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport http = require('vs/base/common/http');\nimport { TPromise } from 'vs/base/common/winjs.base';\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IRequestService = createDecorator<IRequestService>('requestService');\n\nexport interface IRequestService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Wraps the call into WinJS.XHR to allow for mocking and telemetry. Use this instead\n\t * of calling WinJS.XHR directly.\n\t */\n\tmakeRequest(options: http.IXHROptions): TPromise<http.IXHRResponse>;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport {ITimerEvent, nullEvent} from 'vs/base/common/timer';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const ITelemetryService = createDecorator<ITelemetryService>('telemetryService');\n\nexport interface ITelemetryInfo {\n\tsessionId: string;\n\tmachineId: string;\n\tinstanceId: string;\n}\n\nexport interface ITelemetryService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Sends a telemetry event that has been privacy approved.\n\t * Do not call this unless you have been given approval.\n\t */\n\tpublicLog(eventName: string, data?: any): any;\n\n\t/**\n\t * Starts a telemetry timer. Call stop() to send the event.\n\t */\n\ttimedPublicLog(name: string, data?: any): ITimerEvent;\n\n\tgetTelemetryInfo(): TPromise<ITelemetryInfo>;\n\n\tisOptedIn: boolean;\n}\n\nexport const NullTelemetryService: ITelemetryService = {\n\tserviceId: undefined,\n\ttimedPublicLog(name: string, data?: any): ITimerEvent { return nullEvent; },\n\tpublicLog(eventName: string, data?: any): void { },\n\tisOptedIn: true,\n\tgetTelemetryInfo(): TPromise<ITelemetryInfo> {\n\t\treturn TPromise.as({\n\t\t\tinstanceId: 'someValue.instanceId',\n\t\t\tsessionId: 'someValue.sessionId',\n\t\t\tmachineId: 'someValue.machineId'\n\t\t});\n\t}\n};\n\nexport interface ITelemetryAppender extends IDisposable {\n\tlog(eventName: string, data?: any): any;\n}\n\n// --- util\n\nexport function anonymize(input: string): string {\n\tif (!input) {\n\t\treturn input;\n\t}\n\n\tlet r = '';\n\tfor (let i = 0; i < input.length; i++) {\n\t\tlet ch = input[i];\n\t\tif (ch >= '0' && ch <= '9') {\n\t\t\tr += '0';\n\t\t\tcontinue;\n\t\t}\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\tr += 'a';\n\t\t\tcontinue;\n\t\t}\n\t\tif (ch >= 'A' && ch <= 'Z') {\n\t\t\tr += 'A';\n\t\t\tcontinue;\n\t\t}\n\t\tr += ch;\n\t}\n\treturn r;\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {TPromise, xhr, IXHROptions} from 'vs/base/common/winjs.base';\nimport strings = require('vs/base/common/strings');\nimport Timer = require('vs/base/common/timer');\nimport Async = require('vs/base/common/async');\nimport http = require('vs/base/common/http');\nimport objects = require('vs/base/common/objects');\nimport {IRequestService} from 'vs/platform/request/common/request';\nimport {ITelemetryService, NullTelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\n\n/**\n * Simple IRequestService implementation to allow sharing of this service implementation\n * between different layers of the platform.\n */\nexport class BaseRequestService implements IRequestService {\n\tpublic serviceId = IRequestService;\n\tprivate _serviceMap: { [service: string]: string; };\n\tprivate _origin: string;\n\n\tprotected _telemetryService: ITelemetryService;\n\n\tconstructor(contextService: IWorkspaceContextService, telemetryService: ITelemetryService = NullTelemetryService) {\n\t\tlet workspaceUri: string = null;\n\n\t\tlet workspace = contextService.getWorkspace();\n\t\tthis._serviceMap = (<any>workspace) || Object.create(null);\n\t\tthis._telemetryService = telemetryService;\n\n\t\tif (workspace) {\n\t\t\tworkspaceUri = strings.rtrim(workspace.resource.toString(), '/') + '/';\n\t\t}\n\n\t\tthis.computeOrigin(workspaceUri);\n\t}\n\n\tprivate computeOrigin(workspaceUri: string): void {\n\t\tif (workspaceUri) {\n\n\t\t\t// Find root server URL from configuration\n\t\t\tthis._origin = workspaceUri;\n\t\t\tlet urlPath = URI.parse(this._origin).path;\n\t\t\tif (urlPath && urlPath.length > 0) {\n\t\t\t\tthis._origin = this._origin.substring(0, this._origin.length - urlPath.length + 1);\n\t\t\t}\n\n\t\t\tif (!strings.endsWith(this._origin, '/')) {\n\t\t\t\tthis._origin += '/';\n\t\t\t}\n\t\t} else {\n\t\t\tthis._origin = '/'; // Configuration not provided, fallback to default\n\t\t}\n\t}\n\n\tprotected makeCrossOriginRequest(options: http.IXHROptions): TPromise<http.IXHRResponse> {\n\t\treturn null;\n\t}\n\n\tpublic makeRequest(options: http.IXHROptions): TPromise<http.IXHRResponse> {\n\t\tlet timer: Timer.ITimerEvent = Timer.nullEvent;\n\n\t\tlet isXhrRequestCORS = false;\n\n\t\tlet url = options.url;\n\t\tif (!url) {\n\t\t\tthrow new Error('IRequestService.makeRequest: Url is required');\n\t\t}\n\n\t\tif ((strings.startsWith(url, 'http://') || strings.startsWith(url, 'https://')) && this._origin && !strings.startsWith(url, this._origin)) {\n\t\t\tlet coPromise = this.makeCrossOriginRequest(options);\n\t\t\tif (coPromise) {\n\t\t\t\treturn coPromise;\n\t\t\t}\n\t\t\tisXhrRequestCORS = true;\n\t\t}\n\n\t\tlet xhrOptions = <IXHROptions>options;\n\n\t\tlet xhrOptionsPromise = TPromise.as(undefined);\n\t\tif (!isXhrRequestCORS) {\n\t\t\txhrOptions = this._telemetryService.getTelemetryInfo().then(info => {\n\t\t\t\tlet additionalHeaders = {};\n\t\t\t\tadditionalHeaders['X-TelemetrySession'] = info.sessionId;\n\t\t\t\tadditionalHeaders['X-Requested-With'] = 'XMLHttpRequest';\n\t\t\t\txhrOptions.headers = objects.mixin(xhrOptions.headers, additionalHeaders);\n\t\t\t});\n\t\t}\n\n\t\tif (options.timeout) {\n\t\t\txhrOptions.customRequestInitializer = function(xhrRequest: XMLHttpRequest) {\n\t\t\t\txhrRequest.timeout = options.timeout;\n\t\t\t};\n\t\t}\n\n\t\treturn xhrOptionsPromise.then(() => {\n\t\t\treturn Async.always(xhr(xhrOptions), ((xhr: XMLHttpRequest) => {\n\t\t\t\tif (timer.data) {\n\t\t\t\t\ttimer.data.status = xhr.status;\n\t\t\t\t}\n\t\t\t\ttimer.stop();\n\t\t\t}));\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport descriptors = require('vs/platform/instantiation/common/descriptors');\nimport instantiation = require('vs/platform/instantiation/common/instantiation');\n\n// --- thread service (web workers)\n\nexport const IThreadService = instantiation.createDecorator<IThreadService>('threadService');\n\nexport interface IThreadService {\n\tserviceId: instantiation.ServiceIdentifier<any>;\n\n\t// --- BEGIN deprecated methods\n\tisInMainThread: boolean;\n\n\tOneWorker(obj: IThreadSynchronizableObject, methodName: string, target: Function, param: any[], affinity: ThreadAffinity): TPromise<any>;\n\tAllWorkers(obj: IThreadSynchronizableObject, methodName: string, target: Function, param: any[]): TPromise<any>;\n\n\tcreateInstance<A1, T extends IThreadSynchronizableObject>(ctor: instantiation.IConstructorSignature1<A1, T>, a1: A1): T;\n\tcreateInstance<A1, T extends IThreadSynchronizableObject>(descriptor: descriptors.AsyncDescriptor1<A1, T>, a1: A1): TPromise<T>;\n\n\t// --- END deprecated methods\n\n\tgetRemotable<T>(ctor: instantiation.IConstructorSignature0<T>): T;\n\n\tregisterRemotableInstance(ctor: any, instance: any): void;\n}\n\nexport class IRemotableCtorMap {\n\t[identifier: string]: Function;\n}\n\nexport class IRemotableCtorAffinityMap {\n\t[identifier: string]: {\n\t\tctor: Function;\n\t\taffinity: ThreadAffinity;\n\t};\n}\n\nexport class Remotable {\n\n\tprivate static PROP_NAME = '$__REMOTABLE_ID';\n\n\tpublic static Registry = {\n\t\tMainContext: <IRemotableCtorMap>Object.create(null),\n\t\tExtHostContext: <IRemotableCtorMap>Object.create(null),\n\t\tWorkerContext: <IRemotableCtorAffinityMap>Object.create(null),\n\t};\n\n\tpublic static getId(ctor: any): string {\n\t\treturn (ctor[Remotable.PROP_NAME] || null);\n\t}\n\n\tpublic static MainContext(identifier: string) {\n\t\treturn function(target: Function) {\n\t\t\tRemotable._ensureUnique(identifier);\n\t\t\tRemotable.Registry.MainContext[identifier] = target;\n\t\t\ttarget[Remotable.PROP_NAME] = identifier;\n\t\t};\n\t}\n\n\tpublic static ExtHostContext(identifier: string) {\n\t\treturn function(target: Function) {\n\t\t\tRemotable._ensureUnique(identifier);\n\t\t\tRemotable.Registry.ExtHostContext[identifier] = target;\n\t\t\ttarget[Remotable.PROP_NAME] = identifier;\n\t\t};\n\t}\n\n\tpublic static WorkerContext(identifier: string, whichWorker: ThreadAffinity) {\n\t\treturn function(target: Function) {\n\t\t\tRemotable._ensureUnique(identifier);\n\t\t\tRemotable.Registry.WorkerContext[identifier] = {\n\t\t\t\tctor: target,\n\t\t\t\taffinity: whichWorker\n\t\t\t};\n\t\t\ttarget[Remotable.PROP_NAME] = identifier;\n\t\t};\n\t}\n\n\tprivate static _ensureUnique(identifier: string): void {\n\t\tif (Remotable.Registry.MainContext[identifier] || Remotable.Registry.ExtHostContext[identifier] || Remotable.Registry.WorkerContext[identifier]) {\n\t\t\tthrow new Error('Duplicate Remotable identifier found');\n\t\t}\n\t}\n}\n\nexport interface IThreadSynchronizableObject {\n\tgetId(): string;\n\n\tcreationDone?: () => void;\n\n\tasyncCtor?: () => TPromise<void>;\n}\n\nexport enum ThreadAffinity {\n\tNone = 0,\n\tGroup1 = 1,\n\tGroup2 = 2,\n\tGroup3 = 3,\n\tGroup4 = 4,\n\tGroup5 = 5,\n\tGroup6 = 6,\n\tGroup7 = 7,\n\tGroup8 = 8,\n\tGroup9 = 9,\n\tAll = 10\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {IDisposable, combinedDisposable, empty as EmptyDisposable} from 'vs/base/common/lifecycle'; // TODO@Alex\nimport * as objects from 'vs/base/common/objects';\nimport * as paths from 'vs/base/common/paths';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport mime = require('vs/base/common/mime');\nimport {IFilesConfiguration} from 'vs/platform/files/common/files';\nimport {createAsyncDescriptor1} from 'vs/platform/instantiation/common/descriptors';\nimport {IExtensionService} from 'vs/platform/extensions/common/extensions';\nimport {IExtensionPointUser, IExtensionMessageCollector, ExtensionsRegistry} from 'vs/platform/extensions/common/extensionsRegistry';\nimport {IThreadService, Remotable, ThreadAffinity} from 'vs/platform/thread/common/thread';\nimport * as modes from 'vs/editor/common/modes';\nimport {FrankensteinMode} from 'vs/editor/common/modes/abstractMode';\nimport {ILegacyLanguageDefinition, ModesRegistry} from 'vs/editor/common/modes/modesRegistry';\nimport {ILexer} from 'vs/editor/common/modes/monarch/monarchCommon';\nimport {compile} from 'vs/editor/common/modes/monarch/monarchCompile';\nimport {createRichEditSupport} from 'vs/editor/common/modes/monarch/monarchDefinition';\nimport {createTokenizationSupport} from 'vs/editor/common/modes/monarch/monarchLexer';\nimport {ILanguage} from 'vs/editor/common/modes/monarch/monarchTypes';\nimport {IRichLanguageConfiguration, RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {LanguagesRegistry} from 'vs/editor/common/services/languagesRegistry';\nimport {ILanguageExtensionPoint, IValidLanguageExtensionPoint, IModeLookupResult, IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {Token} from 'vs/editor/common/modes/supports';\n\ninterface IModeConfigurationMap { [modeId: string]: any; }\n\nlet languagesExtPoint = ExtensionsRegistry.registerExtensionPoint<ILanguageExtensionPoint[]>('languages', {\n\tdescription: nls.localize('vscode.extension.contributes.languages', 'Contributes language declarations.'),\n\ttype: 'array',\n\tdefaultSnippets: [{ body: [{ id: '', aliases: [], extensions: [] }] }],\n\titems: {\n\t\ttype: 'object',\n\t\tdefaultSnippets: [{ body: { id: '', extensions: [] } }],\n\t\tproperties: {\n\t\t\tid: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.id', 'ID of the language.'),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\taliases: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'),\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\textensions: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'),\n\t\t\t\tdefault: ['.foo'],\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\tfilenames: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.filenames', 'File names associated to the language.'),\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\tfilenamePatterns: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'),\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\tmimetypes: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'),\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\tfirstLine: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\tconfiguration: {\n\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'),\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t}\n\t}\n});\n\nfunction isUndefinedOrStringArray(value: string[]): boolean {\n\tif (typeof value === 'undefined') {\n\t\treturn true;\n\t}\n\tif (!Array.isArray(value)) {\n\t\treturn false;\n\t}\n\treturn value.every(item => typeof item === 'string');\n}\n\nfunction isValidLanguageExtensionPoint(value:ILanguageExtensionPoint, collector:IExtensionMessageCollector): boolean {\n\tif (!value) {\n\t\tcollector.error(nls.localize('invalid.empty', \"Empty value for `contributes.{0}`\", languagesExtPoint.name));\n\t\treturn false;\n\t}\n\tif (typeof value.id !== 'string') {\n\t\tcollector.error(nls.localize('require.id', \"property `{0}` is mandatory and must be of type `string`\", 'id'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.extensions)) {\n\t\tcollector.error(nls.localize('opt.extensions', \"property `{0}` can be omitted and must be of type `string[]`\", 'extensions'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.filenames)) {\n\t\tcollector.error(nls.localize('opt.filenames', \"property `{0}` can be omitted and must be of type `string[]`\", 'filenames'));\n\t\treturn false;\n\t}\n\tif (typeof value.firstLine !== 'undefined' && typeof value.firstLine !== 'string') {\n\t\tcollector.error(nls.localize('opt.firstLine', \"property `{0}` can be omitted and must be of type `string`\", 'firstLine'));\n\t\treturn false;\n\t}\n\tif (typeof value.configuration !== 'undefined' && typeof value.configuration !== 'string') {\n\t\tcollector.error(nls.localize('opt.configuration', \"property `{0}` can be omitted and must be of type `string`\", 'configuration'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.aliases)) {\n\t\tcollector.error(nls.localize('opt.aliases', \"property `{0}` can be omitted and must be of type `string[]`\", 'aliases'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.mimetypes)) {\n\t\tcollector.error(nls.localize('opt.mimetypes', \"property `{0}` can be omitted and must be of type `string[]`\", 'mimetypes'));\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nexport class ModeServiceImpl implements IModeService {\n\tpublic serviceId = IModeService;\n\n\tprotected _threadService: IThreadService;\n\tprotected _extensionService: IExtensionService;\n\n\tprivate _activationPromises: { [modeId: string]: TPromise<modes.IMode>; };\n\tprivate _instantiatedModes: { [modeId: string]: modes.IMode; };\n\tprivate _config: IModeConfigurationMap;\n\n\tprivate _registry: LanguagesRegistry;\n\n\tprivate _onDidAddModes: Emitter<string[]> = new Emitter<string[]>();\n\tpublic onDidAddModes: Event<string[]> = this._onDidAddModes.event;\n\n\tprivate _onDidCreateMode: Emitter<modes.IMode> = new Emitter<modes.IMode>();\n\tpublic onDidCreateMode: Event<modes.IMode> = this._onDidCreateMode.event;\n\n\tconstructor(threadService:IThreadService, extensionService:IExtensionService) {\n\t\tthis._threadService = threadService;\n\t\tthis._extensionService = extensionService;\n\n\t\tthis._activationPromises = {};\n\t\tthis._instantiatedModes = {};\n\t\tthis._config = {};\n\n\t\tthis._registry = new LanguagesRegistry();\n\t\tthis._registry.onDidAddModes((modes) => this._onDidAddModes.fire(modes));\n\t}\n\n\tpublic getConfigurationForMode(modeId:string): any {\n\t\treturn this._config[modeId] || {};\n\t}\n\n\tpublic configureMode(mimetype: string, options: any): void {\n\t\tvar modeId = this.getModeId(mimetype);\n\t\tif (modeId) {\n\t\t\tthis.configureModeById(modeId, options);\n\t\t}\n\t}\n\n\tpublic configureModeById(modeId:string, options:any):void {\n\t\tvar previousOptions = this._config[modeId] || {};\n\t\tvar newOptions = objects.mixin(objects.clone(previousOptions), options);\n\n\t\tif (objects.equals(previousOptions, newOptions)) {\n\t\t\t// This configure call is a no-op\n\t\t\treturn;\n\t\t}\n\n\t\tthis._config[modeId] = newOptions;\n\n\t\tvar mode = this.getMode(modeId);\n\t\tif (mode && mode.configSupport) {\n\t\t\tmode.configSupport.configure(this.getConfigurationForMode(modeId));\n\t\t}\n\t}\n\n\tpublic configureAllModes(config:any): void {\n\t\tif (!config) {\n\t\t\treturn;\n\t\t}\n\t\tvar modes = this._registry.getRegisteredModes();\n\t\tmodes.forEach((modeIdentifier) => {\n\t\t\tvar configuration = config[modeIdentifier];\n\t\t\tthis.configureModeById(modeIdentifier, configuration);\n\t\t});\n\t}\n\n\tpublic isRegisteredMode(mimetypeOrModeId: string): boolean {\n\t\treturn this._registry.isRegisteredMode(mimetypeOrModeId);\n\t}\n\n\tpublic isCompatMode(modeId:string): boolean {\n\t\tlet compatModeData = this._registry.getCompatMode(modeId);\n\t\treturn (compatModeData ? true : false);\n\t}\n\n\tpublic getRegisteredModes(): string[] {\n\t\treturn this._registry.getRegisteredModes();\n\t}\n\n\tpublic getRegisteredLanguageNames(): string[] {\n\t\treturn this._registry.getRegisteredLanguageNames();\n\t}\n\n\tpublic getExtensions(alias: string): string[] {\n\t\treturn this._registry.getExtensions(alias);\n\t}\n\n\tpublic getMimeForMode(modeId: string): string {\n\t\treturn this._registry.getMimeForMode(modeId);\n\t}\n\n\tpublic getLanguageName(modeId: string): string {\n\t\treturn this._registry.getLanguageName(modeId);\n\t}\n\n\tpublic getModeIdForLanguageName(alias:string): string {\n\t\treturn this._registry.getModeIdForLanguageNameLowercase(alias);\n\t}\n\n\tpublic getModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string): string {\n\t\tvar modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n\t\tif (modeIds.length > 0) {\n\t\t\treturn modeIds[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getConfigurationFiles(modeId: string): string[] {\n\t\treturn this._registry.getConfigurationFiles(modeId);\n\t}\n\n\t// --- instantiation\n\n\tpublic lookup(commaSeparatedMimetypesOrCommaSeparatedIds: string): IModeLookupResult[]{\n\t\tvar r: IModeLookupResult[] = [];\n\t\tvar modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n\t\tfor (var i = 0; i < modeIds.length; i++) {\n\t\t\tvar modeId = modeIds[i];\n\n\t\t\tr.push({\n\t\t\t\tmodeId: modeId,\n\t\t\t\tisInstantiated: this._instantiatedModes.hasOwnProperty(modeId)\n\t\t\t});\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tpublic getMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): modes.IMode {\n\t\tvar modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n\t\tvar isPlainText = false;\n\t\tfor (var i = 0; i < modeIds.length; i++) {\n\t\t\tif (this._instantiatedModes.hasOwnProperty(modeIds[i])) {\n\t\t\t\treturn this._instantiatedModes[modeIds[i]];\n\t\t\t}\n\t\t\tisPlainText = isPlainText || (modeIds[i] === 'plaintext');\n\t\t}\n\n\t\tif (isPlainText) {\n\t\t\t// Try to do it synchronously\n\t\t\tvar r: modes.IMode = null;\n\t\t\tthis.getOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds).then((mode) => {\n\t\t\t\tr = mode;\n\t\t\t}).done(null, onUnexpectedError);\n\t\t\treturn r;\n\t\t}\n\t}\n\n\tpublic getModeIdByLanguageName(languageName: string): string {\n\t\tvar modeIds = this._registry.getModeIdsFromLanguageName(languageName);\n\n\t\tif (modeIds.length > 0) {\n\t\t\treturn modeIds[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getModeIdByFilenameOrFirstLine(filename: string, firstLine?:string): string {\n\t\tvar modeIds = this._registry.getModeIdsFromFilenameOrFirstLine(filename, firstLine);\n\n\t\tif (modeIds.length > 0) {\n\t\t\treturn modeIds[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic onReady(): TPromise<boolean> {\n\t\treturn this._extensionService.onReady();\n\t}\n\n\tpublic getOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): TPromise<modes.IMode> {\n\t\treturn this.onReady().then(() => {\n\t\t\tvar modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n\t\t\t// Fall back to plain text if no mode was found\n\t\t\treturn this._getOrCreateMode(modeId || 'plaintext');\n\t\t});\n\t}\n\n\tpublic getOrCreateModeByLanguageName(languageName: string): TPromise<modes.IMode> {\n\t\treturn this.onReady().then(() => {\n\t\t\tvar modeId = this.getModeIdByLanguageName(languageName);\n\t\t\t// Fall back to plain text if no mode was found\n\t\t\treturn this._getOrCreateMode(modeId || 'plaintext');\n\t\t});\n\t}\n\n\tpublic getOrCreateModeByFilenameOrFirstLine(filename: string, firstLine?:string): TPromise<modes.IMode> {\n\t\treturn this.onReady().then(() => {\n\t\t\tvar modeId = this.getModeIdByFilenameOrFirstLine(filename, firstLine);\n\t\t\t// Fall back to plain text if no mode was found\n\t\t\treturn this._getOrCreateMode(modeId || 'plaintext');\n\t\t});\n\t}\n\n\tprivate _getOrCreateMode(modeId: string): TPromise<modes.IMode> {\n\t\tif (this._instantiatedModes.hasOwnProperty(modeId)) {\n\t\t\treturn TPromise.as(this._instantiatedModes[modeId]);\n\t\t}\n\n\t\tif (this._activationPromises.hasOwnProperty(modeId)) {\n\t\t\treturn this._activationPromises[modeId];\n\t\t}\n\t\tvar c, e;\n\t\tvar promise = new TPromise((cc,ee,pp) => { c = cc; e = ee; });\n\t\tthis._activationPromises[modeId] = promise;\n\n\t\tthis._createMode(modeId).then((mode) => {\n\t\t\tthis._instantiatedModes[modeId] = mode;\n\t\t\tdelete this._activationPromises[modeId];\n\n\t\t\tthis._onDidCreateMode.fire(mode);\n\n\t\t\tthis._extensionService.activateByEvent(`onLanguage:${modeId}`).done(null, onUnexpectedError);\n\n\t\t\treturn this._instantiatedModes[modeId];\n\t\t}).then(c, e);\n\n\t\treturn promise;\n\t}\n\n\tprotected _createMode(modeId:string): TPromise<modes.IMode> {\n\t\tlet modeDescriptor = this._createModeDescriptor(modeId);\n\n\t\tlet compatModeData = this._registry.getCompatMode(modeId);\n\t\tif (compatModeData) {\n\t\t\t// This is a compatibility mode\n\t\t\tlet compatModeAsyncDescriptor = createAsyncDescriptor1<modes.IModeDescriptor, modes.IMode>(compatModeData.moduleId, compatModeData.ctorName);\n\t\t\treturn this._threadService.createInstance(compatModeAsyncDescriptor, modeDescriptor).then((compatMode) => {\n\t\t\t\tif (compatMode.configSupport) {\n\t\t\t\t\tcompatMode.configSupport.configure(this.getConfigurationForMode(modeId));\n\t\t\t\t}\n\t\t\t\treturn compatMode;\n\t\t\t});\n\t\t}\n\n\t\treturn TPromise.as<modes.IMode>(this._threadService.createInstance(FrankensteinMode, modeDescriptor));\n\t}\n\n\tprivate _createModeDescriptor(modeId:string): modes.IModeDescriptor {\n\t\treturn {\n\t\t\tid: modeId\n\t\t};\n\t}\n\n\tprivate _registerModeSupport<T>(mode:modes.IMode, support: modes.MutableSupport, callback: (mode: modes.IMode) => T): IDisposable {\n\t\tif (mode.registerSupport) {\n\t\t\treturn mode.registerSupport(support, callback);\n\t\t} else {\n\t\t\tconsole.warn('Cannot register support ' + modes.mutableSupportToString(support) + ' on mode ' + mode.getId() + ' because it does not support it.');\n\t\t\treturn EmptyDisposable;\n\t\t}\n\t}\n\n\tprotected registerModeSupport<T>(modeId: string, support: modes.MutableSupport, callback: (mode: modes.IMode) => T): IDisposable {\n\t\tif (this._instantiatedModes.hasOwnProperty(modeId)) {\n\t\t\treturn this._registerModeSupport(this._instantiatedModes[modeId], support, callback);\n\t\t}\n\n\t\tlet cc: (disposable:IDisposable)=>void;\n\t\tlet promise = new TPromise<IDisposable>((c, e) => { cc = c; });\n\n\t\tlet disposable = this.onDidCreateMode((mode) => {\n\t\t\tif (mode.getId() !== modeId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcc(this._registerModeSupport(mode, support, callback));\n\t\t\tdisposable.dispose();\n\t\t});\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tpromise.done(disposable => disposable.dispose(), null);\n\t\t\t}\n\t\t};\n\t}\n\n\tprotected doRegisterMonarchDefinition(modeId:string, lexer: ILexer): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis.registerTokenizationSupport(modeId, (mode: modes.IMode) => {\n\t\t\t\treturn createTokenizationSupport(this, mode, lexer);\n\t\t\t}),\n\n\t\t\tthis.registerRichEditSupport(modeId, createRichEditSupport(lexer))\n\t\t);\n\t}\n\n\tpublic registerMonarchDefinition(modelService: IModelService, editorWorkerService:IEditorWorkerService, modeId:string, language:ILanguage): IDisposable {\n\t\tvar lexer = compile(objects.clone(language));\n\t\treturn this.doRegisterMonarchDefinition(modeId, lexer);\n\t}\n\n\tpublic registerRichEditSupport(modeId: string, support: IRichLanguageConfiguration): IDisposable {\n\t\treturn this.registerModeSupport(modeId, modes.MutableSupport.RichEditSupport, (mode) => new RichEditSupport(modeId, mode.richEditSupport, support));\n\t}\n\n\tpublic registerTokenizationSupport(modeId: string, callback: (mode: modes.IMode) => modes.ITokenizationSupport): IDisposable {\n\t\treturn this.registerModeSupport(modeId, modes.MutableSupport.TokenizationSupport, callback);\n\t}\n\n\tpublic registerTokenizationSupport2(modeId: string, support: modes.TokensProvider): IDisposable {\n\t\treturn this.registerModeSupport(modeId, modes.MutableSupport.TokenizationSupport, (mode) => {\n\t\t\treturn new TokenizationSupport2Adapter(mode, support);\n\t\t});\n\t}\n}\n\nexport class TokenizationState2Adapter implements modes.IState {\n\n\tprivate _mode: modes.IMode;\n\tprivate _actual: modes.IState2;\n\tprivate _stateData: modes.IState;\n\n\tconstructor(mode: modes.IMode, actual: modes.IState2, stateData: modes.IState) {\n\t\tthis._mode = mode;\n\t\tthis._actual = actual;\n\t\tthis._stateData = stateData;\n\t}\n\n\tpublic get actual(): modes.IState2 { return this._actual; }\n\n\tpublic clone(): TokenizationState2Adapter {\n\t\treturn new TokenizationState2Adapter(this._mode, this._actual.clone(), AbstractState.safeClone(this._stateData));\n\t}\n\n\tpublic equals(other:modes.IState): boolean {\n\t\tif (other instanceof TokenizationState2Adapter) {\n\t\t\tif (!this._actual.equals(other._actual)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn AbstractState.safeEquals(this._stateData, other._stateData);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getMode(): modes.IMode {\n\t\treturn this._mode;\n\t}\n\n\tpublic tokenize(stream:any): any {\n\t\tthrow new Error('Unexpected tokenize call!');\n\t}\n\n\tpublic getStateData(): modes.IState {\n\t\treturn this._stateData;\n\t}\n\n\tpublic setStateData(stateData:modes.IState): void {\n\t\tthis._stateData = stateData;\n\t}\n}\n\nexport class TokenizationSupport2Adapter implements modes.ITokenizationSupport {\n\n\tpublic shouldGenerateEmbeddedModels = false;\n\n\tprivate _mode: modes.IMode;\n\tprivate _actual: modes.TokensProvider;\n\n\tconstructor(mode: modes.IMode, actual: modes.TokensProvider) {\n\t\tthis._mode = mode;\n\t\tthis._actual = actual;\n\t}\n\n\tpublic getInitialState(): modes.IState {\n\t\treturn new TokenizationState2Adapter(this._mode, this._actual.getInitialState(), null);\n\t}\n\n\tpublic tokenize(line:string, state:modes.IState, offsetDelta: number = 0, stopAtOffset?: number): modes.ILineTokens {\n\t\tif (state instanceof TokenizationState2Adapter) {\n\t\t\tlet actualResult = this._actual.tokenize(line, state.actual);\n\t\t\tlet tokens: modes.IToken[] = [];\n\t\t\tactualResult.tokens.forEach((t) => {\n\t\t\t\tif (typeof t.scopes === 'string') {\n\t\t\t\t\ttokens.push(new Token(t.startIndex + offsetDelta, <string>t.scopes));\n\t\t\t\t} else if (Array.isArray(t.scopes) && t.scopes.length === 1) {\n\t\t\t\t\ttokens.push(new Token(t.startIndex + offsetDelta, t.scopes[0]));\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Only token scopes as strings or of precisely 1 length are supported at this time!');\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn {\n\t\t\t\ttokens: tokens,\n\t\t\t\tactualStopOffset: offsetDelta + line.length,\n\t\t\t\tendState: new TokenizationState2Adapter(state.getMode(), actualResult.endState, state.getStateData()),\n\t\t\t\tmodeTransitions: [{ startIndex: offsetDelta, mode: state.getMode() }],\n\t\t\t};\n\t\t}\n\t\tthrow new Error('Unexpected state to tokenize with!');\n\t}\n\n}\n\nexport class MainThreadModeServiceImpl extends ModeServiceImpl {\n\tprivate _hasInitialized: boolean;\n\tprivate _configurationService: IConfigurationService;\n\tprivate _onReadyPromise: TPromise<boolean>;\n\n\tconstructor(\n\t\tthreadService:IThreadService,\n\t\textensionService:IExtensionService,\n\t\tconfigurationService: IConfigurationService\n\t) {\n\t\tsuper(threadService, extensionService);\n\t\tthis._configurationService = configurationService;\n\t\tthis._hasInitialized = false;\n\n\t\tlanguagesExtPoint.setHandler((extensions:IExtensionPointUser<ILanguageExtensionPoint[]>[]) => {\n\t\t\tlet allValidLanguages: IValidLanguageExtensionPoint[] = [];\n\n\t\t\tfor (let i = 0, len = extensions.length; i < len; i++) {\n\t\t\t\tlet extension = extensions[i];\n\n\t\t\t\tif (!Array.isArray(extension.value)) {\n\t\t\t\t\textension.collector.error(nls.localize('invalid', \"Invalid `contributes.{0}`. Expected an array.\", languagesExtPoint.name));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (let j = 0, lenJ = extension.value.length; j < lenJ; j++) {\n\t\t\t\t\tlet ext = extension.value[j];\n\t\t\t\t\tif (isValidLanguageExtensionPoint(ext, extension.collector)) {\n\t\t\t\t\t\tlet configuration = (ext.configuration ? paths.join(extension.description.extensionFolderPath, ext.configuration) : ext.configuration);\n\t\t\t\t\t\tallValidLanguages.push({\n\t\t\t\t\t\t\tid: ext.id,\n\t\t\t\t\t\t\textensions: ext.extensions,\n\t\t\t\t\t\t\tfilenames: ext.filenames,\n\t\t\t\t\t\t\tfilenamePatterns: ext.filenamePatterns,\n\t\t\t\t\t\t\tfirstLine: ext.firstLine,\n\t\t\t\t\t\t\taliases: ext.aliases,\n\t\t\t\t\t\t\tmimetypes: ext.mimetypes,\n\t\t\t\t\t\t\tconfiguration: configuration\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tModesRegistry.registerLanguages(allValidLanguages);\n\n\t\t});\n\n\t\tthis._configurationService.onDidUpdateConfiguration(e => this.onConfigurationChange(e.config));\n\t}\n\n\tpublic onReady(): TPromise<boolean> {\n\t\tif (!this._onReadyPromise) {\n\t\t\tconst configuration = this._configurationService.getConfiguration<IFilesConfiguration>();\n\t\t\tthis._onReadyPromise = this._extensionService.onReady().then(() => {\n\t\t\t\tthis.onConfigurationChange(configuration);\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\n\t\treturn this._onReadyPromise;\n\t}\n\n\tprivate onConfigurationChange(configuration: IFilesConfiguration): void {\n\n\t\t// Clear user configured mime associations\n\t\tmime.clearTextMimes(true /* user configured */);\n\n\t\t// Register based on settings\n\t\tif (configuration.files && configuration.files.associations) {\n\t\t\tObject.keys(configuration.files.associations).forEach(pattern => {\n\t\t\t\tmime.registerTextMime({ mime: this.getMimeForMode(configuration.files.associations[pattern]), filepattern: pattern, userConfigured: true });\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _getModeServiceWorkerHelper(): ModeServiceWorkerHelper {\n\t\tlet r = this._threadService.getRemotable(ModeServiceWorkerHelper);\n\t\tif (!this._hasInitialized) {\n\t\t\tthis._hasInitialized = true;\n\n\t\t\tlet initData = {\n\t\t\t\tcompatModes: ModesRegistry.getCompatModes(),\n\t\t\t\tlanguages: ModesRegistry.getLanguages()\n\t\t\t};\n\n\t\t\tr._initialize(initData);\n\n\t\t\tModesRegistry.onDidAddCompatModes((m) => r._acceptCompatModes(m));\n\t\t\tModesRegistry.onDidAddLanguages((m) => r._acceptLanguages(m));\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic configureModeById(modeId:string, options:any):void {\n\t\tthis._getModeServiceWorkerHelper().configureModeById(modeId, options);\n\t\tsuper.configureModeById(modeId, options);\n\t}\n\n\tprotected _createMode(modeId:string): TPromise<modes.IMode> {\n\t\t// Instantiate mode also in worker\n\t\tthis._getModeServiceWorkerHelper().instantiateMode(modeId);\n\t\treturn super._createMode(modeId);\n\t}\n\n\tpublic registerMonarchDefinition(modelService: IModelService, editorWorkerService:IEditorWorkerService, modeId:string, language:ILanguage): IDisposable {\n\t\tthis._getModeServiceWorkerHelper().registerMonarchDefinition(modeId, language);\n\t\tvar lexer = compile(objects.clone(language));\n\t\treturn super.doRegisterMonarchDefinition(modeId, lexer);\n\t}\n}\n\nexport interface IWorkerInitData {\n\tcompatModes: ILegacyLanguageDefinition[];\n\tlanguages: ILanguageExtensionPoint[];\n}\n\n@Remotable.WorkerContext('ModeServiceWorkerHelper', ThreadAffinity.All)\nexport class ModeServiceWorkerHelper {\n\tprivate _modeService:IModeService;\n\n\tconstructor(@IModeService modeService:IModeService) {\n\t\tthis._modeService = modeService;\n\t}\n\n\tpublic _initialize(initData:IWorkerInitData): void {\n\t\tModesRegistry.registerCompatModes(initData.compatModes);\n\t\tModesRegistry.registerLanguages(initData.languages);\n\t}\n\n\tpublic _acceptCompatModes(modes:ILegacyLanguageDefinition[]): void {\n\t\tModesRegistry.registerCompatModes(modes);\n\t}\n\n\tpublic _acceptLanguages(languages:ILanguageExtensionPoint[]): void {\n\t\tModesRegistry.registerLanguages(languages);\n\t}\n\n\tpublic instantiateMode(modeId:string): void {\n\t\tthis._modeService.getOrCreateMode(modeId).done(null, onUnexpectedError);\n\t}\n\n\tpublic configureModeById(modeId:string, options:any):void {\n\t\tthis._modeService.configureMode(modeId, options);\n\t}\n\n\tpublic registerMonarchDefinition(modeId:string, language:ILanguage): void {\n\t\tthis._modeService.registerMonarchDefinition(null, null, modeId, language);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nls from 'vs/nls';\nimport {onUnexpectedError} from 'vs/base/common/errors';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport {EmitterEvent} from 'vs/base/common/eventEmitter';\nimport {IHTMLContentElement} from 'vs/base/common/htmlContent';\nimport {IDisposable} from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport URI from 'vs/base/common/uri';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {IMarker, IMarkerService} from 'vs/platform/markers/common/markers';\nimport {anonymize} from 'vs/platform/telemetry/common/telemetry';\nimport {IThreadService, Remotable, ThreadAffinity} from 'vs/platform/thread/common/thread';\nimport {Range} from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport {IMirrorModelEvents, MirrorModel} from 'vs/editor/common/model/mirrorModel';\nimport {Model} from 'vs/editor/common/model/model';\nimport {IMode} from 'vs/editor/common/modes';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IModelService} from 'vs/editor/common/services/modelService';\nimport {IResourceService} from 'vs/editor/common/services/resourceService';\nimport * as platform from 'vs/base/common/platform';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {DEFAULT_INDENTATION, DEFAULT_TRIM_AUTO_WHITESPACE} from 'vs/editor/common/config/defaultConfig';\nimport {IMessageService} from 'vs/platform/message/common/message';\n\nexport interface IRawModelData {\n\turl: URI;\n\tversionId: number;\n\tvalue: editorCommon.IRawText;\n\tmodeId: string;\n}\n\nfunction MODEL_ID(resource: URI): string {\n\treturn resource.toString();\n}\n\nclass ModelData implements IDisposable {\n\tmodel: editorCommon.IModel;\n\tisSyncedToWorkers: boolean;\n\n\tprivate _markerDecorations: string[];\n\tprivate _modelEventsListener: IDisposable;\n\n\tconstructor(model: editorCommon.IModel, eventsHandler: (modelData: ModelData, events: EmitterEvent[]) => void) {\n\t\tthis.model = model;\n\t\tthis.isSyncedToWorkers = false;\n\n\t\tthis._markerDecorations = [];\n\t\tthis._modelEventsListener = model.addBulkListener((events) => eventsHandler(this, events));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._markerDecorations = this.model.deltaDecorations(this._markerDecorations, []);\n\t\tthis._modelEventsListener.dispose();\n\t\tthis._modelEventsListener = null;\n\t\tthis.model = null;\n\t}\n\n\tpublic getModelId(): string {\n\t\treturn MODEL_ID(this.model.uri);\n\t}\n\n\tpublic acceptMarkerDecorations(newDecorations: editorCommon.IModelDeltaDecoration[]): void {\n\t\tthis._markerDecorations = this.model.deltaDecorations(this._markerDecorations, newDecorations);\n\t}\n}\n\nclass ModelMarkerHandler {\n\n\tpublic static setMarkers(modelData: ModelData, markers: IMarker[]): void {\n\n\t\t// Limit to the first 500 errors/warnings\n\t\tmarkers = markers.slice(0, 500);\n\n\t\tlet newModelDecorations: editorCommon.IModelDeltaDecoration[] = markers.map((marker) => {\n\t\t\treturn {\n\t\t\t\trange: this._createDecorationRange(modelData.model, marker),\n\t\t\t\toptions: this._createDecorationOption(marker)\n\t\t\t};\n\t\t});\n\n\t\tmodelData.acceptMarkerDecorations(newModelDecorations);\n\t}\n\n\tprivate static _createDecorationRange(model: editorCommon.IModel, rawMarker: IMarker): editorCommon.IRange {\n\t\tlet marker = model.validateRange(new Range(rawMarker.startLineNumber, rawMarker.startColumn, rawMarker.endLineNumber, rawMarker.endColumn));\n\t\tlet ret: Range = new Range(marker.startLineNumber, marker.startColumn, marker.endLineNumber, marker.endColumn);\n\t\tif (ret.isEmpty()) {\n\t\t\tlet word = model.getWordAtPosition(ret.getStartPosition());\n\t\t\tif (word) {\n\t\t\t\tret.startColumn = word.startColumn;\n\t\t\t\tret.endColumn = word.endColumn;\n\t\t\t} else {\n\t\t\t\tlet maxColumn = model.getLineLastNonWhitespaceColumn(marker.startLineNumber) ||\n\t\t\t\t\tmodel.getLineMaxColumn(marker.startLineNumber);\n\n\t\t\t\tif (maxColumn === 1) {\n\t\t\t\t\t// empty line\n\t\t\t\t\t//\t\t\t\t\tconsole.warn('marker on empty line:', marker);\n\t\t\t\t} else if (ret.endColumn >= maxColumn) {\n\t\t\t\t\t// behind eol\n\t\t\t\t\tret.endColumn = maxColumn;\n\t\t\t\t\tret.startColumn = maxColumn - 1;\n\t\t\t\t} else {\n\t\t\t\t\t// extend marker to width = 1\n\t\t\t\t\tret.endColumn += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (rawMarker.endColumn === Number.MAX_VALUE && rawMarker.startColumn === 1 && ret.startLineNumber === ret.endLineNumber) {\n\t\t\tlet minColumn = model.getLineFirstNonWhitespaceColumn(rawMarker.startLineNumber);\n\t\t\tif (minColumn < ret.endColumn) {\n\t\t\t\tret.startColumn = minColumn;\n\t\t\t\trawMarker.startColumn = minColumn;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate static _createDecorationOption(marker: IMarker): editorCommon.IModelDecorationOptions {\n\n\t\tlet className: string;\n\t\tlet color: string;\n\t\tlet darkColor: string;\n\t\tlet htmlMessage: IHTMLContentElement[] = null;\n\n\t\tswitch (marker.severity) {\n\t\t\tcase Severity.Ignore:\n\t\t\t\t// do something\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\tcase Severity.Info:\n\t\t\t\tclassName = editorCommon.ClassName.EditorWarningDecoration;\n\t\t\t\tcolor = 'rgba(18,136,18,0.7)';\n\t\t\t\tdarkColor = 'rgba(18,136,18,0.7)';\n\t\t\t\tbreak;\n\t\t\tcase Severity.Error:\n\t\t\tdefault:\n\t\t\t\tclassName = editorCommon.ClassName.EditorErrorDecoration;\n\t\t\t\tcolor = 'rgba(255,18,18,0.7)';\n\t\t\t\tdarkColor = 'rgba(255,18,18,0.7)';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (typeof marker.message === 'string') {\n\t\t\thtmlMessage = [{ isText: true, text: marker.message }];\n\t\t} else if (Array.isArray(marker.message)) {\n\t\t\thtmlMessage = <IHTMLContentElement[]><any>marker.message;\n\t\t} else if (marker.message) {\n\t\t\thtmlMessage = [marker.message];\n\t\t}\n\n\t\tif (htmlMessage && marker.source) {\n\t\t\thtmlMessage.unshift({ isText: true, text: `[${marker.source}] ` });\n\t\t}\n\n\t\treturn {\n\t\t\tstickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\tclassName,\n\t\t\thtmlMessage: htmlMessage,\n\t\t\toverviewRuler: {\n\t\t\t\tcolor,\n\t\t\t\tdarkColor,\n\t\t\t\tposition: editorCommon.OverviewRulerLane.Right\n\t\t\t}\n\t\t};\n\t}\n}\n\ninterface IRawConfig {\n\tfiles?: {\n\t\teol?: any;\n\t};\n\teditor?: {\n\t\ttabSize?: any;\n\t\tinsertSpaces?: any;\n\t\tdetectIndentation?: any;\n\t\ttrimAutoWhitespace?: any;\n\t};\n}\n\nexport class ModelServiceImpl implements IModelService {\n\tpublic serviceId = IModelService;\n\n\tprivate _markerService: IMarkerService;\n\tprivate _markerServiceSubscription: IDisposable;\n\tprivate _threadService: IThreadService;\n\tprivate _modeService: IModeService;\n\tprivate _messageService: IMessageService;\n\tprivate _configurationService: IConfigurationService;\n\tprivate _configurationServiceSubscription: IDisposable;\n\tprivate _workerHelper: ModelServiceWorkerHelper;\n\n\tprivate _onModelAdded: Emitter<editorCommon.IModel>;\n\tprivate _onModelRemoved: Emitter<editorCommon.IModel>;\n\tprivate _onModelModeChanged: Emitter<{ model: editorCommon.IModel; oldModeId: string; }>;\n\n\tprivate _modelCreationOptions: editorCommon.ITextModelCreationOptions;\n\n\tprivate _hasShownMigrationMessage: boolean;\n\n\t/**\n\t * All the models known in the system.\n\t */\n\tprivate _models: { [modelId: string]: ModelData; };\n\n\tconstructor(\n\t\tthreadService: IThreadService,\n\t\tmarkerService: IMarkerService,\n\t\tmodeService: IModeService,\n\t\tconfigurationService: IConfigurationService,\n\t\tmessageService: IMessageService\n\t) {\n\t\tthis._modelCreationOptions = {\n\t\t\ttabSize: DEFAULT_INDENTATION.tabSize,\n\t\t\tinsertSpaces: DEFAULT_INDENTATION.insertSpaces,\n\t\t\tdetectIndentation: DEFAULT_INDENTATION.detectIndentation,\n\t\t\tdefaultEOL: (platform.isLinux || platform.isMacintosh) ? editorCommon.DefaultEndOfLine.LF : editorCommon.DefaultEndOfLine.CRLF,\n\t\t\ttrimAutoWhitespace: DEFAULT_TRIM_AUTO_WHITESPACE\n\t\t};\n\t\tthis._threadService = threadService;\n\t\tthis._markerService = markerService;\n\t\tthis._modeService = modeService;\n\t\tthis._workerHelper = this._threadService.getRemotable(ModelServiceWorkerHelper);\n\t\tthis._configurationService = configurationService;\n\t\tthis._messageService = messageService;\n\t\tthis._hasShownMigrationMessage = false;\n\t\tthis._models = {};\n\n\n\t\tthis._onModelAdded = new Emitter<editorCommon.IModel>();\n\t\tthis._onModelRemoved = new Emitter<editorCommon.IModel>();\n\t\tthis._onModelModeChanged = new Emitter<{ model: editorCommon.IModel; oldModeId: string; }>();\n\n\t\tif (this._markerService) {\n\t\t\tthis._markerServiceSubscription = this._markerService.onMarkerChanged(this._handleMarkerChange, this);\n\t\t}\n\n\t\tlet readConfig = (config: IRawConfig) => {\n\n\t\t\tlet shouldShowMigrationMessage = false;\n\n\t\t\tlet tabSize = DEFAULT_INDENTATION.tabSize;\n\t\t\tif (config.editor && typeof config.editor.tabSize !== 'undefined') {\n\t\t\t\tlet parsedTabSize = parseInt(config.editor.tabSize, 10);\n\t\t\t\tif (!isNaN(parsedTabSize)) {\n\t\t\t\t\ttabSize = parsedTabSize;\n\t\t\t\t}\n\t\t\t\tshouldShowMigrationMessage = shouldShowMigrationMessage || (config.editor.tabSize === 'auto');\n\t\t\t}\n\n\t\t\tlet insertSpaces = DEFAULT_INDENTATION.insertSpaces;\n\t\t\tif (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n\t\t\t\tinsertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n\t\t\t\tshouldShowMigrationMessage = shouldShowMigrationMessage || (config.editor.insertSpaces === 'auto');\n\t\t\t}\n\n\t\t\tlet newDefaultEOL = this._modelCreationOptions.defaultEOL;\n\t\t\tconst eol = config.files && config.files.eol;\n\t\t\tif (eol === '\\r\\n') {\n\t\t\t\tnewDefaultEOL = editorCommon.DefaultEndOfLine.CRLF;\n\t\t\t} else if (eol === '\\n') {\n\t\t\t\tnewDefaultEOL = editorCommon.DefaultEndOfLine.LF;\n\t\t\t}\n\n\t\t\tlet trimAutoWhitespace = this._modelCreationOptions.trimAutoWhitespace;\n\t\t\tif (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n\t\t\t\ttrimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n\t\t\t}\n\n\t\t\tlet detectIndentation = DEFAULT_INDENTATION.detectIndentation;\n\t\t\tif (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n\t\t\t\tdetectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n\t\t\t}\n\n\t\t\tthis._setModelOptions({\n\t\t\t\ttabSize: tabSize,\n\t\t\t\tinsertSpaces: insertSpaces,\n\t\t\t\tdetectIndentation: detectIndentation,\n\t\t\t\tdefaultEOL: newDefaultEOL,\n\t\t\t\ttrimAutoWhitespace: trimAutoWhitespace\n\t\t\t});\n\n\n\t\t\tif (shouldShowMigrationMessage && !this._hasShownMigrationMessage) {\n\t\t\t\tthis._hasShownMigrationMessage = true;\n\t\t\t\tthis._messageService.show(Severity.Info, nls.localize('indentAutoMigrate', \"Please update your settings: `editor.detectIndentation` replaces `editor.tabSize`: \\\"auto\\\" or `editor.insertSpaces`: \\\"auto\\\"\"));\n\t\t\t}\n\t\t};\n\n\t\tthis._configurationServiceSubscription = this._configurationService.onDidUpdateConfiguration(e => {\n\t\t\treadConfig(e.config);\n\t\t});\n\t\treadConfig(this._configurationService.getConfiguration());\n\t}\n\n\tpublic getCreationOptions(): editorCommon.ITextModelCreationOptions {\n\t\treturn this._modelCreationOptions;\n\t}\n\n\tprivate _setModelOptions(newOpts: editorCommon.ITextModelCreationOptions): void {\n\t\tif (\n\t\t\t(this._modelCreationOptions.detectIndentation === newOpts.detectIndentation)\n\t\t\t&& (this._modelCreationOptions.insertSpaces === newOpts.insertSpaces)\n\t\t\t&& (this._modelCreationOptions.tabSize === newOpts.tabSize)\n\t\t\t&& (this._modelCreationOptions.trimAutoWhitespace === newOpts.trimAutoWhitespace)\n\t\t) {\n\t\t\t// Same indent opts, no need to touch created models\n\t\t\tthis._modelCreationOptions = newOpts;\n\t\t\treturn;\n\t\t}\n\t\tthis._modelCreationOptions = newOpts;\n\n\t\t// Update options on all models\n\t\tlet keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet modelId = keys[i];\n\t\t\tlet modelData = this._models[modelId];\n\n\t\t\tif (this._modelCreationOptions.detectIndentation) {\n\t\t\t\tmodelData.model.detectIndentation(this._modelCreationOptions.insertSpaces, this._modelCreationOptions.tabSize);\n\t\t\t\tmodelData.model.updateOptions({\n\t\t\t\t\ttrimAutoWhitespace: this._modelCreationOptions.trimAutoWhitespace\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmodelData.model.updateOptions({\n\t\t\t\t\tinsertSpaces: this._modelCreationOptions.insertSpaces,\n\t\t\t\t\ttabSize: this._modelCreationOptions.tabSize,\n\t\t\t\t\ttrimAutoWhitespace: this._modelCreationOptions.trimAutoWhitespace\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._markerServiceSubscription) {\n\t\t\tthis._markerServiceSubscription.dispose();\n\t\t}\n\t\tthis._configurationServiceSubscription.dispose();\n\t}\n\n\tprivate _handleMarkerChange(changedResources: URI[]): void {\n\t\tchangedResources.forEach((resource) => {\n\t\t\tlet modelId = MODEL_ID(resource);\n\t\t\tlet modelData = this._models[modelId];\n\t\t\tif (!modelData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tModelMarkerHandler.setMarkers(modelData, this._markerService.read({ resource: resource, take: 500 }));\n\t\t});\n\t}\n\n\t// --- begin IModelService\n\n\tprivate _shouldSyncModelToWorkers(model: editorCommon.IModel): boolean {\n\t\tif (model.isTooLargeForHavingARichMode()) {\n\t\t\treturn false;\n\t\t}\n\t\t// Only sync models with compat modes to the workers\n\t\treturn this._modeService.isCompatMode(model.getMode().getId());\n\t}\n\n\tprivate _createModelData(value: string, modeOrPromise: TPromise<IMode> | IMode, resource: URI): ModelData {\n\t\t// create & save the model\n\t\tlet model = new Model(value, this._modelCreationOptions, modeOrPromise, resource);\n\t\tlet modelId = MODEL_ID(model.uri);\n\n\t\tif (this._models[modelId]) {\n\t\t\t// There already exists a model with this id => this is a programmer error\n\t\t\tthrow new Error('ModelService: Cannot add model ' + anonymize(modelId) + ' because it already exists!');\n\t\t}\n\n\t\tlet modelData = new ModelData(model, (modelData, events) => this._onModelEvents(modelData, events));\n\t\tthis._models[modelId] = modelData;\n\n\t\treturn modelData;\n\t}\n\n\tpublic createModel(value: string, modeOrPromise: TPromise<IMode> | IMode, resource: URI): editorCommon.IModel {\n\t\tlet modelData = this._createModelData(value, modeOrPromise, resource);\n\n\t\t// handle markers (marker service => model)\n\t\tif (this._markerService) {\n\t\t\tModelMarkerHandler.setMarkers(modelData, this._markerService.read({ resource: modelData.model.uri }));\n\t\t}\n\n\t\tif (this._shouldSyncModelToWorkers(modelData.model)) {\n\t\t\t// send this model to the workers\n\t\t\tthis._beginWorkerSync(modelData);\n\t\t}\n\n\t\tthis._onModelAdded.fire(modelData.model);\n\n\t\treturn modelData.model;\n\t}\n\n\tpublic destroyModel(resource: URI): void {\n\t\t// We need to support that not all models get disposed through this service (i.e. model.dispose() should work!)\n\t\tlet modelData = this._models[MODEL_ID(resource)];\n\t\tif (!modelData) {\n\t\t\treturn;\n\t\t}\n\t\tmodelData.model.dispose();\n\t}\n\n\tpublic getModels(): editorCommon.IModel[] {\n\t\tlet ret: editorCommon.IModel[] = [];\n\n\t\tlet keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet modelId = keys[i];\n\t\t\tret.push(this._models[modelId].model);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tpublic getModel(resource: URI): editorCommon.IModel {\n\t\tlet modelId = MODEL_ID(resource);\n\t\tlet modelData = this._models[modelId];\n\t\tif (!modelData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn modelData.model;\n\t}\n\n\tpublic get onModelAdded(): Event<editorCommon.IModel> {\n\t\treturn this._onModelAdded ? this._onModelAdded.event : null;\n\t}\n\n\tpublic get onModelRemoved(): Event<editorCommon.IModel> {\n\t\treturn this._onModelRemoved ? this._onModelRemoved.event : null;\n\t}\n\n\tpublic get onModelModeChanged(): Event<{ model: editorCommon.IModel; oldModeId: string; }> {\n\t\treturn this._onModelModeChanged ? this._onModelModeChanged.event : null;\n\t}\n\n\t// --- end IModelService\n\n\tprivate _beginWorkerSync(modelData: ModelData): void {\n\t\tif (modelData.isSyncedToWorkers) {\n\t\t\tthrow new Error('Model is already being synced to workers!');\n\t\t}\n\n\t\tmodelData.isSyncedToWorkers = true;\n\t\tthis._workerHelper.$_acceptNewModel(ModelServiceImpl._getBoundModelData(modelData.model));\n\t}\n\n\tprivate _stopWorkerSync(modelData: ModelData): void {\n\t\tif (!modelData.isSyncedToWorkers) {\n\t\t\tthrow new Error('Model is already not being synced to workers!');\n\t\t}\n\t\tmodelData.isSyncedToWorkers = false;\n\t\tthis._workerHelper.$_acceptDidDisposeModel(modelData.model.uri);\n\t}\n\n\tprivate _onModelDisposing(model: editorCommon.IModel): void {\n\t\tlet modelId = MODEL_ID(model.uri);\n\t\tlet modelData = this._models[modelId];\n\n\t\tif (modelData.isSyncedToWorkers) {\n\t\t\t// Dispose model in workers\n\t\t\tthis._stopWorkerSync(modelData);\n\t\t}\n\n\t\tdelete this._models[modelId];\n\t\tmodelData.dispose();\n\n\t\tthis._onModelRemoved.fire(model);\n\t}\n\n\tprivate static _getBoundModelData(model: editorCommon.IModel): IRawModelData {\n\t\treturn {\n\t\t\turl: model.uri,\n\t\t\tversionId: model.getVersionId(),\n\t\t\tvalue: model.toRawText(),\n\t\t\tmodeId: model.getMode().getId()\n\t\t};\n\t}\n\n\tprivate _onModelEvents(modelData: ModelData, events: EmitterEvent[]): void {\n\n\t\t// First look for dispose\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tlet e = events[i];\n\t\t\tif (e.getType() === editorCommon.EventType.ModelDispose) {\n\t\t\t\tthis._onModelDisposing(modelData.model);\n\t\t\t\t// no more processing since model got disposed\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Second, look for mode change\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tlet e = events[i];\n\t\t\tif (e.getType() === editorCommon.EventType.ModelModeChanged) {\n\t\t\t\tlet wasSyncedToWorkers = modelData.isSyncedToWorkers;\n\t\t\t\tlet shouldSyncToWorkers = this._shouldSyncModelToWorkers(modelData.model);\n\n\t\t\t\tthis._onModelModeChanged.fire({\n\t\t\t\t\tmodel: modelData.model,\n\t\t\t\t\toldModeId: (<editorCommon.IModelModeChangedEvent>e.getData()).oldMode.getId()\n\t\t\t\t});\n\n\t\t\t\tif (wasSyncedToWorkers) {\n\t\t\t\t\tif (shouldSyncToWorkers) {\n\t\t\t\t\t\t// true -> true\n\t\t\t\t\t\t// Forward mode change to all the workers\n\t\t\t\t\t\tthis._workerHelper.$_acceptDidChangeModelMode(modelData.getModelId(), modelData.model.getMode().getId());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// true -> false\n\t\t\t\t\t\t// Stop worker sync for this model\n\t\t\t\t\t\tthis._stopWorkerSync(modelData);\n\t\t\t\t\t\t// no more processing since we have removed the model from the workers\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (shouldSyncToWorkers) {\n\t\t\t\t\t\t// false -> true\n\t\t\t\t\t\t// Begin syncing this model to the workers\n\t\t\t\t\t\tthis._beginWorkerSync(modelData);\n\t\t\t\t\t\t// no more processing since we are sending the latest state\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// false -> false\n\t\t\t\t\t\t// no more processing since this model was not synced and will not be synced\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!modelData.isSyncedToWorkers) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Finally, look for model content changes\n\t\tlet eventsForWorkers: IMirrorModelEvents = { contentChanged: [] };\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tlet e = events[i];\n\n\t\t\tif (e.getType() === editorCommon.EventType.ModelRawContentChanged) {\n\t\t\t\teventsForWorkers.contentChanged.push(<editorCommon.IModelContentChangedEvent>e.getData());\n\t\t\t}\n\t\t}\n\n\t\tif (eventsForWorkers.contentChanged.length > 0) {\n\t\t\t// Forward events to all the workers\n\t\t\tthis._workerHelper.$_acceptModelEvents(modelData.getModelId(), eventsForWorkers);\n\t\t}\n\t}\n}\n\n@Remotable.WorkerContext('ModelServiceWorkerHelper', ThreadAffinity.All)\nexport class ModelServiceWorkerHelper {\n\n\tprivate _resourceService: IResourceService;\n\tprivate _modeService: IModeService;\n\n\tconstructor(\n\t\t@IResourceService resourceService: IResourceService,\n\t\t@IModeService modeService: IModeService\n\t) {\n\t\tthis._resourceService = resourceService;\n\t\tthis._modeService = modeService;\n\t}\n\n\tpublic $_acceptNewModel(data: IRawModelData): TPromise<void> {\n\t\t// Create & insert the mirror model eagerly in the resource service\n\t\tlet mirrorModel = new MirrorModel(this._resourceService, data.versionId, data.value, null, data.url);\n\t\tthis._resourceService.insert(mirrorModel.uri, mirrorModel);\n\n\t\t// Block worker execution until the mode is instantiated\n\t\treturn this._modeService.getOrCreateMode(data.modeId).then((mode) => {\n\t\t\t// Changing mode should trigger a remove & an add, therefore:\n\n\t\t\t// (1) Remove from resource service\n\t\t\tthis._resourceService.remove(mirrorModel.uri);\n\n\t\t\t// (2) Change mode\n\t\t\tmirrorModel.setMode(mode);\n\n\t\t\t// (3) Insert again to resource service (it will have the new mode)\n\t\t\tthis._resourceService.insert(mirrorModel.uri, mirrorModel);\n\t\t});\n\t}\n\n\tpublic $_acceptDidChangeModelMode(modelId: string, newModeId: string): TPromise<void> {\n\t\tlet mirrorModel = this._resourceService.get(URI.parse(modelId));\n\n\t\t// Block worker execution until the mode is instantiated\n\t\treturn this._modeService.getOrCreateMode(newModeId).then((mode) => {\n\t\t\t// Changing mode should trigger a remove & an add, therefore:\n\n\t\t\t// (1) Remove from resource service\n\t\t\tthis._resourceService.remove(mirrorModel.uri);\n\n\t\t\t// (2) Change mode\n\t\t\tmirrorModel.setMode(mode);\n\n\t\t\t// (3) Insert again to resource service (it will have the new mode)\n\t\t\tthis._resourceService.insert(mirrorModel.uri, mirrorModel);\n\t\t});\n\t}\n\n\tpublic $_acceptDidDisposeModel(url: URI): void {\n\t\tlet model = <MirrorModel>this._resourceService.get(url);\n\t\tthis._resourceService.remove(url);\n\t\tif (model) {\n\t\t\tmodel.dispose();\n\t\t}\n\t}\n\n\tpublic $_acceptModelEvents(modelId: string, events: IMirrorModelEvents): void {\n\t\tlet model = <MirrorModel>this._resourceService.get(URI.parse(modelId));\n\t\tif (!model) {\n\t\t\tthrow new Error('Received model events for missing model ' + anonymize(modelId));\n\t\t}\n\t\ttry {\n\t\t\tmodel.onEvents(events);\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport arrays = require('vs/base/common/arrays');\nimport network = require('vs/base/common/network');\nimport strings = require('vs/base/common/strings');\nimport collections = require('vs/base/common/collections');\nimport URI from 'vs/base/common/uri';\nimport Event, {Emitter} from 'vs/base/common/event';\nimport Severity from 'vs/base/common/severity';\nimport {Remotable, IThreadService} from 'vs/platform/thread/common/thread';\nimport {IMarkerService, IMarkerData, IResourceMarker, IMarker, MarkerStatistics} from './markers';\n\ninterface Key {\n\towner: string;\n\tresource: URI;\n}\n\nmodule Key {\n\n\texport function fromValue(value: string): Key {\n\t\tlet regexp = /^(.*)→(.*)$/.exec(value);\n\t\treturn {\n\t\t\towner: regexp[1],\n\t\t\tresource: URI.parse(regexp[2])\n\t\t};\n\t}\n\n\texport function valueOf(k: Key): string {\n\t\treturn k.owner + '→' + k.resource;\n\t}\n\n\tlet _selectorPattern = '^({0})→({1})$';\n\n\texport function selector(owner?: string, resource?: URI): RegExp {\n\t\treturn new RegExp(strings.format(_selectorPattern, owner ? strings.escapeRegExpCharacters(owner) : '.*', resource ? strings.escapeRegExpCharacters(resource.toString()) : '.*'));\n\t}\n\n\texport function raw(owner: string, resource: URI): string {\n\t\treturn owner + '→' + resource;\n\t}\n}\n\nexport interface MarkerData {\n\t[k: string]: IMarkerData[];\n}\n\n\nexport abstract class MarkerService implements IMarkerService {\n\tpublic serviceId = IMarkerService;\n\tprivate _data: { [k: string]: IMarkerData[] };\n\tprivate _stats: MarkerStatistics;\n\tprivate _onMarkerChanged: Emitter<URI[]>;\n\n\tconstructor() {\n\t\tthis._data = Object.create(null);\n\t\tthis._stats = this._emptyStats();\n\t\tthis._onMarkerChanged = new Emitter<URI[]>();\n\t}\n\n\tpublic getStatistics(): MarkerStatistics {\n\t\treturn this._stats;\n\t}\n\n\t// ---- IMarkerService ------------------------------------------\n\n\tpublic get onMarkerChanged(): Event<URI[]> {\n\t\treturn this._onMarkerChanged ? this._onMarkerChanged.event : null;\n\t}\n\n\tpublic changeOne(owner: string, resource: URI, markers: IMarkerData[]): void {\n\t\tif (this._doChangeOne(owner, resource, markers)) {\n\t\t\tthis._onMarkerChanged.fire([resource]);\n\t\t}\n\t}\n\n\tpublic remove(owner: string, resources: URI[]): void {\n\t\tif (arrays.isFalsyOrEmpty(resources)) {\n\t\t\treturn;\n\t\t}\n\t\tlet changedResources: URI[];\n\t\tfor (let resource of resources) {\n\t\t\tif (this._doChangeOne(owner, resource, undefined)) {\n\t\t\t\tif (!changedResources) {\n\t\t\t\t\tchangedResources = [];\n\t\t\t\t}\n\t\t\t\tchangedResources.push(resource);\n\t\t\t}\n\t\t}\n\t\tif (changedResources) {\n\t\t\tthis._onMarkerChanged.fire(changedResources);\n\t\t}\n\t}\n\n\tprivate _doChangeOne(owner: string, resource: URI, markers: IMarkerData[]): boolean {\n\n\t\tlet key = Key.raw(owner, resource),\n\t\t\toldMarkers = this._data[key],\n\t\t\thasOldMarkers = !arrays.isFalsyOrEmpty(oldMarkers),\n\t\t\tgetsNewMarkers = !arrays.isFalsyOrEmpty(markers),\n\t\t\toldStats = this._computeStats(oldMarkers),\n\t\t\tnewStats = this._computeStats(markers);\n\n\t\tif (!hasOldMarkers && !getsNewMarkers) {\n\t\t\treturn;\n\t\t}\n\t\tif (getsNewMarkers) {\n\t\t\tthis._data[key] = markers;\n\t\t} else if (hasOldMarkers) {\n\t\t\tdelete this._data[key];\n\t\t}\n\t\tif (this._isStatRelevant(resource)) {\n\t\t\tthis._updateStatsMinus(oldStats);\n\t\t\tthis._updateStatsPlus(newStats);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic changeAll(owner: string, data: IResourceMarker[]): void {\n\t\tlet changedResources: { [n: string]: URI } = Object.create(null);\n\n\t\t// remove and record old markers\n\t\tlet oldStats = this._emptyStats();\n\t\tthis._forEach(owner, undefined, undefined, -1, (e, r) => {\n\t\t\tlet resource = Key.fromValue(e.key).resource;\n\t\t\tif (this._isStatRelevant(resource)) {\n\t\t\t\tthis._updateStatsPlus(oldStats, this._computeStats(e.value));\n\t\t\t}\n\t\t\tchangedResources[resource.toString()] = resource;\n\t\t\tr();\n\t\t});\n\t\tthis._updateStatsMinus(oldStats);\n\n\t\t// add and record new markers\n\t\tif (!arrays.isFalsyOrEmpty(data)) {\n\t\t\tlet newStats = this._emptyStats();\n\t\t\tdata.forEach(d => {\n\t\t\t\tchangedResources[d.resource.toString()] = d.resource;\n\t\t\t\tcollections.lookupOrInsert(this._data, Key.raw(owner, d.resource), []).push(d.marker);\n\t\t\t\tif (this._isStatRelevant(d.resource)) {\n\t\t\t\t\tthis._updateStatsMarker(newStats, d.marker);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._updateStatsPlus(newStats);\n\t\t}\n\t\tthis._onMarkerChanged.fire(collections.values(changedResources));\n\t}\n\n\tpublic read(filter: { owner?: string; resource?: URI; selector?: RegExp, take?: number; } = Object.create(null)): IMarker[] {\n\t\tlet ret: IMarker[] = [];\n\t\tthis._forEach(filter.owner, filter.resource, filter.selector, filter.take, entry => this._fromEntry(entry, ret));\n\t\treturn ret;\n\t}\n\n\tprivate _isStatRelevant(resource: URI): boolean {\n\t\t//TODO@Dirk this is a hack\n\t\treturn resource.scheme !== network.Schemas.inMemory;\n\t}\n\n\tprivate _forEach(owner: string, resource: URI, regexp: RegExp, take: number, callback: (entry: { key: string; value: IMarkerData[]; }, remove: Function) => any): void {\n\t\t//TODO@Joh: be smart and use an index\n\t\tlet selector = regexp || Key.selector(owner, resource),\n\t\t\ttook = 0;\n\n\t\tcollections.forEach(this._data, (entry, remove) => {\n\t\t\tif (selector.test(entry.key)) {\n\t\t\t\tcallback(entry, remove);\n\t\t\t\tif (take > 0 && took++ >= take) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _fromEntry(entry: { key: string; value: IMarkerData[]; }, bucket: IMarker[]): void {\n\n\t\tlet key = Key.fromValue(entry.key);\n\n\t\tentry.value.forEach(data => {\n\n\t\t\t// before reading, we sanitize the data\n\t\t\t// skip entry if not sanitizable\n\t\t\tconst ok = MarkerService._sanitize(data);\n\t\t\tif (!ok) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbucket.push({\n\t\t\t\towner: key.owner,\n\t\t\t\tresource: key.resource,\n\t\t\t\tcode: data.code,\n\t\t\t\tmessage: data.message,\n\t\t\t\tsource: data.source,\n\t\t\t\tseverity: data.severity,\n\t\t\t\tstartLineNumber: data.startLineNumber,\n\t\t\t\tstartColumn: data.startColumn,\n\t\t\t\tendLineNumber: data.endLineNumber,\n\t\t\t\tendColumn: data.endColumn\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _computeStats(markers: IMarkerData[]): MarkerStatistics {\n\t\tlet errors = 0, warnings = 0, infos = 0, unknwons = 0;\n\t\tif (markers) {\n\t\t\tfor (let i = 0; i < markers.length; i++) {\n\t\t\t\tlet marker = markers[i];\n\t\t\t\tif (marker.severity) {\n\t\t\t\t\tswitch (marker.severity) {\n\t\t\t\t\t\tcase Severity.Error:\n\t\t\t\t\t\t\terrors++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Severity.Warning:\n\t\t\t\t\t\t\twarnings++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Severity.Info:\n\t\t\t\t\t\t\tinfos++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tunknwons++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tunknwons++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\terrors: errors,\n\t\t\twarnings: warnings,\n\t\t\tinfos: infos,\n\t\t\tunknwons: unknwons\n\t\t};\n\t}\n\n\tprivate _emptyStats(): MarkerStatistics {\n\t\treturn { errors: 0, warnings: 0, infos: 0, unknwons: 0 };\n\t}\n\n\tprivate _updateStatsPlus(toAdd: MarkerStatistics): void;\n\tprivate _updateStatsPlus(toUpdate: MarkerStatistics, toAdd: MarkerStatistics): void;\n\tprivate _updateStatsPlus(toUpdate: MarkerStatistics, toAdd?: MarkerStatistics): void {\n\t\tif (!toAdd) {\n\t\t\ttoAdd = toUpdate;\n\t\t\ttoUpdate = this._stats;\n\t\t}\n\t\ttoUpdate.errors += toAdd.errors;\n\t\ttoUpdate.warnings += toAdd.warnings;\n\t\ttoUpdate.infos += toAdd.infos;\n\t\ttoUpdate.unknwons += toAdd.unknwons;\n\t}\n\n\tprivate _updateStatsMinus(toSubtract: MarkerStatistics): void;\n\tprivate _updateStatsMinus(toUpdate: MarkerStatistics, toSubtract: MarkerStatistics): void;\n\tprivate _updateStatsMinus(toUpdate: MarkerStatistics, toSubtract?: MarkerStatistics): void {\n\t\tif (!toSubtract) {\n\t\t\ttoSubtract = toUpdate;\n\t\t\ttoUpdate = this._stats;\n\t\t}\n\t\ttoUpdate.errors -= toSubtract.errors;\n\t\ttoUpdate.warnings -= toSubtract.warnings;\n\t\ttoUpdate.infos -= toSubtract.infos;\n\t\ttoUpdate.unknwons -= toSubtract.unknwons;\n\t}\n\n\tprivate _updateStatsMarker(toUpdate: MarkerStatistics, marker: IMarkerData): void {\n\t\tswitch (marker.severity) {\n\t\t\tcase Severity.Error:\n\t\t\t\ttoUpdate.errors++;\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\t\ttoUpdate.warnings++;\n\t\t\t\tbreak;\n\t\t\tcase Severity.Info:\n\t\t\t\ttoUpdate.infos++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttoUpdate.unknwons++;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate static _sanitize(data: IMarkerData): boolean {\n\t\tif (!data.message) {\n\t\t\treturn false;\n\t\t}\n\n\t\tdata.code = data.code || null;\n\t\tdata.startLineNumber = data.startLineNumber > 0 ? data.startLineNumber : 1;\n\t\tdata.startColumn = data.startColumn > 0 ? data.startColumn : 1;\n\t\tdata.endLineNumber = data.endLineNumber >= data.startLineNumber ? data.endLineNumber : data.startLineNumber;\n\t\tdata.endColumn = data.endColumn > 0 ? data.endColumn : data.startColumn;\n\t\treturn true;\n\t}\n}\n\nexport class SecondaryMarkerService extends MarkerService {\n\n\tprivate _proxy: MainProcessMarkerService;\n\n\tconstructor(threadService: IThreadService) {\n\t\tsuper();\n\t\tthis._proxy = threadService.getRemotable(MainProcessMarkerService);\n\t}\n\n\tpublic changeOne(owner: string, resource: URI, markers: IMarkerData[]): void {\n\t\tsuper.changeOne(owner, resource, markers);\n\t\tthis._proxy.changeOne(owner, resource, markers);\n\t}\n\n\tpublic changeAll(owner: string, data: IResourceMarker[]): void {\n\t\tsuper.changeAll(owner, data);\n\t\tthis._proxy.changeAll(owner, data);\n\t}\n\n}\n\n@Remotable.MainContext('MainProcessMarkerService')\nexport class MainProcessMarkerService extends MarkerService {\n\n\tconstructor(threadService: IThreadService) {\n\t\tsuper();\n\t\tthreadService.registerRemotableInstance(MainProcessMarkerService, this);\n\t}\n\n\tpublic changeOne(owner: string, resource: URI, markers: IMarkerData[]): void {\n\t\tsuper.changeOne(owner, resource, markers);\n\t}\n\n\tpublic changeAll(owner: string, data: IResourceMarker[]): void {\n\t\tsuper.changeAll(owner, data);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport thread = require('./thread');\n\nexport const THREAD_SERVICE_PROPERTY_NAME = '__$$__threadService';\n\nfunction findMember(proto: any, target: any): string {\n\tfor (let i in proto) {\n\t\tif (proto[i] === target) {\n\t\t\treturn i;\n\t\t}\n\t}\n\tthrow new Error('Member not found in prototype');\n}\n\nfunction findThreadService(obj: any): thread.IThreadService {\n\tlet threadService: thread.IThreadService = obj[THREAD_SERVICE_PROPERTY_NAME];\n\tif (!threadService) {\n\t\tthrow new Error('Objects that use thread attributes must be instantiated with the thread service');\n\t}\n\treturn threadService;\n}\n\nexport interface IOneWorkerAnnotation {\n\t(type: Function, target: Function, affinity?: thread.ThreadAffinity): void;\n\t(type: Function, target: Function, condition: () => TPromise<any>, affinity?: thread.ThreadAffinity): void;\n}\n\nfunction OneWorkerFn(type: Function, target: Function, conditionOrAffinity?: any, affinity: thread.ThreadAffinity = thread.ThreadAffinity.None): void {\n\n\tlet methodName = findMember(type.prototype, target),\n\t\tcondition: () => TPromise<any>;\n\n\tif (typeof conditionOrAffinity === 'function') {\n\t\tcondition = conditionOrAffinity;\n\n\t} else if (typeof conditionOrAffinity !== 'undefined') {\n\t\taffinity = conditionOrAffinity;\n\t}\n\n\ttype.prototype[methodName] = function(...param: any[]) {\n\n\t\tif (!condition) {\n\t\t\treturn findThreadService(this).OneWorker(this, methodName, target, param, affinity);\n\n\t\t} else {\n\t\t\tlet that = this,\n\t\t\t\tpromise = condition.call(that);\n\n\t\t\tif (!TPromise.is(promise)) {\n\t\t\t\tpromise = TPromise.as(promise);\n\t\t\t}\n\n\t\t\treturn promise.then(function() {\n\t\t\t\treturn findThreadService(that).OneWorker(that, methodName, target, param, affinity);\n\t\t\t});\n\t\t}\n\n\t};\n}\n\nexport let OneWorkerAttr: IOneWorkerAnnotation = OneWorkerFn;\n\nexport function AllWorkersAttr(type: Function, target: Function): void {\n\tlet methodName = findMember(type.prototype, target);\n\ttype.prototype[methodName] = function(...param: any[]) {\n\t\treturn findThreadService(this).AllWorkers(this, methodName, target, param);\n\t};\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport remote = require('vs/base/common/remote');\nimport {ThreadAffinity, Remotable, IThreadSynchronizableObject} from 'vs/platform/thread/common/thread';\nimport {THREAD_SERVICE_PROPERTY_NAME} from 'vs/platform/thread/common/threadService';\nimport instantiation = require('vs/platform/instantiation/common/instantiation');\nimport {SyncDescriptor0, createSyncDescriptor, AsyncDescriptor1} from 'vs/platform/instantiation/common/descriptors';\n\nexport abstract class AbstractThreadService implements remote.IManyHandler {\n\n\tpublic isInMainThread: boolean;\n\n\tprotected _instantiationService: instantiation.IInstantiationService;\n\n\tprotected _boundObjects: { [id: string]: IThreadSynchronizableObject; };\n\tprotected _pendingObjects: TPromise<IThreadSynchronizableObject>[];\n\tprivate _localObjMap: { [id: string]: any; };\n\tprivate _proxyObjMap: { [id: string]: any; };\n\n\tconstructor(isInMainThread: boolean) {\n\t\tthis.isInMainThread = isInMainThread;\n\t\tthis._boundObjects = {};\n\t\tthis._pendingObjects = [];\n\t\tthis._localObjMap = Object.create(null);\n\t\tthis._proxyObjMap = Object.create(null);\n\t}\n\n\tsetInstantiationService(service: instantiation.IInstantiationService): void {\n\t\tthis._instantiationService = service;\n\t}\n\n\tcreateInstance<A1, T extends IThreadSynchronizableObject>(ctor: instantiation.IConstructorSignature1<A1, T>, a1: A1): T;\n\tcreateInstance<A1, T extends IThreadSynchronizableObject>(descriptor: AsyncDescriptor1<A1, T>, a1: A1): TPromise<T>;\n\tcreateInstance(...params: any[]): any {\n\t\treturn this._doCreateInstance(params);\n\t}\n\n\tprotected _doCreateInstance(params: any[]): any {\n\t\tlet instanceOrPromise = this._instantiationService.createInstance.apply(this._instantiationService, params);\n\n\t\tif (TPromise.is(instanceOrPromise)) {\n\n\t\t\tlet objInstantiated: TPromise<IThreadSynchronizableObject>;\n\t\t\tobjInstantiated = instanceOrPromise.then((instance: IThreadSynchronizableObject): any => {\n\t\t\t\tif (instance.asyncCtor) {\n\t\t\t\t\tlet initPromise = instance.asyncCtor();\n\t\t\t\t\tif (TPromise.is(initPromise)) {\n\t\t\t\t\t\treturn initPromise.then(() => {\n\t\t\t\t\t\t\treturn instance;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn instance;\n\t\t\t});\n\n\t\t\tthis._pendingObjects.push(objInstantiated);\n\t\t\treturn objInstantiated.then((instance: IThreadSynchronizableObject) => {\n\t\t\t\tlet r = this._finishInstance(instance);\n\n\t\t\t\tfor (let i = 0; i < this._pendingObjects.length; i++) {\n\t\t\t\t\tif (this._pendingObjects[i] === objInstantiated) {\n\t\t\t\t\t\tthis._pendingObjects.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn r;\n\t\t\t});\n\n\t\t}\n\n\t\treturn this._finishInstance(<IThreadSynchronizableObject>instanceOrPromise);\n\t}\n\n\tprivate _finishInstance(instance: IThreadSynchronizableObject): IThreadSynchronizableObject {\n\t\tinstance[THREAD_SERVICE_PROPERTY_NAME] = this;\n\t\tthis._boundObjects[instance.getId()] = instance;\n\n\t\tif (instance.creationDone) {\n\t\t\tinstance.creationDone();\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\tpublic handle(rpcId: string, methodName: string, args: any[]): any {\n\t\tif (!this._localObjMap[rpcId]) {\n\t\t\tthrow new Error('Unknown actor ' + rpcId);\n\t\t}\n\t\tlet actor = this._localObjMap[rpcId];\n\t\tlet method = actor[methodName];\n\t\tif (typeof method !== 'function') {\n\t\t\tthrow new Error('Unknown method ' + methodName + ' on actor ' + rpcId);\n\t\t}\n\t\treturn method.apply(actor, args);\n\t}\n\n\tprotected _getOrCreateProxyInstance(remoteCom: remote.IProxyHelper, id: string, descriptor: SyncDescriptor0<any>): any {\n\t\tif (this._proxyObjMap[id]) {\n\t\t\treturn this._proxyObjMap[id];\n\t\t}\n\t\tlet result = createProxyFromCtor(remoteCom, id, descriptor.ctor);\n\t\tthis._proxyObjMap[id] = result;\n\t\treturn result;\n\t}\n\n\tprotected _registerLocalInstance(id: string, obj: any): any {\n\t\tthis._localObjMap[id] = obj;\n\t}\n\n\tprotected _getOrCreateLocalInstance(id: string, descriptor: SyncDescriptor0<any>): any {\n\t\tif (this._localObjMap[id]) {\n\t\t\treturn this._localObjMap[id];\n\t\t}\n\t\tlet result = this._instantiationService.createInstance(descriptor);\n\t\tthis._registerLocalInstance(id, result);\n\t\treturn result;\n\t}\n\n\tgetRemotable<T>(ctor: instantiation.IConstructorSignature0<T>): T {\n\t\tlet id = Remotable.getId(ctor);\n\t\tif (!id) {\n\t\t\tthrow new Error('Unknown Remotable: <<' + id + '>>');\n\t\t}\n\n\t\tlet desc = createSyncDescriptor<T>(ctor);\n\n\t\tif (Remotable.Registry.MainContext[id]) {\n\t\t\treturn this._registerAndInstantiateMainProcessActor(id, desc);\n\t\t}\n\n\t\tif (Remotable.Registry.ExtHostContext[id]) {\n\t\t\treturn this._registerAndInstantiateExtHostActor(id, desc);\n\t\t}\n\n\t\tif (Remotable.Registry.WorkerContext[id]) {\n\t\t\treturn this._registerAndInstantiateWorkerActor(id, desc, Remotable.Registry.WorkerContext[id].affinity);\n\t\t}\n\n\t\tthrow new Error('Unknown Remotable: <<' + id + '>>');\n\t}\n\n\tregisterRemotableInstance(ctor: any, instance: any): void {\n\t\tlet id = Remotable.getId(ctor);\n\t\tif (!id) {\n\t\t\tthrow new Error('Unknown Remotable: <<' + id + '>>');\n\t\t}\n\n\t\tif (Remotable.Registry.MainContext[id]) {\n\t\t\treturn this._registerMainProcessActor(id, instance);\n\t\t}\n\n\t\tif (Remotable.Registry.ExtHostContext[id]) {\n\t\t\treturn this._registerExtHostActor(id, instance);\n\t\t}\n\n\t\tif (Remotable.Registry.WorkerContext[id]) {\n\t\t\treturn this._registerWorkerActor(id, instance);\n\t\t}\n\n\t\tthrow new Error('Unknown Remotable: <<' + id + '>>');\n\t}\n\n\tprotected abstract _registerAndInstantiateMainProcessActor<T>(id: string, descriptor: SyncDescriptor0<T>): T;\n\tprotected abstract _registerMainProcessActor<T>(id: string, actor: T): void;\n\tprotected abstract _registerAndInstantiateExtHostActor<T>(id: string, descriptor: SyncDescriptor0<T>): T;\n\tprotected abstract _registerExtHostActor<T>(id: string, actor: T): void;\n\tprotected abstract _registerAndInstantiateWorkerActor<T>(id: string, descriptor: SyncDescriptor0<T>, whichWorker: ThreadAffinity): T;\n\tprotected abstract _registerWorkerActor<T>(id: string, actor: T): void;\n}\n\nfunction createProxyFromCtor(remote:remote.IProxyHelper, id:string, ctor:Function): any {\n\tvar result: any = {\n\t\t$__IS_REMOTE_OBJ: true\n\t};\n\tfor (var prop in ctor.prototype) {\n\t\tif (typeof ctor.prototype[prop] === 'function') {\n\t\t\tresult[prop] = createMethodProxy(remote, id, prop);\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction createMethodProxy(remote:remote.IProxyHelper, proxyId: string, path: string): (...myArgs: any[]) => TPromise<any> {\n\treturn (...myArgs: any[]) => {\n\t\treturn remote.callOnRemote(proxyId, path, myArgs);\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport abstractThreadService = require('vs/platform/thread/common/abstractThreadService');\nimport remote = require('vs/base/common/remote');\nimport {SyncDescriptor0} from 'vs/platform/instantiation/common/descriptors';\nimport {IThreadService, IThreadSynchronizableObject, ThreadAffinity} from 'vs/platform/thread/common/thread';\n\nexport class WorkerThreadService extends abstractThreadService.AbstractThreadService implements IThreadService {\n\tpublic serviceId = IThreadService;\n\tprotected _remoteCom: remote.IRemoteCom;\n\n\tconstructor(remoteCom: remote.IRemoteCom) {\n\t\tsuper(false);\n\t\tthis._remoteCom = remoteCom;\n\t\tthis._remoteCom.setManyHandler(this);\n\t}\n\n\tprivate _handleRequest(identifier: string, memberName: string, args: any[]): TPromise<any> {\n\t\tif (!this._boundObjects.hasOwnProperty(identifier)) {\n\t\t\t// Wait until all objects are constructed\n\t\t\treturn TPromise.join(this._pendingObjects.slice(0)).then(() => {\n\t\t\t\tif (!this._boundObjects.hasOwnProperty(identifier)) {\n\t\t\t\t\treturn TPromise.wrapError(new Error('Bound object `' + identifier + '` was not found.'));\n\t\t\t\t}\n\t\t\t\t//\t\t\t\t\tconsole.log(identifier + ' > ' + memberName);\n\t\t\t\tlet obj = this._boundObjects[identifier];\n\t\t\t\treturn TPromise.as(obj[memberName].apply(obj, args));\n\t\t\t});\n\t\t}\n\t\t//\t\t\tconsole.log(identifier + ' > ' + memberName);\n\t\tlet obj = this._boundObjects[identifier];\n\t\treturn TPromise.as(obj[memberName].apply(obj, args));\n\t}\n\n\tpublic dispatch(data: { type: string; payload: any; }): TPromise<any> {\n\t\ttry {\n\t\t\tlet args = data.payload;\n\t\t\tlet result = this._handleRequest(args[0], args[1], args[2]);\n\t\t\treturn TPromise.is(result) ? result : TPromise.as(result);\n\t\t} catch (e) {\n\t\t\t// handler error\n\t\t\treturn TPromise.wrapError(e);\n\t\t}\n\t}\n\n\tOneWorker(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[], affinity: ThreadAffinity): TPromise<any> {\n\t\treturn target.apply(obj, params);\n\t}\n\n\tAllWorkers(obj: IThreadSynchronizableObject, methodName: string, target: Function, params: any[]): TPromise<any> {\n\t\treturn target.apply(obj, params);\n\t}\n\n\tprotected _registerAndInstantiateMainProcessActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\treturn this._getOrCreateProxyInstance(this._remoteCom, id, descriptor);\n\t}\n\n\tprotected _registerMainProcessActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n\n\tprotected _registerAndInstantiateExtHostActor<T>(id: string, descriptor: SyncDescriptor0<T>): T {\n\t\tthrow new Error('Not supported in this runtime context: Cannot communicate from Worker directly to Extension Host!');\n\t}\n\n\tprotected _registerExtHostActor<T>(id: string, actor: T): void {\n\t\tthrow new Error('Not supported in this runtime context!');\n\t}\n\n\tprotected _registerAndInstantiateWorkerActor<T>(id: string, descriptor: SyncDescriptor0<T>, whichWorker: ThreadAffinity): T {\n\t\treturn this._getOrCreateLocalInstance(id, descriptor);\n\t}\n\n\tprotected _registerWorkerActor<T>(id: string, actor: T): void {\n\t\tthis._registerLocalInstance(id, actor);\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';\n\nexport const IWorkspaceContextService = createDecorator<IWorkspaceContextService>('contextService');\n\nexport interface IWorkspaceContextService {\n\tserviceId: ServiceIdentifier<any>;\n\n\t/**\n\t * Provides access to the workspace object the platform is running with. This may be null if the workbench was opened\n\t * without workspace (empty);\n\t */\n\tgetWorkspace(): IWorkspace;\n\n\t/**\n\t * Provides access to the configuration object the platform is running with.\n\t */\n\tgetConfiguration(): IConfiguration;\n\n\t/**\n\t * Provides access to the options object the platform is running with.\n\t */\n\tgetOptions(): any;\n\n\t/**\n\t * Returns iff the provided resource is inside the workspace or not.\n\t */\n\tisInsideWorkspace(resource: URI): boolean;\n\n\t/**\n\t * Given a resource inside the workspace, returns its relative path from the workspace root\n\t * without leading or trailing slashes. Returns null if the file is not inside an opened\n\t * workspace.\n\t */\n\ttoWorkspaceRelativePath: (resource: URI) => string;\n\n\t/**\n\t * Given a workspace relative path, returns the resource with the absolute path.\n\t */\n\ttoResource: (workspaceRelativePath: string) => URI;\n}\n\nexport interface IWorkspace {\n\n\t/**\n\t * the full uri of the workspace. this is a file:// URL to the location\n\t * of the workspace on disk.\n\t */\n\tresource: URI;\n\n\t/**\n\t * the identifier that uniquely identifies this workspace among others.\n\t */\n\tid: string;\n\n\t/**\n\t * the name of the workspace\n\t */\n\tname: string;\n\n\t/**\n\t * the last modified date of the workspace if known\n\t */\n\tmtime?: number;\n\n\t/**\n\t * the unique identifier of the workspace. if the workspace is deleted and recreated\n\t * the identifier also changes. this makes the uid more unique compared to the id which\n\t * is just derived from the workspace name.\n\t */\n\tuid?: number;\n}\n\nexport interface IConfiguration {\n\t/**\n\t * Some environmental flags\n\t */\n\tenv?: IEnvironment;\n}\n\nexport interface IEnvironment {\n\tappName: string;\n\tappRoot: string;\n\tisBuilt: boolean;\n\texecPath: string;\n\n\tapplicationName: string;\n\tdarwinBundleIdentifier: string;\n\n\tversion: string;\n\tcommitHash: string;\n\n\tupdateFeedUrl: string;\n\tupdateChannel: string;\n\n\textensionsGallery: {\n\t\tserviceUrl: string;\n\t\titemUrl: string;\n\t};\n\n\textensionTips: { [id: string]: string; };\n\n\treleaseNotesUrl: string;\n\tlicenseUrl: string;\n\tproductDownloadUrl: string;\n\n\twelcomePage: string;\n\n\tcrashReporter: any;\n\n\tappSettingsHome: string;\n\tappSettingsPath: string;\n\tappKeybindingsPath: string;\n\n\tdebugExtensionHostPort: number;\n\tdebugBrkExtensionHost: boolean;\n\tdisableExtensions: boolean;\n\n\tlogExtensionHostCommunication: boolean;\n\tdebugBrkFileWatcherPort: number;\n\tverboseLogging: boolean;\n\tenablePerformance: boolean;\n\n\tuserExtensionsHome: string;\n\tsharedIPCHandle: string;\n\textensionDevelopmentPath: string;\n\textensionTestsPath: string;\n\n\trecentFiles: string[];\n\trecentFolders: string[];\n\n\tenableTelemetry: boolean;\n\n\taiConfig: {\n\t\tkey: string;\n\t\tasimovKey: string;\n\t};\n\n\tsendASmile: {\n\t\treportIssueUrl: string,\n\t\trequestFeatureUrl: string\n\t};\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n// base common\nimport 'vs/base/common/assert';\nimport 'vs/base/common/async';\nimport 'vs/base/common/callbackList';\nimport 'vs/base/common/cancellation';\nimport 'vs/base/common/collections';\nimport 'vs/base/common/event';\nimport 'vs/base/common/events';\nimport 'vs/base/common/lifecycle';\nimport 'vs/base/common/paths';\nimport 'vs/base/common/uri';\n\n// platform common\nimport 'vs/platform/platform';\nimport 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport 'vs/platform/files/common/files';\nimport 'vs/platform/request/common/request';\nimport 'vs/platform/workspace/common/workspace';\nimport 'vs/platform/telemetry/common/telemetry';\nimport 'vs/platform/thread/common/thread';\nimport 'vs/platform/thread/common/threadService';\n\n// editor common\nimport 'vs/editor/common/editorCommon';\nimport 'vs/editor/common/modes';\nimport 'vs/editor/common/modes/abstractMode';\nimport 'vs/editor/common/modes/abstractState';\nimport 'vs/editor/common/modes/monarch/monarchCommon';\nimport 'vs/editor/common/modes/monarch/monarchDefinition';\nimport 'vs/editor/common/modes/monarch/monarchLexer';\nimport 'vs/editor/common/modes/monarch/monarchCompile';\nimport 'vs/editor/common/modes/supports/richEditSupport';\nimport 'vs/editor/common/modes/supports/suggestSupport';\nimport 'vs/editor/common/modes/supports/tokenizationSupport';\nimport 'vs/editor/common/services/modelService';\nimport 'vs/editor/common/services/modeService';\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport URI from 'vs/base/common/uri';\nimport paths = require('vs/base/common/paths');\nimport {IWorkspaceContextService, IWorkspace, IConfiguration} from './workspace';\n\n/**\n * Simple IWorkspaceContextService implementation to allow sharing of this service implementation\n * between different layers of the platform.\n */\nexport class BaseWorkspaceContextService implements IWorkspaceContextService {\n\tpublic serviceId = IWorkspaceContextService;\n\tprotected options: any;\n\n\tprivate workspace: IWorkspace;\n\tprivate configuration: IConfiguration;\n\n\tconstructor(workspace: IWorkspace, configuration?: IConfiguration, options: any = {}) {\n\t\tthis.workspace = workspace;\n\t\tthis.configuration = configuration;\n\t\tthis.options = options;\n\t}\n\n\tpublic getWorkspace(): IWorkspace {\n\t\treturn this.workspace;\n\t}\n\n\tpublic getConfiguration(): IConfiguration {\n\t\treturn this.configuration;\n\t}\n\n\tpublic getOptions(): any {\n\t\treturn this.options;\n\t}\n\n\tpublic isInsideWorkspace(resource: URI): boolean {\n\t\tif (resource && this.workspace) {\n\t\t\treturn paths.isEqualOrParent(resource.fsPath, this.workspace.resource.fsPath);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic toWorkspaceRelativePath(resource: URI): string {\n\t\tif (this.isInsideWorkspace(resource)) {\n\t\t\treturn paths.normalize(paths.relative(this.workspace.resource.fsPath, resource.fsPath));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic toResource(workspaceRelativePath: string): URI {\n\t\tif (typeof workspaceRelativePath === 'string' && this.workspace) {\n\t\t\treturn URI.file(paths.join(this.workspace.resource.fsPath, workspaceRelativePath));\n\t\t}\n\n\t\treturn null;\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n// include these in the editor bundle because they are widely used by many languages\nimport 'vs/editor/common/languages.common';\nimport 'vs/editor/common/worker/validationHelper';\nimport Severity from 'vs/base/common/severity';\nimport {TPromise} from 'vs/base/common/winjs.base';\nimport {WorkerServer} from 'vs/base/common/worker/workerServer';\nimport {EventService} from 'vs/platform/event/common/eventService';\nimport {IEventService} from 'vs/platform/event/common/event';\nimport {AbstractExtensionService, ActivatedExtension} from 'vs/platform/extensions/common/abstractExtensionService';\nimport {IExtensionDescription, IExtensionService} from 'vs/platform/extensions/common/extensions';\nimport {ServiceCollection} from 'vs/platform/instantiation/common/serviceCollection';\nimport {InstantiationService} from 'vs/platform/instantiation/common/instantiationService';\nimport {SecondaryMarkerService} from 'vs/platform/markers/common/markerService';\nimport {IMarkerService} from 'vs/platform/markers/common/markers';\nimport {BaseRequestService} from 'vs/platform/request/common/baseRequestService';\nimport {IRequestService} from 'vs/platform/request/common/request';\nimport {NullTelemetryService} from 'vs/platform/telemetry/common/telemetry';\nimport {WorkerThreadService} from 'vs/platform/thread/common/workerThreadService';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\nimport {BaseWorkspaceContextService} from 'vs/platform/workspace/common/baseWorkspaceContextService';\nimport {IWorkspaceContextService, IWorkspace} from 'vs/platform/workspace/common/workspace';\nimport {ModeServiceImpl, ModeServiceWorkerHelper} from 'vs/editor/common/services/modeServiceImpl';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {ModelServiceWorkerHelper} from 'vs/editor/common/services/modelServiceImpl';\nimport {ResourceService} from 'vs/editor/common/services/resourceServiceImpl';\nimport {IResourceService} from 'vs/editor/common/services/resourceService';\n\n\nexport interface IInitData {\n\tcontextService: {\n\t\tworkspace:any;\n\t\tconfiguration:any;\n\t\toptions:any;\n\t};\n}\n\ninterface IWorkspaceWithTelemetry extends IWorkspace {\n\ttelemetry?:string;\n}\n\ninterface IWorkspaceWithSearch extends IWorkspace {\n\tsearch?:string;\n}\n\nexport interface ICallback {\n\t(something:any):void;\n}\n\nclass WorkerExtensionService extends AbstractExtensionService<ActivatedExtension> {\n\n\tconstructor() {\n\t\tsuper(true);\n\t}\n\n\tprotected _showMessage(severity:Severity, msg:string): void {\n\t\tswitch (severity) {\n\t\t\tcase Severity.Error:\n\t\t\t\tconsole.error(msg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Warning:\n\t\t\t\tconsole.warn(msg);\n\t\t\t\tbreak;\n\t\t\tcase Severity.Info:\n\t\t\t\tconsole.info(msg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(msg);\n\t\t}\n\t}\n\n\tprotected _createFailedExtension(): ActivatedExtension {\n\t\tthrow new Error('unexpected');\n\t}\n\n\tprotected _actualActivateExtension(extensionDescription: IExtensionDescription): TPromise<ActivatedExtension> {\n\t\tthrow new Error('unexpected');\n\t}\n\n}\n\nexport class EditorWorkerServer {\n\n\tprivate threadService:WorkerThreadService;\n\n\tconstructor() {\n\t}\n\n\tpublic initialize(mainThread:WorkerServer, complete:ICallback, error:ICallback, progress:ICallback, initData:IInitData):void {\n\n\t\tconst services = new ServiceCollection();\n\n\t\tconst extensionService = new WorkerExtensionService();\n\t\tconst contextService = new BaseWorkspaceContextService(initData.contextService.workspace, initData.contextService.configuration, initData.contextService.options);\n\t\tthis.threadService = new WorkerThreadService(mainThread.getRemoteCom());\n\t\tthis.threadService.setInstantiationService(new InstantiationService(new ServiceCollection([IThreadService, this.threadService])));\n\t\tconst resourceService = new ResourceService();\n\t\tconst markerService = new SecondaryMarkerService(this.threadService);\n\t\tconst modeService = new ModeServiceImpl(this.threadService, extensionService);\n\t\tconst requestService = new BaseRequestService(contextService, NullTelemetryService);\n\n\t\tservices.set(IExtensionService, extensionService);\n\t\tservices.set(IThreadService, this.threadService);\n\t\tservices.set(IModeService, modeService);\n\t\tservices.set(IWorkspaceContextService, contextService);\n\t\tservices.set(IEventService, new EventService());\n\t\tservices.set(IResourceService, resourceService);\n\t\tservices.set(IMarkerService, markerService);\n\t\tservices.set(IRequestService, requestService);\n\n\t\tconst instantiationService = new InstantiationService(services);\n\t\tthis.threadService.setInstantiationService(instantiationService);\n\n\t\t// Instantiate thread actors\n\t\tthis.threadService.getRemotable(ModeServiceWorkerHelper);\n\t\tthis.threadService.getRemotable(ModelServiceWorkerHelper);\n\n\t\tcomplete(undefined);\n\t}\n\n\tpublic request(mainThread:WorkerServer, complete:ICallback, error:ICallback, progress:ICallback, data:any):void {\n\t\tthis.threadService.dispatch(data).then(complete, error, progress);\n\t}\n}\n\nexport var value = new EditorWorkerServer();\n"]}