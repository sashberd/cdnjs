{"version":3,"sources":["vs/editor/standalone-languages/csharp.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/csharp.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","wordDefinition","autoClosingPairs","brackets","open","close","token","keywords","namespaceFollows","parenFollows","operators","symbols","escapes","tokenizer","root","cases","@namespaceFollows","next","@keywords","@default","include","$S2==interpolatedstring","bracket","@operators","qualified","namespace","comment","string","litstring","interpolatedstring","whitespace"],"mappings":"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","file":"vs/editor/standalone-languages/csharp.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/csharp\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: '',\r\n        name: 'cs',\r\n        defaultToken: '',\r\n        // used in the editor to insert comments (ctrl+/ or shift+alt+A)\r\n        lineComment: '// ',\r\n        blockCommentStart: '/*',\r\n        blockCommentEnd: '*/',\r\n        // the default separators except `@`\r\n        wordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n        autoClosingPairs: [\r\n            ['\"', '\"'],\r\n            ['\\'', '\\''],\r\n            ['{', '}'],\r\n            ['[', ']'],\r\n            ['(', ')'],\r\n        ],\r\n        brackets: [\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.square' },\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n            { open: '<', close: '>', token: 'delimiter.angle' }\r\n        ],\r\n        keywords: [\r\n            'extern', 'alias', 'using', 'bool', 'decimal', 'sbyte', 'byte', 'short',\r\n            'ushort', 'int', 'uint', 'long', 'ulong', 'char', 'float', 'double',\r\n            'object', 'dynamic', 'string', 'assembly', 'is', 'as', 'ref',\r\n            'out', 'this', 'base', 'new', 'typeof', 'void', 'checked', 'unchecked',\r\n            'default', 'delegate', 'var', 'const', 'if', 'else', 'switch', 'case',\r\n            'while', 'do', 'for', 'foreach', 'in', 'break', 'continue', 'goto',\r\n            'return', 'throw', 'try', 'catch', 'finally', 'lock', 'yield', 'from',\r\n            'let', 'where', 'join', 'on', 'equals', 'into', 'orderby', 'ascending',\r\n            'descending', 'select', 'group', 'by', 'namespace', 'partial', 'class',\r\n            'field', 'event', 'method', 'param', 'property', 'public', 'protected',\r\n            'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly',\r\n            'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove',\r\n            'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum',\r\n            'null', 'async', 'await', 'fixed', 'sizeof', 'stackalloc', 'unsafe', 'nameof',\r\n            'when'\r\n        ],\r\n        namespaceFollows: [\r\n            'namespace', 'using',\r\n        ],\r\n        parenFollows: [\r\n            'if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'\r\n        ],\r\n        operators: [\r\n            '=', '??', '||', '&&', '|', '^', '&', '==', '!=', '<=', '>=', '<<',\r\n            '+', '-', '*', '/', '%', '!', '~', '++', '--', '+=',\r\n            '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '>>', '=>'\r\n        ],\r\n        symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n        // escape sequences\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                [/\\@?[a-zA-Z_]\\w*/, { cases: {\r\n                            '@namespaceFollows': { token: 'keyword.$0', next: '@namespace' },\r\n                            '@keywords': { token: 'keyword.$0', next: '@qualified' },\r\n                            '@default': { token: 'identifier', next: '@qualified' }\r\n                        }\r\n                    }],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // delimiters and operators\r\n                [/}/, { cases: {\r\n                            '$S2==interpolatedstring': { token: 'string.quote', bracket: '@close', next: '@pop' },\r\n                            '@default': '@brackets' } }],\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/[<>](?!@symbols)/, '@brackets'],\r\n                [/@symbols/, { cases: { '@operators': 'delimiter', '@default': '' } }],\r\n                // literal string\r\n                [/\\@\"/, { token: 'string.quote', bracket: '@open', next: '@litstring' }],\r\n                // interpolated string\r\n                [/\\$\"/, { token: 'string.quote', bracket: '@open', next: '@interpolatedstring' }],\r\n                // numbers\r\n                [/\\d*\\.\\d+([eE][\\-+]?\\d+)?[fFdD]?/, 'number.float'],\r\n                [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n                [/\\d+/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\r\n                // characters\r\n                [/'[^\\\\']'/, 'string'],\r\n                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n                [/'/, 'string.invalid']\r\n            ],\r\n            qualified: [\r\n                [/[a-zA-Z_][\\w]*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': 'identifier' }\r\n                    }],\r\n                [/\\./, 'delimiter'],\r\n                ['', '', '@pop'],\r\n            ],\r\n            namespace: [\r\n                { include: '@whitespace' },\r\n                [/[A-Z]\\w*/, 'namespace'],\r\n                [/[\\.=]/, 'delimiter'],\r\n                ['', '', '@pop'],\r\n            ],\r\n            comment: [\r\n                [/[^\\/*]+/, 'comment'],\r\n                // [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\r\n                ['\\\\*/', 'comment', '@pop'],\r\n                [/[\\/*]/, 'comment']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n            ],\r\n            litstring: [\r\n                [/[^\"]+/, 'string'],\r\n                [/\"\"/, 'string.escape'],\r\n                [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n            ],\r\n            interpolatedstring: [\r\n                [/[^\\\\\"{]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/{{/, 'string.escape'],\r\n                [/}}/, 'string.escape'],\r\n                [/{/, { token: 'string.quote', bracket: '@open', next: 'root.interpolatedstring' }],\r\n                [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n            ],\r\n            whitespace: [\r\n                [/^[ \\t\\v\\f]*#\\w.*$/, 'namespace.cpp'],\r\n                [/[ \\t\\v\\f\\r\\n]+/, ''],\r\n                [/\\/\\*/, 'comment', '@comment'],\r\n                [/\\/\\/.*$/, 'comment'],\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: '',\n\tname: 'cs',\n\tdefaultToken: '',\n\n\t// used in the editor to insert comments (ctrl+/ or shift+alt+A)\n\tlineComment: '// ',\n\tblockCommentStart: '/*',\n\tblockCommentEnd: '*/',\n\n\t// the default separators except `@`\n\twordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n\n\tautoClosingPairs: [\n\t\t['\"', '\"'],\n\t\t['\\'', '\\''],\n\t\t['{', '}'],\n\t\t['[', ']'],\n\t\t['(', ')'],\n\t],\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.square' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' },\n\t\t{ open: '<', close: '>', token: 'delimiter.angle' }\n\t],\n\n\tkeywords: [\n\t\t'extern', 'alias', 'using', 'bool', 'decimal', 'sbyte', 'byte', 'short',\n\t\t'ushort', 'int', 'uint', 'long', 'ulong', 'char', 'float', 'double',\n\t\t'object', 'dynamic', 'string', 'assembly', 'is', 'as', 'ref',\n\t\t'out', 'this', 'base', 'new', 'typeof', 'void', 'checked', 'unchecked',\n\t\t'default', 'delegate', 'var', 'const', 'if', 'else', 'switch', 'case',\n\t\t'while', 'do', 'for', 'foreach', 'in', 'break', 'continue', 'goto',\n\t\t'return', 'throw', 'try', 'catch', 'finally', 'lock', 'yield', 'from',\n\t\t'let', 'where', 'join', 'on', 'equals', 'into', 'orderby', 'ascending',\n\t\t'descending', 'select', 'group', 'by', 'namespace', 'partial', 'class',\n\t\t'field', 'event', 'method', 'param', 'property', 'public', 'protected',\n\t\t'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly',\n\t\t'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove',\n\t\t'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum',\n\t\t'null', 'async', 'await','fixed','sizeof','stackalloc','unsafe', 'nameof',\n\t\t'when'\n\t\t],\n\n\tnamespaceFollows: [\n\t\t'namespace', 'using',\n\t],\n\n\tparenFollows: [\n\t\t'if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'\n\t],\n\n\toperators: [\n\t\t'=', '??', '||', '&&', '|', '^', '&', '==', '!=', '<=', '>=', '<<',\n\t\t'+', '-', '*', '/', '%', '!', '~', '++', '--','+=',\n\t\t'-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '>>', '=>'\n\t],\n\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%]+/,\n\n\t// escape sequences\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t// identifiers and keywords\n\t\t\t[/\\@?[a-zA-Z_]\\w*/, { cases: {\n\t\t\t\t'@namespaceFollows': { token: 'keyword.$0', next: '@namespace' },\n\t\t\t\t'@keywords': { token: 'keyword.$0', next: '@qualified' },\n\t\t\t\t'@default': { token: 'identifier', next: '@qualified' }\n\t\t\t\t}\n\t\t\t}],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/}/, { cases: {\n\t\t\t\t\t'$S2==interpolatedstring' : { token: 'string.quote', bracket: '@close', next: '@pop' }\n\t\t\t\t,\t'@default'   : '@brackets' } }],\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'delimiter', '@default'  : '' } } ],\n\n\t\t\t// literal string\n\t\t\t[/\\@\"/, { token: 'string.quote', bracket: '@open', next: '@litstring' } ],\n\n\t\t\t// interpolated string\n\t\t\t[/\\$\"/, { token: 'string.quote', bracket: '@open', next: '@interpolatedstring' } ],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?[fFdD]?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  { token: 'string.quote', bracket: '@open', next: '@string' } ],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string','string.escape','string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\tqualified: [\n\t\t\t[/[a-zA-Z_][\\w]*/, { cases:\n\t\t\t\t{ '@keywords': {token:'keyword.$0'},\n\t\t\t\t'@default': 'identifier' }\n\t\t\t}],\n\t\t\t[/\\./, 'delimiter'],\n\t\t\t['','','@pop'],\n\t\t],\n\n\t\tnamespace: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t[/[A-Z]\\w*/, 'namespace'],\n\t\t\t[/[\\.=]/, 'delimiter'],\n\t\t\t['','','@pop'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment' ],\n\t\t\t// [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n\t\t\t['\\\\*/',    'comment', '@pop'  ],\n\t\t\t[/[\\/*]/,   'comment' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/,  'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\n\t\t],\n\n\t\tlitstring: [\n\t\t\t[/[^\"]+/,    'string'],\n\t\t\t[/\"\"/,       'string.escape'],\n\t\t\t[/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\n\t\t],\n\n\t\tinterpolatedstring: [\n\t\t\t[/[^\\\\\"{]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/{{/,       'string.escape'],\n\t\t\t[/}}/,       'string.escape'],\n\t\t\t[/{/,        { token: 'string.quote', bracket: '@open', next: 'root.interpolatedstring' } ],\n\t\t\t[/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/^[ \\t\\v\\f]*#\\w.*$/, 'namespace.cpp' ],\n\t\t\t[/[ \\t\\v\\f\\r\\n]+/, ''],\n\t\t\t[/\\/\\*/,       'comment', '@comment' ],\n\t\t\t[/\\/\\/.*$/,    'comment'],\n\t\t],\n\t},\n};"]}