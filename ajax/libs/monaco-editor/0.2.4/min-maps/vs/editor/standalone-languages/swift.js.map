{"version":3,"sources":["vs/editor/standalone-languages/swift.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/swift.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","identifier","attributes","accessmodifiers","keywords","symbols","operatorstart","operatorend","operators","escapes","tokenizer","root","include","symbol","comment","commentdocbody","commentbody","attribute","cases","@attributes","@default","literal","token","bracket","next","stringlit","interpolatedexpression","keyword","@keywords","[A-Z][a-zA-Z0-9$]*","escapedkeyword","invokedmethod","$2"],"mappings":";;;AAGAA,OAAO,wCAAyC,UAAW,WAAY,SAAUC,EAASC,GCC1F,YAIWA,GAAAC,UACVC,YAAa,QACbC,KAAM,QACNC,aAAc,GAEdC,YAAa,KACbC,kBAAmB,KACnBC,gBAAiB,KAGjBC,WAAY,kBAEZC,YACC,eAAgB,YAAa,YAAa,qBAAsB,aAAc,aAC9E,QAAS,qBAAsB,YAAa,gBAAiB,YAAa,gBAAiB,iBAAkB,aAE9GC,iBAAmB,SAAU,UAAW,YACxCC,UACC,aAAc,WAAY,eAAgB,WAAY,KAAM,MAAO,MAAO,gBAAiB,QAAS,OAAQ,QAC5G,QAAS,WAAY,cAAe,UAAW,SAAU,SAAU,KAAM,UAAW,cACpF,OAAQ,OAAQ,YAAa,cAAe,QAAS,MAAO,OAAQ,MAAO,QAAS,KAAM,SAAU,KAAM,QAC1G,OAAQ,QAAS,WAAY,KAAM,OAAQ,OAAQ,MAAO,WAAY,MAAO,OAAQ,cAAe,WACpG,WAAY,WAAY,UAAW,aAAc,SAAU,UAAW,WAAY,WAAY,SAC9F,SAAU,WAAY,SAAU,QAAS,OAAQ,OAAQ,MAAO,SAAU,SAAU,YAAa,QAAS,SAC1G,QAAS,SAAU,MAAO,OAAQ,OAAQ,YAAa,UAAW,MAAO,OAAQ,QAAS,QAAS,UAAW,QAAS,QAGxHC,QAAS,oCAGTC,cAAe,oPACfC,YAAa,qFACbC,UAAW,qDAGXC,QAAS,wEAETC,WACCC,OACGC,QAAS,aACTA,QAAS,eACTA,QAAS,aACTA,QAAS,aACTA,QAAS,mBACTA,QAAS,YAGZC,SACE,aAAc,cACd,mBAAoB,cACpB,MAAO,cACP,aAAc,qBACd,WAAY,qBAIdC,UACG,YAAa,gBACb,SAAU,cAAe,oBACzB,UAAW,YACX,OAAQ,UAAW,iBAEtBC,iBACG,OAAQ,UAAW,iBACnB,OAAQ,cAAe,SACvB,gBAAiB,sBACjB,IAAK,gBAERC,cACG,OAAQ,UAAW,iBACnB,OAAQ,UAAW,SACnB,IAAK,YAGRC,YACG,iBAAmBC,OAASC,cAAe,kBAAmBC,WAAY,OAG7EC,UACG,KAAOC,MAAO,eAAgBC,QAAS,QAASC,KAAM,gBACtD,gBAAiB,kBACjB,iBAAkB,iBAClB,0CAA2C,eAC3C,uCAAwC,iBACxC,UAAW,WAGdC,YACG,QAAUH,MAAO,mBAAoBC,QAAS,QAASC,KAAM,6BAC7D,WAAY,WACZ,MAAO,0BACP,KAAOF,MAAO,eAAgBC,QAAS,SAAUC,KAAM,UACvD,IAAK,WAGRE,yBACG,MAAQJ,MAAO,mBAAoBC,QAAS,QAASC,KAAM,6BAC3D,MAAQF,MAAO,mBAAoBC,QAAS,SAAUC,KAAM,UAC5DZ,QAAS,aACTA,QAAS,aACTA,QAAS,YAGZe,UACG,KAAOL,MAAO,mBAAoBC,QAAS,QAASC,KAAM,qBAC1D,eAAiBN,OAASU,YAAa,UAAWC,qBAAuB,kBAAmBT,WAAY,iBAG3GU,iBACG,KAAOR,MAAO,mBAAoBC,QAAS,SAAUC,KAAM,UAC3D,IAAK,eAQRO,gBACE,sBAAwBb,OAASc,IAAO,YAAa,mBAAoBZ,WAAY","file":"vs/editor/standalone-languages/swift.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (C) David Owens II, owensd.io. All rights reserved.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/swift\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Swift',\r\n        name: 'swift',\r\n        defaultToken: '',\r\n        lineComment: '//',\r\n        blockCommentStart: '/*',\r\n        blockCommentEnd: '*/',\r\n        // TODO(owensd): Support the full range of unicode valid identifiers.\r\n        identifier: /[a-zA-Z_][\\w$]*/,\r\n        // TODO(owensd): Support the @availability macro properly.\r\n        attributes: [\r\n            '@autoclosure', '@noescape', '@noreturn', '@NSApplicationMain', '@NSCopying', '@NSManaged',\r\n            '@objc', '@UIApplicationMain', '@noreturn', '@availability', '@IBAction', '@IBDesignable', '@IBInspectable', '@IBOutlet'\r\n        ],\r\n        accessmodifiers: ['public', 'private', 'internal'],\r\n        keywords: [\r\n            '__COLUMN__', '__FILE__', '__FUNCTION__', '__LINE__', 'as', 'as!', 'as?', 'associativity', 'break', 'case', 'catch',\r\n            'class', 'continue', 'convenience', 'default', 'deinit', 'didSet', 'do', 'dynamic', 'dynamicType',\r\n            'else', 'enum', 'extension', 'fallthrough', 'final', 'for', 'func', 'get', 'guard', 'if', 'import', 'in', 'infix',\r\n            'init', 'inout', 'internal', 'is', 'lazy', 'left', 'let', 'mutating', 'nil', 'none', 'nonmutating', 'operator',\r\n            'optional', 'override', 'postfix', 'precedence', 'prefix', 'private', 'protocol', 'Protocol', 'public',\r\n            'repeat', 'required', 'return', 'right', 'self', 'Self', 'set', 'static', 'struct', 'subscript', 'super', 'switch',\r\n            'throw', 'throws', 'try', 'try!', 'Type', 'typealias', 'unowned', 'var', 'weak', 'where', 'while', 'willSet', 'FALSE', 'TRUE'\r\n        ],\r\n        symbols: /[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,\r\n        // Moved . to operatorstart so it can be a delimiter\r\n        operatorstart: /[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,\r\n        operatorend: /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,\r\n        operators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,\r\n        // TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        tokenizer: {\r\n            root: [\r\n                { include: '@comment' },\r\n                { include: '@attribute' },\r\n                { include: '@literal' },\r\n                { include: '@keyword' },\r\n                { include: '@invokedmethod' },\r\n                { include: '@symbol' },\r\n            ],\r\n            symbol: [\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/[<>](?!@symbols)/, '@brackets'],\r\n                [/[.]/, 'delimiter'],\r\n                [/@operators/, 'keyword.operator'],\r\n                [/@symbols/, 'keyword.operator']\r\n            ],\r\n            comment: [\r\n                [/\\/\\/\\/.*$/, 'comment.doc'],\r\n                [/\\/\\*\\*/, 'comment.doc', '@commentdocbody'],\r\n                [/\\/\\/.*$/, 'comment'],\r\n                [/\\/\\*/, 'comment', '@commentbody']\r\n            ],\r\n            commentdocbody: [\r\n                [/\\/\\*/, 'comment', '@commentbody'],\r\n                [/\\*\\//, 'comment.doc', '@pop'],\r\n                [/\\:[a-zA-Z]+\\:/, 'comment.doc.param'],\r\n                [/./, 'comment.doc']\r\n            ],\r\n            commentbody: [\r\n                [/\\/\\*/, 'comment', '@commentbody'],\r\n                [/\\*\\//, 'comment', '@pop'],\r\n                [/./, 'comment']\r\n            ],\r\n            attribute: [\r\n                [/\\@@identifier/, { cases: { '@attributes': 'keyword.control', '@default': '' } }]\r\n            ],\r\n            literal: [\r\n                [/\"/, { token: 'string.quote', bracket: '@open', next: '@stringlit' }],\r\n                [/0[b]([01]_?)+/, 'number.binary'],\r\n                [/0[o]([0-7]_?)+/, 'number.octal'],\r\n                [/0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/, 'number.hex'],\r\n                [/(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/, 'number.float'],\r\n                [/(\\d_?)+/, 'number']\r\n            ],\r\n            stringlit: [\r\n                [/\\\\\\(/, { token: 'keyword.operator', bracket: '@open', next: '@interpolatedexpression' }],\r\n                [/@escapes/, 'string'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],\r\n                [/./, 'string']\r\n            ],\r\n            interpolatedexpression: [\r\n                [/\\(/, { token: 'keyword.operator', bracket: '@open', next: '@interpolatedexpression' }],\r\n                [/\\)/, { token: 'keyword.operator', bracket: '@close', next: '@pop' }],\r\n                { include: '@literal' },\r\n                { include: '@keyword' },\r\n                { include: '@symbol' }\r\n            ],\r\n            keyword: [\r\n                [/`/, { token: 'keyword.operator', bracket: '@open', next: '@escapedkeyword' }],\r\n                [/@identifier/, { cases: { '@keywords': 'keyword', '[A-Z][\\a-zA-Z0-9$]*': 'type.identifier', '@default': 'identifier' } }]\r\n            ],\r\n            escapedkeyword: [\r\n                [/`/, { token: 'keyword.operator', bracket: '@close', next: '@pop' }],\r\n                [/./, 'identifier']\r\n            ],\r\n            //\t\tsymbol: [\r\n            //\t\t\t[ /@symbols/, 'keyword.operator' ],\r\n            //\t\t\t[ /@operators/, 'keyword.operator' ]\r\n            //\t\t],\r\n            invokedmethod: [\r\n                [/([.])(@identifier)/, { cases: { '$2': ['delimeter', 'type.identifier'], '@default': '' } }],\r\n            ]\r\n        }\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (C) David Owens II, owensd.io. All rights reserved.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: 'Swift',\n\tname: 'swift',\n\tdefaultToken: '',\n\n\tlineComment: '//',\n\tblockCommentStart: '/*',\n\tblockCommentEnd: '*/',\n\n\t// TODO(owensd): Support the full range of unicode valid identifiers.\n\tidentifier: /[a-zA-Z_][\\w$]*/,\n\t// TODO(owensd): Support the @availability macro properly.\n\tattributes: [\n\t\t'@autoclosure', '@noescape', '@noreturn', '@NSApplicationMain', '@NSCopying', '@NSManaged',\n\t\t'@objc', '@UIApplicationMain', '@noreturn', '@availability', '@IBAction', '@IBDesignable', '@IBInspectable', '@IBOutlet'\n\t],\n\taccessmodifiers: [ 'public', 'private', 'internal' ],\n\tkeywords: [\n\t\t'__COLUMN__', '__FILE__', '__FUNCTION__', '__LINE__', 'as', 'as!', 'as?', 'associativity', 'break', 'case', 'catch',\n\t\t'class', 'continue', 'convenience', 'default', 'deinit', 'didSet', 'do', 'dynamic', 'dynamicType',\n\t\t'else', 'enum', 'extension', 'fallthrough', 'final', 'for', 'func', 'get', 'guard', 'if', 'import', 'in', 'infix',\n\t\t'init', 'inout', 'internal', 'is', 'lazy', 'left', 'let', 'mutating', 'nil', 'none', 'nonmutating', 'operator',\n\t\t'optional', 'override', 'postfix', 'precedence', 'prefix', 'private', 'protocol', 'Protocol', 'public',\n\t\t'repeat', 'required', 'return', 'right', 'self', 'Self', 'set', 'static', 'struct', 'subscript', 'super', 'switch',\n\t\t'throw', 'throws', 'try', 'try!', 'Type', 'typealias', 'unowned', 'var', 'weak', 'where', 'while', 'willSet', 'FALSE', 'TRUE'\n\t],\n\n\tsymbols: /[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,\n\n\t// Moved . to operatorstart so it can be a delimiter\n\toperatorstart: /[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,\n\toperatorend: /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,\n\toperators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,\n\n\t// TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@comment' },\n\t\t\t{ include: '@attribute' },\n\t\t\t{ include: '@literal' },\n\t\t\t{ include: '@keyword' },\n\t\t\t{ include: '@invokedmethod' },\n\t\t\t{ include: '@symbol' },\n\t\t],\n\n\t\tsymbol: [\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/[.]/, 'delimiter'],\n\t\t\t[/@operators/, 'keyword.operator'],\n\t\t\t[/@symbols/, 'keyword.operator']\n\t\t],\n\n\n\t\tcomment: [\n\t\t\t[ /\\/\\/\\/.*$/, 'comment.doc' ],\n\t\t\t[ /\\/\\*\\*/, 'comment.doc', '@commentdocbody' ],\n\t\t\t[ /\\/\\/.*$/, 'comment' ],\n\t\t\t[ /\\/\\*/, 'comment', '@commentbody' ]\n\t\t],\n\t\tcommentdocbody: [\n\t\t\t[ /\\/\\*/, 'comment', '@commentbody' ],\n\t\t\t[ /\\*\\//, 'comment.doc', '@pop' ],\n\t\t\t[ /\\:[a-zA-Z]+\\:/, 'comment.doc.param' ],\n\t\t\t[ /./, 'comment.doc' ]\n\t\t],\n\t\tcommentbody: [\n\t\t\t[ /\\/\\*/, 'comment', '@commentbody' ],\n\t\t\t[ /\\*\\//, 'comment', '@pop' ],\n\t\t\t[ /./, 'comment' ]\n\t\t],\n\n\t\tattribute: [\n\t\t\t[ /\\@@identifier/, { cases: { '@attributes': 'keyword.control', '@default': '' } } ]\n\t\t],\n\n\t\tliteral: [\n\t\t\t[ /\"/, { token: 'string.quote', bracket: '@open', next: '@stringlit' } ],\n\t\t\t[ /0[b]([01]_?)+/, 'number.binary' ],\n\t\t\t[ /0[o]([0-7]_?)+/, 'number.octal' ],\n\t\t\t[ /0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/, 'number.hex' ],\n\t\t\t[ /(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/, 'number.float'],\n\t\t\t[ /(\\d_?)+/, 'number' ]\n\t\t],\n\n\t\tstringlit: [\n\t\t\t[ /\\\\\\(/, { token: 'keyword.operator', bracket: '@open', next: '@interpolatedexpression' } ],\n\t\t\t[ /@escapes/, 'string' ],\n\t\t\t[ /\\\\./, 'string.escape.invalid' ],\n\t\t\t[ /\"/, { token: 'string.quote', bracket: '@close', next: '@pop' } ],\n\t\t\t[ /./, 'string' ]\n\t\t],\n\n\t\tinterpolatedexpression: [\n\t\t\t[ /\\(/, { token: 'keyword.operator', bracket: '@open', next: '@interpolatedexpression' } ],\n\t\t\t[ /\\)/, { token: 'keyword.operator', bracket: '@close', next: '@pop' } ],\n\t\t\t{ include: '@literal' },\n\t\t\t{ include: '@keyword' },\n\t\t\t{ include: '@symbol' }\n\t\t],\n\n\t\tkeyword: [\n\t\t\t[ /`/, { token: 'keyword.operator', bracket: '@open', next: '@escapedkeyword' } ],\n\t\t\t[ /@identifier/, { cases: { '@keywords': 'keyword', '[A-Z][\\a-zA-Z0-9$]*': 'type.identifier', '@default': 'identifier' } }]\n\t\t],\n\n\t\tescapedkeyword: [\n\t\t\t[ /`/, { token: 'keyword.operator', bracket: '@close', next: '@pop' } ],\n\t\t\t[ /./, 'identifier' ]\n\t\t],\n\n//\t\tsymbol: [\n//\t\t\t[ /@symbols/, 'keyword.operator' ],\n//\t\t\t[ /@operators/, 'keyword.operator' ]\n//\t\t],\n\n\t\tinvokedmethod: [\n\t\t\t[/([.])(@identifier)/, { cases: { '$2': ['delimeter', 'type.identifier'], '@default': '' } }],\n\t\t]\n\t}\n};\n"]}