{"version":3,"sources":["vs/editor/standalone-languages/jade.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/jade.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","ignoreCase","lineComment","brackets","token","open","close","keywords","tags","symbols","escapes","tokenizer","root","cases","$2@tags","@eos","@default","next","$2@keywords","include","@keywords","tag","bracket","simpleText","attributeList","whitespace","blockText","($S2\\s+.*$)","comment","string","$#==$S2","value"],"mappings":"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","file":"vs/editor/standalone-languages/jade.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/jade\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Jade',\r\n        name: 'jade',\r\n        defaultToken: '',\r\n        ignoreCase: true,\r\n        lineComment: '//',\r\n        brackets: [\r\n            { token: 'delimiter.curly', open: '{', close: '}' },\r\n            { token: 'delimiter.array', open: '[', close: ']' },\r\n            { token: 'delimiter.parenthesis', open: '(', close: ')' }\r\n        ],\r\n        keywords: ['append', 'block', 'case', 'default', 'doctype', 'each', 'else', 'extends',\r\n            'for', 'if', 'in', 'include', 'mixin', 'typeof', 'unless', 'var', 'when'],\r\n        tags: [\r\n            'a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio',\r\n            'b', 'base', 'basefont', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button',\r\n            'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command',\r\n            'datalist', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt',\r\n            'em', 'embed',\r\n            'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset',\r\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html',\r\n            'i', 'iframe', 'img', 'input', 'ins',\r\n            'keygen', 'kbd',\r\n            'label', 'li', 'link',\r\n            'map', 'mark', 'menu', 'meta', 'meter',\r\n            'nav', 'noframes', 'noscript',\r\n            'object', 'ol', 'optgroup', 'option', 'output',\r\n            'p', 'param', 'pre', 'progress',\r\n            'q',\r\n            'rp', 'rt', 'ruby',\r\n            's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup',\r\n            'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'tracks', 'tt',\r\n            'u', 'ul',\r\n            'video',\r\n            'wbr'\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[\\+\\-\\*\\%\\&\\|\\!\\=\\/\\.\\,\\:]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        tokenizer: {\r\n            root: [\r\n                // Tag or a keyword at start\r\n                [/^(\\s*)([a-zA-Z_-][\\w-]*)/,\r\n                    { cases: {\r\n                            '$2@tags': { cases: { '@eos': ['', 'tag'], '@default': ['', { token: 'tag', next: '@tag.$1' },] } },\r\n                            '$2@keywords': ['', { token: 'keyword.$2' },],\r\n                            '@default': ['', '',] } }\r\n                ],\r\n                // id\r\n                [/^(\\s*)(#[a-zA-Z_-][\\w-]*)/, { cases: { '@eos': ['', 'tag.id'], '@default': ['', { token: 'tag.id', next: '@tag.$1' }] } }],\r\n                // class\r\n                [/^(\\s*)(\\.[a-zA-Z_-][\\w-]*)/, { cases: { '@eos': ['', 'tag.class'], '@default': ['', { token: 'tag.class', next: '@tag.$1' }] } }],\r\n                // plain text with pipe\r\n                [/^(\\s*)(\\|.*)$/, ''],\r\n                { include: '@whitespace' },\r\n                // keywords\r\n                [/[a-zA-Z_$][\\w$]*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': '' } }],\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/@symbols/, 'delimiter'],\r\n                // numbers\r\n                [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n                [/\\d+/, 'number'],\r\n                // strings:\r\n                [/\"/, 'string', '@string.\"'],\r\n                [/'/, 'string', '@string.\\''],\r\n            ],\r\n            tag: [\r\n                [/(\\.)(\\s*$)/, [{ token: 'delimiter', next: '@blockText.$S2.' }, '']],\r\n                [/\\s+/, { token: '', next: '@simpleText' }],\r\n                // id\r\n                [/#[a-zA-Z_-][\\w-]*/, { cases: { '@eos': { token: 'tag.id', next: '@pop' }, '@default': 'tag.id' } }],\r\n                // class\r\n                [/\\.[a-zA-Z_-][\\w-]*/, { cases: { '@eos': { token: 'tag.class', next: '@pop' }, '@default': 'tag.class' } }],\r\n                // attributes\r\n                [/\\(/, { token: 'delimiter.parenthesis', bracket: '@open', next: '@attributeList' }],\r\n            ],\r\n            simpleText: [\r\n                [/[^#]+$/, { token: '', next: '@popall' }],\r\n                [/[^#]+/, { token: '' }],\r\n                // interpolation\r\n                [/(#{)([^}]*)(})/, { cases: {\r\n                            '@eos': ['interpolation.delimiter', 'interpolation', { token: 'interpolation.delimiter', next: '@popall' }],\r\n                            '@default': ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter'] } }],\r\n                [/#$/, { token: '', next: '@popall' }],\r\n                [/#/, '']\r\n            ],\r\n            attributeList: [\r\n                [/\\s+/, ''],\r\n                [/(\\w+)(\\s*=\\s*)(\"|')/, ['attribute.name', 'delimiter', { token: 'attribute.value', next: '@value.$3' }]],\r\n                [/\\w+/, 'attribute.name'],\r\n                [/,/, { cases: { '@eos': { token: 'attribute.delimiter', next: '@popall' }, '@default': 'attribute.delimiter' } }],\r\n                [/\\)$/, { token: 'delimiter.parenthesis', bracket: '@close', next: '@popall' }],\r\n                [/\\)/, { token: 'delimiter.parenthesis', bracket: '@close', next: '@pop' }],\r\n            ],\r\n            whitespace: [\r\n                [/^(\\s*)(\\/\\/.*)$/, { token: 'comment', next: '@blockText.$1.comment' }],\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/<!--/, { token: 'comment', bracket: '@open', next: '@comment' }],\r\n            ],\r\n            blockText: [\r\n                [/^\\s+.*$/, { cases: { '($S2\\\\s+.*$)': { token: '$S3' }, '@default': { token: '@rematch', next: '@popall' } } }],\r\n                [/./, { token: '@rematch', next: '@popall' }]\r\n            ],\r\n            comment: [\r\n                [/[^<\\-]+/, 'comment.content'],\r\n                [/-->/, { token: 'comment', bracket: '@close', next: '@pop' }],\r\n                [/<!--/, 'comment.content.invalid'],\r\n                [/[<\\-]/, 'comment.content']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"'#]+/, { cases: { '@eos': { token: 'string', next: '@popall' }, '@default': 'string' } }],\r\n                [/@escapes/, { cases: { '@eos': { token: 'string.escape', next: '@popall' }, '@default': 'string.escape' } }],\r\n                [/\\\\./, { cases: { '@eos': { token: 'string.escape.invalid', next: '@popall' }, '@default': 'string.escape.invalid' } }],\r\n                // interpolation\r\n                [/(#{)([^}]*)(})/, ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']],\r\n                [/#/, 'string'],\r\n                [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' }, '@default': { token: 'string' } } }],\r\n            ],\r\n            // Almost identical to above, except for escapes and the output token\r\n            value: [\r\n                [/[^\\\\\"']+/, { cases: { '@eos': { token: 'attribute.value', next: '@popall' }, '@default': 'attribute.value' } }],\r\n                [/\\\\./, { cases: { '@eos': { token: 'attribute.value', next: '@popall' }, '@default': 'attribute.value' } }],\r\n                [/[\"']/, { cases: { '$#==$S2': { token: 'attribute.value', next: '@pop' }, '@default': { token: 'attribute.value' } } }],\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'Jade',\n\tname:           'jade',\n\tdefaultToken:   '',\n\n\tignoreCase: true,\n\n\tlineComment: '//',\n\n\tbrackets: [\n\t\t\t{ token:'delimiter.curly', open: '{', close: '}' },\n\t\t\t{ token:'delimiter.array', open: '[', close: ']' },\n\t\t\t{ token:'delimiter.parenthesis', open: '(', close: ')' }\n\t],\n\n\tkeywords: [\t'append', 'block', 'case', 'default', 'doctype', 'each', 'else', 'extends',\n\t\t'for', 'if', 'in', 'include', 'mixin', 'typeof', 'unless', 'var', 'when'],\n\n\ttags: [\n\t\t'a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio',\n\t\t'b', 'base', 'basefont', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button',\n\t\t'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command',\n\t\t'datalist', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt',\n\t\t'em', 'embed',\n\t\t'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset',\n\t\t'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html',\n\t\t'i', 'iframe', 'img', 'input', 'ins',\n\t\t'keygen', 'kbd',\n\t\t'label', 'li', 'link',\n\t\t'map', 'mark', 'menu', 'meta', 'meter',\n\t\t'nav', 'noframes', 'noscript',\n\t\t'object', 'ol', 'optgroup', 'option', 'output',\n\t\t'p', 'param', 'pre', 'progress',\n\t\t'q',\n\t\t'rp', 'rt', 'ruby',\n\t\t's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup',\n\t\t'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'tracks', 'tt',\n\t\t'u', 'ul',\n\t\t'video',\n\t\t'wbr'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols: /[\\+\\-\\*\\%\\&\\|\\!\\=\\/\\.\\,\\:]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t// Tag or a keyword at start\n\t\t\t[/^(\\s*)([a-zA-Z_-][\\w-]*)/,\n\t\t\t\t{ cases: {\n\t\t\t\t\t'$2@tags': { cases: { '@eos': ['', 'tag'], '@default': ['', { token: 'tag', next: '@tag.$1' }, ] } },\n\t\t\t\t\t'$2@keywords': [ '', { token: 'keyword.$2'}, ],\n\t\t\t\t\t'@default': [ '', '', ]}}\n\t\t\t],\n\n\t\t\t// id\n\t\t\t[/^(\\s*)(#[a-zA-Z_-][\\w-]*)/, { cases: { '@eos': ['', 'tag.id'], '@default': ['', { token: 'tag.id', next: '@tag.$1' }] }}],\n\n\t\t\t// class\n\t\t\t[/^(\\s*)(\\.[a-zA-Z_-][\\w-]*)/, { cases: { '@eos': ['', 'tag.class'], '@default': ['', { token: 'tag.class', next: '@tag.$1' }] } }],\n\n\t\t\t// plain text with pipe\n\t\t\t[/^(\\s*)(\\|.*)$/, '' ],\n\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// keywords\n\t\t\t[/[a-zA-Z_$][\\w$]*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t\t'@default': '' } }],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// strings:\n\t\t\t[/\"/,  'string', '@string.\"' ],\n\t\t\t[/'/, 'string', '@string.\\''],\n\t\t],\n\n\t\ttag: [\n\t\t\t[/(\\.)(\\s*$)/, [ {token: 'delimiter', next:'@blockText.$S2.'}, '']],\n\t\t\t[/\\s+/, { token: '', next: '@simpleText' }],\n\n\t\t\t// id\n\t\t\t[/#[a-zA-Z_-][\\w-]*/, { cases: { '@eos': { token: 'tag.id', next: '@pop' }, '@default': 'tag.id' } }],\n\t\t\t// class\n\t\t\t[/\\.[a-zA-Z_-][\\w-]*/, { cases: { '@eos': { token: 'tag.class', next: '@pop' }, '@default': 'tag.class' } }],\n\t\t\t// attributes\n\t\t\t[/\\(/, { token: 'delimiter.parenthesis', bracket: '@open', next: '@attributeList' }],\n\t\t],\n\n\t\tsimpleText: [\n\t\t\t[/[^#]+$/, {token: '', next: '@popall'}],\n\t\t\t[/[^#]+/, {token: ''}],\n\n\t\t\t// interpolation\n\t\t\t[/(#{)([^}]*)(})/, { cases: {\n\t\t\t\t'@eos': ['interpolation.delimiter', 'interpolation', { token: 'interpolation.delimiter', next: '@popall' }],\n\t\t\t\t'@default': ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter'] }}],\n\n\t\t\t[/#$/, { token: '', next: '@popall' }],\n\t\t\t[/#/, '']\n\t\t],\n\n\t\tattributeList: [\n\t\t\t[/\\s+/, '' ],\n\t\t\t[/(\\w+)(\\s*=\\s*)(\"|')/, ['attribute.name', 'delimiter', { token: 'attribute.value', next:'@value.$3'}]],\n\t\t\t[/\\w+/, 'attribute.name'],\n\n\n\t\t\t[/,/, { cases: { '@eos': { token: 'attribute.delimiter', next: '@popall' }, '@default': 'attribute.delimiter' } }],\n\n\t\t\t[/\\)$/, { token: 'delimiter.parenthesis', bracket: '@close', next: '@popall' }],\n\t\t\t[/\\)/, { token: 'delimiter.parenthesis', bracket: '@close', next: '@pop' }],\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/^(\\s*)(\\/\\/.*)$/, { token: 'comment', next: '@blockText.$1.comment' } ],\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/<!--/, { token: 'comment', bracket: '@open', next: '@comment' }],\n\t\t],\n\n\t\tblockText: [\n\t\t\t[/^\\s+.*$/, { cases: { '($S2\\\\s+.*$)': { token: '$S3' }, '@default': { token: '@rematch', next: '@popall' } } }],\n\t\t\t[/./,  { token: '@rematch', next: '@popall' }]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^<\\-]+/, 'comment.content' ],\n\t\t\t[/-->/,  { token: 'comment', bracket: '@close', next: '@pop' } ],\n\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t[/[<\\-]/, 'comment.content' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"'#]+/, { cases: { '@eos': { token: 'string', next: '@popall' }, '@default': 'string' } }],\n\t\t\t[/@escapes/, { cases: { '@eos': { token: 'string.escape', next: '@popall' }, '@default': 'string.escape' }}],\n\t\t\t[/\\\\./, { cases: { '@eos': { token: 'string.escape.invalid', next: '@popall' }, '@default': 'string.escape.invalid' }}],\n\t\t\t// interpolation\n\t\t\t[/(#{)([^}]*)(})/, ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']],\n\t\t\t[/#/, 'string'],\n\t\t\t[/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' }, '@default': { token: 'string' } } }],\n\t\t],\n\n\t\t// Almost identical to above, except for escapes and the output token\n\t\tvalue: [\n\t\t\t[/[^\\\\\"']+/, { cases: { '@eos': { token: 'attribute.value', next: '@popall' }, '@default': 'attribute.value' }}],\n\t\t\t[/\\\\./, { cases: { '@eos': { token: 'attribute.value', next: '@popall' }, '@default': 'attribute.value' }}],\n\t\t\t[/[\"']/, { cases: { '$#==$S2': { token: 'attribute.value', next: '@pop' }, '@default': { token: 'attribute.value' } } }],\n\t\t],\n\t},\n};"]}