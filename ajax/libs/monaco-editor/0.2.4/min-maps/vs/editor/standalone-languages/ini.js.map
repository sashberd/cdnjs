{"version":3,"sources":["vs/editor/standalone-languages/ini.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/ini.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","escapes","tokenizer","root","include","whitespace","string","cases","$#==$S2","token","next","@default"],"mappings":";;;;;;AAWAA,OAAO,sCAAuC,UAAW,WAAY,SAAUC,EAASC,GCNxF,YAIWA,GAAAC,UACVC,YAAgB,MAChBC,KAAgB,MAChBC,aAAc,GAEdC,YAAkB,IAClBC,kBAAmB,IACnBC,gBAAmB,IAGnBC,QAAU,wEAGVC,WACCC,OAGE,cAAe,YAGf,mBAAoB,MAAO,GAAI,eAG9BC,QAAS,gBAGV,MAAO,WAGP,kBAAmB,mBACnB,kBAAmB,mBACnB,IAAM,SAAU,cAChB,IAAK,SAAU,cAGjBC,aACE,aAAc,KACd,cAAoB,YAGtBC,SACE,WAAY,WACZ,WAAY,kBACZ,MAAY,0BACZ,QAAcC,OAASC,WAAcC,MAAO,SAAUC,KAAM,QACjDC,WAAY","file":"vs/editor/standalone-languages/ini.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/ini\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Ini',\r\n        name: 'ini',\r\n        defaultToken: '',\r\n        lineComment: '#',\r\n        blockCommentStart: '#',\r\n        blockCommentEnd: ' ',\r\n        // we include these common regular expressions\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // sections\r\n                [/^\\[[^\\]]*\\]/, 'metatag'],\r\n                // keys\r\n                [/(^\\w+)(\\s*)(\\=)/, ['key', '', 'delimiter']],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // numbers\r\n                [/\\d+/, 'number'],\r\n                // strings: recover on non-terminated strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"/, 'string', '@string.\"'],\r\n                [/'/, 'string', '@string.\\''],\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/^\\s*[#;].*$/, 'comment'],\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"']+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },\r\n                            '@default': 'string' } }]\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'Ini',\n\tname:           'ini',\n\tdefaultToken: '',\n\n\tlineComment:      '#',\n\tblockCommentStart: '#',\n\tblockCommentEnd:   ' ',\n\n\t// we include these common regular expressions\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t// sections\n\t\t\t[/^\\[[^\\]]*\\]/, 'metatag'],\n\n\t\t\t// keys\n\t\t\t[/(^\\w+)(\\s*)(\\=)/, ['key', '', 'delimiter']],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// numbers\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// strings: recover on non-terminated strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  'string', '@string.\"' ],\n\t\t\t[/'/, 'string', '@string.\\''],\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/^\\s*[#;].*$/,    \t\t'comment'],\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/[\"']/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'string' }} ]\n\t\t],\n\t},\n};"]}