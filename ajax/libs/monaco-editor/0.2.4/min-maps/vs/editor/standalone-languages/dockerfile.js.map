{"version":3,"sources":["vs/editor/standalone-languages/dockerfile.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/dockerfile.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","instructions","instructionAfter","variableAfter","variable","tokenizer","root","include","token","next","arguments","cases","@eos","@default","whitespace","comment","strings","stringBody","dblStringBody"],"mappings":";;;;;;AAWAA,OAAO,6CAA8C,UAAW,WAAY,SAAUC,EAASC,GCN/F,YAIWA,GAAAC,UACVC,YAAa,aACbC,KAAM,aACNC,aAAc,GAEdC,aAAc,mFAEdC,iBAAkB,UAElBC,cAAe,MAEfC,SAAS,cAETC,WACAC,OACIC,QAAS,gBACTA,QAAS,aAEV,4BAA6B,WAAaC,MAAO,GAAIC,KAAM,oBAC3D,GAAI,UAAW,kBAGlBR,eACG,gCAAiC,UAAW,IAAIO,MAAM,WAAYC,KAAK,iBACvE,kBAAmB,UAAW,eAGjCC,YACIH,QAAS,gBACTA,QAAS,aAEV,eAAiBI,OAASC,QAASJ,MAAM,WAAYC,KAAK,WAAYI,WAAY,eAClF,MAAQF,OAASC,OAAQ,GAAIC,WAAY,OACzC,KAAOF,OAASC,QAASJ,MAAM,GAAIC,KAAK,WAAYI,WAAY,OAInEC,aACE,OAASH,OAASC,QAASJ,MAAM,GAAIC,KAAK,WAAYI,WAAY,OAGpEE,UACE,UAAW,UAAW,YAIxBC,UACE,KAAM,SAAU,YAChB,IAAK,SAAU,gBACf,KAAM,SAAU,YAChB,IAAK,SAAU,mBAEjBC,aACE,YAAcN,OAASC,QAASJ,MAAM,SAAUC,KAAK,WAAYI,WAAY,aAE7E,MAAO,kBACP,KAAM,SAAU,YAChB,IAAK,SAAU,SACf,cAAe,aAEf,MAAO,WACP,IAAK,SAAU,YAEjBK,gBACE,YAAcP,OAASC,QAASJ,MAAM,SAAUC,KAAK,WAAYI,WAAY,aAE7E,MAAO,kBACP,KAAM,SAAU,YAChB,IAAK,SAAU,SACf,cAAe,aAEf,MAAO,WACP,IAAK,SAAU","file":"vs/editor/standalone-languages/dockerfile.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/dockerfile\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Dockerfile',\r\n        name: 'dockerfile',\r\n        defaultToken: '',\r\n        instructions: /FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|ENTRYPOINT/,\r\n        instructionAfter: /ONBUILD/,\r\n        variableAfter: /ENV/,\r\n        variable: /\\${?[\\w]+}?/,\r\n        tokenizer: {\r\n            root: [\r\n                { include: '@whitespace' },\r\n                { include: '@comment' },\r\n                [/(@instructionAfter)(\\s+)/, ['keyword', { token: '', next: '@instructions' }]],\r\n                ['', 'keyword', '@instructions']\r\n            ],\r\n            instructions: [\r\n                [/(@variableAfter)(\\s+)([\\w]+)/, ['keyword', '', { token: 'variable', next: '@arguments' }]],\r\n                [/(@instructions)/, 'keyword', '@arguments']\r\n            ],\r\n            arguments: [\r\n                { include: '@whitespace' },\r\n                { include: '@strings' },\r\n                [/(@variable)/, { cases: { '@eos': { token: 'variable', next: '@popall' }, '@default': 'variable' } }],\r\n                [/\\\\/, { cases: { '@eos': '', '@default': '' } }],\r\n                [/./, { cases: { '@eos': { token: '', next: '@popall' }, '@default': '' } }],\r\n            ],\r\n            // Deal with white space, including comments\r\n            whitespace: [\r\n                [/\\s+/, { cases: { '@eos': { token: '', next: '@popall' }, '@default': '' } }],\r\n            ],\r\n            comment: [\r\n                [/(^#.*$)/, 'comment', '@popall']\r\n            ],\r\n            // Recognize strings, including those broken across lines with \\ (but not without)\r\n            strings: [\r\n                [/'$/, 'string', '@popall'],\r\n                [/'/, 'string', '@stringBody'],\r\n                [/\"$/, 'string', '@popall'],\r\n                [/\"/, 'string', '@dblStringBody']\r\n            ],\r\n            stringBody: [\r\n                [/[^\\\\\\$']/, { cases: { '@eos': { token: 'string', next: '@popall' }, '@default': 'string' } }],\r\n                [/\\\\./, 'string.escape'],\r\n                [/'$/, 'string', '@popall'],\r\n                [/'/, 'string', '@pop'],\r\n                [/(@variable)/, 'variable'],\r\n                [/\\\\$/, 'string'],\r\n                [/$/, 'string', '@popall']\r\n            ],\r\n            dblStringBody: [\r\n                [/[^\\\\\\$\"]/, { cases: { '@eos': { token: 'string', next: '@popall' }, '@default': 'string' } }],\r\n                [/\\\\./, 'string.escape'],\r\n                [/\"$/, 'string', '@popall'],\r\n                [/\"/, 'string', '@pop'],\r\n                [/(@variable)/, 'variable'],\r\n                [/\\\\$/, 'string'],\r\n                [/$/, 'string', '@popall']\r\n            ]\r\n        }\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage>{\n\tdisplayName: 'Dockerfile',\n\tname: 'dockerfile',\n\tdefaultToken: '',\n\n\tinstructions: /FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|ENTRYPOINT/,\n\n\tinstructionAfter: /ONBUILD/,\n\n\tvariableAfter: /ENV/,\n\n\tvariable:/\\${?[\\w]+}?/,\n\n\ttokenizer: {\n\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@comment' },\n\n\t\t\t[/(@instructionAfter)(\\s+)/, ['keyword', { token: '', next: '@instructions' }]],\n\t\t\t['', 'keyword', '@instructions']\n\t],\n\n\tinstructions: [\n\t\t\t[/(@variableAfter)(\\s+)([\\w]+)/, ['keyword', '',{token:'variable', next:'@arguments'}]],\n\t\t\t[/(@instructions)/, 'keyword', '@arguments']\n\t],\n\n\targuments: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[/(@variable)/, { cases: { '@eos': {token:'variable', next:'@popall'}, '@default': 'variable' }} ],\n\t\t\t[/\\\\/, { cases: { '@eos': '', '@default': '' }}],\n\t\t\t[/./, { cases: { '@eos': {token:'', next:'@popall'}, '@default': '' } }],\n\t],\n\n\t// Deal with white space, including comments\n\twhitespace: [\n\t\t[/\\s+/, { cases: { '@eos': {token:'', next:'@popall'}, '@default': '' }}],\n\t],\n\n\tcomment: [\n\t\t[/(^#.*$)/, 'comment', '@popall']\n\t],\n\n\t// Recognize strings, including those broken across lines with \\ (but not without)\n\tstrings: [\n\t\t[/'$/, 'string', '@popall'],\n\t\t[/'/, 'string', '@stringBody'],\n\t\t[/\"$/, 'string', '@popall'],\n\t\t[/\"/, 'string', '@dblStringBody']\n\t],\n\tstringBody: [\n\t\t[/[^\\\\\\$']/, { cases: { '@eos': {token:'string', next:'@popall'}, '@default': 'string' }}],\n\n\t\t[/\\\\./, 'string.escape'],\n\t\t[/'$/, 'string', '@popall'],\n\t\t[/'/, 'string', '@pop'],\n\t\t[/(@variable)/, 'variable' ],\n\n\t\t[/\\\\$/, 'string'],\n\t\t[/$/, 'string', '@popall']\n\t],\n\tdblStringBody: [\n\t\t[/[^\\\\\\$\"]/, { cases: { '@eos': {token:'string', next:'@popall'}, '@default': 'string' }}],\n\n\t\t[/\\\\./, 'string.escape'],\n\t\t[/\"$/, 'string', '@popall'],\n\t\t[/\"/, 'string', '@pop'],\n\t\t[/(@variable)/, 'variable' ],\n\n\t\t[/\\\\$/, 'string'],\n\t\t[/$/, 'string', '@popall']\n\t]\n\t}\n};"]}