{"version":3,"sources":["vs/editor/standalone-languages/powershell.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/powershell.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","ignoreCase","lineComment","blockCommentStart","blockCommentEnd","wordDefinition","brackets","token","open","close","autoClosingPairs","keywords","helpKeywords","symbols","escapes","tokenizer","root","cases","@keywords","@default","@eos","next","string","$S2==\"","$#==$S2","herestring","$1==$S2","comment"],"mappings":";;;;;;AAWAA,OAAO,6CAA8C,UAAW,WAAY,SAAUC,EAASC,GCN/F,YAIWA,GAAAC,UACVC,YAAa,aACbC,KAAM,MACNC,aAAc,GACdC,YAAY,EAEZC,YAAa,IACbC,kBAAmB,KACnBC,gBAAiB,KAGjBC,eAAgB,oFAEhBC,WACKC,MAAO,kBAAmBC,KAAM,IAAKC,MAAO,MAC5CF,MAAO,mBAAoBC,KAAM,IAAKC,MAAO,MAC7CF,MAAO,wBAAyBC,KAAM,IAAKC,MAAO,MASvDC,mBAAoB,IAAK,MAAO,IAAK,MAAO,IAAK,MAIjDC,UACC,QAAS,QAAS,QAAS,QAAS,WAAY,OAChD,SAAU,KAAM,eAAgB,OAAQ,SAAU,MAClD,OAAQ,SAAU,UAAW,MAAO,UAAW,OAC/C,WAAY,KAAM,KAAM,QAAS,UAAW,SAC5C,SAAU,QAAS,OAAQ,MAAO,QAAS,QAC3C,MAAO,QAAS,WAAY,WAAY,WAAY,eAAgB,iBAGrEC,aAAc,0KAGdC,QAAS,2BACTC,QAAS,wEAGTC,WACCC,OAGE,mBAAqBC,OAASC,aAAcX,MAAM,cAC3CY,WAAY,OAGnB,aAAc,KAGd,QAAS,YAGT,oGAAqG,aAGrG,KAAM,UAAW,aACjB,OAAQ,YAGR,aAAc,cACd,WAAY,cAGZ,2BAA4B,iBAC5B,gCAAiC,eACjC,OAAQ,WAGR,QAAS,cAGT,MAAO,SAAU,kBACjB,MAAQ,SAAU,kBAClB,KAAQF,OAASG,OAAQ,SAAUD,YAAaZ,MAAM,SAAUc,KAAK,iBACrE,KAAOJ,OAASG,OAAQ,SAAUD,YAAaZ,MAAM,SAAUc,KAAK,iBAGtEC,SACE,aAAeL,OAASG,QAASb,MAAM,SAAUc,KAAK,WAAYF,WAAY,aAC9E,YAAcF,OAASG,QAASb,MAAM,gBAAiBc,KAAK,WAAYF,WAAY,oBACpF,MAAQF,OAASG,QAASb,MAAM,wBAAyBc,KAAK,WAAYF,WAAY,4BAEtF,YAAcF,OAASM,UAAYhB,MAAO,WAAYc,KAAM,WAAaF,YAAcZ,MAAO,SAAUc,KAAM,eAC9G,WAAaJ,OAASM,SAAU,WAAYJ,WAAY,aAExD,QAAcF,OAASO,WAAcjB,MAAO,SAAUc,KAAM,QACvDF,YAAcF,OAASG,QAASb,MAAM,SAAUc,KAAK,WAAYF,WAAY,eAGpFM,aACE,eAAiBR,OAASS,WAAanB,MAAO,SAAUc,KAAM,QAAUF,WAAY,aACpF,UAAU,WACV,WAAY,kBACZ,KAAM,0BACN,WAAaF,OAASM,SAAU,WAAYJ,WAAY,aAG1DQ,UACE,UAAW,YACX,KAAM,UAAW,SACjB,6BAA+BpB,MAAO,wBACtC,QAAW","file":"vs/editor/standalone-languages/powershell.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/powershell\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'PowerShell',\r\n        name: 'ps1',\r\n        defaultToken: '',\r\n        ignoreCase: true,\r\n        lineComment: '#',\r\n        blockCommentStart: '<#',\r\n        blockCommentEnd: '#>',\r\n        // the default separators except `$-`\r\n        wordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n        brackets: [\r\n            { token: 'delimiter.curly', open: '{', close: '}' },\r\n            { token: 'delimiter.square', open: '[', close: ']' },\r\n            { token: 'delimiter.parenthesis', open: '(', close: ')' }],\r\n        // enhancedBrackets: [\r\n        // \t\t\t{ tokenType:'string', openTrigger: '\"', open: /@\"$/, closeComplete: '\"@' },\r\n        // \t\t\t{ tokenType:'string', openTrigger: '\\'', open: /@'$/, closeComplete: '\\'@' },\r\n        // \t\t\t{ tokenType:'string', openTrigger: '\"', open: /\"$/, closeComplete: '\"' },\r\n        // \t\t\t{ tokenType: 'string', openTrigger: '\\'', open: /'$/, closeComplete: '\\'' }\r\n        // ],\r\n        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')']],\r\n        // default auto-closing of ' and \" which is\r\n        // override above by enhancedBrackets\r\n        keywords: [\r\n            'begin', 'break', 'catch', 'class', 'continue', 'data',\r\n            'define', 'do', 'dynamicparam', 'else', 'elseif', 'end',\r\n            'exit', 'filter', 'finally', 'for', 'foreach', 'from',\r\n            'function', 'if', 'in', 'param', 'process', 'return',\r\n            'switch', 'throw', 'trap', 'try', 'until', 'using',\r\n            'var', 'while', 'workflow', 'parallel', 'sequence', 'inlinescript', 'configuration'\r\n        ],\r\n        helpKeywords: /SYNOPSIS|DESCRIPTION|PARAMETER|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|ROLE|FUNCTIONALITY|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP/,\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?&%|+\\-*\\/\\^;\\.,]+/,\r\n        escapes: /`(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // commands and keywords\r\n                [/[a-zA-Z_][\\w-]*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': '' } }],\r\n                // whitespace\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                // labels\r\n                [/^:\\w*/, 'metatag'],\r\n                // variables\r\n                [/\\$(\\{((global|local|private|script|using):)?[\\w]+\\}|((global|local|private|script|using):)?[\\w]+)/, 'variable'],\r\n                // Comments\r\n                [/<#/, 'comment', '@comment'],\r\n                [/#.*$/, 'comment'],\r\n                // delimiters\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/@symbols/, 'delimiter'],\r\n                // numbers\r\n                [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\r\n                [/\\d+?/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings:\r\n                [/\\@\"/, 'string', '@herestring.\"'],\r\n                [/\\@'/, 'string', '@herestring.\\''],\r\n                [/\"/, { cases: { '@eos': 'string', '@default': { token: 'string', next: '@string.\"' } } }],\r\n                [/'/, { cases: { '@eos': 'string', '@default': { token: 'string', next: '@string.\\'' } } }],\r\n            ],\r\n            string: [\r\n                [/[^\"'\\$`]+/, { cases: { '@eos': { token: 'string', next: '@popall' }, '@default': 'string' } }],\r\n                [/@escapes/, { cases: { '@eos': { token: 'string.escape', next: '@popall' }, '@default': 'string.escape' } }],\r\n                [/`./, { cases: { '@eos': { token: 'string.escape.invalid', next: '@popall' }, '@default': 'string.escape.invalid' } }],\r\n                [/\\$[\\w]+$/, { cases: { '$S2==\"': { token: 'variable', next: '@popall' }, '@default': { token: 'string', next: '@popall' } } }],\r\n                [/\\$[\\w]+/, { cases: { '$S2==\"': 'variable', '@default': 'string' } }],\r\n                [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },\r\n                            '@default': { cases: { '@eos': { token: 'string', next: '@popall' }, '@default': 'string' } } } }],\r\n            ],\r\n            herestring: [\r\n                [/^\\s*([\"'])@/, { cases: { '$1==$S2': { token: 'string', next: '@pop' }, '@default': 'string' } }],\r\n                [/[^\\$`]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/`./, 'string.escape.invalid'],\r\n                [/\\$[\\w]+/, { cases: { '$S2==\"': 'variable', '@default': 'string' } }],\r\n            ],\r\n            comment: [\r\n                [/[^#\\.]+/, 'comment'],\r\n                [/#>/, 'comment', '@pop'],\r\n                [/(\\.)(@helpKeywords)(?!\\w)/, { token: 'comment.keyword.$2' }],\r\n                [/[\\.#]/, 'comment']\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: 'PowerShell',\n\tname: 'ps1',\n\tdefaultToken: '',\n\tignoreCase: true,\n\n\tlineComment: '#',\n\tblockCommentStart: '<#',\n\tblockCommentEnd: '#>',\n\n\t// the default separators except `$-`\n\twordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n\n\tbrackets: [\n\t\t\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' }],\n\n\t// enhancedBrackets: [\n\t// \t\t\t{ tokenType:'string', openTrigger: '\"', open: /@\"$/, closeComplete: '\"@' },\n\t// \t\t\t{ tokenType:'string', openTrigger: '\\'', open: /@'$/, closeComplete: '\\'@' },\n\t// \t\t\t{ tokenType:'string', openTrigger: '\"', open: /\"$/, closeComplete: '\"' },\n\t// \t\t\t{ tokenType: 'string', openTrigger: '\\'', open: /'$/, closeComplete: '\\'' }\n\t// ],\n\n\tautoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')']],\t// Defined explicitly, to suppress the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// default auto-closing of ' and \" which is\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// override above by enhancedBrackets\n\n\tkeywords: [\n\t\t'begin', 'break', 'catch', 'class', 'continue', 'data',\n\t\t'define', 'do', 'dynamicparam', 'else', 'elseif', 'end',\n\t\t'exit', 'filter', 'finally', 'for', 'foreach', 'from',\n\t\t'function', 'if', 'in', 'param', 'process', 'return',\n\t\t'switch', 'throw', 'trap', 'try', 'until', 'using',\n\t\t'var', 'while', 'workflow', 'parallel', 'sequence', 'inlinescript', 'configuration'\n\t],\n\n\thelpKeywords: /SYNOPSIS|DESCRIPTION|PARAMETER|EXAMPLE|INPUTS|OUTPUTS|NOTES|LINK|COMPONENT|ROLE|FUNCTIONALITY|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP/,\n\n\t// we include these common regular expressions\n\tsymbols: /[=><!~?&%|+\\-*\\/\\^;\\.,]+/,\n\tescapes: /`(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t// commands and keywords\n\t\t\t[/[a-zA-Z_][\\w-]*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t\t'@default': '' } }],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\n\t\t\t// labels\n\t\t\t[/^:\\w*/, 'metatag'],\n\n\t\t\t// variables\n\t\t\t[/\\$(\\{((global|local|private|script|using):)?[\\w]+\\}|((global|local|private|script|using):)?[\\w]+)/, 'variable'],\n\n\t\t\t// Comments\n\t\t\t[/<#/, 'comment', '@comment'],\n\t\t\t[/#.*$/, 'comment'],\n\n\t\t\t// delimiters\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings:\n\t\t\t[/\\@\"/, 'string', '@herestring.\"'],\n\t\t\t[/\\@'/,  'string', '@herestring.\\''],\n\t\t\t[/\"/,  { cases: { '@eos': 'string', '@default': {token:'string', next:'@string.\"'} }} ],\n\t\t\t[/'/, { cases: { '@eos': 'string', '@default': {token:'string', next:'@string.\\''} }} ],\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\"'\\$`]+/, { cases: { '@eos': {token:'string', next:'@popall'}, '@default': 'string' }}],\n\t\t\t[/@escapes/, { cases: { '@eos': {token:'string.escape', next:'@popall'}, '@default': 'string.escape' }}],\n\t\t\t[/`./, { cases: { '@eos': {token:'string.escape.invalid', next:'@popall'}, '@default': 'string.escape.invalid' }}],\n\n\t\t\t[/\\$[\\w]+$/, { cases: { '$S2==\"': { token: 'variable', next: '@popall' }, '@default': { token: 'string', next: '@popall' } } }],\n\t\t\t[/\\$[\\w]+/, { cases: { '$S2==\"': 'variable', '@default': 'string' }}],\n\n\t\t\t[/[\"']/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' },\n\t\t\t\t\t\t\t\t\t'@default': { cases: { '@eos': {token:'string', next:'@popall'}, '@default': 'string' }} }} ],\n\t\t],\n\n\t\therestring: [\n\t\t\t[/^\\s*([\"'])@/, { cases: { '$1==$S2': { token: 'string', next: '@pop' }, '@default': 'string' } }],\n\t\t\t[/[^\\$`]+/,'string' ],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/`./, 'string.escape.invalid'],\n\t\t\t[/\\$[\\w]+/, { cases: { '$S2==\"': 'variable', '@default': 'string' } }],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^#\\.]+/, 'comment' ],\n\t\t\t[/#>/, 'comment', '@pop'],\n\t\t\t[/(\\.)(@helpKeywords)(?!\\w)/, { token: 'comment.keyword.$2' } ],\n\t\t\t[/[\\.#]/,   'comment' ]\n\t\t],\n\t},\n};"]}