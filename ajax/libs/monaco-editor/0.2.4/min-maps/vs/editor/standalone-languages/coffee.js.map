{"version":3,"sources":["vs/editor/standalone-languages/coffee.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/coffee.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","ignoreCase","lineComment","blockCommentStart","blockCommentEnd","brackets","open","close","token","wordDefinition","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","@keywords","@default","next","$S2==interpolatedstring","@eos","string","$S2==\"","$#==$S2","herestring","$1==$S2","bracket","comment","hereregexp"],"mappings":";;;;;;AAWAA,OAAO,yCAA0C,UAAW,WAAY,SAAUC,EAASC,GCN3F,YAIWA,GAAAC,UACVC,YAAgB,eAChBC,KAAgB,SAChBC,aAAc,GACdC,YAAY,EAEZC,YAAa,IACbC,kBAAmB,MACnBC,gBAAiB,MAEjBC,WACGC,KAAK,IAAKC,MAAM,IAAKC,MAAM,oBAC3BF,KAAK,IAAKC,MAAM,IAAKC,MAAM,qBAC3BF,KAAK,IAAKC,MAAM,IAAKC,MAAM,0BAU9BC,eAAgB,wFAChBC,MAAO,qCAEPC,UACC,MAAO,KAAM,KAAM,OAAQ,MAAO,KAAM,MAAO,IAAK,KAAM,MAC1D,OAAQ,QAAS,OAAQ,OACzB,MAAO,SAAU,SAAU,KAAM,aACjC,SAAU,QAAS,QAAS,WAAY,WACxC,KAAM,OAAQ,SAAU,MAAO,QAAS,KAAM,MAAO,QAAS,UAC9D,QAAS,UAAW,QACpB,YAAa,OAAQ,SAAU,QAAS,OAAQ,KAAM,KAAM,QAI7DC,QAAU,4BACVC,QAAU,yEAGVC,WACCC,OAGE,iBAAkB,wBAClB,gBAAkBC,OAClBC,OAAQ,sBACRC,aAAeV,MAAO,cACtBW,WAAY,OAKZ,aAAc,KAGd,MAAO,UAAW,aAClB,OAAQ,YAGR,OAASX,MAAO,SAAUY,KAAM,iBAEhC,kBAAmB,GAAI,YACvB,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,YAAa,GAAI,YACvC,qBAAsB,GAAI,GAAI,YAI9B,KAAOJ,OACNK,2BAA8Bb,MAAO,SAAUY,KAAM,QACnDD,WAAe,gBAClB,aAAc,cACd,WAAY,cAGZ,sBAAuB,iBACvB,2BAA4B,iBAC5B,oBAAqB,eACrB,gBAAiB,iBACjB,MAAO,WAGP,OAAQ,cAGR,MAAO,SAAU,oBACjB,MAAQ,SAAU,oBAClB,KAAQH,OAASM,OAAQ,SAAUH,YAAaX,MAAM,SAAUY,KAAK,iBACrE,KAAOJ,OAASM,OAAQ,SAAUH,YAAaX,MAAM,SAAUY,KAAK,iBAGtEG,SACE,aAAc,WACd,WAAY,kBACZ,KAAM,0BACN,KAAM,0BAEN,MAASP,OAASQ,UAAYhB,MAAO,SAAUY,KAAM,2BAA6BD,WAAY,aAE9F,QAAcH,OAASS,WAAcjB,MAAO,SAAUY,KAAM,QAAUD,WAAY,aAClF,IAAK,WAGPO,aACE,aAAeV,OAASW,WAAanB,MAAO,SAAUY,KAAM,QAAUD,WAAY,aAClF,YAAY,WACZ,QAAQ,WACR,WAAY,kBACZ,KAAM,0BAEN,MAAQX,MAAO,eAAgBoB,QAAS,QAASR,KAAM,6BACvD,IAAK,WAGPS,UACE,QAAS,YACT,MAAO,UAAW,SAClB,IAAK,YAGPC,aACE,WAAY,WACZ,MAAO,WACP,OAAQ,YACR,aAAetB,MAAO,SAAUY,KAAM,UACtC,KAAM","file":"vs/editor/standalone-languages/coffee.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/coffee\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'CoffeeScript',\r\n        name: 'coffee',\r\n        defaultToken: '',\r\n        ignoreCase: true,\r\n        lineComment: '#',\r\n        blockCommentStart: '###',\r\n        blockCommentEnd: '###',\r\n        brackets: [\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.square' },\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n        ],\r\n        // enhancedBrackets: [\r\n        // \t\t{ open: /for$/ }, { open: /while$/ },\t{ open: /loop$/ }, { open: /if$/ }, { open: /unless$/ },\r\n        // \t\t{ open: /else$/ }, { open: /switch$/ }, { open: /try$/ }, { open: /catch$/ }, { open: /finally$/ },\r\n        // \t\t{ open: /class$/ }, { open: /->$/ }\r\n        // \t],\r\n        // the default separators\r\n        wordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n        regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\r\n        keywords: [\r\n            'and', 'or', 'is', 'isnt', 'not', 'on', 'yes', '@', 'no', 'off',\r\n            'true', 'false', 'null', 'this',\r\n            'new', 'delete', 'typeof', 'in', 'instanceof',\r\n            'return', 'throw', 'break', 'continue', 'debugger',\r\n            'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally',\r\n            'class', 'extends', 'super',\r\n            'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\r\n                [/[a-zA-Z_]\\w*/, { cases: {\r\n                            'this': 'variable.predefined',\r\n                            '@keywords': { token: 'keyword.$0' },\r\n                            '@default': ''\r\n                        }\r\n                    }],\r\n                // whitespace\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                // Comments\r\n                [/###/, 'comment', '@comment'],\r\n                [/#.*$/, 'comment'],\r\n                // regular expressions\r\n                ['///', { token: 'regexp', next: '@hereregexp' }],\r\n                [/^(\\s*)(@regEx)/, ['', 'regexp']],\r\n                [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n                [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n                [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n                [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n                [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n                [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n                [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n                [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n                [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n                [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n                [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\r\n                // delimiters\r\n                [/}/, { cases: {\r\n                            '$S2==interpolatedstring': { token: 'string', next: '@pop' },\r\n                            '@default': '@brackets' } }],\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/@symbols/, 'delimiter'],\r\n                // numbers\r\n                [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n                [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n                [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n                [/0[0-7]+(?!\\d)/, 'number.octal'],\r\n                [/\\d+/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[,.]/, 'delimiter'],\r\n                // strings:\r\n                [/\"\"\"/, 'string', '@herestring.\"\"\"'],\r\n                [/'''/, 'string', '@herestring.\\'\\'\\''],\r\n                [/\"/, { cases: { '@eos': 'string', '@default': { token: 'string', next: '@string.\"' } } }],\r\n                [/'/, { cases: { '@eos': 'string', '@default': { token: 'string', next: '@string.\\'' } } }],\r\n            ],\r\n            string: [\r\n                [/[^\"'\\#\\\\]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\./, 'string.escape.invalid'],\r\n                [/\\./, 'string.escape.invalid'],\r\n                [/#{/, { cases: { '$S2==\"': { token: 'string', next: 'root.interpolatedstring' }, '@default': 'string' } }],\r\n                [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' }, '@default': 'string' } }],\r\n                [/#/, 'string']\r\n            ],\r\n            herestring: [\r\n                [/(\"\"\"|''')/, { cases: { '$1==$S2': { token: 'string', next: '@pop' }, '@default': 'string' } }],\r\n                [/[^#\\\\'\"]+/, 'string'],\r\n                [/['\"]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\./, 'string.escape.invalid'],\r\n                [/#{/, { token: 'string.quote', bracket: '@open', next: 'root.interpolatedstring' }],\r\n                [/#/, 'string']\r\n            ],\r\n            comment: [\r\n                [/[^#]+/, 'comment',],\r\n                [/###/, 'comment', '@pop'],\r\n                [/#/, 'comment'],\r\n            ],\r\n            hereregexp: [\r\n                [/[^\\\\\\/#]/, 'regexp'],\r\n                [/\\\\./, 'regexp'],\r\n                [/#.*$/, 'comment'],\r\n                ['///[igm]*', { token: 'regexp', next: '@pop' }],\r\n                [/\\//, 'regexp'],\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'CoffeeScript',\n\tname:           'coffee',\n\tdefaultToken: '',\n\tignoreCase: true,\n\n\tlineComment: '#',\n\tblockCommentStart: '###',\n\tblockCommentEnd: '###',\n\n\tbrackets: [\n\t\t{ open:'{', close:'}', token:'delimiter.curly'},\n\t\t{ open:'[', close:']', token:'delimiter.square'},\n\t\t{ open:'(', close:')', token:'delimiter.parenthesis'}\n\t],\n\n\t// enhancedBrackets: [\n\t// \t\t{ open: /for$/ }, { open: /while$/ },\t{ open: /loop$/ }, { open: /if$/ }, { open: /unless$/ },\n\t// \t\t{ open: /else$/ }, { open: /switch$/ }, { open: /try$/ }, { open: /catch$/ }, { open: /finally$/ },\n\t// \t\t{ open: /class$/ }, { open: /->$/ }\n\t// \t],\n\n\t// the default separators\n\twordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n\tregEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n\n\tkeywords: [\n\t\t'and', 'or', 'is', 'isnt', 'not', 'on', 'yes', '@', 'no', 'off',\n\t\t'true', 'false', 'null', 'this',\n\t\t'new', 'delete', 'typeof', 'in', 'instanceof',\n\t\t'return', 'throw', 'break', 'continue', 'debugger',\n\t\t'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally',\n\t\t'class', 'extends', 'super',\n\t\t'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'\n\t\t],\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t// identifiers and keywords\n\t\t\t[/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\n\t\t\t[/[a-zA-Z_]\\w*/, { cases: {\n\t\t\t\t'this': 'variable.predefined',\n\t\t\t\t'@keywords': { token: 'keyword.$0' },\n\t\t\t\t'@default': ''\n\t\t\t\t}\n\t\t\t}],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\n\t\t\t// Comments\n\t\t\t[/###/, 'comment', '@comment'],\n\t\t\t[/#.*$/, 'comment'],\n\n\t\t\t// regular expressions\n\t\t\t['///', { token: 'regexp', next: '@hereregexp' }],\n\n\t\t\t[/^(\\s*)(@regEx)/, ['', 'regexp']],\n\t\t\t[/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n\t\t\t[/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n\t\t\t[/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\n\t\t\t[/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\n\t\t\t[/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\n\n\n\t\t\t// delimiters\n\t\t\t[/}/, { cases: {\n\t\t\t\t\t'$S2==interpolatedstring' : { token: 'string', next: '@pop' }\n\t\t\t\t\t,\t'@default'   : '@brackets' } }],\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F]+/, 'number.hex'],\n\t\t\t[/0[0-7]+(?!\\d)/, 'number.octal'],\n\t\t\t[/\\d+/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[,.]/, 'delimiter'],\n\n\t\t\t// strings:\n\t\t\t[/\"\"\"/, 'string', '@herestring.\"\"\"'],\n\t\t\t[/'''/,  'string', '@herestring.\\'\\'\\''],\n\t\t\t[/\"/,  { cases: { '@eos': 'string', '@default': {token:'string', next:'@string.\"'} }} ],\n\t\t\t[/'/, { cases: { '@eos': 'string', '@default': {token:'string', next:'@string.\\''} }} ],\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\"'\\#\\\\]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\n\t\t\t[/#{/,  { cases: { '$S2==\"': { token: 'string', next: 'root.interpolatedstring' }, '@default': 'string' }}],\n\n\t\t\t[/[\"']/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' }, '@default': 'string' }} ],\n\t\t\t[/#/, 'string']\n\t\t],\n\n\t\therestring: [\n\t\t\t[/(\"\"\"|''')/, { cases: { '$1==$S2': { token: 'string', next: '@pop' }, '@default': 'string' } }],\n\t\t\t[/[^#\\\\'\"]+/,'string' ],\n\t\t\t[/['\"]+/,'string' ],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\./, 'string.escape.invalid'],\n\n\t\t\t[/#{/, { token: 'string.quote', bracket: '@open', next: 'root.interpolatedstring' } ],\n\t\t\t[/#/, 'string']\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^#]+/, 'comment', ],\n\t\t\t[/###/, 'comment', '@pop'],\n\t\t\t[/#/, 'comment' ],\n\t\t],\n\n\t\thereregexp: [\n\t\t\t[/[^\\\\\\/#]/, 'regexp'],\n\t\t\t[/\\\\./, 'regexp'],\n\t\t\t[/#.*$/, 'comment'],\n\t\t\t['///[igm]*', { token: 'regexp', next: '@pop' }],\n\t\t\t[/\\//, 'regexp'],\n\t\t],\n\t},\n};"]}