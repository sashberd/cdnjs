{"version":3,"sources":["vs/editor/standalone-languages/python.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/python.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","keywords","brackets","open","close","token","tokenizer","root","include","cases","@keywords","@default","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"mappings":";;;;;;AAWAA,OAAO,yCAA0C,UAAW,WAAY,SAAUC,EAASC,GCN3F,YAIWA,GAAAC,UACVC,YAAa,GACbC,KAAM,SACNC,aAAc,GAEdC,YAAa,IACbC,kBAAmB,MACnBC,gBAAiB,MAEjBC,UACC,MACA,KACA,SACA,QACA,QACA,WACA,MACA,MACA,OACA,OACA,SACA,OACA,UACA,MACA,OACA,SACA,KACA,SACA,KACA,KACA,SACA,OACA,MACA,KACA,OACA,QACA,QACA,SACA,OACA,MACA,QACA,OACA,QAEA,MACA,QACA,OACA,UACA,MAEA,MACA,MACA,MACA,QACA,aACA,MACA,OACA,SACA,YACA,WACA,MACA,cACA,MACA,SACA,UACA,UACA,UACA,OACA,MACA,SACA,YACA,OACA,WACA,OACA,SACA,SACA,YACA,UACA,UACA,UACA,OACA,OACA,KACA,QACA,SACA,aACA,aACA,OACA,MACA,SACA,OACA,MACA,MACA,aACA,MACA,OACA,SACA,MACA,OACA,MACA,MACA,QACA,WACA,WACA,QACA,YACA,SACA,SACA,OACA,WACA,QACA,MACA,UACA,QACA,SACA,eACA,MACA,MACA,QACA,QACA,OACA,SACA,UACA,OACA,SACA,MAEA,OACA,QAEA,WACA,cACA,cACA,YACA,YACA,WACA,UACA,iBACA,WACA,cAGDC,WACGC,KAAM,IAAKC,MAAO,IAAKC,MAAO,oBAC9BF,KAAM,IAAKC,MAAO,IAAKC,MAAO,sBAC9BF,KAAM,IAAKC,MAAO,IAAKC,MAAO,0BAMjCC,WACAC,OACIC,QAAS,gBACTA,QAAS,aACTA,QAAS,aAEV,QAAS,cACT,aAAc,cAEd,eAAgB,QAChB,eAAiBC,OAASC,YAAa,UACjCC,WAAY,iBAIrBC,aACE,MAAO,UACP,UAAW,YACX,wBAAyB,WACzB,SAAU,SAAU,kBACpB,SAAU,SAAU,qBAEtBC,eACE,MAAO,WACP,QAAS,SAAU,YACnB,MAAO,WAETC,kBACE,MAAO,WACP,QAAS,SAAU,YACnB,MAAO,WAITC,UACE,mCAAoC,eACpC,0CAA2C,WAI7CC,UACE,KAAM,gBAAiB,YACvB,IAAK,gBAAiB,gBACtB,KAAM,gBAAiB,YACvB,IAAK,gBAAiB,mBAExBC,aACE,MAAO,WACP,IAAK,gBAAiB,YACtB,WAAY,WACZ,QAAS,WACT,MAAO,SAAU,YAEnBC,gBACE,MAAO,WACP,IAAK,gBAAiB,YACtB,WAAY,WACZ,QAAS,WACT,MAAO,SAAU","file":"vs/editor/standalone-languages/python.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/python\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: '',\r\n        name: 'python',\r\n        defaultToken: '',\r\n        lineComment: '#',\r\n        blockCommentStart: '\\'\\'\\'',\r\n        blockCommentEnd: '\\'\\'\\'',\r\n        keywords: [\r\n            'and',\r\n            'as',\r\n            'assert',\r\n            'break',\r\n            'class',\r\n            'continue',\r\n            'def',\r\n            'del',\r\n            'elif',\r\n            'else',\r\n            'except',\r\n            'exec',\r\n            'finally',\r\n            'for',\r\n            'from',\r\n            'global',\r\n            'if',\r\n            'import',\r\n            'in',\r\n            'is',\r\n            'lambda',\r\n            'None',\r\n            'not',\r\n            'or',\r\n            'pass',\r\n            'print',\r\n            'raise',\r\n            'return',\r\n            'self',\r\n            'try',\r\n            'while',\r\n            'with',\r\n            'yield',\r\n            'int',\r\n            'float',\r\n            'long',\r\n            'complex',\r\n            'hex',\r\n            'abs',\r\n            'all',\r\n            'any',\r\n            'apply',\r\n            'basestring',\r\n            'bin',\r\n            'bool',\r\n            'buffer',\r\n            'bytearray',\r\n            'callable',\r\n            'chr',\r\n            'classmethod',\r\n            'cmp',\r\n            'coerce',\r\n            'compile',\r\n            'complex',\r\n            'delattr',\r\n            'dict',\r\n            'dir',\r\n            'divmod',\r\n            'enumerate',\r\n            'eval',\r\n            'execfile',\r\n            'file',\r\n            'filter',\r\n            'format',\r\n            'frozenset',\r\n            'getattr',\r\n            'globals',\r\n            'hasattr',\r\n            'hash',\r\n            'help',\r\n            'id',\r\n            'input',\r\n            'intern',\r\n            'isinstance',\r\n            'issubclass',\r\n            'iter',\r\n            'len',\r\n            'locals',\r\n            'list',\r\n            'map',\r\n            'max',\r\n            'memoryview',\r\n            'min',\r\n            'next',\r\n            'object',\r\n            'oct',\r\n            'open',\r\n            'ord',\r\n            'pow',\r\n            'print',\r\n            'property',\r\n            'reversed',\r\n            'range',\r\n            'raw_input',\r\n            'reduce',\r\n            'reload',\r\n            'repr',\r\n            'reversed',\r\n            'round',\r\n            'set',\r\n            'setattr',\r\n            'slice',\r\n            'sorted',\r\n            'staticmethod',\r\n            'str',\r\n            'sum',\r\n            'super',\r\n            'tuple',\r\n            'type',\r\n            'unichr',\r\n            'unicode',\r\n            'vars',\r\n            'xrange',\r\n            'zip',\r\n            'True',\r\n            'False',\r\n            '__dict__',\r\n            '__methods__',\r\n            '__members__',\r\n            '__class__',\r\n            '__bases__',\r\n            '__name__',\r\n            '__mro__',\r\n            '__subclasses__',\r\n            '__init__',\r\n            '__import__'\r\n        ],\r\n        brackets: [\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.bracket' },\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n        ],\r\n        // Cause an automatic indent to occur after lines ending in :.\r\n        // enhancedBrackets: [ { open: /.*:\\s*$/,  closeComplete: 'else:' } ],\r\n        tokenizer: {\r\n            root: [\r\n                { include: '@whitespace' },\r\n                { include: '@numbers' },\r\n                { include: '@strings' },\r\n                [/[,:;]/, 'delimiter'],\r\n                [/[{}\\[\\]()]/, '@brackets'],\r\n                [/@[a-zA-Z]\\w*/, 'tag'],\r\n                [/[a-zA-Z]\\w*/, { cases: { '@keywords': 'keyword',\r\n                            '@default': 'identifier' } }]\r\n            ],\r\n            // Deal with white space, including single and multi-line comments\r\n            whitespace: [\r\n                [/\\s+/, 'white'],\r\n                [/(^#.*$)/, 'comment'],\r\n                [/('''.*''')|(\"\"\".*\"\"\")/, 'string'],\r\n                [/'''.*$/, 'string', '@endDocString'],\r\n                [/\"\"\".*$/, 'string', '@endDblDocString']\r\n            ],\r\n            endDocString: [\r\n                [/\\\\'/, 'string'],\r\n                [/.*'''/, 'string', '@popall'],\r\n                [/.*$/, 'string']\r\n            ],\r\n            endDblDocString: [\r\n                [/\\\\\"/, 'string'],\r\n                [/.*\"\"\"/, 'string', '@popall'],\r\n                [/.*$/, 'string']\r\n            ],\r\n            // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\r\n            numbers: [\r\n                [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\r\n                [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\r\n            ],\r\n            // Recognize strings, including those broken across lines with \\ (but not without)\r\n            strings: [\r\n                [/'$/, 'string.escape', '@popall'],\r\n                [/'/, 'string.escape', '@stringBody'],\r\n                [/\"$/, 'string.escape', '@popall'],\r\n                [/\"/, 'string.escape', '@dblStringBody']\r\n            ],\r\n            stringBody: [\r\n                [/\\\\./, 'string'],\r\n                [/'/, 'string.escape', '@popall'],\r\n                [/.(?=.*')/, 'string'],\r\n                [/.*\\\\$/, 'string'],\r\n                [/.*$/, 'string', '@popall']\r\n            ],\r\n            dblStringBody: [\r\n                [/\\\\./, 'string'],\r\n                [/\"/, 'string.escape', '@popall'],\r\n                [/.(?=.*\")/, 'string'],\r\n                [/.*\\\\$/, 'string'],\r\n                [/.*$/, 'string', '@popall']\r\n            ]\r\n        }\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: '',\n\tname: 'python',\n\tdefaultToken: '',\n\n\tlineComment: '#',\n\tblockCommentStart: '\\'\\'\\'',\n\tblockCommentEnd: '\\'\\'\\'',\n\n\tkeywords: [\n\t\t'and',\n\t\t'as',\n\t\t'assert',\n\t\t'break',\n\t\t'class',\n\t\t'continue',\n\t\t'def',\n\t\t'del',\n\t\t'elif',\n\t\t'else',\n\t\t'except',\n\t\t'exec',\n\t\t'finally',\n\t\t'for',\n\t\t'from',\n\t\t'global',\n\t\t'if',\n\t\t'import',\n\t\t'in',\n\t\t'is',\n\t\t'lambda',\n\t\t'None',\n\t\t'not',\n\t\t'or',\n\t\t'pass',\n\t\t'print',\n\t\t'raise',\n\t\t'return',\n\t\t'self',\n\t\t'try',\n\t\t'while',\n\t\t'with',\n\t\t'yield',\n\n\t\t'int',\n\t\t'float',\n\t\t'long',\n\t\t'complex',\n\t\t'hex',\n\n\t\t'abs',\n\t\t'all',\n\t\t'any',\n\t\t'apply',\n\t\t'basestring',\n\t\t'bin',\n\t\t'bool',\n\t\t'buffer',\n\t\t'bytearray',\n\t\t'callable',\n\t\t'chr',\n\t\t'classmethod',\n\t\t'cmp',\n\t\t'coerce',\n\t\t'compile',\n\t\t'complex',\n\t\t'delattr',\n\t\t'dict',\n\t\t'dir',\n\t\t'divmod',\n\t\t'enumerate',\n\t\t'eval',\n\t\t'execfile',\n\t\t'file',\n\t\t'filter',\n\t\t'format',\n\t\t'frozenset',\n\t\t'getattr',\n\t\t'globals',\n\t\t'hasattr',\n\t\t'hash',\n\t\t'help',\n\t\t'id',\n\t\t'input',\n\t\t'intern',\n\t\t'isinstance',\n\t\t'issubclass',\n\t\t'iter',\n\t\t'len',\n\t\t'locals',\n\t\t'list',\n\t\t'map',\n\t\t'max',\n\t\t'memoryview',\n\t\t'min',\n\t\t'next',\n\t\t'object',\n\t\t'oct',\n\t\t'open',\n\t\t'ord',\n\t\t'pow',\n\t\t'print',\n\t\t'property',\n\t\t'reversed',\n\t\t'range',\n\t\t'raw_input',\n\t\t'reduce',\n\t\t'reload',\n\t\t'repr',\n\t\t'reversed',\n\t\t'round',\n\t\t'set',\n\t\t'setattr',\n\t\t'slice',\n\t\t'sorted',\n\t\t'staticmethod',\n\t\t'str',\n\t\t'sum',\n\t\t'super',\n\t\t'tuple',\n\t\t'type',\n\t\t'unichr',\n\t\t'unicode',\n\t\t'vars',\n\t\t'xrange',\n\t\t'zip',\n\n\t\t'True',\n\t\t'False',\n\n\t\t'__dict__',\n\t\t'__methods__',\n\t\t'__members__',\n\t\t'__class__',\n\t\t'__bases__',\n\t\t'__name__',\n\t\t'__mro__',\n\t\t'__subclasses__',\n\t\t'__init__',\n\t\t'__import__'\n\t],\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\t// Cause an automatic indent to occur after lines ending in :.\n\t// enhancedBrackets: [ { open: /.*:\\s*$/,  closeComplete: 'else:' } ],\n\n\ttokenizer: {\n\troot: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[/[,:;]/, 'delimiter'],\n\t\t\t[/[{}\\[\\]()]/, '@brackets'],\n\n\t\t\t[/@[a-zA-Z]\\w*/, 'tag'],\n\t\t\t[/[a-zA-Z]\\w*/, { cases: { '@keywords': 'keyword',\n\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }]\n\t],\n\n\t// Deal with white space, including single and multi-line comments\n\twhitespace: [\n\t\t[/\\s+/, 'white'],\n\t\t[/(^#.*$)/, 'comment'],\n\t\t[/('''.*''')|(\"\"\".*\"\"\")/, 'string'],\n\t\t[/'''.*$/, 'string', '@endDocString'],\n\t\t[/\"\"\".*$/, 'string', '@endDblDocString']\n\t],\n\tendDocString: [\n\t\t[/\\\\'/, 'string'],\n\t\t[/.*'''/, 'string', '@popall'],\n\t\t[/.*$/, 'string']\n\t],\n\tendDblDocString: [\n\t\t[/\\\\\"/, 'string'],\n\t\t[/.*\"\"\"/, 'string', '@popall'],\n\t\t[/.*$/, 'string']\n\t],\n\n\t// Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n\tnumbers: [\n\t\t[/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\n\t\t[/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\n\t],\n\n\t// Recognize strings, including those broken across lines with \\ (but not without)\n\tstrings: [\n\t\t[/'$/, 'string.escape', '@popall'],\n\t\t[/'/, 'string.escape', '@stringBody'],\n\t\t[/\"$/, 'string.escape', '@popall'],\n\t\t[/\"/, 'string.escape', '@dblStringBody']\n\t],\n\tstringBody: [\n\t\t[/\\\\./, 'string'],\n\t\t[/'/, 'string.escape', '@popall'],\n\t\t[/.(?=.*')/, 'string'],\n\t\t[/.*\\\\$/, 'string'],\n\t\t[/.*$/, 'string', '@popall']\n\t],\n\tdblStringBody: [\n\t\t[/\\\\./, 'string'],\n\t\t[/\"/, 'string.escape', '@popall'],\n\t\t[/.(?=.*\")/, 'string'],\n\t\t[/.*\\\\$/, 'string'],\n\t\t[/.*$/, 'string', '@popall']\n\t]\n\t}\n};"]}