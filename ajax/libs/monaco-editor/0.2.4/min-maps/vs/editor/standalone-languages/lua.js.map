{"version":3,"sources":["vs/editor/standalone-languages/lua.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/lua.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","keywords","brackets","token","open","close","operators","symbols","escapes","tokenizer","root","cases","@keywords","@default","include","@operators","whitespace","comment","$1==$S2","next","string","$#==$S2"],"mappings":";;;;;;AAWAA,OAAO,sCAAuC,UAAW,WAAY,SAAUC,EAASC,GCNxF,YAIWA,GAAAC,UACVC,YAAa,MACbC,KAAa,MACbC,aAAc,GAEdC,YAAkB,KAClBC,kBAAmB,OACnBC,gBAAmB,KAEnBC,UACC,MAAO,QAAS,KAAM,OAAQ,SAC/B,MAAO,QAAS,MAAO,WAAY,OAAQ,KAC3C,KAAM,QAAS,MAAO,MAAO,KAC7B,SAAU,SAAU,OAAQ,OAAQ,QACpC,SAGAC,WACIC,MAAO,oBAAqBC,KAAM,IAAKC,MAAO,MAC9CF,MAAO,kBAAmBC,KAAM,IAAKC,MAAO,MAC5CF,MAAO,wBAAyBC,KAAM,IAAKC,MAAO,MAGtDC,WACC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,KAAM,OAI1BC,QAAU,wBACVC,QAAU,wEAGVC,WACCC,OAEE,gBAAkBC,OAASC,aAAcT,MAAM,cAClCU,WAAY,iBAExBC,QAAS,gBAGX,uCAAwC,YAAa,GAAI,MAAO,GAAI,eACpE,uCAAwC,YAAa,GAAI,MAAO,GAAI,eAGnE,aAAc,cACd,YAAcH,OAASI,aAAc,YAC1BF,WAAc,OAGzB,2BAA4B,iBAC5B,gCAAiC,eACjC,OAAQ,WAGR,QAAS,cAGT,kBAAmB,mBACnB,kBAAmB,mBACnB,IAAM,SAAU,cAChB,IAAK,SAAU,cAGjBG,aACE,aAAc,KACd,eAAiB,UAAW,gBAC5B,QAAgB,YAGlBC,UACE,SAAU,YACV,cAAgBN,OAASO,WAAaf,MAAO,UAAWgB,KAAM,QAAUN,WAAa,cACrF,IAAO,YAGTO,SACE,WAAY,WACZ,WAAY,kBACZ,MAAY,0BACZ,QAAcT,OAASU,WAAclB,MAAO,SAAUgB,KAAM,QACjDN,WAAY","file":"vs/editor/standalone-languages/lua.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/lua\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Lua',\r\n        name: 'lua',\r\n        defaultToken: '',\r\n        lineComment: '--',\r\n        blockCommentStart: '--[[',\r\n        blockCommentEnd: ']]',\r\n        keywords: [\r\n            'and', 'break', 'do', 'else', 'elseif',\r\n            'end', 'false', 'for', 'function', 'goto', 'if',\r\n            'in', 'local', 'nil', 'not', 'or',\r\n            'repeat', 'return', 'then', 'true', 'until',\r\n            'while'\r\n        ],\r\n        brackets: [\r\n            { token: 'delimiter.bracket', open: '{', close: '}' },\r\n            { token: 'delimiter.array', open: '[', close: ']' },\r\n            { token: 'delimiter.parenthesis', open: '(', close: ')' }\r\n        ],\r\n        operators: [\r\n            '+', '-', '*', '/', '%', '^', '#', '==', '~=', '<=', '>=', '<', '>', '=',\r\n            ';', ':', ',', '.', '..', '...'\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                [/[a-zA-Z_]\\w*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': 'identifier' } }],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // keys\r\n                [/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']],\r\n                [/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/@symbols/, { cases: { '@operators': 'delimiter',\r\n                            '@default': '' } }],\r\n                // numbers\r\n                [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\r\n                [/\\d+?/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings: recover on non-terminated strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"/, 'string', '@string.\"'],\r\n                [/'/, 'string', '@string.\\''],\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/--\\[([=]*)\\[/, 'comment', '@comment.$1'],\r\n                [/--.*$/, 'comment'],\r\n            ],\r\n            comment: [\r\n                [/[^\\]]+/, 'comment'],\r\n                [/\\]([=]*)\\]/, { cases: { '$1==$S2': { token: 'comment', next: '@pop' }, '@default': 'comment' } }],\r\n                [/./, 'comment']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"']+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },\r\n                            '@default': 'string' } }]\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: 'Lua',\n\tname:        'lua',\n\tdefaultToken: '',\n\n\tlineComment:      '--',\n\tblockCommentStart: '--[[',\n\tblockCommentEnd:   ']]',\n\n\tkeywords: [\n\t\t'and', 'break', 'do', 'else', 'elseif',\n\t'end', 'false', 'for', 'function', 'goto', 'if',\n\t'in', 'local', 'nil', 'not', 'or',\n\t'repeat', 'return', 'then', 'true', 'until',\n\t'while'\n\t],\n\n\tbrackets: [\n\t\t\t{ token: 'delimiter.bracket', open: '{', close: '}'},\n\t\t\t{ token: 'delimiter.array', open: '[', close: ']'},\n\t\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')'}\n\t],\n\n\toperators: [\n\t\t'+', '-', '*', '/', '%', '^', '#', '==', '~=', '<=', '>=', '<', '>', '=',\n\t';', ':', ',', '.', '..', '...'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/[a-zA-Z_]\\w*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t// keys\n\t\t[/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']],\n\t\t[/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'delimiter',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default'  : '' } } ],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/\\d+?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings: recover on non-terminated strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  'string', '@string.\"' ],\n\t\t\t[/'/, 'string', '@string.\\''],\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/--\\[([=]*)\\[/,  'comment', '@comment.$1' ],\n\t\t\t[/--.*$/,        'comment'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\]]+/, 'comment'],\n\t\t\t[/\\]([=]*)\\]/, { cases: { '$1==$S2': { token: 'comment', next: '@pop' }, '@default' : 'comment' } } ],\n\t\t\t[/./,   'comment' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/[\"']/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'string' }} ]\n\t\t],\n\n\t},\n};"]}