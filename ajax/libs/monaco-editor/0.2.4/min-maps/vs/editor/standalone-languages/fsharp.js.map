{"version":3,"sources":["vs/editor/standalone-languages/fsharp.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/fsharp.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","autoClosingPairs","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","@keywords","token","@default","include","bracket","next","whitespace","comment","string","$#==$S2","litstring"],"mappings":";;;;;;AAWAA,OAAO,yCAA0C,UAAW,WAAY,SAAUC,EAASC,GCN3F,YAIWA,GAAAC,UACVC,YAAgB,KAChBC,KAAgB,KAChBC,aAAc,GAEdC,YAAkB,KAClBC,kBAAmB,KACnBC,gBAAiB,KAEjBC,mBAAqB,IAAK,MAAO,IAAK,MAAO,IAAM,MAAO,IAAM,MAEhEC,UACC,WAAY,MAAO,SAAU,KAC7B,SAAU,MAAO,OAAQ,QACzB,QAAS,UAAW,YACpB,QAAS,aAAc,cACvB,WAAY,QAAS,UACrB,WAAW,KAAM,OAAQ,WACzB,SAAU,OAAQ,OAAQ,MAC1B,YAAa,QAAS,QAAS,WAC/B,SAAU,QAAS,UAAW,MAC9B,MAAO,WAAY,QAAS,UAC5B,SAAU,KAAM,KAAM,UAAW,UACjC,SAAU,YAAa,WAAY,OACnC,MAAO,MAAM,MAAO,OAAQ,OAAQ,MACpC,QAAS,SAAS,MAAM,SAAU,UAClC,YAAa,SAAU,QAAS,MAAO,MACvC,OAAQ,KAAM,OAAQ,KAAM,SAC5B,WAAY,UAAW,WAAY,UACnC,YAAa,OAAQ,SAAU,MAAO,SACtC,SAAU,SAAU,SAAU,MAAO,OACrC,KAAM,OAAQ,WAAY,QAC1B,MAAO,OAAQ,SAAU,MACzB,MAAO,OAAQ,UAAW,WAC1B,OAAQ,QAAQ,OAAQ,SAIzBC,QAAU,4BACVC,QAAU,wEACVC,cAAe,iBACfC,YAAa,UAGbC,WACCC,OAEE,gBAAkBC,OAASC,aAAcC,MAAM,cACzCC,WAAY,iBAGjBC,QAAS,gBAGV,WAAY,eAGZ,oBAAqB,YAGrB,aAAc,cACd,mBAAoB,cACpB,WAAY,cAGZ,uCAAwC,iBACxC,yCAA0C,iBAC1C,mBAAoB,iBACpB,iCAAkC,eAClC,2BAA4B,eAC5B,sBAAuB,WAGvB,QAAS,cAGT,kBAAmB,mBACnB,MAAO,SAAU,gBACjB,IAAK,SAAU,cAGf,OAASF,MAAO,eAAgBG,QAAS,QAASC,KAAM,gBAGxD,aAAc,WACd,oBAAqB,SAAS,gBAAgB,YAC9C,IAAK,mBAGPC,aACE,aAAc,KACd,OAAgB,UAAW,aAC3B,UAAgB,YAGlBC,UACE,SAAU,YACV,OAAW,UAAW,SACtB,KAAQ,YAGVC,SACE,UAAW,WACX,WAAY,kBACZ,MAAY,0BACZ,aAAmBT,OAASU,WAAcR,MAAO,SAAUI,KAAM,QAC5DH,WAAY,aAGnBQ,YACE,QAAY,WACZ,KAAY,kBACZ,KAAcT,MAAO,eAAgBG,QAAS,SAAUC,KAAM","file":"vs/editor/standalone-languages/fsharp.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/fsharp\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'F#',\r\n        name: 'fs',\r\n        defaultToken: '',\r\n        lineComment: '//',\r\n        blockCommentStart: '(*',\r\n        blockCommentEnd: '*)',\r\n        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')'], ['\"', '\"']],\r\n        keywords: [\r\n            'abstract', 'and', 'atomic', 'as',\r\n            'assert', 'asr', 'base', 'begin',\r\n            'break', 'checked', 'component',\r\n            'const', 'constraint', 'constructor',\r\n            'continue', 'class', 'default',\r\n            'delegate', 'do', 'done', 'downcast',\r\n            'downto', 'elif', 'else', 'end',\r\n            'exception', 'eager', 'event', 'external',\r\n            'extern', 'false', 'finally', 'for',\r\n            'fun', 'function', 'fixed', 'functor',\r\n            'global', 'if', 'in', 'include', 'inherit',\r\n            'inline', 'interface', 'internal', 'land',\r\n            'lor', 'lsl', 'lsr', 'lxor', 'lazy', 'let',\r\n            'match', 'member', 'mod', 'module', 'mutable',\r\n            'namespace', 'method', 'mixin', 'new', 'not',\r\n            'null', 'of', 'open', 'or', 'object',\r\n            'override', 'private', 'parallel', 'process',\r\n            'protected', 'pure', 'public', 'rec', 'return',\r\n            'static', 'sealed', 'struct', 'sig', 'then',\r\n            'to', 'true', 'tailcall', 'trait',\r\n            'try', 'type', 'upcast', 'use',\r\n            'val', 'void', 'virtual', 'volatile',\r\n            'when', 'while', 'with', 'yield'\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        integersuffix: /[uU]?[yslnLI]?/,\r\n        floatsuffix: /[fFmM]?/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                [/[a-zA-Z_]\\w*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': 'identifier' } }],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // [< attributes >].\r\n                [/\\[<.*>\\]/, 'annotation'],\r\n                // Preprocessor directive\r\n                [/^#(if|else|endif)/, 'keyword'],\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/[<>](?!@symbols)/, '@brackets'],\r\n                [/@symbols/, 'delimiter'],\r\n                // numbers\r\n                [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n                [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n                [/0x[0-9a-fA-F]+LF/, 'number.float'],\r\n                [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],\r\n                [/0b[0-1]+(@integersuffix)/, 'number.bin'],\r\n                [/\\d+(@integersuffix)/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"\"\"/, 'string', '@string.\"\"\"'],\r\n                [/\"/, 'string', '@string.\"'],\r\n                // literal string\r\n                [/\\@\"/, { token: 'string.quote', bracket: '@open', next: '@litstring' }],\r\n                // characters\r\n                [/'[^\\\\']'B?/, 'string'],\r\n                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n                [/'/, 'string.invalid']\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/\\(\\*/, 'comment', '@comment'],\r\n                [/\\/\\/.*$/, 'comment'],\r\n            ],\r\n            comment: [\r\n                [/[^\\*]+/, 'comment'],\r\n                [/\\*\\)/, 'comment', '@pop'],\r\n                [/\\*/, 'comment']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/(\"\"\"|\"B?)/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },\r\n                            '@default': 'string' } }]\r\n            ],\r\n            litstring: [\r\n                [/[^\"]+/, 'string'],\r\n                [/\"\"/, 'string.escape'],\r\n                [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'F#',\n\tname:           'fs',\n\tdefaultToken: '',\n\n\tlineComment:      '//',\n\tblockCommentStart: '(*',\n\tblockCommentEnd: '*)',\n\n\tautoClosingPairs: [ ['{', '}'], ['[', ']'], ['(',  ')'], ['\"',  '\"']], // Skip < > which would be there by default.\n\n\tkeywords: [\n\t\t'abstract', 'and', 'atomic', 'as',\n\t\t'assert', 'asr', 'base', 'begin',\n\t\t'break', 'checked', 'component',\n\t\t'const', 'constraint', 'constructor',\n\t\t'continue', 'class', 'default',\n\t\t'delegate','do', 'done', 'downcast',\n\t\t'downto', 'elif', 'else', 'end',\n\t\t'exception', 'eager', 'event', 'external',\n\t\t'extern',\t'false', 'finally',\t'for',\n\t\t'fun',\t'function', 'fixed', 'functor',\n\t\t'global', 'if', 'in', 'include', 'inherit',\n\t\t'inline', 'interface', 'internal', 'land',\n\t\t'lor', 'lsl','lsr', 'lxor', 'lazy', 'let',\n\t\t'match', 'member','mod','module', 'mutable',\n\t\t'namespace', 'method', 'mixin', 'new', 'not',\n\t\t'null', 'of', 'open', 'or', 'object',\n\t\t'override', 'private', 'parallel', 'process',\n\t\t'protected', 'pure', 'public', 'rec', 'return',\n\t\t'static', 'sealed', 'struct', 'sig', 'then',\n\t\t'to', 'true', 'tailcall', 'trait',\n\t\t'try', 'type', 'upcast', 'use',\n\t\t'val', 'void', 'virtual', 'volatile',\n\t\t'when', 'while','with', 'yield'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tintegersuffix: /[uU]?[yslnLI]?/,\n\tfloatsuffix: /[fFmM]?/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/[a-zA-Z_]\\w*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [< attributes >].\n\t\t\t[/\\[<.*>\\]/, 'annotation'],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^#(if|else|endif)/, 'keyword'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/@symbols/, 'delimiter' ],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/0x[0-9a-fA-F]+LF/, 'number.float'],\n\t\t\t[/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],\n\t\t\t[/0b[0-1]+(@integersuffix)/, 'number.bin'],\n\t\t\t[/\\d+(@integersuffix)/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"\"\"/, 'string', '@string.\"\"\"'],\n\t\t\t[/\"/, 'string', '@string.\"' ],\n\n\t\t\t// literal string\n\t\t\t[/\\@\"/, { token: 'string.quote', bracket: '@open', next: '@litstring' }],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'B?/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string','string.escape','string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\(\\*/,       \t\t'comment', '@comment' ],\n\t\t\t[/\\/\\/.*$/,    \t\t'comment'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\*]+/, 'comment' ],\n\t\t\t[/\\*\\)/,    'comment', '@pop'  ],\n\t\t\t[/\\*/,   'comment' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/, 'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/(\"\"\"|\"B?)/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' },\n\t\t\t\t\t\t\t\t\t'@default': 'string' }} ]\n\t\t],\n\n\t\tlitstring: [\n\t\t\t[/[^\"]+/,    'string'],\n\t\t\t[/\"\"/,       'string.escape'],\n\t\t\t[/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\n\t\t],\n\t},\n};"]}