{"version":3,"sources":["vs/editor/standalone-languages/go.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/go.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","autoClosingPairs","keywords","operators","symbols","escapes","tokenizer","root","cases","@keywords","token","@default","include","@operators","whitespace","comment","doccomment","string"],"mappings":";;;;;;AAWAA,OAAO,qCAAsC,UAAW,WAAY,SAAUC,EAASC,GCNvF,YAIWA,GAAAC,UAEVC,YAAgB,KAChBC,KAAgB,KAChBC,aAAc,GAEdC,YAAkB,KAClBC,kBAAmB,KACnBC,gBAAiB,KAEjBC,mBAAqB,IAAK,MAAO,IAAK,MAAO,IAAM,MAAO,IAAM,MAEhEC,UACC,QACA,OACA,OACA,QACA,WACA,UACA,QACA,OACA,cACA,MACA,OACA,KACA,OACA,KACA,SACA,YACA,MACA,UACA,QACA,SACA,SACA,SACA,SACA,OACA,MACA,OACA,OACA,QACA,QACA,SACA,SACA,SACA,OACA,QACA,QACA,QACA,UACA,UACA,YACA,aACA,OACA,OACA,OACA,MACA,UACA,SACA,OAGDC,WACC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KACpD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAC9D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MAChF,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAI7CC,QAAU,wBACVC,QAAU,wEAIVC,WACCC,OAEE,gBAAkBC,OAASC,aAAcC,MAAM,cAClCC,WAAY,iBAGxBC,QAAS,gBAGV,aAAc,eAGd,WAAY,YAGZ,aAAc,cACd,mBAAoB,cACpB,YAAcJ,OAASK,aAAc,YAC1BF,WAAc,OAGzB,yBAA0B,iBAC1B,2BAA4B,iBAC5B,gCAAiC,eACjC,gBAAiB,iBACjB,oBAAqB,kBACrB,WAAY,WACZ,KAAM,WAGN,QAAS,cAGT,kBAAmB,mBACnB,IAAM,SAAU,YAGhB,WAAY,WACZ,oBAAqB,SAAS,gBAAgB,YAC9C,IAAK,mBAGPG,aACE,aAAc,KACd,eAAiB,cAAe,gBAChC,OAAgB,UAAW,aAC3B,UAAgB,YAGlBC,UACE,UAAW,YAGX,OAAW,UAAW,SACtB,QAAW,YAGbC,aACE,UAAW,gBAEX,OAAW,wBACX,OAAW,cAAe,SAC1B,QAAW,gBAGbC,SACE,UAAY,WACZ,WAAY,kBACZ,MAAY,0BACZ,IAAY,SAAU","file":"vs/editor/standalone-languages/go.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/go\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Go',\r\n        name: 'go',\r\n        defaultToken: '',\r\n        lineComment: '//',\r\n        blockCommentStart: '/*',\r\n        blockCommentEnd: '*/',\r\n        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')'], ['\"', '\"']],\r\n        keywords: [\r\n            'break',\r\n            'case',\r\n            'chan',\r\n            'const',\r\n            'continue',\r\n            'default',\r\n            'defer',\r\n            'else',\r\n            'fallthrough',\r\n            'for',\r\n            'func',\r\n            'go',\r\n            'goto',\r\n            'if',\r\n            'import',\r\n            'interface',\r\n            'map',\r\n            'package',\r\n            'range',\r\n            'return',\r\n            'select',\r\n            'struct',\r\n            'switch',\r\n            'type',\r\n            'var',\r\n            'bool',\r\n            'true',\r\n            'false',\r\n            'uint8',\r\n            'uint16',\r\n            'uint32',\r\n            'uint64',\r\n            'int8',\r\n            'int16',\r\n            'int32',\r\n            'int64',\r\n            'float32',\r\n            'float64',\r\n            'complex64',\r\n            'complex128',\r\n            'byte',\r\n            'rune',\r\n            'uint',\r\n            'int',\r\n            'uintptr',\r\n            'string',\r\n            'nil',\r\n        ],\r\n        operators: [\r\n            '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^',\r\n            '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '&^=',\r\n            '&&', '||', '<-', '++', '--', '==', '<', '>', '=', '!', '!=', '<=', '>=', ':=', '...',\r\n            '(', ')', '', ']', '{', '}', ',', ';', '.', ':'\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                [/[a-zA-Z_]\\w*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': 'identifier' } }],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // [[ attributes ]].\r\n                [/\\[\\[.*\\]\\]/, 'annotation'],\r\n                // Preprocessor directive\r\n                [/^\\s*#\\w+/, 'keyword'],\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/[<>](?!@symbols)/, '@brackets'],\r\n                [/@symbols/, { cases: { '@operators': 'delimiter',\r\n                            '@default': '' } }],\r\n                // numbers\r\n                [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n                [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n                [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'],\r\n                [/0[0-7']*[0-7]/, 'number.octal'],\r\n                [/0[bB][0-1']*[0-1]/, 'number.binary'],\r\n                [/\\d[\\d']*/, 'number'],\r\n                [/\\d/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"/, 'string', '@string'],\r\n                // characters\r\n                [/'[^\\\\']'/, 'string'],\r\n                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n                [/'/, 'string.invalid']\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\r\n                [/\\/\\*/, 'comment', '@comment'],\r\n                [/\\/\\/.*$/, 'comment'],\r\n            ],\r\n            comment: [\r\n                [/[^\\/*]+/, 'comment'],\r\n                // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n                // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\r\n                [/\\*\\//, 'comment', '@pop'],\r\n                [/[\\/*]/, 'comment']\r\n            ],\r\n            //Identical copy of comment above, except for the addition of .doc\r\n            doccomment: [\r\n                [/[^\\/*]+/, 'comment.doc'],\r\n                // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\r\n                [/\\/\\*/, 'comment.doc.invalid'],\r\n                [/\\*\\//, 'comment.doc', '@pop'],\r\n                [/[\\/*]/, 'comment.doc']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/\"/, 'string', '@pop']\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\n\tdisplayName:    'Go',\n\tname:           'go',\n\tdefaultToken: '',\n\n\tlineComment:      '//',\n\tblockCommentStart: '/*',\n\tblockCommentEnd: '*/',\n\n\tautoClosingPairs: [ ['{', '}'], ['[', ']'], ['(',  ')'], ['\"',  '\"']], // Skip < > which would be there by default.\n\n\tkeywords: [\n\t\t'break',\n\t\t'case',\n\t\t'chan',\n\t\t'const',\n\t\t'continue',\n\t\t'default',\n\t\t'defer',\n\t\t'else',\n\t\t'fallthrough',\n\t\t'for',\n\t\t'func',\n\t\t'go',\n\t\t'goto',\n\t\t'if',\n\t\t'import',\n\t\t'interface',\n\t\t'map',\n\t\t'package',\n\t\t'range',\n\t\t'return',\n\t\t'select',\n\t\t'struct',\n\t\t'switch',\n\t\t'type',\n\t\t'var',\n\t\t'bool',\n\t\t'true',\n\t\t'false',\n\t\t'uint8',\n\t\t'uint16',\n\t\t'uint32',\n\t\t'uint64',\n\t\t'int8',\n\t\t'int16',\n\t\t'int32',\n\t\t'int64',\n\t\t'float32',\n\t\t'float64',\n\t\t'complex64',\n\t\t'complex128',\n\t\t'byte',\n\t\t'rune',\n\t\t'uint',\n\t\t'int',\n\t\t'uintptr',\n\t\t'string',\n\t\t'nil',\n\t],\n\n\toperators: [\n\t\t'+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^',\n\t\t'+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '&^=',\n\t\t'&&', '||', '<-', '++', '--', '==', '<', '>', '=', '!', '!=', '<=', '>=', ':=', '...',\n\t\t'(', ')', '', ']', '{', '}', ',', ';', '.', ':'\n\t],\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/[a-zA-Z_]\\w*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [[ attributes ]].\n\t\t\t[/\\[\\[.*\\]\\]/, 'annotation'],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^\\s*#\\w+/, 'keyword'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'delimiter',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default'  : '' } } ],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'],\n\t\t\t[/0[0-7']*[0-7]/, 'number.octal'],\n\t\t\t[/0[bB][0-1']*[0-1]/, 'number.binary'],\n\t\t\t[/\\d[\\d']*/, 'number'],\n\t\t\t[/\\d/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  'string', '@string' ],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string','string.escape','string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/,  'comment.doc', '@doccomment' ],\n\t\t\t[/\\/\\*/,       \t\t'comment', '@comment' ],\n\t\t\t[/\\/\\/.*$/,    \t\t'comment'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment' ],\n\t\t\t// [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n\t\t\t// [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n\t\t\t[/\\*\\//,    'comment', '@pop'  ],\n\t\t\t[/[\\/*]/,   'comment' ]\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tdoccomment: [\n\t\t\t[/[^\\/*]+/, 'comment.doc' ],\n\t\t\t// [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n\t\t\t[/\\/\\*/,    'comment.doc.invalid' ],\n\t\t\t[/\\*\\//,    'comment.doc', '@pop'  ],\n\t\t\t[/[\\/*]/,   'comment.doc' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/,  'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/\"/,        'string', '@pop' ]\n\t\t],\n\t},\n};"]}