{"version":3,"sources":["vs/editor/standalone-languages/bat.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/bat.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","ignoreCase","lineComment","autoClosingPairs","brackets","token","open","close","keywords","symbols","escapes","tokenizer","root","bracket","string","cases","@eos","next","@default","$#==$S2"],"mappings":";;;;;;AAWAA,OAAO,sCAAuC,UAAW,WAAY,SAAUC,EAASC,GCNxF,YAIWA,GAAAC,UACVC,YAAgB,QAChBC,KAAgB,MAChBC,aAAc,GACdC,YAAY,EAEZC,YAAa,MAEbC,mBAAqB,IAAI,MAAS,IAAI,MAAQ,IAAI,MAAQ,IAAI,MAE9DC,WACGC,MAAO,sBAAuBC,KAAM,IAAKC,MAAO,MAChDF,MAAO,0BAA2BC,KAAM,IAAKC,MAAO,MACpDF,MAAO,qBAAsBC,KAAM,IAAKC,MAAO,MAelDC,SAAU,4FAGVC,QAAU,0BACVC,QAAU,wEAGVC,WACCC,OAEE,yBAA0B,GAAG,aAE7B,2BAA4BP,MAAM,qBAAsBA,MAAM,0BAG9D,aAAc,KAGd,kBAAoBA,MAAO,gCAAiCQ,QAAS,WACrE,kBAAoBR,MAAO,gCAAiCQ,QAAS,YAGrE,eAAgB,KAGhB,OAAQ,YAGR,UAAW,aACX,gBAAiB,aAGjB,aAAc,cACd,WAAY,gBAGZ,2BAA4B,2BAC5B,gCAAiC,yBACjC,MAAO,qBAGP,QAAS,gBAGT,IAAM,SAAU,cAChB,IAAK,SAAU,cAGjBC,SACE,aAAeC,OAASC,QAASX,MAAM,SAAUY,KAAK,WAAYC,WAAY,aAC9E,WAAY,kBACZ,MAAO,0BACP,WAAY,aACZ,gBAAiB,aACjB,QAAcH,OAASI,WAAcd,MAAO,SAAUY,KAAM,QACzDC,WAAY,aACf,IAAK,SAAU","file":"vs/editor/standalone-languages/bat.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/bat\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Batch',\r\n        name: 'bat',\r\n        defaultToken: '',\r\n        ignoreCase: true,\r\n        lineComment: 'REM',\r\n        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')'], ['\"', '\"']],\r\n        brackets: [\r\n            { token: 'punctuation.bracket', open: '{', close: '}' },\r\n            { token: 'punctuation.parenthesis', open: '(', close: ')' },\r\n            { token: 'punctuation.square', open: '[', close: ']' }\r\n        ],\r\n        // enhancedBrackets: [\r\n        // \t\t{\r\n        // \t\t\topenTrigger: 'l',\r\n        // \t\t\topen: /setlocal$/i,\r\n        // \t\t\tcloseComplete: 'endlocal',\r\n        // \t\t\tmatchCase: true,\r\n        // \t\t\tcloseTrigger: 'l',\r\n        // \t\t\tclose: /endlocal$/i,\r\n        // \t\t\ttokenType: 'keyword.tag-setlocal'\r\n        // \t\t}\r\n        // \t],\r\n        keywords: /call|defined|echo|errorlevel|exist|for|goto|if|pause|set|shift|start|title|not|pushd|popd/,\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                [/^(\\s*)(rem(?:\\s.*|))$/, ['', 'comment']],\r\n                [/(\\@?)(@keywords)(?!\\w)/, [{ token: 'support.function' }, { token: 'support.function.$2' }]],\r\n                // whitespace\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                // blocks\r\n                [/setlocal(?!\\w)/, { token: 'support.function.tag-setlocal', bracket: '@open' }],\r\n                [/endlocal(?!\\w)/, { token: 'support.function.tag-setlocal', bracket: '@close' }],\r\n                // words\r\n                [/[a-zA-Z_]\\w*/, ''],\r\n                // labels\r\n                [/:\\w*/, 'metatag'],\r\n                // variables\r\n                [/%[^%]+%/, 'variable'],\r\n                [/%%[\\w]+(?!\\w)/, 'variable'],\r\n                // punctuations\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/@symbols/, 'punctuation'],\r\n                // numbers\r\n                [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'constant.numeric.float'],\r\n                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'constant.numeric.hex'],\r\n                [/\\d+/, 'constant.numeric'],\r\n                // punctuation: after number because of .\\d floats\r\n                [/[;,.]/, 'punctuation'],\r\n                // strings:\r\n                [/\"/, 'string', '@string.\"'],\r\n                [/'/, 'string', '@string.\\''],\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"'%]+/, { cases: { '@eos': { token: 'string', next: '@popall' }, '@default': 'string' } }],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/%[\\w ]+%/, 'variable'],\r\n                [/%%[\\w]+(?!\\w)/, 'variable'],\r\n                [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },\r\n                            '@default': 'string' } }],\r\n                [/$/, 'string', '@popall']\r\n            ],\r\n        }\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'Batch',\n\tname:           'bat',\n\tdefaultToken: '',\n\tignoreCase: true,\n\n\tlineComment: 'REM',\n\n\tautoClosingPairs: [\t['{','}' ], \t['[',']' ],\t['(',')' ],\t['\"','\"' ]], // Exclude '\n\n\tbrackets: [\n\t\t{ token: 'punctuation.bracket', open: '{', close: '}' },\n\t\t{ token: 'punctuation.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'punctuation.square', open: '[', close: ']' }\n\t],\n\n\t// enhancedBrackets: [\n\t// \t\t{\n\t// \t\t\topenTrigger: 'l',\n\t// \t\t\topen: /setlocal$/i,\n\t// \t\t\tcloseComplete: 'endlocal',\n\t// \t\t\tmatchCase: true,\n\t// \t\t\tcloseTrigger: 'l',\n\t// \t\t\tclose: /endlocal$/i,\n\t// \t\t\ttokenType: 'keyword.tag-setlocal'\n\t// \t\t}\n\t// \t],\n\n\tkeywords: /call|defined|echo|errorlevel|exist|for|goto|if|pause|set|shift|start|title|not|pushd|popd/,\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\n\t\t\t[/^(\\s*)(rem(?:\\s.*|))$/, ['','comment']],\n\n\t\t\t[/(\\@?)(@keywords)(?!\\w)/, [{token:'support.function'}, {token:'support.function.$2'}]],\n\n\t\t\t// whitespace\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\n\t\t\t// blocks\n\t\t\t[/setlocal(?!\\w)/, { token: 'support.function.tag-setlocal', bracket: '@open' }],\n\t\t\t[/endlocal(?!\\w)/, { token: 'support.function.tag-setlocal', bracket: '@close' }],\n\n\t\t\t// words\n\t\t\t[/[a-zA-Z_]\\w*/, ''],\n\n\t\t\t// labels\n\t\t\t[/:\\w*/, 'metatag'],\n\n\t\t\t// variables\n\t\t\t[/%[^%]+%/, 'variable'],\n\t\t\t[/%%[\\w]+(?!\\w)/, 'variable'],\n\n\t\t\t// punctuations\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, 'punctuation'],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'constant.numeric.float'],\n\t\t\t[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'constant.numeric.hex'],\n\t\t\t[/\\d+/, 'constant.numeric'],\n\n\t\t\t// punctuation: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'punctuation'],\n\n\t\t\t// strings:\n\t\t\t[/\"/,  'string', '@string.\"' ],\n\t\t\t[/'/, 'string', '@string.\\''],\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"'%]+/, { cases: { '@eos': {token:'string', next:'@popall'}, '@default': 'string' }}],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t[/%[\\w ]+%/, 'variable'],\n\t\t\t[/%%[\\w]+(?!\\w)/, 'variable'],\n\t\t\t[/[\"']/,     { cases: { '$#==$S2' : { token: 'string', next: '@pop' },\n\t\t\t\t\t\t\t'@default': 'string' }} ],\n\t\t\t[/$/, 'string', '@popall']\n\t\t],\n\n\t}\n};"]}