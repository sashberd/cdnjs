{"version":3,"sources":["vs/editor/standalone-languages/ruby.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/ruby.ts"],"names":["define","require","exports","language","displayName","name","lineComment","blockCommentStart","blockCommentEnd","keywords","keywordops","builtins","declarations","linedecls","operators","brackets","open","close","token","outdentTriggers","symbols","escape","escapes","decpart","decimal","delim","heredelim","regexpctl","regexpesc","tokenizer","root","cases","for|until|while","bracket","next","@declarations","end","@keywords","@builtins","@default","if|unless|while|until","for","@linedecls","include","@keywordops","@operators","$1","dodecl","switchTo","do","modifier","then|else|elsif|do","sstring","dstring","$#==$S3","heredoc","$2==$S2","interpolated","interpolated_compound","pregexp","$#==$S2","~[)}\\]]","~@regexpctl","regexp","regexcontrol","regexrange","regexpcomment","pstring","qstring","$#==$S4","qqstring","whitespace","comment"],"mappings":"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","file":"vs/editor/standalone-languages/ruby.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/ruby\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    /*\r\n     * Ruby language definition\r\n     *\r\n     * Quite a complex language due to elaborate escape sequences\r\n     * and quoting of literate strings/regular expressions, and\r\n     * an 'end' keyword that does not always apply to modifiers like until and while,\r\n     * and a 'do' keyword that sometimes starts a block, but sometimes is part of\r\n     * another statement (like 'while').\r\n     *\r\n     * (1) end blocks:\r\n     * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\r\n     * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\r\n     * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\r\n     * To do proper brace matching we do some elaborate state manipulation.\r\n     * some examples:\r\n     *\r\n     *   until bla do\r\n     *     work until tired\r\n     *     list.each do\r\n     *       something if test\r\n     *     end\r\n     *   end\r\n     *\r\n     * or\r\n     *\r\n     * if test\r\n     *  something (if test then x end)\r\n     *  bar if bla\r\n     * end\r\n     *\r\n     * or, how about using class as a property..\r\n     *\r\n     * class Test\r\n     *   def endpoint\r\n     *     self.class.endpoint || routes\r\n     *   end\r\n     * end\r\n     *\r\n     * (2) quoting:\r\n     * there are many kinds of strings and escape sequences. But also, one can\r\n     * start many string-like things as '%qx' where q specifies the kind of string\r\n     * (like a command, escape expanded, regular expression, symbol etc.), and x is\r\n     * some character and only another 'x' ends the sequence. Except for brackets\r\n     * where the closing bracket ends the sequence.. and except for a nested bracket\r\n     * inside the string like entity. Also, such strings can contain interpolated\r\n     * ruby expressions again (and span multiple lines). Moreover, expanded\r\n     * regular expression can also contain comments.\r\n     */\r\n    exports.language = {\r\n        displayName: '',\r\n        name: 'ruby',\r\n        lineComment: '#',\r\n        blockCommentStart: '=begin',\r\n        blockCommentEnd: '=end',\r\n        keywords: [\r\n            '__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\r\n            'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\r\n            'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\r\n            'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\r\n            'until', 'when', 'while', 'yield',\r\n        ],\r\n        keywordops: [\r\n            '::', '..', '...', '?', ':', '=>'\r\n        ],\r\n        builtins: [\r\n            'require', 'public', 'private', 'include', 'extend', 'attr_reader',\r\n            'protected', 'private_class_method', 'protected_class_method', 'new'\r\n        ],\r\n        // these are closed by 'end' (if, while and until are handled separately)\r\n        declarations: [\r\n            'module', 'class', 'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n        ],\r\n        linedecls: [\r\n            'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n        ],\r\n        operators: [\r\n            '^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\r\n            '-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\r\n            '+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\r\n        ],\r\n        brackets: [\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.square' }\r\n        ],\r\n        // trigger outdenting on 'end'\r\n        outdentTriggers: 'd',\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\r\n        // escape sequences\r\n        escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\r\n        escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\r\n        decpart: /\\d(_?\\d)*/,\r\n        decimal: /0|@decpart/,\r\n        delim: /[^a-zA-Z0-9\\s\\n\\r]/,\r\n        heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\r\n        regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n        regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            // Main entry.\r\n            // root.<decl> where decl is the current opening declaration (like 'class')\r\n            root: [\r\n                // identifiers and keywords\r\n                // most complexity here is due to matching 'end' correctly with declarations.\r\n                // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\r\n                [/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\r\n                        { cases: { 'for|until|while': { token: 'keyword.$2', bracket: '@open', next: '@dodecl.$2' },\r\n                                '@declarations': { token: 'keyword.$2', bracket: '@open', next: '@root.$2' },\r\n                                'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\r\n                                '@keywords': 'keyword',\r\n                                '@builtins': 'predefined',\r\n                                '@default': 'identifier' } }]],\r\n                [/[a-z_]\\w*[!?=]?/,\r\n                    { cases: { 'if|unless|while|until': { token: 'keyword.$0x', bracket: '@open', next: '@modifier.$0x' },\r\n                            'for': { token: 'keyword.$2', bracket: '@open', next: '@dodecl.$2' },\r\n                            '@linedecls': { token: 'keyword.$0', bracket: '@open', next: '@root.$0' },\r\n                            'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\r\n                            '@keywords': 'keyword',\r\n                            '@builtins': 'predefined',\r\n                            '@default': 'identifier' } }],\r\n                [/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'],\r\n                [/\\$[\\w]*/, 'global.constant'],\r\n                [/@[\\w]*/, 'namespace.instance.identifier'],\r\n                [/@@[\\w]*/, 'namespace.class.identifier'],\r\n                // here document\r\n                [/<<-(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' }],\r\n                [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' }],\r\n                [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' }],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // strings\r\n                [/\"/, { token: 'string.d.delim', bracket: '@open', next: '@dstring.d.\"' }],\r\n                [/'/, { token: 'string.sq.delim', bracket: '@open', next: '@sstring.sq' }],\r\n                // % literals. For efficiency, rematch in the 'pstring' state\r\n                [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\r\n                // commands and symbols\r\n                [/`/, { token: 'string.x.delim', bracket: '@open', next: '@dstring.x.`' }],\r\n                [/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\r\n                [/:\"/, { token: 'string.s.delim', bracket: '@open', next: '@dstring.s.\"' }],\r\n                [/:'/, { token: 'string.s.delim', bracket: '@open', next: '@sstring.s' }],\r\n                // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\r\n                [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', bracket: '@open', next: '@regexp' }],\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/@symbols/, { cases: { '@keywordops': 'keyword',\r\n                            '@operators': 'operator',\r\n                            '@default': '' } }],\r\n                [/[;,]/, 'delimiter'],\r\n                // numbers\r\n                [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\r\n                [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\r\n                [/0[bB][01](_?[01])*/, 'number.binary'],\r\n                [/0[dD]@decpart/, 'number'],\r\n                [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, { cases: { '$1': 'number.float',\r\n                            '@default': 'number' } }],\r\n            ],\r\n            // used to not treat a 'do' as a block opener if it occurs on the same\r\n            // line as a 'do' statement: 'while|until|for'\r\n            // dodecl.<decl> where decl is the declarations started, like 'while'\r\n            dodecl: [\r\n                [/^/, { token: '', switchTo: '@root.$S2' }],\r\n                [/[a-z_]\\w*[!?=]?/, { cases: { 'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\r\n                            'do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                            '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                            '@keywords': 'keyword',\r\n                            '@builtins': 'predefined',\r\n                            '@default': 'identifier' } }],\r\n                { include: '@root' }\r\n            ],\r\n            // used to prevent potential modifiers ('if|until|while|unless') to match\r\n            // with 'end' keywords.\r\n            // modifier.<decl>x where decl is the declaration starter, like 'if'\r\n            modifier: [\r\n                [/^/, '', '@pop'],\r\n                [/[a-z_]\\w*[!?=]?/, { cases: { 'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\r\n                            'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                            '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                            '@keywords': 'keyword',\r\n                            '@builtins': 'predefined',\r\n                            '@default': 'identifier' } }],\r\n                { include: '@root' }\r\n            ],\r\n            // single quote strings (also used for symbols)\r\n            // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\r\n            sstring: [\r\n                [/[^\\\\']+/, 'string.$S2'],\r\n                [/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\r\n                [/\\\\./, 'string.$S2.invalid'],\r\n                [/'/, { token: 'string.$S2.delim', bracket: '@close', next: '@pop' }]\r\n            ],\r\n            // double quoted \"string\".\r\n            // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\r\n            // and delim is the ending delimiter (\" or `)\r\n            dstring: [\r\n                [/[^\\\\`\"#]+/, 'string.$S2'],\r\n                [/#/, 'string.$S2.escape', '@interpolated'],\r\n                [/\\\\$/, 'string.$S2.escape'],\r\n                [/@escapes/, 'string.$S2.escape'],\r\n                [/\\\\./, 'string.$S2.escape.invalid'],\r\n                [/[`\"]/, { cases: { '$#==$S3': { token: 'string.$S2.delim', bracket: '@close', next: '@pop' },\r\n                            '@default': 'string.$S2' } }]\r\n            ],\r\n            // literal documents\r\n            // heredoc.<close> where close is the closing delimiter\r\n            heredoc: [\r\n                [/^(\\s*)(@heredelim)$/, { cases: { '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', bracket: '@close', next: '@pop' }],\r\n                            '@default': ['string.heredoc', 'string.heredoc'] } }],\r\n                [/.*/, 'string.heredoc'],\r\n            ],\r\n            // interpolated sequence\r\n            interpolated: [\r\n                [/\\$\\w*/, 'global.constant', '@pop'],\r\n                [/@\\w*/, 'namespace.class.identifier', '@pop'],\r\n                [/@@\\w*/, 'namespace.instance.identifier', '@pop'],\r\n                [/[{]/, { token: 'string.escape.curly', bracket: '@open', switchTo: '@interpolated_compound' }],\r\n                ['', '', '@pop'],\r\n            ],\r\n            // any code\r\n            interpolated_compound: [\r\n                [/[}]/, { token: 'string.escape.curly', bracket: '@close', next: '@pop' }],\r\n                { include: '@root' },\r\n            ],\r\n            // %r quoted regexp\r\n            // pregexp.<open>.<close> where open/close are the open/close delimiter\r\n            pregexp: [\r\n                { include: '@whitespace' },\r\n                // turns out that you can quote using regex control characters, aargh!\r\n                // for example; %r|kgjgaj| is ok (even though | is used for alternation)\r\n                // so, we need to match those first\r\n                [/[^\\(\\{\\[\\\\]/, { cases: { '$#==$S3': { token: 'regexp.delim', bracket: '@close', next: '@pop' },\r\n                            '$#==$S2': { token: 'regexp.delim', bracket: '@open', next: '@push' },\r\n                            '~[)}\\\\]]': '@brackets.regexp.escape.control',\r\n                            '~@regexpctl': 'regexp.escape.control',\r\n                            '@default': 'regexp' } }],\r\n                { include: '@regexcontrol' },\r\n            ],\r\n            // We match regular expression quite precisely\r\n            regexp: [\r\n                { include: '@regexcontrol' },\r\n                [/[^\\\\\\/]/, 'regexp'],\r\n                ['/[ixmp]*', { token: 'regexp.delim', bracket: '@close' }, '@pop'],\r\n            ],\r\n            regexcontrol: [\r\n                [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control']],\r\n                [/(\\[)(\\^?)/, ['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\r\n                [/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\r\n                [/\\(\\?#/, { token: 'regexp.escape.control', bracket: '@open', next: '@regexpcomment' }],\r\n                [/[()]/, '@brackets.regexp.escape.control'],\r\n                [/@regexpctl/, 'regexp.escape.control'],\r\n                [/\\\\$/, 'regexp.escape'],\r\n                [/@regexpesc/, 'regexp.escape'],\r\n                [/\\\\\\./, 'regexp.invalid'],\r\n                [/#/, 'regexp.escape', '@interpolated'],\r\n            ],\r\n            regexrange: [\r\n                [/-/, 'regexp.escape.control'],\r\n                [/\\^/, 'regexp.invalid'],\r\n                [/\\\\$/, 'regexp.escape'],\r\n                [/@regexpesc/, 'regexp.escape'],\r\n                [/[^\\]]/, 'regexp'],\r\n                [/\\]/, '@brackets.regexp.escape.control', '@pop'],\r\n            ],\r\n            regexpcomment: [\r\n                [/[^)]+/, 'comment'],\r\n                [/\\)/, { token: 'regexp.escape.control', bracket: '@close', next: '@pop' }]\r\n            ],\r\n            // % quoted strings\r\n            // A bit repetitive since we need to often special case the kind of ending delimiter\r\n            pstring: [\r\n                [/%([qws])\\(/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.(.)' }],\r\n                [/%([qws])\\[/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.[.]' }],\r\n                [/%([qws])\\{/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.{.}' }],\r\n                [/%([qws])</, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.<.>' }],\r\n                [/%([qws])(@delim)/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.$2.$2' }],\r\n                [/%r\\(/, { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.(.)' }],\r\n                [/%r\\[/, { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.[.]' }],\r\n                [/%r\\{/, { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.{.}' }],\r\n                [/%r</, { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.<.>' }],\r\n                [/%r(@delim)/, { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.$1.$1' }],\r\n                [/%(x|W|Q?)\\(/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.(.)' }],\r\n                [/%(x|W|Q?)\\[/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.[.]' }],\r\n                [/%(x|W|Q?)\\{/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.{.}' }],\r\n                [/%(x|W|Q?)</, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.<.>' }],\r\n                [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.$2.$2' }],\r\n                [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],\r\n                [/./, { token: 'invalid', next: '@pop' }],\r\n            ],\r\n            // non-expanded quoted string.\r\n            // qstring.<kind>.<open>.<close>\r\n            //  kind = q|w|s  (single quote, array, symbol)\r\n            //  open = open delimiter\r\n            //  close = close delimiter\r\n            qstring: [\r\n                [/\\\\$/, 'string.$S2.escape'],\r\n                [/\\\\./, 'string.$S2.escape'],\r\n                [/./, { cases: { '$#==$S4': { token: 'string.$S2.delim', bracket: '@close', next: '@pop' },\r\n                            '$#==$S3': { token: 'string.$S2.delim', bracket: '@open', next: '@push' },\r\n                            '@default': 'string.$S2' } }],\r\n            ],\r\n            // expanded quoted string.\r\n            // qqstring.<kind>.<open>.<close>\r\n            //  kind = Q|W|x  (double quote, array, command)\r\n            //  open = open delimiter\r\n            //  close = close delimiter\r\n            qqstring: [\r\n                [/#/, 'string.$S2.escape', '@interpolated'],\r\n                { include: '@qstring' }\r\n            ],\r\n            // whitespace & comments\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/^\\s*=begin\\b/, 'comment', '@comment'],\r\n                [/#.*$/, 'comment'],\r\n            ],\r\n            comment: [\r\n                [/[^=]+/, 'comment'],\r\n                [/^\\s*=begin\\b/, 'comment.invalid'],\r\n                [/^\\s*=end\\b.*/, 'comment', '@pop'],\r\n                [/[=]/, 'comment']\r\n            ],\r\n        }\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\n/*\n * Ruby language definition\n *\n * Quite a complex language due to elaborate escape sequences\n * and quoting of literate strings/regular expressions, and\n * an 'end' keyword that does not always apply to modifiers like until and while,\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\n * another statement (like 'while').\n *\n * (1) end blocks:\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\n * To do proper brace matching we do some elaborate state manipulation.\n * some examples:\n *\n *   until bla do\n *     work until tired\n *     list.each do\n *       something if test\n *     end\n *   end\n *\n * or\n *\n * if test\n *  something (if test then x end)\n *  bar if bla\n * end\n *\n * or, how about using class as a property..\n *\n * class Test\n *   def endpoint\n *     self.class.endpoint || routes\n *   end\n * end\n *\n * (2) quoting:\n * there are many kinds of strings and escape sequences. But also, one can\n * start many string-like things as '%qx' where q specifies the kind of string\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\n * some character and only another 'x' ends the sequence. Except for brackets\n * where the closing bracket ends the sequence.. and except for a nested bracket\n * inside the string like entity. Also, such strings can contain interpolated\n * ruby expressions again (and span multiple lines). Moreover, expanded\n * regular expression can also contain comments.\n */\n\nexport var language = <ILanguage> {\n\tdisplayName:    '',\n\tname:           'ruby',\n\n\tlineComment:      '#',\n\tblockCommentStart: '=begin',\n\tblockCommentEnd:   '=end',\n\n\tkeywords: [\n\t\t'__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\n\t\t'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\n\t\t'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\n\t\t'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\n\t\t'until', 'when', 'while', 'yield',\n\t],\n\n\tkeywordops: [\n\t\t'::', '..', '...', '?', ':', '=>'\n\t],\n\n\tbuiltins: [\n\t\t'require', 'public', 'private', 'include', 'extend', 'attr_reader',\n\t\t'protected', 'private_class_method', 'protected_class_method', 'new'\n\t],\n\n\t// these are closed by 'end' (if, while and until are handled separately)\n\tdeclarations: [\n\t\t'module','class','def','case','do','begin','for','if','while','until','unless'\n\t],\n\n\tlinedecls: [\n\t\t'def','case','do','begin','for','if','while','until','unless'\n\t],\n\n\toperators: [\n\t\t'^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\n\t\t'-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\n\t\t'+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\n\t],\n\n\tbrackets: [\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis'},\n\t\t{ open: '{', close: '}', token: 'delimiter.curly'},\n\t\t{ open: '[', close: ']', token: 'delimiter.square'}\n\t],\n\n\t// trigger outdenting on 'end'\n\toutdentTriggers: 'd',\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n\n\t// escape sequences\n\tescape:  /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n\tescapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n\n\tdecpart: /\\d(_?\\d)*/,\n\tdecimal: /0|@decpart/,\n\n\tdelim:     /[^a-zA-Z0-9\\s\\n\\r]/,\n\theredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n\n\tregexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n\tregexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\t// Main entry.\n\t\t// root.<decl> where decl is the current opening declaration (like 'class')\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t// most complexity here is due to matching 'end' correctly with declarations.\n\t\t\t// We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n\t\t\t[/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\n\t\t\t\t{ cases: { 'for|until|while': { token: 'keyword.$2', bracket: '@open', next: '@dodecl.$2' },\n\t\t\t\t\t\t\t'@declarations':   { token: 'keyword.$2', bracket: '@open', next: '@root.$2' },\n\t\t\t\t\t\t\t'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\n\t\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t\t'@default': 'identifier' } }]],\n\t\t\t[/[a-z_]\\w*[!?=]?/,\n\t\t\t\t{ cases: { 'if|unless|while|until': { token: 'keyword.$0x', bracket: '@open', next: '@modifier.$0x' },\n\t\t\t\t\t\t\t'for': { token: 'keyword.$2', bracket: '@open', next: '@dodecl.$2' },\n\t\t\t\t\t\t\t'@linedecls': { token: 'keyword.$0', bracket: '@open', next: '@root.$0' },\n\t\t\t\t\t\t\t'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' },\n\t\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\n\t\t\t[/[A-Z][\\w]*[!?=]?/, 'constructor.identifier' ],     // constant\n\t\t\t[/\\$[\\w]*/,    'global.constant' ],               // global\n\t\t\t[/@[\\w]*/,     'namespace.instance.identifier' ], // instance\n\t\t\t[/@@[\\w]*/,    'namespace.class.identifier' ],    // class\n\n\t\t\t// here document\n\t\t\t[/<<-(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' } ],\n\t\t\t[/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' } ],\n\t\t\t[/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', bracket: '@open', next: '@heredoc.$1' } ],\n\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// strings\n\t\t\t[/\"/,  { token: 'string.d.delim', bracket: '@open', next: '@dstring.d.\"'} ],\n\t\t\t[/'/,  { token: 'string.sq.delim', bracket: '@open', next: '@sstring.sq' } ],\n\n\t\t\t// % literals. For efficiency, rematch in the 'pstring' state\n\t\t\t[/%([rsqxwW]|Q?)/,  { token: '@rematch', next: 'pstring' } ],\n\n\t\t\t// commands and symbols\n\t\t\t[/`/,  { token: 'string.x.delim', bracket: '@open', next: '@dstring.x.`' } ],\n\t\t\t[/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\n\t\t\t[/:\"/, { token: 'string.s.delim', bracket: '@open', next: '@dstring.s.\"' } ],\n\t\t\t[/:'/, { token: 'string.s.delim', bracket: '@open', next: '@sstring.s' } ],\n\n\t\t\t// regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n\t\t\t[/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', bracket: '@open', next: '@regexp' } ],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@keywordops': 'keyword',\n\t\t\t\t\t\t\t\t\t'@operators' : 'operator',\n\t\t\t\t\t\t\t\t\t'@default'   : '' } } ],\n\n\t\t\t[/[;,]/, 'delimiter'],\n\n\t\t\t// numbers\n\t\t\t[/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\n\t\t\t[/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\n\t\t\t[/0[bB][01](_?[01])*/, 'number.binary'],\n\t\t\t[/0[dD]@decpart/, 'number'],\n\t\t\t[/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, { cases: { '$1': 'number.float',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'number' }}],\n\n\t\t],\n\n\t\t// used to not treat a 'do' as a block opener if it occurs on the same\n\t\t// line as a 'do' statement: 'while|until|for'\n\t\t// dodecl.<decl> where decl is the declarations started, like 'while'\n\t\tdodecl: [\n\t\t\t[/^/, { token: '', switchTo: '@root.$S2' }], // get out of do-skipping mode on a new line\n\t\t\t[/[a-z_]\\w*[!?=]?/, { cases: { 'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' }, // end on same line\n\t\t\t\t\t\t\t\t\t\t\t'do' : { token: 'keyword', switchTo: '@root.$S2' }, // do on same line: not an open bracket here\n\t\t\t\t\t\t\t\t\t\t\t'@linedecls': { token: '@rematch', switchTo: '@root.$S2' }, // other declaration on same line: rematch\n\t\t\t\t\t\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// used to prevent potential modifiers ('if|until|while|unless') to match\n\t\t// with 'end' keywords.\n\t\t// modifier.<decl>x where decl is the declaration starter, like 'if'\n\t\tmodifier: [\n\t\t\t[/^/, '', '@pop'], // it was a modifier: get out of modifier mode on a new line\n\t\t\t[/[a-z_]\\w*[!?=]?/, { cases: { 'end': { token: 'keyword.$S2', bracket: '@close', next: '@pop' }, // end on same line\n\t\t\t\t\t\t\t\t\t\t\t'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' }, // real declaration and not a modifier\n\t\t\t\t\t\t\t\t\t\t\t'@linedecls': { token: '@rematch', switchTo: '@root.$S2' }, // other declaration => not a modifier\n\t\t\t\t\t\t\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t\t\t\t\t\t\t'@builtins': 'predefined',\n\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\t\t\t{ include: '@root' }\n\t\t],\n\n\t\t// single quote strings (also used for symbols)\n\t\t// sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\n\t\tsstring: [\n\t\t\t[/[^\\\\']+/,      'string.$S2' ],\n\t\t\t[/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\n\t\t\t[/\\\\./,          'string.$S2.invalid'],\n\t\t\t[/'/,            { token: 'string.$S2.delim', bracket: '@close', next: '@pop'} ]\n\t\t],\n\n\t\t// double quoted \"string\".\n\t\t// dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\n\t\t// and delim is the ending delimiter (\" or `)\n\t\tdstring: [\n\t\t\t[/[^\\\\`\"#]+/, 'string.$S2'],\n\t\t\t[/#/,         'string.$S2.escape', '@interpolated' ],\n\t\t\t[/\\\\$/,       'string.$S2.escape' ],\n\t\t\t[/@escapes/,  'string.$S2.escape'],\n\t\t\t[/\\\\./,       'string.$S2.escape.invalid'],\n\t\t\t[/[`\"]/,      { cases: { '$#==$S3':  { token: 'string.$S2.delim', bracket: '@close', next: '@pop'},\n\t\t\t\t\t\t\t\t\t\t'@default': 'string.$S2' } } ]\n\t\t],\n\n\t\t// literal documents\n\t\t// heredoc.<close> where close is the closing delimiter\n\t\theredoc: [\n\t\t\t[/^(\\s*)(@heredelim)$/, { cases: { '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', bracket: '@close', next: '@pop' }],\n\t\t\t\t\t\t\t\t\t\t\t\t'@default': ['string.heredoc','string.heredoc'] }}],\n\t\t\t[/.*/, 'string.heredoc' ],\n\t\t],\n\n\t\t// interpolated sequence\n\t\tinterpolated: [\n\t\t\t[/\\$\\w*/,      'global.constant', '@pop' ],\n\t\t\t[/@\\w*/,       'namespace.class.identifier', '@pop' ],\n\t\t\t[/@@\\w*/,      'namespace.instance.identifier', '@pop' ],\n\t\t\t[/[{]/, { token: 'string.escape.curly', bracket: '@open', switchTo: '@interpolated_compound' }],\n\t\t\t['', '', '@pop' ], // just a # is interpreted as a #\n\t\t],\n\n\t\t// any code\n\t\tinterpolated_compound: [\n\t\t\t[/[}]/, { token: 'string.escape.curly', bracket: '@close', next: '@pop'} ],\n\t\t\t{ include: '@root' },\n\t\t],\n\n\t\t// %r quoted regexp\n\t\t// pregexp.<open>.<close> where open/close are the open/close delimiter\n\t\tpregexp: [\n\t\t\t{ include: '@whitespace' },\n\t\t\t// turns out that you can quote using regex control characters, aargh!\n\t\t\t// for example; %r|kgjgaj| is ok (even though | is used for alternation)\n\t\t\t// so, we need to match those first\n\t\t\t[/[^\\(\\{\\[\\\\]/, { cases: { '$#==$S3' : { token: 'regexp.delim', bracket: '@close', next: '@pop' },\n\t\t\t\t\t\t\t\t\t\t'$#==$S2' : { token: 'regexp.delim', bracket: '@open', next: '@push' }, // nested delimiters are allowed..\n\t\t\t\t\t\t\t\t\t\t'~[)}\\\\]]' : '@brackets.regexp.escape.control',\n\t\t\t\t\t\t\t\t\t\t'~@regexpctl': 'regexp.escape.control',\n\t\t\t\t\t\t\t\t\t\t'@default': 'regexp' }}],\n\t\t\t{ include: '@regexcontrol' },\n\t\t],\n\n\t\t// We match regular expression quite precisely\n\t\tregexp: [\n\t\t\t{ include:   '@regexcontrol' },\n\t\t\t[/[^\\\\\\/]/,  'regexp' ],\n\t\t\t['/[ixmp]*', { token: 'regexp.delim', bracket: '@close'}, '@pop' ],\n\t\t],\n\n\t\tregexcontrol: [\n\t\t\t[/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control'] ],\n\t\t\t[/(\\[)(\\^?)/,     ['@brackets.regexp.escape.control',{ token: 'regexp.escape.control', next: '@regexrange'}]],\n\t\t\t[/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control'] ],\n\t\t\t[/\\(\\?#/,         { token: 'regexp.escape.control', bracket: '@open', next: '@regexpcomment' }],\n\t\t\t[/[()]/,        '@brackets.regexp.escape.control'],\n\t\t\t[/@regexpctl/,  'regexp.escape.control'],\n\t\t\t[/\\\\$/,         'regexp.escape' ],\n\t\t\t[/@regexpesc/,  'regexp.escape' ],\n\t\t\t[/\\\\\\./,        'regexp.invalid' ],\n\t\t\t[/#/,           'regexp.escape', '@interpolated' ],\n\t\t],\n\n\t\tregexrange: [\n\t\t\t[/-/,     'regexp.escape.control'],\n\t\t\t[/\\^/,    'regexp.invalid'],\n\t\t\t[/\\\\$/,   'regexp.escape' ],\n\t\t\t[/@regexpesc/, 'regexp.escape'],\n\t\t\t[/[^\\]]/, 'regexp'],\n\t\t\t[/\\]/,    '@brackets.regexp.escape.control', '@pop'],\n\t\t],\n\n\t\tregexpcomment: [\n\t\t\t[ /[^)]+/, 'comment' ],\n\t\t\t[ /\\)/, { token: 'regexp.escape.control', bracket: '@close', next: '@pop' } ]\n\t\t],\n\n\n\t\t// % quoted strings\n\t\t// A bit repetitive since we need to often special case the kind of ending delimiter\n\t\tpstring: [\n\t\t\t[/%([qws])\\(/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.(.)' } ],\n\t\t\t[/%([qws])\\[/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.[.]' } ],\n\t\t\t[/%([qws])\\{/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.{.}' } ],\n\t\t\t[/%([qws])</,   { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.<.>' } ],\n\t\t\t[/%([qws])(@delim)/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qstring.$1.$2.$2' } ],\n\n\t\t\t[/%r\\(/,  { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.(.)' } ],\n\t\t\t[/%r\\[/,  { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.[.]' } ],\n\t\t\t[/%r\\{/,  { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.{.}' } ],\n\t\t\t[/%r</,   { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.<.>' } ],\n\t\t\t[/%r(@delim)/, { token: 'regexp.delim', bracket: '@open', switchTo: '@pregexp.$1.$1' } ],\n\n\t\t\t[/%(x|W|Q?)\\(/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.(.)' } ],\n\t\t\t[/%(x|W|Q?)\\[/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.[.]' } ],\n\t\t\t[/%(x|W|Q?)\\{/,  { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.{.}' } ],\n\t\t\t[/%(x|W|Q?)</,   { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.<.>' } ],\n\t\t\t[/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', bracket: '@open', switchTo: '@qqstring.$1.$2.$2' } ],\n\n\t\t\t[/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' } ], // recover\n\t\t\t[/./, { token: 'invalid', next: '@pop' } ], // recover\n\t\t],\n\n\t\t// non-expanded quoted string.\n\t\t// qstring.<kind>.<open>.<close>\n\t\t//  kind = q|w|s  (single quote, array, symbol)\n\t\t//  open = open delimiter\n\t\t//  close = close delimiter\n\t\tqstring: [\n\t\t\t[/\\\\$/, 'string.$S2.escape' ],\n\t\t\t[/\\\\./, 'string.$S2.escape' ],\n\t\t\t[/./,   { cases: { '$#==$S4' : { token: 'string.$S2.delim', bracket: '@close', next: '@pop' },\n\t\t\t\t\t\t\t\t'$#==$S3' : { token: 'string.$S2.delim', bracket: '@open', next: '@push' }, // nested delimiters are allowed..\n\t\t\t\t\t\t\t\t'@default': 'string.$S2' }}],\n\t\t],\n\n\t\t// expanded quoted string.\n\t\t// qqstring.<kind>.<open>.<close>\n\t\t//  kind = Q|W|x  (double quote, array, command)\n\t\t//  open = open delimiter\n\t\t//  close = close delimiter\n\t\tqqstring: [\n\t\t\t[/#/, 'string.$S2.escape', '@interpolated' ],\n\t\t\t{ include: '@qstring' }\n\t\t],\n\n\n\t\t// whitespace & comments\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/^\\s*=begin\\b/,       'comment', '@comment' ],\n\t\t\t[/#.*$/,    'comment'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^=]+/, 'comment' ],\n\t\t\t[/^\\s*=begin\\b/, 'comment.invalid' ],    // nested comment\n\t\t\t[/^\\s*=end\\b.*/, 'comment', '@pop'  ],\n\t\t\t[/[=]/, 'comment' ]\n\t\t],\n\t}\n};"]}