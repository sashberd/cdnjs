{"version":3,"sources":["vs/editor/standalone-languages/xml.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/xml.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","ignoreCase","lineComment","blockCommentStart","blockCommentEnd","qualifiedName","autoClosingPairs","tokenizer","root","include","token","bracket","next","cdata","tag","whitespace","comment"],"mappings":";;;;;;AAWAA,OAAO,sCAAuC,UAAW,WAAY,SAAUC,EAASC,GCNxF,YAIWA,GAAAC,UACVC,YAAa,MACbC,KAAM,MACNC,aAAc,GAEdC,YAAY,EAEZC,YAAa,GACbC,kBAAmB,OACnBC,gBAAiB,MAGjBC,cAAe,2BAWfC,mBAAqB,IAAM,MAAQ,IAAK,MAExCC,WACCC,OACE,SAAU,KAETC,QAAS,gBAGV,wBACEC,MAAO,kBAAmBC,QAAS,UACnCD,MAAO,aAAcC,QAAS,QAASC,KAAM,cAG/C,kCACEF,MAAO,gBAAiBC,QAAS,UACjCD,MAAO,aAAcC,QAAS,UAChC,IACED,MAAO,gBAAiBC,QAAS,aAGnC,0BACED,MAAO,kBAAmBC,QAAS,UACnCD,MAAO,sBAAuBE,KAAM,WAGtC,0BACEF,MAAO,kBAAmBC,QAAS,UACnCD,MAAO,sBAAuBE,KAAM,WAGtC,gBAAkBF,MAAO,kBAAmBC,QAAS,QAASC,KAAM,YAEpE,QAAS,kBAGXC,QACE,SAAU,KACV,SAAWH,MAAO,kBAAmBC,QAAS,SAAUC,KAAM,UAC9D,KAAM,KAGRE,MACE,aAAc,KACd,8CAA+C,iBAAkB,GAAI,qBACrE,gEAAiE,iBAAkB,GAAI,qBACvF,8CAA+C,iBAAkB,GAAI,qBACrE,iBAAkB,mBAClB,OAASJ,MAAO,kBAAmBC,QAAS,SAAUC,KAAM,UAC5D,YACEF,MAAO,cAAeC,QAAS,WAC/BD,MAAO,kBAAmBC,QAAS,SAAUC,KAAM,WACrD,KAAOF,MAAO,kBAAmBC,QAAS,SAAUC,KAAM,UAG5DG,aACE,aAAc,KACd,QAAUL,MAAO,UAAWC,QAAS,QAASC,KAAM,cAGtDI,UACE,UAAW,oBACX,OAAUN,MAAO,UAAWC,QAAS,SAAUC,KAAM,UACrD,OAAQ,4BACR,QAAS","file":"vs/editor/standalone-languages/xml.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/xml\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'XML',\r\n        name: 'xml',\r\n        defaultToken: '',\r\n        ignoreCase: true,\r\n        lineComment: '',\r\n        blockCommentStart: '<!--',\r\n        blockCommentEnd: '-->',\r\n        // Useful regular expressions\r\n        qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\r\n        // enhancedBrackets: [{\r\n        // \ttokenType: 'tag.tag-$1.xml',\r\n        // \topenTrigger: '>',\r\n        // \topen: /<(\\w[\\w\\d]*)([^\\/>]*(?!\\/)>)[^<>]*$/i,\r\n        // \tcloseComplete: '</$1>',\r\n        // \tcloseTrigger: '>',\r\n        // \tclose: /<\\/(\\w[\\w\\d]*)\\s*>$/i\r\n        // }],\r\n        autoClosingPairs: [['\\'', '\\''], ['\"', '\"']],\r\n        tokenizer: {\r\n            root: [\r\n                [/[^<&]+/, ''],\r\n                { include: '@whitespace' },\r\n                // Standard opening tag\r\n                [/(<)(@qualifiedName)/, [\r\n                        { token: 'delimiter.start', bracket: '@open' },\r\n                        { token: 'tag.tag-$2', bracket: '@open', next: '@tag.$2' }]],\r\n                // Standard closing tag\r\n                [/(<\\/)(@qualifiedName)(\\s*)(>)/, [\r\n                        { token: 'delimiter.end', bracket: '@open' },\r\n                        { token: 'tag.tag-$2', bracket: '@close' },\r\n                        '',\r\n                        { token: 'delimiter.end', bracket: '@close' }]],\r\n                // Meta tags - instruction\r\n                [/(<\\?)(@qualifiedName)/, [\r\n                        { token: 'delimiter.start', bracket: '@open' },\r\n                        { token: 'metatag.instruction', next: '@tag' }]],\r\n                // Meta tags - declaration\r\n                [/(<\\!)(@qualifiedName)/, [\r\n                        { token: 'delimiter.start', bracket: '@open' },\r\n                        { token: 'metatag.declaration', next: '@tag' }]],\r\n                // CDATA\r\n                [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', bracket: '@open', next: '@cdata' }],\r\n                [/&\\w+;/, 'string.escape'],\r\n            ],\r\n            cdata: [\r\n                [/[^\\]]+/, ''],\r\n                [/\\]\\]>/, { token: 'delimiter.cdata', bracket: '@close', next: '@pop' }],\r\n                [/\\]/, '']\r\n            ],\r\n            tag: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']],\r\n                [/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']],\r\n                [/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],\r\n                [/@qualifiedName/, 'attribute.name'],\r\n                [/\\?>/, { token: 'delimiter.start', bracket: '@close', next: '@pop' }],\r\n                [/(\\/)(>)/, [\r\n                        { token: 'tag.tag-$S2', bracket: '@close' },\r\n                        { token: 'delimiter.start', bracket: '@close', next: '@pop' }]],\r\n                [/>/, { token: 'delimiter.start', bracket: '@close', next: '@pop' }],\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/<!--/, { token: 'comment', bracket: '@open', next: '@comment' }]\r\n            ],\r\n            comment: [\r\n                [/[^<\\-]+/, 'comment.content'],\r\n                [/-->/, { token: 'comment', bracket: '@close', next: '@pop' }],\r\n                [/<!--/, 'comment.content.invalid'],\r\n                [/[<\\-]/, 'comment.content']\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: 'XML',\n\tname: 'xml',\n\tdefaultToken: '',\n\n\tignoreCase: true,\n\n\tlineComment: '', // no line comment in xml\n\tblockCommentStart: '<!--',\n\tblockCommentEnd: '-->',\n\n\t// Useful regular expressions\n\tqualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\n\n\t// enhancedBrackets: [{\n\t// \ttokenType: 'tag.tag-$1.xml',\n\t// \topenTrigger: '>',\n\t// \topen: /<(\\w[\\w\\d]*)([^\\/>]*(?!\\/)>)[^<>]*$/i,\n\t// \tcloseComplete: '</$1>',\n\t// \tcloseTrigger: '>',\n\t// \tclose: /<\\/(\\w[\\w\\d]*)\\s*>$/i\n\t// }],\n\n\tautoClosingPairs:  [['\\'', '\\''], ['\"', '\"'] ],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t[/[^<&]+/, ''],\n\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// Standard opening tag\n\t\t\t[/(<)(@qualifiedName)/, [\n\t\t\t\t{ token: 'delimiter.start', bracket: '@open' },\n\t\t\t\t{ token: 'tag.tag-$2', bracket: '@open', next: '@tag.$2' }]],\n\n\t\t\t// Standard closing tag\n\t\t\t[/(<\\/)(@qualifiedName)(\\s*)(>)/, [\n\t\t\t\t{ token: 'delimiter.end', bracket: '@open' },\n\t\t\t\t{ token: 'tag.tag-$2', bracket: '@close' },\n\t\t\t\t'',\n\t\t\t\t{ token: 'delimiter.end', bracket: '@close' }]],\n\n\t\t\t// Meta tags - instruction\n\t\t\t[/(<\\?)(@qualifiedName)/, [\n\t\t\t\t{ token: 'delimiter.start', bracket: '@open' },\n\t\t\t\t{ token: 'metatag.instruction', next: '@tag' }]],\n\n\t\t\t// Meta tags - declaration\n\t\t\t[/(<\\!)(@qualifiedName)/, [\n\t\t\t\t{ token: 'delimiter.start', bracket: '@open' },\n\t\t\t\t{ token: 'metatag.declaration', next: '@tag' }]],\n\n\t\t\t// CDATA\n\t\t\t[/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', bracket: '@open', next: '@cdata' }],\n\n\t\t\t[/&\\w+;/, 'string.escape'],\n\t\t],\n\n\t\tcdata: [\n\t\t\t[/[^\\]]+/, ''],\n\t\t\t[/\\]\\]>/, { token: 'delimiter.cdata', bracket: '@close', next: '@pop' }],\n\t\t\t[/\\]/, '']\n\t\t],\n\n\t\ttag: [\n\t\t\t[/[ \\t\\r\\n]+/, '' ],\n\t\t\t[/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']],\n\t\t\t[/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']],\n\t\t\t[/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],\n\t\t\t[/@qualifiedName/, 'attribute.name'],\n\t\t\t[/\\?>/, { token: 'delimiter.start', bracket: '@close', next: '@pop' }],\n\t\t\t[/(\\/)(>)/, [\n\t\t\t\t{ token: 'tag.tag-$S2', bracket: '@close' },\n\t\t\t\t{ token: 'delimiter.start', bracket: '@close', next: '@pop' }]],\n\t\t\t[/>/, { token: 'delimiter.start', bracket: '@close', next: '@pop' }],\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/<!--/, { token: 'comment', bracket: '@open', next: '@comment' }]\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^<\\-]+/, 'comment.content' ],\n\t\t\t[/-->/,  { token: 'comment', bracket: '@close', next: '@pop' } ],\n\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t[/[<\\-]/, 'comment.content' ]\n\t\t],\n\t},\n};"]}