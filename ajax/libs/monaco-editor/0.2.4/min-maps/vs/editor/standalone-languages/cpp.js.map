{"version":3,"sources":["vs/editor/standalone-languages/cpp.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/cpp.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","brackets","token","open","close","autoClosingPairs","keywords","operators","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","@keywords","@default","include","@operators","whitespace","comment","doccomment","string"],"mappings":";;;;;;AAWAA,OAAO,sCAAuC,UAAW,WAAY,SAAUC,EAASC,GCNxF,YAIWA,GAAAC,UACVC,YAAgB,MAChBC,KAAgB,MAChBC,aAAc,GAEdC,YAAkB,KAClBC,kBAAmB,KACnBC,gBAAiB,KAEjBC,WACGC,MAAO,kBAAmBC,KAAM,IAAKC,MAAO,MAC5CF,MAAO,wBAAyBC,KAAM,IAAKC,MAAO,MAClDF,MAAO,mBAAoBC,KAAM,IAAKC,MAAO,MAC7CF,MAAO,kBAAmBC,KAAM,IAAKC,MAAO,MAG/CC,mBAAqB,IAAK,MAAO,IAAK,MAAO,IAAM,MAAO,IAAM,MAEhEC,UACC,WACA,MACA,QACA,OACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,YACA,aACA,WACA,MACA,WACA,UACA,WACA,SACA,KACA,SACA,eACA,OACA,OACA,OACA,QACA,WACA,SACA,SACA,QACA,QACA,UACA,QACA,MACA,SACA,QACA,UACA,OACA,KACA,KACA,WACA,SACA,MACA,YACA,eACA,WACA,UACA,OACA,UACA,YACA,MACA,WACA,UACA,YACA,WACA,WACA,UACA,SACA,UACA,UACA,WACA,YACA,SACA,MACA,WACA,mBACA,WACA,SACA,YACA,SACA,QACA,SACA,SACA,SACA,gBACA,cACA,SACA,SACA,WACA,OACA,eACA,QACA,cACA,OACA,MACA,UACA,SACA,WACA,QACA,WACA,QACA,UACA,OACA,WACA,UACA,QACA,QAEA,OACA,SACA,SACA,YACA,YACA,aACA,iBACA,UACA,wBACA,UACA,sBACA,WACA,uBACA,OAEA,aACA,YACA,QACA,WACA,UACA,QACA,oBACA,UACA,YACA,aACA,aACA,UACA,WACA,aACA,YACA,gBACA,OACA,SACA,eACA,cACA,kBACA,WACA,WACA,UACA,UACA,UACA,SACA,cACA,UACA,SACA,UACA,UACA,SACA,UACA,UACA,QACA,yBACA,YACA,SACA,SACA,aACA,eACA,WACA,QACA,WACA,aACA,UACA,UACA,UACA,aACA,WACA,WACA,uBACA,YACA,UACA,aACA,QACA,aACA,WACA,cACA,WACA,WACA,UACA,wBACA,QACA,aAGDC,WACC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxC,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAC3C,KAAM,KAAM,MAAO,MAAO,QAI3BC,QAAU,wBACVC,QAAU,wEACVC,cAAe,mCACfC,YAAa,UAGbC,WACCC,OAEE,gBAAkBC,OAASC,aAAcb,MAAM,cACzCc,WAAY,iBAGjBC,QAAS,gBAGV,aAAc,eAGd,WAAY,YAGZ,aAAc,cACd,mBAAoB,cACpB,YAAcH,OAASI,aAAc,YAChCF,WAAc,OAGnB,uCAAwC,iBACxC,yCAA0C,iBAC1C,gDAAiD,eACjD,gCAAiC,iBACjC,oCAAqC,kBACrC,6BAA8B,WAC9B,qBAAsB,WAGtB,QAAS,cAGT,kBAAmB,mBACnB,IAAM,SAAU,YAGhB,WAAY,WACZ,oBAAqB,SAAS,gBAAgB,YAC9C,IAAK,mBAGPG,aACE,aAAc,KACd,eAAiB,cAAe,gBAChC,OAAgB,UAAW,aAC3B,UAAgB,YAGlBC,UACE,UAAW,YAGX,OAAW,UAAW,SACtB,QAAW,YAGbC,aACE,UAAW,gBAEX,OAAW,wBACX,OAAW,cAAe,SAC1B,QAAW,gBAGbC,SACE,UAAY,WACZ,WAAY,kBACZ,MAAY,0BACZ,IAAY,SAAU","file":"vs/editor/standalone-languages/cpp.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/cpp\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'C++',\r\n        name: 'cpp',\r\n        defaultToken: '',\r\n        lineComment: '//',\r\n        blockCommentStart: '/*',\r\n        blockCommentEnd: '*/',\r\n        brackets: [\r\n            { token: 'delimiter.curly', open: '{', close: '}' },\r\n            { token: 'delimiter.parenthesis', open: '(', close: ')' },\r\n            { token: 'delimiter.square', open: '[', close: ']' },\r\n            { token: 'delimiter.angle', open: '<', close: '>' }\r\n        ],\r\n        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')'], ['\"', '\"']],\r\n        keywords: [\r\n            'abstract',\r\n            'amp',\r\n            'array',\r\n            'auto',\r\n            'bool',\r\n            'break',\r\n            'case',\r\n            'catch',\r\n            'char',\r\n            'class',\r\n            'const',\r\n            'constexpr',\r\n            'const_cast',\r\n            'continue',\r\n            'cpu',\r\n            'decltype',\r\n            'default',\r\n            'delegate',\r\n            'delete',\r\n            'do',\r\n            'double',\r\n            'dynamic_cast',\r\n            'each',\r\n            'else',\r\n            'enum',\r\n            'event',\r\n            'explicit',\r\n            'export',\r\n            'extern',\r\n            'false',\r\n            'final',\r\n            'finally',\r\n            'float',\r\n            'for',\r\n            'friend',\r\n            'gcnew',\r\n            'generic',\r\n            'goto',\r\n            'if',\r\n            'in',\r\n            'initonly',\r\n            'inline',\r\n            'int',\r\n            'interface',\r\n            'interior_ptr',\r\n            'internal',\r\n            'literal',\r\n            'long',\r\n            'mutable',\r\n            'namespace',\r\n            'new',\r\n            'noexcept',\r\n            'nullptr',\r\n            '__nullptr',\r\n            'operator',\r\n            'override',\r\n            'partial',\r\n            'pascal',\r\n            'pin_ptr',\r\n            'private',\r\n            'property',\r\n            'protected',\r\n            'public',\r\n            'ref',\r\n            'register',\r\n            'reinterpret_cast',\r\n            'restrict',\r\n            'return',\r\n            'safe_cast',\r\n            'sealed',\r\n            'short',\r\n            'signed',\r\n            'sizeof',\r\n            'static',\r\n            'static_assert',\r\n            'static_cast',\r\n            'struct',\r\n            'switch',\r\n            'template',\r\n            'this',\r\n            'thread_local',\r\n            'throw',\r\n            'tile_static',\r\n            'true',\r\n            'try',\r\n            'typedef',\r\n            'typeid',\r\n            'typename',\r\n            'union',\r\n            'unsigned',\r\n            'using',\r\n            'virtual',\r\n            'void',\r\n            'volatile',\r\n            'wchar_t',\r\n            'where',\r\n            'while',\r\n            '_asm',\r\n            '_based',\r\n            '_cdecl',\r\n            '_declspec',\r\n            '_fastcall',\r\n            '_if_exists',\r\n            '_if_not_exists',\r\n            '_inline',\r\n            '_multiple_inheritance',\r\n            '_pascal',\r\n            '_single_inheritance',\r\n            '_stdcall',\r\n            '_virtual_inheritance',\r\n            '_w64',\r\n            '__abstract',\r\n            '__alignof',\r\n            '__asm',\r\n            '__assume',\r\n            '__based',\r\n            '__box',\r\n            '__builtin_alignof',\r\n            '__cdecl',\r\n            '__clrcall',\r\n            '__declspec',\r\n            '__delegate',\r\n            '__event',\r\n            '__except',\r\n            '__fastcall',\r\n            '__finally',\r\n            '__forceinline',\r\n            '__gc',\r\n            '__hook',\r\n            '__identifier',\r\n            '__if_exists',\r\n            '__if_not_exists',\r\n            '__inline',\r\n            '__int128',\r\n            '__int16',\r\n            '__int32',\r\n            '__int64',\r\n            '__int8',\r\n            '__interface',\r\n            '__leave',\r\n            '__m128',\r\n            '__m128d',\r\n            '__m128i',\r\n            '__m256',\r\n            '__m256d',\r\n            '__m256i',\r\n            '__m64',\r\n            '__multiple_inheritance',\r\n            '__newslot',\r\n            '__nogc',\r\n            '__noop',\r\n            '__nounwind',\r\n            '__novtordisp',\r\n            '__pascal',\r\n            '__pin',\r\n            '__pragma',\r\n            '__property',\r\n            '__ptr32',\r\n            '__ptr64',\r\n            '__raise',\r\n            '__restrict',\r\n            '__resume',\r\n            '__sealed',\r\n            '__single_inheritance',\r\n            '__stdcall',\r\n            '__super',\r\n            '__thiscall',\r\n            '__try',\r\n            '__try_cast',\r\n            '__typeof',\r\n            '__unaligned',\r\n            '__unhook',\r\n            '__uuidof',\r\n            '__value',\r\n            '__virtual_inheritance',\r\n            '__w64',\r\n            '__wchar_t'\r\n        ],\r\n        operators: [\r\n            '=', '>', '<', '!', '~', '?', ':',\r\n            '==', '<=', '>=', '!=', '&&', '||', '++', '--',\r\n            '+', '-', '*', '/', '&', '|', '^', '%', '<<',\r\n            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\r\n            '^=', '%=', '<<=', '>>=', '>>>='\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\r\n        floatsuffix: /[fFlL]?/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                [/[a-zA-Z_]\\w*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': 'identifier' } }],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // [[ attributes ]].\r\n                [/\\[\\[.*\\]\\]/, 'annotation'],\r\n                // Preprocessor directive\r\n                [/^\\s*#\\w+/, 'keyword'],\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/[<>](?!@symbols)/, '@brackets'],\r\n                [/@symbols/, { cases: { '@operators': 'delimiter',\r\n                            '@default': '' } }],\r\n                // numbers\r\n                [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n                [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n                [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\r\n                [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\r\n                [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\r\n                [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\r\n                [/\\d(@integersuffix)/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"/, 'string', '@string'],\r\n                // characters\r\n                [/'[^\\\\']'/, 'string'],\r\n                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n                [/'/, 'string.invalid']\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\r\n                [/\\/\\*/, 'comment', '@comment'],\r\n                [/\\/\\/.*$/, 'comment'],\r\n            ],\r\n            comment: [\r\n                [/[^\\/*]+/, 'comment'],\r\n                // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n                // [/\\/\\*/,    'comment.invalid' ],\t// this breaks block comments in the shape of /* //*/\r\n                [/\\*\\//, 'comment', '@pop'],\r\n                [/[\\/*]/, 'comment']\r\n            ],\r\n            //Identical copy of comment above, except for the addition of .doc\r\n            doccomment: [\r\n                [/[^\\/*]+/, 'comment.doc'],\r\n                // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\r\n                [/\\/\\*/, 'comment.doc.invalid'],\r\n                [/\\*\\//, 'comment.doc', '@pop'],\r\n                [/[\\/*]/, 'comment.doc']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/\"/, 'string', '@pop']\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'C++',\n\tname:           'cpp',\n\tdefaultToken: '',\n\n\tlineComment:      '//',\n\tblockCommentStart: '/*',\n\tblockCommentEnd: '*/',\n\n\tbrackets: [\n\t\t{ token: 'delimiter.curly', open: '{', close: '}' },\n\t\t{ token: 'delimiter.parenthesis', open: '(', close: ')' },\n\t\t{ token: 'delimiter.square', open: '[', close: ']' },\n\t\t{ token: 'delimiter.angle', open: '<', close: '>' }\n\t],\n\n\tautoClosingPairs: [ ['{', '}'], ['[', ']'], ['(',  ')'], ['\"',  '\"']], // Skip < > which would be there by default.\n\n\tkeywords: [\n\t\t'abstract',\n\t\t'amp',\n\t\t'array',\n\t\t'auto',\n\t\t'bool',\n\t\t'break',\n\t\t'case',\n\t\t'catch',\n\t\t'char',\n\t\t'class',\n\t\t'const',\n\t\t'constexpr',\n\t\t'const_cast',\n\t\t'continue',\n\t\t'cpu',\n\t\t'decltype',\n\t\t'default',\n\t\t'delegate',\n\t\t'delete',\n\t\t'do',\n\t\t'double',\n\t\t'dynamic_cast',\n\t\t'each',\n\t\t'else',\n\t\t'enum',\n\t\t'event',\n\t\t'explicit',\n\t\t'export',\n\t\t'extern',\n\t\t'false',\n\t\t'final',\n\t\t'finally',\n\t\t'float',\n\t\t'for',\n\t\t'friend',\n\t\t'gcnew',\n\t\t'generic',\n\t\t'goto',\n\t\t'if',\n\t\t'in',\n\t\t'initonly',\n\t\t'inline',\n\t\t'int',\n\t\t'interface',\n\t\t'interior_ptr',\n\t\t'internal',\n\t\t'literal',\n\t\t'long',\n\t\t'mutable',\n\t\t'namespace',\n\t\t'new',\n\t\t'noexcept',\n\t\t'nullptr',\n\t\t'__nullptr',\n\t\t'operator',\n\t\t'override',\n\t\t'partial',\n\t\t'pascal',\n\t\t'pin_ptr',\n\t\t'private',\n\t\t'property',\n\t\t'protected',\n\t\t'public',\n\t\t'ref',\n\t\t'register',\n\t\t'reinterpret_cast',\n\t\t'restrict',\n\t\t'return',\n\t\t'safe_cast',\n\t\t'sealed',\n\t\t'short',\n\t\t'signed',\n\t\t'sizeof',\n\t\t'static',\n\t\t'static_assert',\n\t\t'static_cast',\n\t\t'struct',\n\t\t'switch',\n\t\t'template',\n\t\t'this',\n\t\t'thread_local',\n\t\t'throw',\n\t\t'tile_static',\n\t\t'true',\n\t\t'try',\n\t\t'typedef',\n\t\t'typeid',\n\t\t'typename',\n\t\t'union',\n\t\t'unsigned',\n\t\t'using',\n\t\t'virtual',\n\t\t'void',\n\t\t'volatile',\n\t\t'wchar_t',\n\t\t'where',\n\t\t'while',\n\n\t\t'_asm', // reserved word with one underscores\n\t\t'_based',\n\t\t'_cdecl',\n\t\t'_declspec',\n\t\t'_fastcall',\n\t\t'_if_exists',\n\t\t'_if_not_exists',\n\t\t'_inline',\n\t\t'_multiple_inheritance',\n\t\t'_pascal',\n\t\t'_single_inheritance',\n\t\t'_stdcall',\n\t\t'_virtual_inheritance',\n\t\t'_w64',\n\n\t\t'__abstract',  // reserved word with two underscores\n\t\t'__alignof',\n\t\t'__asm',\n\t\t'__assume',\n\t\t'__based',\n\t\t'__box',\n\t\t'__builtin_alignof',\n\t\t'__cdecl',\n\t\t'__clrcall',\n\t\t'__declspec',\n\t\t'__delegate',\n\t\t'__event',\n\t\t'__except',\n\t\t'__fastcall',\n\t\t'__finally',\n\t\t'__forceinline',\n\t\t'__gc',\n\t\t'__hook',\n\t\t'__identifier',\n\t\t'__if_exists',\n\t\t'__if_not_exists',\n\t\t'__inline',\n\t\t'__int128',\n\t\t'__int16',\n\t\t'__int32',\n\t\t'__int64',\n\t\t'__int8',\n\t\t'__interface',\n\t\t'__leave',\n\t\t'__m128',\n\t\t'__m128d',\n\t\t'__m128i',\n\t\t'__m256',\n\t\t'__m256d',\n\t\t'__m256i',\n\t\t'__m64',\n\t\t'__multiple_inheritance',\n\t\t'__newslot',\n\t\t'__nogc',\n\t\t'__noop',\n\t\t'__nounwind',\n\t\t'__novtordisp',\n\t\t'__pascal',\n\t\t'__pin',\n\t\t'__pragma',\n\t\t'__property',\n\t\t'__ptr32',\n\t\t'__ptr64',\n\t\t'__raise',\n\t\t'__restrict',\n\t\t'__resume',\n\t\t'__sealed',\n\t\t'__single_inheritance',\n\t\t'__stdcall',\n\t\t'__super',\n\t\t'__thiscall',\n\t\t'__try',\n\t\t'__try_cast',\n\t\t'__typeof',\n\t\t'__unaligned',\n\t\t'__unhook',\n\t\t'__uuidof',\n\t\t'__value',\n\t\t'__virtual_inheritance',\n\t\t'__w64',\n\t\t'__wchar_t'\n\t],\n\n\toperators: [\n\t\t'=', '>', '<', '!', '~', '?', ':',\n\t\t'==', '<=', '>=', '!=', '&&', '||', '++', '--',\n\t\t'+', '-', '*', '/', '&', '|', '^', '%', '<<',\n\t\t'>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\n\t\t'^=', '%=', '<<=', '>>=', '>>>='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes:  /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tintegersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n\tfloatsuffix: /[fFlL]?/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/[a-zA-Z_]\\w*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// [[ attributes ]].\n\t\t\t[/\\[\\[.*\\]\\]/, 'annotation'],\n\n\t\t\t// Preprocessor directive\n\t\t\t[/^\\s*#\\w+/, 'keyword'],\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'delimiter',\n\t\t\t\t\t\t\t\t\t'@default'  : '' } } ],\n\n\t\t\t// numbers\n\t\t\t[/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n\t\t\t[/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n\t\t\t[/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n\t\t\t[/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n\t\t\t[/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n\t\t\t[/\\d(@integersuffix)/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  'string', '@string' ],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string','string.escape','string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/,  'comment.doc', '@doccomment' ],\n\t\t\t[/\\/\\*/,       \t\t'comment', '@comment' ],\n\t\t\t[/\\/\\/.*$/,    \t\t'comment'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment' ],\n\t\t\t// [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n\t\t\t// [/\\/\\*/,    'comment.invalid' ],\t// this breaks block comments in the shape of /* //*/\n\t\t\t[/\\*\\//,    'comment', '@pop'  ],\n\t\t\t[/[\\/*]/,   'comment' ]\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tdoccomment: [\n\t\t\t[/[^\\/*]+/, 'comment.doc' ],\n\t\t\t// [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n\t\t\t[/\\/\\*/,    'comment.doc.invalid' ],\n\t\t\t[/\\*\\//,    'comment.doc', '@pop'  ],\n\t\t\t[/[\\/*]/,   'comment.doc' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/,  'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/\"/,        'string', '@pop' ]\n\t\t],\n\t},\n};"]}