{"version":3,"sources":["vs/editor/standalone-languages/java.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/java.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","wordDefinition","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","@keywords","token","@default","include","@operators","whitespace","comment","javadoc","string"],"mappings":";;;;;;AAWAA,OAAO,uCAAwC,UAAW,WAAY,SAAUC,EAASC,GCNzF,YAIWA,GAAAC,UACVC,YAAgB,OAChBC,KAAgB,OAChBC,aAAc,GAEdC,YAAkB,KAClBC,kBAAmB,KACnBC,gBAAmB,KAGnBC,eAAgB,qFAEhBC,UACC,WAAY,WAAY,MAAO,MAAO,SAAU,SAAU,UAC1D,OAAQ,UAAW,eAAgB,UAAW,KAAM,KAAM,UAC1D,OAAQ,QAAS,SAAU,aAAc,YAAa,QAAS,OAC/D,OAAQ,SAAU,SAAU,SAAU,OAAQ,OAAQ,aAAc,SACpE,YAAa,QAAS,UAAW,MAAO,QAAS,MAAO,OAAQ,QAChE,YAAa,SAAU,OAAQ,QAAS,UAAW,OAAQ,WAC3D,WAAY,QAAS,QAAS,SAAU,QAAS,QAAS,OAAQ,SAGnEC,WACC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxC,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAC3C,KAAM,KAAM,MAAO,MAAO,QAI3BC,QAAU,wBACVC,QAAS,wEACTC,OAAQ,cACRC,YAAa,oBACbC,aAAc,oBACdC,UAAW,iCAGXC,WACCC,OAEE,oBAAsBC,OAASC,aAAcC,MAAM,cACtCC,WAAY,iBAGxBC,QAAS,gBAGV,aAAc,cACd,mBAAoB,cACpB,YAAcJ,OAASK,aAAc,YAC1BF,WAAc,OAGzB,yBAA0B,eAG1B,yCAA0C,iBAC1C,oDAAqD,iBACrD,yBAA0B,eAC1B,uBAAwB,iBACxB,4BAA6B,kBAC7B,kBAAmB,iBACnB,iBAAkB,WAGlB,QAAS,cAGT,kBAAmB,mBACnB,IAAM,SAAU,YAGhB,WAAY,WACZ,oBAAqB,SAAS,gBAAgB,YAC9C,IAAK,mBAGPG,aACE,aAAc,KACd,eAAiB,cAAe,aAChC,OAAgB,UAAW,aAC3B,UAAgB,YAGlBC,UACE,UAAW,YAGX,OAAW,UAAW,SACtB,QAAW,YAGbC,UACE,UAAW,gBAEX,OAAW,wBACX,OAAW,cAAe,SAC1B,QAAW,gBAGbC,SACE,UAAY,WACZ,WAAY,kBACZ,MAAY,0BACZ,IAAY,SAAU","file":"vs/editor/standalone-languages/java.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/java\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Java',\r\n        name: 'java',\r\n        defaultToken: '',\r\n        lineComment: '//',\r\n        blockCommentStart: '/*',\r\n        blockCommentEnd: '*/',\r\n        // the default separators except `@$`\r\n        wordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n        keywords: [\r\n            'abstract', 'continue', 'for', 'new', 'switch', 'assert', 'default',\r\n            'goto', 'package', 'synchronized', 'boolean', 'do', 'if', 'private',\r\n            'this', 'break', 'double', 'implements', 'protected', 'throw', 'byte',\r\n            'else', 'import', 'public', 'throws', 'case', 'enum', 'instanceof', 'return',\r\n            'transient', 'catch', 'extends', 'int', 'short', 'try', 'char', 'final',\r\n            'interface', 'static', 'void', 'class', 'finally', 'long', 'strictfp',\r\n            'volatile', 'const', 'float', 'native', 'super', 'while', 'true', 'false'\r\n        ],\r\n        operators: [\r\n            '=', '>', '<', '!', '~', '?', ':',\r\n            '==', '<=', '>=', '!=', '&&', '||', '++', '--',\r\n            '+', '-', '*', '/', '&', '|', '^', '%', '<<',\r\n            '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\r\n            '^=', '%=', '<<=', '>>=', '>>>='\r\n        ],\r\n        // we include these common regular expressions\r\n        symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n        digits: /\\d+(_+\\d+)*/,\r\n        octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n        binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n        hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n        // The main tokenizer for our languages\r\n        tokenizer: {\r\n            root: [\r\n                // identifiers and keywords\r\n                [/[a-zA-Z_$][\\w$]*/, { cases: { '@keywords': { token: 'keyword.$0' },\r\n                            '@default': 'identifier' } }],\r\n                // whitespace\r\n                { include: '@whitespace' },\r\n                // delimiters and operators\r\n                [/[{}()\\[\\]]/, '@brackets'],\r\n                [/[<>](?!@symbols)/, '@brackets'],\r\n                [/@symbols/, { cases: { '@operators': 'delimiter',\r\n                            '@default': '' } }],\r\n                // @ annotations.\r\n                [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\r\n                // numbers\r\n                [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n                [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n                [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\r\n                [/0(@octaldigits)[Ll]?/, 'number.octal'],\r\n                [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\r\n                [/(@digits)[fFdD]/, 'number.float'],\r\n                [/(@digits)[lL]?/, 'number'],\r\n                // delimiter: after number because of .\\d floats\r\n                [/[;,.]/, 'delimiter'],\r\n                // strings\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"/, 'string', '@string'],\r\n                // characters\r\n                [/'[^\\\\']'/, 'string'],\r\n                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n                [/'/, 'string.invalid']\r\n            ],\r\n            whitespace: [\r\n                [/[ \\t\\r\\n]+/, ''],\r\n                [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\r\n                [/\\/\\*/, 'comment', '@comment'],\r\n                [/\\/\\/.*$/, 'comment'],\r\n            ],\r\n            comment: [\r\n                [/[^\\/*]+/, 'comment'],\r\n                // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n                // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\r\n                [/\\*\\//, 'comment', '@pop'],\r\n                [/[\\/*]/, 'comment']\r\n            ],\r\n            //Identical copy of comment above, except for the addition of .doc\r\n            javadoc: [\r\n                [/[^\\/*]+/, 'comment.doc'],\r\n                // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\r\n                [/\\/\\*/, 'comment.doc.invalid'],\r\n                [/\\*\\//, 'comment.doc', '@pop'],\r\n                [/[\\/*]/, 'comment.doc']\r\n            ],\r\n            string: [\r\n                [/[^\\\\\"]+/, 'string'],\r\n                [/@escapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/\"/, 'string', '@pop']\r\n            ],\r\n        },\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName:    'Java',\n\tname:           'java',\n\tdefaultToken: '',\n\n\tlineComment:      '//',\n\tblockCommentStart: '/*',\n\tblockCommentEnd:   '*/',\n\n\t// the default separators except `@$`\n\twordDefinition: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n\n\tkeywords: [\n\t\t'abstract', 'continue', 'for', 'new', 'switch', 'assert', 'default',\n\t\t'goto', 'package', 'synchronized', 'boolean', 'do', 'if', 'private',\n\t\t'this', 'break', 'double', 'implements', 'protected', 'throw', 'byte',\n\t\t'else', 'import', 'public', 'throws', 'case', 'enum', 'instanceof', 'return',\n\t\t'transient', 'catch', 'extends', 'int', 'short', 'try', 'char', 'final',\n\t\t'interface', 'static', 'void', 'class', 'finally', 'long', 'strictfp',\n\t\t'volatile', 'const', 'float', 'native', 'super', 'while', 'true', 'false'\n\t],\n\n\toperators: [\n\t\t'=', '>', '<', '!', '~', '?', ':',\n\t\t'==', '<=', '>=', '!=', '&&', '||', '++', '--',\n\t\t'+', '-', '*', '/', '&', '|', '^', '%', '<<',\n\t\t'>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\n\t\t'^=', '%=', '<<=', '>>=', '>>>='\n\t],\n\n\t// we include these common regular expressions\n\tsymbols:  /[=><!~?:&|+\\-*\\/\\^%]+/,\n\tescapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n\tdigits: /\\d+(_+\\d+)*/,\n\toctaldigits: /[0-7]+(_+[0-7]+)*/,\n\tbinarydigits: /[0-1]+(_+[0-1]+)*/,\n\thexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n\n\t// The main tokenizer for our languages\n\ttokenizer: {\n\t\troot: [\n\t\t\t// identifiers and keywords\n\t\t\t[/[a-zA-Z_$][\\w$]*/, { cases: { '@keywords': {token:'keyword.$0'},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default': 'identifier' } }],\n\n\t\t\t// whitespace\n\t\t\t{ include: '@whitespace' },\n\n\t\t\t// delimiters and operators\n\t\t\t[/[{}()\\[\\]]/, '@brackets'],\n\t\t\t[/[<>](?!@symbols)/, '@brackets'],\n\t\t\t[/@symbols/, { cases: { '@operators': 'delimiter',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'@default'  : '' } } ],\n\n\t\t\t// @ annotations.\n\t\t\t[/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\n\n\t\t\t// numbers\n\t\t\t[/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n\t\t\t[/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\n\t\t\t[/0(@octaldigits)[Ll]?/, 'number.octal'],\n\t\t\t[/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\n\t\t\t[/(@digits)[fFdD]/, 'number.float'],\n\t\t\t[/(@digits)[lL]?/, 'number'],\n\n\t\t\t// delimiter: after number because of .\\d floats\n\t\t\t[/[;,.]/, 'delimiter'],\n\n\t\t\t// strings\n\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\n\t\t\t[/\"/,  'string', '@string' ],\n\n\t\t\t// characters\n\t\t\t[/'[^\\\\']'/, 'string'],\n\t\t\t[/(')(@escapes)(')/, ['string','string.escape','string']],\n\t\t\t[/'/, 'string.invalid']\n\t\t],\n\n\t\twhitespace: [\n\t\t\t[/[ \\t\\r\\n]+/, ''],\n\t\t\t[/\\/\\*\\*(?!\\/)/,  'comment.doc', '@javadoc' ],\n\t\t\t[/\\/\\*/,       \t\t'comment', '@comment' ],\n\t\t\t[/\\/\\/.*$/,    \t\t'comment'],\n\t\t],\n\n\t\tcomment: [\n\t\t\t[/[^\\/*]+/, 'comment' ],\n\t\t\t// [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n\t\t\t// [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n\t\t\t[/\\*\\//,    'comment', '@pop'  ],\n\t\t\t[/[\\/*]/,   'comment' ]\n\t\t],\n\t\t//Identical copy of comment above, except for the addition of .doc\n\t\tjavadoc: [\n\t\t\t[/[^\\/*]+/, 'comment.doc' ],\n\t\t\t// [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n\t\t\t[/\\/\\*/,    'comment.doc.invalid' ],\n\t\t\t[/\\*\\//,    'comment.doc', '@pop'  ],\n\t\t\t[/[\\/*]/,   'comment.doc' ]\n\t\t],\n\n\t\tstring: [\n\t\t\t[/[^\\\\\"]+/,  'string'],\n\t\t\t[/@escapes/, 'string.escape'],\n\t\t\t[/\\\\./,      'string.escape.invalid'],\n\t\t\t[/\"/,        'string', '@pop' ]\n\t\t],\n\t},\n};"]}