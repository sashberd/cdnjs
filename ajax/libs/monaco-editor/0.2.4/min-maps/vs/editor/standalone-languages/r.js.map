{"version":3,"sources":["vs/editor/standalone-languages/r.js","vs/editor/standalone-languages/file:/C:/Alex/src/vscode/src/vs/editor/standalone-languages/r.ts"],"names":["define","require","exports","language","displayName","name","defaultToken","lineComment","blockCommentStart","blockCommentEnd","roxygen","constants","keywords","special","brackets","open","close","token","tokenizer","root","include","cases","@keywords","@constants","@default","@roxygen","@eos","next","numbers","operators","strings","stringBody","@special","dblStringBody"],"mappings":";;;;;;AAWAA,OAAO,oCAAqC,UAAW,WAAY,SAAUC,EAASC,GCNtF,YAIWA,GAAAC,UACVC,YAAa,IACbC,KAAM,IACNC,aAAc,GAEdC,YAAa,IACbC,kBAAmB,GACnBC,gBAAiB,GAEjBC,SACC,SACA,UACA,QACA,UACA,YACA,WACA,WACA,YACA,QACA,WACA,SACA,YACA,UACA,kBACA,aACA,uBACA,WACA,eACA,gBACA,iBACA,UACA,WACA,UACA,qBACA,cACA,qBACA,UACA,YACA,UACA,QACA,QACA,cACA,WACA,YACA,QACA,UACA,SACA,UAGDC,WACC,OACA,QACA,OACA,KACA,MACA,OACA,cACA,WACA,cACA,iBACA,IACA,IACA,UACA,UACA,YACA,aACA,KACA,oBAGDC,UACC,QACA,OACA,SACA,KACA,OACA,MACA,KACA,SACA,QACA,QACA,WACA,YACA,UACA,SACA,WACA,UACA,OACA,UACA,SACA,UACA,SACA,aACA,SACA,UACA,UACA,SACA,SACA,UAGDC,SACC,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QAGDC,WACGC,KAAM,IAAKC,MAAO,IAAKC,MAAO,oBAC9BF,KAAM,IAAKC,MAAO,IAAKC,MAAO,sBAC9BF,KAAM,IAAKC,MAAO,IAAKC,MAAO,0BAGjCC,WACCC,OACGC,QAAS,aACTA,QAAS,aAEV,aAAc,cAEbA,QAAS,eAEV,KAAM,cAAe,aACrB,UAAW,YAEX,MAAO,UAEP,QAAS,cAET,eAAgB,QAChB,eACAC,OACCC,YAAa,UACbC,aAAc,WACdC,WAAY,iBAMfd,UACE,QACAW,OACCI,WAAY,MACZC,QAAUT,MAAO,cAAeU,KAAM,QACtCH,WAAY,kBAGb,OACAH,OACCK,QAAUT,MAAO,cAAeU,KAAM,QACtCH,WAAY,kBAGb,MAAQP,MAAO,cAAeU,KAAM,UAItCC,UACE,gCAAiC,WAInCC,YACE,UAAW,aACX,UAAW,aACX,YAAa,aACb,OAAQ,aACR,KAAM,aACN,KAAM,aACN,OAAQ,aACR,KAAM,aACN,KAAM,aACN,oBAAoB,aAItBC,UACE,IAAK,gBAAiB,gBACtB,IAAK,gBAAiB,mBAExBC,aACE,OACAV,OACCW,WAAY,SACZR,WAAY,kBAGb,IAAK,gBAAiB,YACtB,IAAK,WAEPS,gBACE,OACAZ,OACCW,WAAY,SACZR,WAAY,kBAGb,IAAK,gBAAiB,YACtB,IAAK","file":"vs/editor/standalone-languages/r.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\ndefine(\"vs/editor/standalone-languages/r\", [\"require\", \"exports\"], function (require, exports) {\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'R',\r\n        name: 'r',\r\n        defaultToken: '',\r\n        lineComment: '#',\r\n        blockCommentStart: '',\r\n        blockCommentEnd: '',\r\n        roxygen: [\r\n            '@param',\r\n            '@return',\r\n            '@name',\r\n            '@rdname',\r\n            '@examples',\r\n            '@include',\r\n            '@docType',\r\n            '@S3method',\r\n            '@TODO',\r\n            '@aliases',\r\n            '@alias',\r\n            '@assignee',\r\n            '@author',\r\n            '@callGraphDepth',\r\n            '@callGraph',\r\n            '@callGraphPrimitives',\r\n            '@concept',\r\n            '@exportClass',\r\n            '@exportMethod',\r\n            '@exportPattern',\r\n            '@export',\r\n            '@formals',\r\n            '@format',\r\n            '@importClassesFrom',\r\n            '@importFrom',\r\n            '@importMethodsFrom',\r\n            '@import',\r\n            '@keywords',\r\n            '@method',\r\n            '@nord',\r\n            '@note',\r\n            '@references',\r\n            '@seealso',\r\n            '@setClass',\r\n            '@slot',\r\n            '@source',\r\n            '@title',\r\n            '@usage'\r\n        ],\r\n        constants: [\r\n            'NULL',\r\n            'FALSE',\r\n            'TRUE',\r\n            'NA',\r\n            'Inf',\r\n            'NaN ',\r\n            'NA_integer_',\r\n            'NA_real_',\r\n            'NA_complex_',\r\n            'NA_character_ ',\r\n            'T',\r\n            'F',\r\n            'LETTERS',\r\n            'letters',\r\n            'month.abb',\r\n            'month.name',\r\n            'pi',\r\n            'R.version.string'\r\n        ],\r\n        keywords: [\r\n            'break',\r\n            'next',\r\n            'return',\r\n            'if',\r\n            'else',\r\n            'for',\r\n            'in',\r\n            'repeat',\r\n            'while',\r\n            'array',\r\n            'category',\r\n            'character',\r\n            'complex',\r\n            'double',\r\n            'function',\r\n            'integer',\r\n            'list',\r\n            'logical',\r\n            'matrix',\r\n            'numeric',\r\n            'vector',\r\n            'data.frame',\r\n            'factor',\r\n            'library',\r\n            'require',\r\n            'attach',\r\n            'detach',\r\n            'source'\r\n        ],\r\n        special: [\r\n            '\\\\n',\r\n            '\\\\r',\r\n            '\\\\t',\r\n            '\\\\b',\r\n            '\\\\a',\r\n            '\\\\f',\r\n            '\\\\v',\r\n            '\\\\\\'',\r\n            '\\\\\"',\r\n            '\\\\\\\\'\r\n        ],\r\n        brackets: [\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.bracket' },\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n        ],\r\n        tokenizer: {\r\n            root: [\r\n                { include: '@numbers' },\r\n                { include: '@strings' },\r\n                [/[{}\\[\\]()]/, '@brackets'],\r\n                { include: '@operators' },\r\n                [/#'/, 'comment.doc', '@roxygen'],\r\n                [/(^#.*$)/, 'comment'],\r\n                [/\\s+/, 'white'],\r\n                [/[,:;]/, 'delimiter'],\r\n                [/@[a-zA-Z]\\w*/, 'tag'],\r\n                [/[a-zA-Z]\\w*/, {\r\n                        cases: {\r\n                            '@keywords': 'keyword',\r\n                            '@constants': 'constant',\r\n                            '@default': 'identifier'\r\n                        }\r\n                    }]\r\n            ],\r\n            // Recognize Roxygen comments\r\n            roxygen: [\r\n                [/@\\w+/, {\r\n                        cases: {\r\n                            '@roxygen': 'tag',\r\n                            '@eos': { token: 'comment.doc', next: '@pop' },\r\n                            '@default': 'comment.doc'\r\n                        }\r\n                    }],\r\n                [/\\s+/, {\r\n                        cases: {\r\n                            '@eos': { token: 'comment.doc', next: '@pop' },\r\n                            '@default': 'comment.doc'\r\n                        }\r\n                    }],\r\n                [/.*/, { token: 'comment.doc', next: '@pop' }]\r\n            ],\r\n            // Recognize positives, negatives, decimals, imaginaries, and scientific notation\r\n            numbers: [\r\n                [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?/, 'number']\r\n            ],\r\n            // Recognize operators\r\n            operators: [\r\n                [/<{1,2}-/, 'operator'],\r\n                [/->{1,2}/, 'operator'],\r\n                [/%[^%\\s]+%/, 'operator'],\r\n                [/\\*\\*/, 'operator'],\r\n                [/%%/, 'operator'],\r\n                [/&&/, 'operator'],\r\n                [/\\|\\|/, 'operator'],\r\n                [/<</, 'operator'],\r\n                [/>>/, 'operator'],\r\n                [/[-+=&|!<>^~*/:$]/, 'operator']\r\n            ],\r\n            // Recognize strings, including those broken across lines\r\n            strings: [\r\n                [/'/, 'string.escape', '@stringBody'],\r\n                [/\"/, 'string.escape', '@dblStringBody']\r\n            ],\r\n            stringBody: [\r\n                [/\\\\./, {\r\n                        cases: {\r\n                            '@special': 'string',\r\n                            '@default': 'error-token'\r\n                        }\r\n                    }],\r\n                [/'/, 'string.escape', '@popall'],\r\n                [/./, 'string'],\r\n            ],\r\n            dblStringBody: [\r\n                [/\\\\./, {\r\n                        cases: {\r\n                            '@special': 'string',\r\n                            '@default': 'error-token'\r\n                        }\r\n                    }],\r\n                [/\"/, 'string.escape', '@popall'],\r\n                [/./, 'string'],\r\n            ]\r\n        }\r\n    };\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport {ILanguage} from './types';\n\nexport var language = <ILanguage> {\n\tdisplayName: 'R',\n\tname: 'r',\n\tdefaultToken: '',\n\n\tlineComment: '#',\n\tblockCommentStart: '',\n\tblockCommentEnd: '',\n\n\troxygen: [\n\t\t'@param',\n\t\t'@return',\n\t\t'@name',\n\t\t'@rdname',\n\t\t'@examples',\n\t\t'@include',\n\t\t'@docType',\n\t\t'@S3method',\n\t\t'@TODO',\n\t\t'@aliases',\n\t\t'@alias',\n\t\t'@assignee',\n\t\t'@author',\n\t\t'@callGraphDepth',\n\t\t'@callGraph',\n\t\t'@callGraphPrimitives',\n\t\t'@concept',\n\t\t'@exportClass',\n\t\t'@exportMethod',\n\t\t'@exportPattern',\n\t\t'@export',\n\t\t'@formals',\n\t\t'@format',\n\t\t'@importClassesFrom',\n\t\t'@importFrom',\n\t\t'@importMethodsFrom',\n\t\t'@import',\n\t\t'@keywords',\n\t\t'@method',\n\t\t'@nord',\n\t\t'@note',\n\t\t'@references',\n\t\t'@seealso',\n\t\t'@setClass',\n\t\t'@slot',\n\t\t'@source',\n\t\t'@title',\n\t\t'@usage'\n\t],\n\n\tconstants: [\n\t\t'NULL',\n\t\t'FALSE',\n\t\t'TRUE',\n\t\t'NA',\n\t\t'Inf',\n\t\t'NaN ',\n\t\t'NA_integer_',\n\t\t'NA_real_',\n\t\t'NA_complex_',\n\t\t'NA_character_ ',\n\t\t'T',\n\t\t'F',\n\t\t'LETTERS',\n\t\t'letters',\n\t\t'month.abb',\n\t\t'month.name',\n\t\t'pi',\n\t\t'R.version.string'\n\t],\n\n\tkeywords: [\n\t\t'break',\n\t\t'next',\n\t\t'return',\n\t\t'if',\n\t\t'else',\n\t\t'for',\n\t\t'in',\n\t\t'repeat',\n\t\t'while',\n\t\t'array',\n\t\t'category',\n\t\t'character',\n\t\t'complex',\n\t\t'double',\n\t\t'function',\n\t\t'integer',\n\t\t'list',\n\t\t'logical',\n\t\t'matrix',\n\t\t'numeric',\n\t\t'vector',\n\t\t'data.frame',\n\t\t'factor',\n\t\t'library',\n\t\t'require',\n\t\t'attach',\n\t\t'detach',\n\t\t'source'\n\t],\n\n\tspecial: [\n\t\t'\\\\n',\n\t\t'\\\\r',\n\t\t'\\\\t',\n\t\t'\\\\b',\n\t\t'\\\\a',\n\t\t'\\\\f',\n\t\t'\\\\v',\n\t\t'\\\\\\'',\n\t\t'\\\\\"',\n\t\t'\\\\\\\\'\n\t],\n\n\tbrackets: [\n\t\t{ open: '{', close: '}', token: 'delimiter.curly' },\n\t\t{ open: '[', close: ']', token: 'delimiter.bracket' },\n\t\t{ open: '(', close: ')', token: 'delimiter.parenthesis' }\n\t],\n\n\ttokenizer: {\n\t\troot: [\n\t\t\t{ include: '@numbers' },\n\t\t\t{ include: '@strings' },\n\n\t\t\t[/[{}\\[\\]()]/, '@brackets'],\n\n\t\t\t{ include: '@operators' },\n\n\t\t\t[/#'/, 'comment.doc', '@roxygen'],\n\t\t\t[/(^#.*$)/, 'comment'],\n\n\t\t\t[/\\s+/, 'white'],\n\n\t\t\t[/[,:;]/, 'delimiter'],\n\n\t\t\t[/@[a-zA-Z]\\w*/, 'tag'],\n\t\t\t[/[a-zA-Z]\\w*/, {\n\t\t\t\tcases: {\n\t\t\t\t\t'@keywords': 'keyword',\n\t\t\t\t\t'@constants': 'constant',\n\t\t\t\t\t'@default': 'identifier'\n\t\t\t\t}\n\t\t\t}]\n\t\t],\n\n\t\t// Recognize Roxygen comments\n\t\troxygen: [\n\t\t\t[/@\\w+/, {\n\t\t\t\tcases: {\n\t\t\t\t\t'@roxygen': 'tag',\n\t\t\t\t\t'@eos': { token: 'comment.doc', next: '@pop' },\n\t\t\t\t\t'@default': 'comment.doc'\n\t\t\t\t}\n\t\t\t}],\n\t\t\t[/\\s+/, {\n\t\t\t\tcases: {\n\t\t\t\t\t'@eos': { token: 'comment.doc', next: '@pop' },\n\t\t\t\t\t'@default': 'comment.doc'\n\t\t\t\t}\n\t\t\t}],\n\t\t\t[/.*/, { token: 'comment.doc', next: '@pop' }]\n\t\t],\n\n\t\t// Recognize positives, negatives, decimals, imaginaries, and scientific notation\n\t\tnumbers: [\n\t\t\t[/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?/, 'number']\n\t\t],\n\n\t\t// Recognize operators\n\t\toperators: [\n\t\t\t[/<{1,2}-/, 'operator'],\n\t\t\t[/->{1,2}/, 'operator'],\n\t\t\t[/%[^%\\s]+%/, 'operator'],\n\t\t\t[/\\*\\*/, 'operator'],\n\t\t\t[/%%/, 'operator'],\n\t\t\t[/&&/, 'operator'],\n\t\t\t[/\\|\\|/, 'operator'],\n\t\t\t[/<</, 'operator'],\n\t\t\t[/>>/, 'operator'],\n\t\t\t[/[-+=&|!<>^~*/:$]/, 'operator']\n\t\t],\n\n\t\t// Recognize strings, including those broken across lines\n\t\tstrings: [\n\t\t\t[/'/, 'string.escape', '@stringBody'],\n\t\t\t[/\"/, 'string.escape', '@dblStringBody']\n\t\t],\n\t\tstringBody: [\n\t\t\t[/\\\\./, {\n\t\t\t\tcases: {\n\t\t\t\t\t'@special': 'string',\n\t\t\t\t\t'@default': 'error-token'\n\t\t\t\t}\n\t\t\t}],\n\t\t\t[/'/, 'string.escape', '@popall'],\n\t\t\t[/./, 'string'],\n\t\t],\n\t\tdblStringBody: [\n\t\t\t[/\\\\./, {\n\t\t\t\tcases: {\n\t\t\t\t\t'@special': 'string',\n\t\t\t\t\t'@default': 'error-token'\n\t\t\t\t}\n\t\t\t}],\n\t\t\t[/\"/, 'string.escape', '@popall'],\n\t\t\t[/./, 'string'],\n\t\t]\n\t}\n};"]}