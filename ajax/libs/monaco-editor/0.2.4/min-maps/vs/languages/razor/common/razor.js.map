{"version":3,"sources":["vs/languages/razor/common/razor.js","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/razorTokenTypes.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/vsxmlTokenTypes.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/vsxml.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/csharpTokenization.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/razor.ts"],"names":["define","require","exports","EMBED_CS","TOKEN_VALUE","TOKEN_KEY","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","objects","errors","abstractState_1","vsxmlTokenTypes","separators","whitespace","isEntity","createKeywordMatcher","isAttribute","isSeparator","split","EmbeddedState","_super","mode","state","parentState","call","getParentState","makeClone","getMode","AbstractState","safeClone","equals","other","safeEquals","setState","nextState","postTokenize","result","stream","tokenize","undefined","VSXMLEmbeddedState","setVSXMLState","eos","VSXMLState","name","parent","whitespaceTokenType","setTokenRules","skipWhitespace","length","type","stateTokenize","notImplemented","VSXMLString","clone","token","nextToken","VSXMLTag","tokenType","VSXMLExpression","htmlMode","VSXML","abstractMode_1","razorTokenTypes","htmlTokenTypes","punctuations","brackets","bracketsSource","open","close","MAP","i","bracket","stringIsBracket","text","tokenTypeFromString","isKeyword","ispunctuation","character","indexOf","CSState","otherCSState","Error","CSString","punctuation","isAtBeginning","readChars","c","next","goBack","CSVerbatimString","peek","CSNumber","firstDigit","base","isDecimal","isExponent","isDigit","toLowerCase","CSComment","commentChar","peekWhitespace","CSStatement","level","plevel","razorMode","expression","firstToken","firstTokenWasKeyword","vsState","newVSState","st","acceptNestedModes","nextStateAtEnd","test","CSSimpleHTML","States","Content","peekToken","advanceToEOS","tr","nextName","advanceIfRegExp","nextAttrValue","WithinComment","advanceUntil","COMMENT","advanceIfString","DELIM_COMMENT","WithinDoctype","DOCTYPE","DELIM_DOCTYPE","OpeningEndTag","DELIM_END","OpeningStartTag","DELIM_START","tagName","getTag","WithinTag","AttributeName","ATTRIB_NAME","AttributeValue","value","ATTRIB_VALUE","__decorate","decorators","target","key","desc","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","modes","csharpTokenization","instantiation_1","modeService_1","richEditSupport_1","thread_1","async_1","RAZORState","kind","lastTagName","lastAttributeName","embeddedContentType","attributeValueQuote","attributeValue","State","RAZORMode","descriptor","instantiationService","modeService","threadService","_registerSupports","_this","HoverProviderRegistry","register","getId","provideHover","model","position","wireCancellationToken","_provideHover","uri","ReferenceProviderRegistry","provideReferences","context","_provideReferences","SuggestRegistry","triggerCharacters","shouldAutotriggerSuggest","provideCompletionItems","_provideCompletionItems","DocumentHighlightProviderRegistry","provideDocumentHighlights","_provideDocumentHighlights","LinkProviderRegistry","provideLinks","_provideLinks","_createModeWorkerManager","ModeWorkerManager","_createRichEditSupport","RichEditSupport","wordPattern","createWordRegExp","comments","blockComment","__electricCharacterSupport","caseInsensitive","embeddedElectricCharacters","autoClosingPairs","surroundingPairs","onEnterRules","beforeText","RegExp","EMPTY_ELEMENTS","join","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","getInitialState","getLeavingNestedModeData","line","leavingNestedModeData","stateAfterNestedMode","IInstantiationService","IModeService","IThreadService","HTMLMode"],"mappings":"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","file":"vs/languages/razor/common/razor.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\ndefine(\"vs/languages/razor/common/razorTokenTypes\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.EMBED_CS = 'support.function.cshtml';\r\n});\r\n\ndefine(\"vs/languages/razor/common/vsxmlTokenTypes\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.TOKEN_VALUE = 'support.property-value.constant.other.json';\r\n    exports.TOKEN_KEY = 'support.type.property-name.json';\r\n});\r\n\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/* In order to use VSXML in your own modes, you need to have an IState\r\n * which implements IVSXMLWrapperState. Upon a START token such as '///',\r\n * the wrapper state can return a new VSXMLEmbeddedState as the nextState in\r\n * the tokenization result.\r\n*/\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/razor/common/vsxml\", [\"require\", \"exports\", 'vs/base/common/objects', 'vs/base/common/errors', 'vs/editor/common/modes/abstractState', 'vs/languages/razor/common/vsxmlTokenTypes'], function (require, exports, objects, errors, abstractState_1, vsxmlTokenTypes) {\r\n    'use strict';\r\n    var separators = '<>\"=/';\r\n    var whitespace = '\\t ';\r\n    var isEntity = objects.createKeywordMatcher(['summary', 'reference', 'returns', 'param', 'loc']);\r\n    var isAttribute = objects.createKeywordMatcher(['type', 'path', 'name', 'locid', 'filename', 'format', 'optional']);\r\n    var isSeparator = objects.createKeywordMatcher(separators.split(''));\r\n    var EmbeddedState = (function (_super) {\r\n        __extends(EmbeddedState, _super);\r\n        function EmbeddedState(mode, state, parentState) {\r\n            _super.call(this, mode);\r\n            this.state = state;\r\n            this.parentState = parentState;\r\n        }\r\n        EmbeddedState.prototype.getParentState = function () {\r\n            return this.parentState;\r\n        };\r\n        EmbeddedState.prototype.makeClone = function () {\r\n            return new EmbeddedState(this.getMode(), abstractState_1.AbstractState.safeClone(this.state), abstractState_1.AbstractState.safeClone(this.parentState));\r\n        };\r\n        EmbeddedState.prototype.equals = function (other) {\r\n            if (other instanceof EmbeddedState) {\r\n                return (_super.prototype.equals.call(this, other) &&\r\n                    abstractState_1.AbstractState.safeEquals(this.state, other.state) &&\r\n                    abstractState_1.AbstractState.safeEquals(this.parentState, other.parentState));\r\n            }\r\n            return false;\r\n        };\r\n        EmbeddedState.prototype.setState = function (nextState) {\r\n            this.state = nextState;\r\n        };\r\n        EmbeddedState.prototype.postTokenize = function (result, stream) {\r\n            return result;\r\n        };\r\n        EmbeddedState.prototype.tokenize = function (stream) {\r\n            var result = this.state.tokenize(stream);\r\n            if (result.nextState !== undefined) {\r\n                this.setState(result.nextState);\r\n            }\r\n            result.nextState = this;\r\n            return this.postTokenize(result, stream);\r\n        };\r\n        return EmbeddedState;\r\n    }(abstractState_1.AbstractState));\r\n    exports.EmbeddedState = EmbeddedState;\r\n    var VSXMLEmbeddedState = (function (_super) {\r\n        __extends(VSXMLEmbeddedState, _super);\r\n        function VSXMLEmbeddedState(mode, state, parentState) {\r\n            _super.call(this, mode, state, parentState);\r\n        }\r\n        VSXMLEmbeddedState.prototype.equals = function (other) {\r\n            if (other instanceof VSXMLEmbeddedState) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        VSXMLEmbeddedState.prototype.setState = function (nextState) {\r\n            _super.prototype.setState.call(this, nextState);\r\n            this.getParentState().setVSXMLState(nextState);\r\n        };\r\n        VSXMLEmbeddedState.prototype.postTokenize = function (result, stream) {\r\n            if (stream.eos()) {\r\n                result.nextState = this.getParentState();\r\n            }\r\n            return result;\r\n        };\r\n        return VSXMLEmbeddedState;\r\n    }(EmbeddedState));\r\n    exports.VSXMLEmbeddedState = VSXMLEmbeddedState;\r\n    var VSXMLState = (function (_super) {\r\n        __extends(VSXMLState, _super);\r\n        function VSXMLState(mode, name, parent, whitespaceTokenType) {\r\n            if (whitespaceTokenType === void 0) { whitespaceTokenType = ''; }\r\n            _super.call(this, mode);\r\n            this.name = name;\r\n            this.parent = parent;\r\n            this.whitespaceTokenType = whitespaceTokenType;\r\n        }\r\n        VSXMLState.prototype.equals = function (other) {\r\n            if (other instanceof VSXMLState) {\r\n                return (_super.prototype.equals.call(this, other) &&\r\n                    this.whitespaceTokenType === other.whitespaceTokenType &&\r\n                    this.name === other.name &&\r\n                    abstractState_1.AbstractState.safeEquals(this.parent, other.parent));\r\n            }\r\n            return false;\r\n        };\r\n        VSXMLState.prototype.tokenize = function (stream) {\r\n            stream.setTokenRules(separators, whitespace);\r\n            if (stream.skipWhitespace().length > 0) {\r\n                return { type: this.whitespaceTokenType };\r\n            }\r\n            return this.stateTokenize(stream);\r\n        };\r\n        VSXMLState.prototype.stateTokenize = function (stream) {\r\n            throw errors.notImplemented();\r\n        };\r\n        return VSXMLState;\r\n    }(abstractState_1.AbstractState));\r\n    exports.VSXMLState = VSXMLState;\r\n    var VSXMLString = (function (_super) {\r\n        __extends(VSXMLString, _super);\r\n        function VSXMLString(mode, parent) {\r\n            _super.call(this, mode, 'string', parent, vsxmlTokenTypes.TOKEN_VALUE);\r\n        }\r\n        VSXMLString.prototype.makeClone = function () {\r\n            return new VSXMLString(this.getMode(), this.parent ? this.parent.clone() : null);\r\n        };\r\n        VSXMLString.prototype.equals = function (other) {\r\n            if (other instanceof VSXMLString) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        VSXMLString.prototype.stateTokenize = function (stream) {\r\n            while (!stream.eos()) {\r\n                var token = stream.nextToken();\r\n                if (token === '\"') {\r\n                    return { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\r\n                }\r\n            }\r\n            return { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\r\n        };\r\n        return VSXMLString;\r\n    }(VSXMLState));\r\n    exports.VSXMLString = VSXMLString;\r\n    var VSXMLTag = (function (_super) {\r\n        __extends(VSXMLTag, _super);\r\n        function VSXMLTag(mode, parent) {\r\n            _super.call(this, mode, 'expression', parent, 'vs');\r\n        }\r\n        VSXMLTag.prototype.makeClone = function () {\r\n            return new VSXMLTag(this.getMode(), this.parent ? this.parent.clone() : null);\r\n        };\r\n        VSXMLTag.prototype.equals = function (other) {\r\n            if (other instanceof VSXMLTag) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        VSXMLTag.prototype.stateTokenize = function (stream) {\r\n            var token = stream.nextToken();\r\n            var tokenType = this.whitespaceTokenType;\r\n            if (token === '>') {\r\n                return { type: 'punctuation.vs', nextState: this.parent };\r\n            }\r\n            else if (token === '\"') {\r\n                return { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: new VSXMLString(this.getMode(), this) };\r\n            }\r\n            else if (isEntity(token)) {\r\n                tokenType = 'tag.vs';\r\n            }\r\n            else if (isAttribute(token)) {\r\n                tokenType = vsxmlTokenTypes.TOKEN_KEY;\r\n            }\r\n            else if (isSeparator(token)) {\r\n                tokenType = 'punctuation.vs';\r\n            }\r\n            return { type: tokenType, nextState: this };\r\n        };\r\n        return VSXMLTag;\r\n    }(VSXMLState));\r\n    exports.VSXMLTag = VSXMLTag;\r\n    var VSXMLExpression = (function (_super) {\r\n        __extends(VSXMLExpression, _super);\r\n        function VSXMLExpression(mode, parent) {\r\n            _super.call(this, mode, 'expression', parent, 'vs');\r\n        }\r\n        VSXMLExpression.prototype.makeClone = function () {\r\n            return new VSXMLExpression(this.getMode(), this.parent ? this.parent.clone() : null);\r\n        };\r\n        VSXMLExpression.prototype.equals = function (other) {\r\n            if (other instanceof VSXMLExpression) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        VSXMLExpression.prototype.stateTokenize = function (stream) {\r\n            var token = stream.nextToken();\r\n            if (token === '<') {\r\n                return { type: 'punctuation.vs', nextState: new VSXMLTag(this.getMode(), this) };\r\n            }\r\n            return { type: this.whitespaceTokenType, nextState: this };\r\n        };\r\n        return VSXMLExpression;\r\n    }(VSXMLState));\r\n    exports.VSXMLExpression = VSXMLExpression;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/razor/common/csharpTokenization\", [\"require\", \"exports\", 'vs/base/common/objects', 'vs/languages/html/common/html', 'vs/languages/razor/common/vsxml', 'vs/editor/common/modes/abstractState', 'vs/editor/common/modes/abstractMode', 'vs/languages/razor/common/razorTokenTypes'], function (require, exports, objects, htmlMode, VSXML, abstractState_1, abstractMode_1, razorTokenTypes) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var htmlTokenTypes = htmlMode.htmlTokenTypes;\r\n    var punctuations = '+-*%&|^~!=<>/?;:.,';\r\n    var separators = '+-*/%&|^~!=<>(){}[]\\\"\\'\\\\/?;:.,';\r\n    var whitespace = '\\t ';\r\n    var brackets = (function () {\r\n        var bracketsSource = [\r\n            { tokenType: 'punctuation.bracket.cs', open: '{', close: '}' },\r\n            { tokenType: 'punctuation.array.cs', open: '[', close: ']' },\r\n            { tokenType: 'punctuation.parenthesis.cs', open: '(', close: ')' }\r\n        ];\r\n        var MAP = Object.create(null);\r\n        for (var i = 0; i < bracketsSource.length; i++) {\r\n            var bracket = bracketsSource[i];\r\n            MAP[bracket.open] = {\r\n                tokenType: bracket.tokenType,\r\n            };\r\n            MAP[bracket.close] = {\r\n                tokenType: bracket.tokenType,\r\n            };\r\n        }\r\n        return {\r\n            stringIsBracket: function (text) {\r\n                return !!MAP[text];\r\n            },\r\n            tokenTypeFromString: function (text) {\r\n                return MAP[text].tokenType;\r\n            }\r\n        };\r\n    })();\r\n    var isKeyword = objects.createKeywordMatcher([\r\n        'abstract', 'as', 'async', 'await', 'base', 'bool',\r\n        'break', 'by', 'byte', 'case',\r\n        'catch', 'char', 'checked', 'class',\r\n        'const', 'continue', 'decimal', 'default',\r\n        'delegate', 'do', 'double', 'descending',\r\n        'explicit', 'event', 'extern', 'else',\r\n        'enum', 'false', 'finally', 'fixed',\r\n        'float', 'for', 'foreach', 'from',\r\n        'goto', 'group', 'if', 'implicit',\r\n        'in', 'int', 'interface', 'internal',\r\n        'into', 'is', 'lock', 'long', 'nameof',\r\n        'new', 'null', 'namespace', 'object',\r\n        'operator', 'out', 'override', 'orderby',\r\n        'params', 'private', 'protected', 'public',\r\n        'readonly', 'ref', 'return', 'switch',\r\n        'struct', 'sbyte', 'sealed', 'short',\r\n        'sizeof', 'stackalloc', 'static', 'string',\r\n        'select', 'this', 'throw', 'true',\r\n        'try', 'typeof', 'uint', 'ulong',\r\n        'unchecked', 'unsafe', 'ushort', 'using',\r\n        'var', 'virtual', 'volatile', 'void', 'when',\r\n        'while', 'where', 'yield',\r\n        'model', 'inject' // Razor specific\r\n    ]);\r\n    var ispunctuation = function (character) {\r\n        return punctuations.indexOf(character) > -1;\r\n    };\r\n    var CSState = (function (_super) {\r\n        __extends(CSState, _super);\r\n        function CSState(mode, name, parent) {\r\n            _super.call(this, mode);\r\n            this.name = name;\r\n            this.parent = parent;\r\n        }\r\n        CSState.prototype.equals = function (other) {\r\n            if (!_super.prototype.equals.call(this, other)) {\r\n                return false;\r\n            }\r\n            var otherCSState = other;\r\n            return (other instanceof CSState) && (this.getMode() === otherCSState.getMode()) && (this.name === otherCSState.name) && ((this.parent === null && otherCSState.parent === null) || (this.parent !== null && this.parent.equals(otherCSState.parent)));\r\n        };\r\n        CSState.prototype.tokenize = function (stream) {\r\n            stream.setTokenRules(separators, whitespace);\r\n            if (stream.skipWhitespace().length > 0) {\r\n                return { type: '' };\r\n            }\r\n            return this.stateTokenize(stream);\r\n        };\r\n        CSState.prototype.stateTokenize = function (stream) {\r\n            throw new Error('To be implemented');\r\n        };\r\n        return CSState;\r\n    }(abstractState_1.AbstractState));\r\n    exports.CSState = CSState;\r\n    var CSString = (function (_super) {\r\n        __extends(CSString, _super);\r\n        function CSString(mode, parent, punctuation) {\r\n            _super.call(this, mode, 'string', parent);\r\n            this.isAtBeginning = true;\r\n            this.punctuation = punctuation;\r\n        }\r\n        CSString.prototype.makeClone = function () {\r\n            return new CSString(this.getMode(), this.parent ? this.parent.clone() : null, this.punctuation);\r\n        };\r\n        CSString.prototype.equals = function (other) {\r\n            return _super.prototype.equals.call(this, other) && this.punctuation === other.punctuation;\r\n        };\r\n        CSString.prototype.tokenize = function (stream) {\r\n            var readChars = this.isAtBeginning ? 1 : 0;\r\n            this.isAtBeginning = false;\r\n            while (!stream.eos()) {\r\n                var c = stream.next();\r\n                if (c === '\\\\') {\r\n                    if (readChars === 0) {\r\n                        if (stream.eos()) {\r\n                            return { type: 'string.escape.cs' };\r\n                        }\r\n                        else {\r\n                            stream.next();\r\n                            if (stream.eos()) {\r\n                                return { type: 'string.escape.cs', nextState: this.parent };\r\n                            }\r\n                            else {\r\n                                return { type: 'string.escape.cs' };\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        stream.goBack(1);\r\n                        return { type: 'string.cs' };\r\n                    }\r\n                }\r\n                else if (c === this.punctuation) {\r\n                    break;\r\n                }\r\n                readChars += 1;\r\n            }\r\n            return { type: 'string.cs', nextState: this.parent };\r\n        };\r\n        return CSString;\r\n    }(CSState));\r\n    var CSVerbatimString = (function (_super) {\r\n        __extends(CSVerbatimString, _super);\r\n        function CSVerbatimString(mode, parent) {\r\n            _super.call(this, mode, 'verbatimstring', parent);\r\n        }\r\n        CSVerbatimString.prototype.makeClone = function () {\r\n            return new CSVerbatimString(this.getMode(), this.parent ? this.parent.clone() : null);\r\n        };\r\n        CSVerbatimString.prototype.tokenize = function (stream) {\r\n            while (!stream.eos()) {\r\n                var token = stream.next();\r\n                if (token === '\"') {\r\n                    if (!stream.eos() && stream.peek() === '\"') {\r\n                        stream.next();\r\n                    }\r\n                    else {\r\n                        return { type: 'string.cs', nextState: this.parent };\r\n                    }\r\n                }\r\n            }\r\n            return { type: 'string.cs' };\r\n        };\r\n        return CSVerbatimString;\r\n    }(CSState));\r\n    var CSNumber = (function (_super) {\r\n        __extends(CSNumber, _super);\r\n        function CSNumber(mode, parent, firstDigit) {\r\n            _super.call(this, mode, 'number', parent);\r\n            this.firstDigit = firstDigit;\r\n        }\r\n        CSNumber.prototype.makeClone = function () {\r\n            return new CSNumber(this.getMode(), this.parent ? this.parent.clone() : null, this.firstDigit);\r\n        };\r\n        CSNumber.prototype.tokenize = function (stream) {\r\n            var character = this.firstDigit;\r\n            var base = 10, isDecimal = false, isExponent = false;\r\n            if (character === '0' && !stream.eos()) {\r\n                character = stream.peek();\r\n                if (character === 'x') {\r\n                    base = 16;\r\n                }\r\n                else if (character === '.') {\r\n                    base = 10;\r\n                }\r\n                else {\r\n                    return { type: 'number.cs', nextState: this.parent };\r\n                }\r\n                stream.next();\r\n            }\r\n            while (!stream.eos()) {\r\n                character = stream.peek();\r\n                if (abstractMode_1.isDigit(character, base)) {\r\n                    stream.next();\r\n                }\r\n                else if (base === 10) {\r\n                    if (character === '.' && !isExponent && !isDecimal) {\r\n                        isDecimal = true;\r\n                        stream.next();\r\n                    }\r\n                    else if (character.toLowerCase() === 'e' && !isExponent) {\r\n                        isExponent = true;\r\n                        stream.next();\r\n                        if (!stream.eos() && stream.peek() === '-') {\r\n                            stream.next();\r\n                        }\r\n                    }\r\n                    else if (character.toLowerCase() === 'f' || character.toLowerCase() === 'd') {\r\n                        stream.next();\r\n                        break;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            var tokenType = 'number';\r\n            if (base === 16) {\r\n                tokenType += '.hex';\r\n            }\r\n            return { type: tokenType + '.cs', nextState: this.parent };\r\n        };\r\n        return CSNumber;\r\n    }(CSState));\r\n    // the multi line comment\r\n    var CSComment = (function (_super) {\r\n        __extends(CSComment, _super);\r\n        function CSComment(mode, parent, commentChar) {\r\n            _super.call(this, mode, 'comment', parent);\r\n            this.commentChar = commentChar;\r\n        }\r\n        CSComment.prototype.makeClone = function () {\r\n            return new CSComment(this.getMode(), this.parent ? this.parent.clone() : null, this.commentChar);\r\n        };\r\n        CSComment.prototype.tokenize = function (stream) {\r\n            while (!stream.eos()) {\r\n                var token = stream.next();\r\n                if (token === '*' && !stream.eos() && !stream.peekWhitespace() && stream.peek() === this.commentChar) {\r\n                    stream.next();\r\n                    return { type: 'comment.cs', nextState: this.parent };\r\n                }\r\n            }\r\n            return { type: 'comment.cs' };\r\n        };\r\n        return CSComment;\r\n    }(CSState));\r\n    exports.CSComment = CSComment;\r\n    var CSStatement = (function (_super) {\r\n        __extends(CSStatement, _super);\r\n        function CSStatement(mode, parent, level, plevel, razorMode, expression, firstToken, firstTokenWasKeyword) {\r\n            _super.call(this, mode, 'expression', parent);\r\n            this.level = level;\r\n            this.plevel = plevel;\r\n            this.razorMode = razorMode;\r\n            this.expression = expression;\r\n            this.vsState = new VSXML.VSXMLExpression(mode, null);\r\n            this.firstToken = firstToken;\r\n            this.firstTokenWasKeyword = firstTokenWasKeyword;\r\n        }\r\n        CSStatement.prototype.setVSXMLState = function (newVSState) {\r\n            this.vsState = newVSState;\r\n        };\r\n        CSStatement.prototype.makeClone = function () {\r\n            var st = new CSStatement(this.getMode(), this.parent ? this.parent.clone() : null, this.level, this.plevel, this.razorMode, this.expression, this.firstToken, this.firstTokenWasKeyword);\r\n            if (this.vsState !== null) {\r\n                st.setVSXMLState(this.vsState.clone());\r\n            }\r\n            return st;\r\n        };\r\n        CSStatement.prototype.equals = function (other) {\r\n            return _super.prototype.equals.call(this, other) &&\r\n                (other instanceof CSStatement) &&\r\n                ((this.vsState === null && other.vsState === null) ||\r\n                    (this.vsState !== null && this.vsState.equals(other.vsState)));\r\n        };\r\n        CSStatement.prototype.stateTokenize = function (stream) {\r\n            if (abstractMode_1.isDigit(stream.peek(), 10)) {\r\n                this.firstToken = false;\r\n                return { nextState: new CSNumber(this.getMode(), this, stream.next()) };\r\n            }\r\n            var token = stream.nextToken();\r\n            var acceptNestedModes = !this.firstTokenWasKeyword;\r\n            var nextStateAtEnd = (this.level <= 0 && this.plevel <= 0 && stream.eos() ? this.parent : undefined);\r\n            if (stream.eos()) {\r\n                this.firstTokenWasKeyword = false; // Set this for the state starting on the next line.\r\n            }\r\n            if (isKeyword(token)) {\r\n                if (this.level <= 0) {\r\n                    this.expression = false;\r\n                }\r\n                if (this.firstToken) {\r\n                    this.firstTokenWasKeyword = true;\r\n                }\r\n                return { type: 'keyword.cs' };\r\n            }\r\n            this.firstToken = false;\r\n            if (this.razorMode && token === '<' && acceptNestedModes) {\r\n                if (!stream.eos() && /[_:!\\/\\w]/.test(stream.peek())) {\r\n                    return { nextState: new CSSimpleHTML(this.getMode(), this, htmlMode.States.Content) };\r\n                }\r\n            }\r\n            // exit expressions on anything that doesn't look like part of the same expression\r\n            if (this.razorMode && this.expression && this.level <= 0 && this.plevel <= 0 && !stream.eos()) {\r\n                if (!/^(\\.|\\[|\\(|\\{\\w+)$/.test(stream.peekToken())) {\r\n                    nextStateAtEnd = this.parent;\r\n                }\r\n            }\r\n            if (token === '/') {\r\n                if (!stream.eos() && !stream.peekWhitespace()) {\r\n                    switch (stream.peekToken()) {\r\n                        case '/':\r\n                            stream.nextToken();\r\n                            if (!stream.eos() && stream.peekToken() === '/') {\r\n                                stream.nextToken();\r\n                                if (stream.eos()) {\r\n                                    return {\r\n                                        type: 'comment.vs'\r\n                                    };\r\n                                }\r\n                                if (stream.peekToken() !== '/') {\r\n                                    return {\r\n                                        type: 'comment.vs',\r\n                                        nextState: new VSXML.VSXMLEmbeddedState(this.getMode(), this.vsState, this)\r\n                                    };\r\n                                }\r\n                            }\r\n                            stream.advanceToEOS();\r\n                            return { type: 'comment.cs' };\r\n                        case '*':\r\n                            stream.nextToken();\r\n                            return { nextState: new CSComment(this.getMode(), this, '/') };\r\n                    }\r\n                }\r\n                return { type: 'punctuation.cs', nextState: nextStateAtEnd };\r\n            }\r\n            if (token === '@') {\r\n                if (!stream.eos()) {\r\n                    switch (stream.peekToken()) {\r\n                        case '\"':\r\n                            stream.nextToken();\r\n                            return { nextState: new CSVerbatimString(this.getMode(), this) };\r\n                        case '*':\r\n                            stream.nextToken();\r\n                            return { nextState: new CSComment(this.getMode(), this, '@') };\r\n                    }\r\n                }\r\n            }\r\n            if (/@?\\w+/.test(token)) {\r\n                return { type: 'ident.cs', nextState: nextStateAtEnd };\r\n            }\r\n            if (token === '\"' || token === '\\'') {\r\n                return { nextState: new CSString(this.getMode(), this, token) };\r\n            }\r\n            if (brackets.stringIsBracket(token)) {\r\n                var tr = {\r\n                    type: brackets.tokenTypeFromString(token),\r\n                    nextState: nextStateAtEnd\r\n                };\r\n                if (this.razorMode) {\r\n                    if (token === '{') {\r\n                        this.expression = false; // whenever we enter a block, we exit expression mode\r\n                        this.level++;\r\n                        if (this.level === 1) {\r\n                            tr.type = razorTokenTypes.EMBED_CS;\r\n                            tr.nextState = undefined;\r\n                        }\r\n                    }\r\n                    if (token === '}') {\r\n                        this.level--;\r\n                        if (this.level <= 0) {\r\n                            tr.type = razorTokenTypes.EMBED_CS;\r\n                            tr.nextState = this.parent;\r\n                        }\r\n                    }\r\n                    if (this.expression) {\r\n                        if (token === '(') {\r\n                            this.plevel++;\r\n                            if (this.plevel === 1) {\r\n                                tr.type = razorTokenTypes.EMBED_CS;\r\n                                tr.nextState = undefined;\r\n                            }\r\n                        }\r\n                        if (token === ')') {\r\n                            this.plevel--;\r\n                            if (this.expression && this.plevel <= 0) {\r\n                                tr.type = razorTokenTypes.EMBED_CS;\r\n                                tr.nextState = this.parent;\r\n                            }\r\n                        }\r\n                        if (token === '[') {\r\n                            this.plevel++;\r\n                            tr.nextState = undefined;\r\n                        }\r\n                        if (token === ']') {\r\n                            this.plevel--;\r\n                        }\r\n                    }\r\n                }\r\n                return tr;\r\n            }\r\n            if (ispunctuation(token)) {\r\n                return { type: 'punctuation.cs', nextState: nextStateAtEnd };\r\n            }\r\n            if (this.razorMode && this.expression && this.plevel <= 0) {\r\n                return { type: '', nextState: this.parent };\r\n            }\r\n            return { type: '', nextState: nextStateAtEnd };\r\n        };\r\n        return CSStatement;\r\n    }(CSState));\r\n    exports.CSStatement = CSStatement;\r\n    // this state always returns to parent state if it leaves a html tag\r\n    var CSSimpleHTML = (function (_super) {\r\n        __extends(CSSimpleHTML, _super);\r\n        function CSSimpleHTML(mode, parent, state) {\r\n            _super.call(this, mode, 'number', parent);\r\n            this.state = state;\r\n        }\r\n        CSSimpleHTML.prototype.makeClone = function () {\r\n            return new CSSimpleHTML(this.getMode(), this.parent ? this.parent.clone() : null, this.state);\r\n        };\r\n        CSSimpleHTML.prototype.nextName = function (stream) {\r\n            return stream.advanceIfRegExp(/^[_:\\w][_:\\w-.\\d]*/);\r\n        };\r\n        CSSimpleHTML.prototype.nextAttrValue = function (stream) {\r\n            return stream.advanceIfRegExp(/^('|').*?\\1/);\r\n        };\r\n        CSSimpleHTML.prototype.tokenize = function (stream) {\r\n            switch (this.state) {\r\n                case htmlMode.States.WithinComment:\r\n                    if (stream.advanceUntil('-->', false).length > 0) {\r\n                        return { type: htmlTokenTypes.COMMENT };\r\n                    }\r\n                    if (stream.advanceIfString('-->').length > 0) {\r\n                        this.state = htmlMode.States.Content;\r\n                        return { type: htmlTokenTypes.DELIM_COMMENT, nextState: this.parent };\r\n                    }\r\n                    break;\r\n                case htmlMode.States.WithinDoctype:\r\n                    if (stream.advanceUntil('>', false).length > 0) {\r\n                        return { type: htmlTokenTypes.DOCTYPE };\r\n                    }\r\n                    if (stream.advanceIfString('>').length > 0) {\r\n                        this.state = htmlMode.States.Content;\r\n                        return { type: htmlTokenTypes.DELIM_DOCTYPE, nextState: this.parent };\r\n                    }\r\n                    break;\r\n                case htmlMode.States.Content:\r\n                    if (stream.advanceIfString('!--').length > 0) {\r\n                        this.state = htmlMode.States.WithinComment;\r\n                        return { type: htmlTokenTypes.DELIM_COMMENT };\r\n                    }\r\n                    if (stream.advanceIfRegExp(/!DOCTYPE/i).length > 0) {\r\n                        this.state = htmlMode.States.WithinDoctype;\r\n                        return { type: htmlTokenTypes.DELIM_DOCTYPE };\r\n                    }\r\n                    if (stream.advanceIfString('/').length > 0) {\r\n                        this.state = htmlMode.States.OpeningEndTag;\r\n                        return { type: htmlTokenTypes.DELIM_END };\r\n                    }\r\n                    this.state = htmlMode.States.OpeningStartTag;\r\n                    return { type: htmlTokenTypes.DELIM_START };\r\n                case htmlMode.States.OpeningEndTag: {\r\n                    var tagName = this.nextName(stream);\r\n                    if (tagName.length > 0) {\r\n                        return {\r\n                            type: htmlTokenTypes.getTag(tagName)\r\n                        };\r\n                    }\r\n                    if (stream.advanceIfString('>').length > 0) {\r\n                        this.state = htmlMode.States.Content;\r\n                        return { type: htmlTokenTypes.DELIM_END, nextState: this.parent };\r\n                    }\r\n                    stream.advanceUntil('>', false);\r\n                    return { type: '' };\r\n                }\r\n                case htmlMode.States.OpeningStartTag: {\r\n                    var tagName = this.nextName(stream);\r\n                    if (tagName.length > 0) {\r\n                        this.state = htmlMode.States.WithinTag;\r\n                        return {\r\n                            type: htmlTokenTypes.getTag(tagName)\r\n                        };\r\n                    }\r\n                    break;\r\n                }\r\n                case htmlMode.States.WithinTag:\r\n                    if (stream.skipWhitespace().length > 0) {\r\n                        return { type: '' };\r\n                    }\r\n                    var name = this.nextName(stream);\r\n                    if (name.length > 0) {\r\n                        this.state = htmlMode.States.AttributeName;\r\n                        return { type: htmlTokenTypes.ATTRIB_NAME };\r\n                    }\r\n                    if (stream.advanceIfRegExp(/^\\/?>/).length > 0) {\r\n                        this.state = htmlMode.States.Content;\r\n                        return { type: htmlTokenTypes.DELIM_START, nextState: this.parent };\r\n                    }\r\n                    stream.next();\r\n                    return { type: '' };\r\n                case htmlMode.States.AttributeName:\r\n                    if (stream.skipWhitespace().length > 0 || stream.eos()) {\r\n                        return { type: '' };\r\n                    }\r\n                    if (stream.peek() === '=') {\r\n                        stream.next();\r\n                        this.state = htmlMode.States.AttributeValue;\r\n                        return { type: '' };\r\n                    }\r\n                    this.state = htmlMode.States.WithinTag;\r\n                    return this.tokenize(stream); // no advance yet - jump to WithinTag\r\n                case htmlMode.States.AttributeValue:\r\n                    if (stream.skipWhitespace().length > 0 || stream.eos()) {\r\n                        return { type: '' };\r\n                    }\r\n                    var value = this.nextAttrValue(stream);\r\n                    if (value.length > 0) {\r\n                        this.state = htmlMode.States.WithinTag;\r\n                        return { type: htmlTokenTypes.ATTRIB_VALUE };\r\n                    }\r\n                    this.state = htmlMode.States.WithinTag;\r\n                    return this.tokenize(stream); // no advance yet - jump to WithinTag\r\n            }\r\n            stream.next();\r\n            this.state = htmlMode.States.Content;\r\n            return { type: '', nextState: this.parent };\r\n        };\r\n        return CSSimpleHTML;\r\n    }(CSState));\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\ndefine(\"vs/languages/razor/common/razor\", [\"require\", \"exports\", 'vs/editor/common/modes', 'vs/languages/html/common/html', 'vs/languages/razor/common/csharpTokenization', 'vs/editor/common/modes/abstractMode', 'vs/languages/razor/common/razorTokenTypes', 'vs/platform/instantiation/common/instantiation', 'vs/editor/common/services/modeService', 'vs/editor/common/modes/supports/richEditSupport', 'vs/platform/thread/common/thread', 'vs/base/common/async'], function (require, exports, modes, htmlMode, csharpTokenization, abstractMode_1, razorTokenTypes, instantiation_1, modeService_1, richEditSupport_1, thread_1, async_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    // for a brief description of the razor syntax see http://www.mikesdotnetting.com/Article/153/Inline-Razor-Syntax-Overview\r\n    var RAZORState = (function (_super) {\r\n        __extends(RAZORState, _super);\r\n        function RAZORState(mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValue) {\r\n            _super.call(this, mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValue);\r\n        }\r\n        RAZORState.prototype.makeClone = function () {\r\n            return new RAZORState(this.getMode(), this.kind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValue);\r\n        };\r\n        RAZORState.prototype.equals = function (other) {\r\n            if (other instanceof RAZORState) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        RAZORState.prototype.tokenize = function (stream) {\r\n            if (!stream.eos() && stream.peek() === '@') {\r\n                stream.next();\r\n                if (!stream.eos() && stream.peek() === '*') {\r\n                    return { nextState: new csharpTokenization.CSComment(this.getMode(), this, '@') };\r\n                }\r\n                if (stream.eos() || stream.peek() !== '@') {\r\n                    return { type: razorTokenTypes.EMBED_CS, nextState: new csharpTokenization.CSStatement(this.getMode(), this, 0, 0, true, true, true, false) };\r\n                }\r\n            }\r\n            return _super.prototype.tokenize.call(this, stream);\r\n        };\r\n        return RAZORState;\r\n    }(htmlMode.State));\r\n    var RAZORMode = (function (_super) {\r\n        __extends(RAZORMode, _super);\r\n        function RAZORMode(descriptor, instantiationService, modeService, threadService) {\r\n            _super.call(this, descriptor, instantiationService, modeService, threadService);\r\n        }\r\n        RAZORMode.prototype._registerSupports = function () {\r\n            var _this = this;\r\n            modes.HoverProviderRegistry.register(this.getId(), {\r\n                provideHover: function (model, position, token) {\r\n                    return async_1.wireCancellationToken(token, _this._provideHover(model.uri, position));\r\n                }\r\n            }, true);\r\n            modes.ReferenceProviderRegistry.register(this.getId(), {\r\n                provideReferences: function (model, position, context, token) {\r\n                    return async_1.wireCancellationToken(token, _this._provideReferences(model.uri, position, context));\r\n                }\r\n            }, true);\r\n            modes.SuggestRegistry.register(this.getId(), {\r\n                triggerCharacters: ['.', ':', '<', '\"', '=', '/'],\r\n                shouldAutotriggerSuggest: true,\r\n                provideCompletionItems: function (model, position, token) {\r\n                    return async_1.wireCancellationToken(token, _this._provideCompletionItems(model.uri, position));\r\n                }\r\n            }, true);\r\n            modes.DocumentHighlightProviderRegistry.register(this.getId(), {\r\n                provideDocumentHighlights: function (model, position, token) {\r\n                    return async_1.wireCancellationToken(token, _this._provideDocumentHighlights(model.uri, position));\r\n                }\r\n            }, true);\r\n            modes.LinkProviderRegistry.register(this.getId(), {\r\n                provideLinks: function (model, token) {\r\n                    return async_1.wireCancellationToken(token, _this._provideLinks(model.uri));\r\n                }\r\n            }, true);\r\n        };\r\n        RAZORMode.prototype._createModeWorkerManager = function (descriptor, instantiationService) {\r\n            return new abstractMode_1.ModeWorkerManager(descriptor, 'vs/languages/razor/common/razorWorker', 'RAZORWorker', 'vs/languages/html/common/htmlWorker', instantiationService);\r\n        };\r\n        RAZORMode.prototype._createRichEditSupport = function () {\r\n            return new richEditSupport_1.RichEditSupport(this.getId(), null, {\r\n                wordPattern: abstractMode_1.createWordRegExp('#?%'),\r\n                comments: {\r\n                    blockComment: ['<!--', '-->']\r\n                },\r\n                brackets: [\r\n                    ['<!--', '-->'],\r\n                    ['{', '}'],\r\n                    ['(', ')']\r\n                ],\r\n                __electricCharacterSupport: {\r\n                    caseInsensitive: true,\r\n                    embeddedElectricCharacters: ['*', '}', ']', ')']\r\n                },\r\n                autoClosingPairs: [\r\n                    { open: '{', close: '}' },\r\n                    { open: '[', close: ']' },\r\n                    { open: '(', close: ')' },\r\n                    { open: '\"', close: '\"' },\r\n                    { open: '\\'', close: '\\'' }\r\n                ],\r\n                surroundingPairs: [\r\n                    { open: '\"', close: '\"' },\r\n                    { open: '\\'', close: '\\'' }\r\n                ],\r\n                onEnterRules: [\r\n                    {\r\n                        beforeText: new RegExp(\"<(?!(?:\" + htmlMode.EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n                        afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\r\n                        action: { indentAction: modes.IndentAction.IndentOutdent }\r\n                    },\r\n                    {\r\n                        beforeText: new RegExp(\"<(?!(?:\" + htmlMode.EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n                        action: { indentAction: modes.IndentAction.Indent }\r\n                    }\r\n                ],\r\n            });\r\n        };\r\n        RAZORMode.prototype.getInitialState = function () {\r\n            return new RAZORState(this, htmlMode.States.Content, '', '', '', '', '');\r\n        };\r\n        RAZORMode.prototype.getLeavingNestedModeData = function (line, state) {\r\n            var leavingNestedModeData = _super.prototype.getLeavingNestedModeData.call(this, line, state);\r\n            if (leavingNestedModeData) {\r\n                leavingNestedModeData.stateAfterNestedMode = new RAZORState(this, htmlMode.States.Content, '', '', '', '', '');\r\n            }\r\n            return leavingNestedModeData;\r\n        };\r\n        RAZORMode = __decorate([\r\n            __param(1, instantiation_1.IInstantiationService),\r\n            __param(2, modeService_1.IModeService),\r\n            __param(3, thread_1.IThreadService)\r\n        ], RAZORMode);\r\n        return RAZORMode;\r\n    }(htmlMode.HTMLMode));\r\n    exports.RAZORMode = RAZORMode;\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport const EMBED_CS = 'support.function.cshtml';\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport const TOKEN_VALUE = 'support.property-value.constant.other.json';\nexport const TOKEN_KEY = 'support.type.property-name.json';","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/* In order to use VSXML in your own modes, you need to have an IState\n * which implements IVSXMLWrapperState. Upon a START token such as '///',\n * the wrapper state can return a new VSXMLEmbeddedState as the nextState in\n * the tokenization result.\n*/\n\n\n'use strict';\n\nimport objects = require('vs/base/common/objects');\nimport errors = require('vs/base/common/errors');\nimport Modes = require('vs/editor/common/modes');\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport vsxmlTokenTypes = require('vs/languages/razor/common/vsxmlTokenTypes');\n\nvar separators = '<>\"=/';\nvar whitespace = '\\t ';\nvar isEntity = objects.createKeywordMatcher(['summary', 'reference', 'returns', 'param', 'loc']);\nvar isAttribute = objects.createKeywordMatcher(['type', 'path', 'name', 'locid', 'filename', 'format', 'optional']);\nvar isSeparator = objects.createKeywordMatcher(separators.split(''));\n\nexport interface IVSXMLWrapperState extends Modes.IState {\n\tsetVSXMLState(newVSXMLState:VSXMLState):void;\n}\n\nexport class EmbeddedState extends AbstractState {\n\n\tprivate state:Modes.IState;\n\tprivate parentState:Modes.IState;\n\n\tconstructor(mode:Modes.IMode, state:Modes.IState, parentState:Modes.IState) {\n\t\tsuper(mode);\n\t\tthis.state = state;\n\t\tthis.parentState = parentState;\n\t}\n\n\tpublic getParentState():Modes.IState {\n\t\treturn this.parentState;\n\t}\n\n\tpublic makeClone(): EmbeddedState {\n\t\treturn new EmbeddedState(this.getMode(), AbstractState.safeClone(this.state), AbstractState.safeClone(this.parentState));\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof EmbeddedState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other) &&\n\t\t\t\tAbstractState.safeEquals(this.state, other.state) &&\n\t\t\t\tAbstractState.safeEquals(this.parentState, other.parentState)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic setState(nextState:Modes.IState):void {\n\t\tthis.state = nextState;\n\t}\n\n\tpublic postTokenize(result:Modes.ITokenizationResult, stream:Modes.IStream) : Modes.ITokenizationResult {\n\t\treturn result;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream) : Modes.ITokenizationResult {\n\t\tvar result = this.state.tokenize(stream);\n\t\tif (result.nextState !== undefined) {\n\t\t\tthis.setState(result.nextState);\n\t\t}\n\t\tresult.nextState = this;\n\t\treturn this.postTokenize(result, stream);\n\t}\n}\n\nexport class VSXMLEmbeddedState extends EmbeddedState {\n\n\tconstructor(mode:Modes.IMode, state:Modes.IState, parentState:IVSXMLWrapperState) {\n\t\tsuper(mode, state, parentState);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLEmbeddedState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic setState(nextState:Modes.IState):void{\n\t\tsuper.setState(nextState);\n\t\t(<IVSXMLWrapperState> this.getParentState()).setVSXMLState(<VSXMLState>nextState);\n\t}\n\n\tpublic postTokenize(result:Modes.ITokenizationResult, stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tif (stream.eos()) {\n\t\t\tresult.nextState = this.getParentState();\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class VSXMLState extends AbstractState {\n\n\tpublic parent:Modes.IState;\n\tpublic whitespaceTokenType:string;\n\tprivate name:string;\n\n\tconstructor(mode:Modes.IMode, name:string, parent:Modes.IState, whitespaceTokenType:string='') {\n\t\tsuper(mode);\n\t\tthis.name = name;\n\t\tthis.parent = parent;\n\t\tthis.whitespaceTokenType = whitespaceTokenType;\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other) &&\n\t\t\t\tthis.whitespaceTokenType === other.whitespaceTokenType &&\n\t\t\t\tthis.name === other.name &&\n\t\t\t\tAbstractState.safeEquals(this.parent, other.parent)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tstream.setTokenRules(separators, whitespace);\n\t\tif (stream.skipWhitespace().length > 0) {\n\t\t\treturn { type: this.whitespaceTokenType };\n\t\t}\n\t\treturn this.stateTokenize(stream);\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tthrow errors.notImplemented();\n\t}\n}\n\nexport class VSXMLString extends VSXMLState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'string', parent, vsxmlTokenTypes.TOKEN_VALUE);\n\t}\n\n\tpublic makeClone():VSXMLString {\n\t\treturn new VSXMLString(this.getMode(), this.parent ? this.parent.clone() : null);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLString) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.nextToken();\n\t\t\tif (token === '\"') {\n\t\t\t\treturn { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\n\t\t\t}\n\t\t}\n\t\treturn { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\n\t}\n}\n\nexport class VSXMLTag extends VSXMLState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'expression', parent, 'vs');\n\t}\n\n\tpublic makeClone():VSXMLTag {\n\t\treturn new VSXMLTag(this.getMode(), this.parent ? this.parent.clone() : null);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLTag) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar token = stream.nextToken();\n\t\tvar tokenType = this.whitespaceTokenType;\n\t\tif (token === '>') {\n\t\t\treturn { type: 'punctuation.vs', nextState: this.parent };\n\t\t} else if (token === '\"') {\n\t\t\treturn { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: new VSXMLString(this.getMode(), this) };\n\t\t} else if (isEntity(token)) {\n\t\t\ttokenType = 'tag.vs';\n\t\t} else if (isAttribute(token)) {\n\t\t\ttokenType = vsxmlTokenTypes.TOKEN_KEY;\n\t\t} else if (isSeparator(token)) {\n\t\t\ttokenType = 'punctuation.vs';\n\t\t}\n\t\treturn { type:tokenType, nextState: this };\n\t}\n}\n\nexport class VSXMLExpression extends VSXMLState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'expression', parent, 'vs');\n\t}\n\n\tpublic makeClone():VSXMLExpression {\n\t\treturn new VSXMLExpression(this.getMode(), this.parent ? this.parent.clone() : null);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLExpression) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar token = stream.nextToken();\n\t\tif (token === '<') {\n\t\t\treturn { type: 'punctuation.vs', nextState: new VSXMLTag(this.getMode(), this) };\n\t\t}\n\t\treturn { type: this.whitespaceTokenType, nextState: this};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport objects = require('vs/base/common/objects');\nimport Modes = require('vs/editor/common/modes');\nimport htmlMode = require('vs/languages/html/common/html');\nimport VSXML = require('vs/languages/razor/common/vsxml');\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {isDigit} from 'vs/editor/common/modes/abstractMode';\nimport razorTokenTypes = require('vs/languages/razor/common/razorTokenTypes');\n\nvar htmlTokenTypes = htmlMode.htmlTokenTypes;\n\nvar punctuations = '+-*%&|^~!=<>/?;:.,';\nvar separators = '+-*/%&|^~!=<>(){}[]\\\"\\'\\\\/?;:.,';\nvar whitespace = '\\t ';\n\nvar brackets = (function() {\n\n\tlet bracketsSource = [\n\t\t{ tokenType:'punctuation.bracket.cs', open: '{', close: '}' },\n\t\t{ tokenType:'punctuation.array.cs', open: '[', close: ']' },\n\t\t{ tokenType:'punctuation.parenthesis.cs', open: '(', close: ')' }\n\t];\n\n\tlet MAP: {\n\t\t[text:string]:{\n\t\t\ttokenType: string;\n\t\t}\n\t} = Object.create(null);\n\n\tfor (let i = 0; i < bracketsSource.length; i++) {\n\t\tlet bracket = bracketsSource[i];\n\t\tMAP[bracket.open] = {\n\t\t\ttokenType: bracket.tokenType,\n\t\t};\n\t\tMAP[bracket.close] = {\n\t\t\ttokenType: bracket.tokenType,\n\t\t};\n\t}\n\n\treturn {\n\t\tstringIsBracket: (text:string): boolean => {\n\t\t\treturn !!MAP[text];\n\t\t},\n\t\ttokenTypeFromString: (text:string): string => {\n\t\t\treturn MAP[text].tokenType;\n\t\t}\n\t};\n})();\n\nvar isKeyword = objects.createKeywordMatcher([\n\t'abstract', 'as', 'async', 'await', 'base', 'bool',\n\t'break', 'by', 'byte', 'case',\n\t'catch', 'char', 'checked', 'class',\n\t'const', 'continue', 'decimal', 'default',\n\t'delegate',\t'do', 'double',\t'descending',\n\t'explicit',\t'event', 'extern', 'else',\n\t'enum',\t'false', 'finally', 'fixed',\n\t'float', 'for', 'foreach', 'from',\n\t'goto',\t'group', 'if', 'implicit',\n\t'in', 'int', 'interface', 'internal',\n\t'into', 'is', 'lock', 'long', 'nameof',\n\t'new', 'null', 'namespace', 'object',\n\t'operator', 'out', 'override', 'orderby',\n\t'params', 'private', 'protected', 'public',\n\t'readonly', 'ref', 'return', 'switch',\n\t'struct', 'sbyte', 'sealed', 'short',\n\t'sizeof', 'stackalloc', 'static', 'string',\n\t'select', 'this', 'throw', 'true',\n\t'try', 'typeof', 'uint', 'ulong',\n\t'unchecked', 'unsafe', 'ushort', 'using',\n\t'var', 'virtual', 'volatile', 'void', 'when',\n\t'while', 'where', 'yield',\n\t'model', 'inject' // Razor specific\n]);\n\nvar ispunctuation = (character:string) => {\n\treturn punctuations.indexOf(character) > -1;\n};\n\nexport class CSState extends AbstractState {\n\n\tpublic name:string;\n\tpublic parent:AbstractState;\n\n\tconstructor(mode:Modes.IMode, name:string, parent:AbstractState) {\n\t\tsuper(mode);\n\t\tthis.name = name;\n\t\tthis.parent = parent;\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (!super.equals(other)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar otherCSState:CSState = <CSState>other;\n\t\treturn (other instanceof CSState) && (this.getMode() === otherCSState.getMode()) && (this.name === otherCSState.name) && ((this.parent === null && otherCSState.parent === null) || (this.parent !== null && this.parent.equals(otherCSState.parent)));\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tstream.setTokenRules(separators, whitespace);\n\t\tif (stream.skipWhitespace().length > 0) {\n\t\t\treturn { type: '' };\n\t\t}\n\t\treturn this.stateTokenize(stream);\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tthrow new Error('To be implemented');\n\t}\n}\n\nclass CSString extends CSState {\n\n\tprivate isAtBeginning:boolean;\n\tprivate punctuation:string;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, punctuation:string) {\n\t\tsuper(mode, 'string', parent);\n\t\tthis.isAtBeginning = true;\n\t\tthis.punctuation = punctuation;\n\t}\n\n\tpublic makeClone():CSString {\n\t\treturn new CSString(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.punctuation);\n\t}\n\n\tpublic equals(other:CSString):boolean {\n\t\treturn super.equals(other) && this.punctuation === other.punctuation;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar readChars = this.isAtBeginning ? 1 : 0;\n\t\tthis.isAtBeginning = false;\n\t\twhile (!stream.eos()) {\n\t\t\tvar c = stream.next();\n\t\t\tif (c === '\\\\') {\n\t\t\t\tif (readChars === 0) {\n\t\t\t\t\tif (stream.eos()) {\n\t\t\t\t\t\treturn { type: 'string.escape.cs' };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\tif (stream.eos()) {\n\t\t\t\t\t\t\treturn { type: 'string.escape.cs', nextState: this.parent };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn { type: 'string.escape.cs' };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstream.goBack(1);\n\t\t\t\t\treturn { type: 'string.cs' };\n\t\t\t\t}\n\t\t\t} else if (c === this.punctuation) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treadChars += 1;\n\t\t}\n\t\treturn { type: 'string.cs', nextState: this.parent };\n\t}\n}\n\nclass CSVerbatimString extends CSState {\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState) {\n\t\tsuper(mode, 'verbatimstring', parent);\n\t}\n\n\tpublic makeClone():CSVerbatimString {\n\t\treturn new CSVerbatimString(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.next();\n\t\t\tif (token === '\"') {\n\t\t\t\tif (!stream.eos() && stream.peek() === '\"') {\n\t\t\t\t\tstream.next();\n\t\t\t\t} else {\n\t\t\t\t\treturn { type: 'string.cs', nextState: this.parent };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { type: 'string.cs' };\n\t}\n}\n\nclass CSNumber extends CSState {\n\tprivate firstDigit:string;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, firstDigit:string) {\n\t\tsuper(mode, 'number', parent);\n\t\tthis.firstDigit = firstDigit;\n\t}\n\n\tpublic makeClone():CSNumber {\n\t\treturn new CSNumber(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.firstDigit);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar character = this.firstDigit;\n\t\tvar base = 10, isDecimal = false, isExponent = false;\n\t\tif (character === '0' && !stream.eos()) {\n\t\t\tcharacter = stream.peek();\n\t\t\tif (character === 'x') {\n\t\t\t\tbase = 16;\n\t\t\t} else if (character === '.') {\n\t\t\t\tbase = 10;\n\t\t\t} else {\n\t\t\t\treturn { type: 'number.cs', nextState: this.parent };\n\t\t\t}\n\t\t\tstream.next();\n\t\t}\n\t\twhile (!stream.eos()) {\n\t\t\tcharacter = stream.peek();\n\t\t\tif (isDigit(character, base)) {\n\t\t\t\tstream.next();\n\t\t\t} else if (base === 10) {\n\t\t\t\tif (character === '.' && !isExponent && !isDecimal) {\n\t\t\t\t\tisDecimal = true;\n\t\t\t\t\tstream.next();\n\t\t\t\t} else if (character.toLowerCase() === 'e' && !isExponent) {\n\t\t\t\t\tisExponent = true;\n\t\t\t\t\tstream.next();\n\t\t\t\t\tif (!stream.eos() && stream.peek() === '-') {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t}\n\t\t\t\t} else if (character.toLowerCase() === 'f' || character.toLowerCase() === 'd') {\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar tokenType = 'number';\n\t\tif (base === 16) {\n\t\t\ttokenType += '.hex';\n\t\t}\n\t\treturn { type: tokenType + '.cs', nextState: this.parent };\n\t}\n}\n\n// the multi line comment\nexport class CSComment extends CSState {\n\tprivate commentChar:string;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, commentChar:string) {\n\t\tsuper(mode, 'comment', parent);\n\t\tthis.commentChar = commentChar;\n\t}\n\n\tpublic makeClone():CSComment {\n\t\treturn new CSComment(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.commentChar);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.next();\n\t\t\tif (token === '*' && !stream.eos() && !stream.peekWhitespace() && stream.peek() === this.commentChar) {\n\t\t\t\tstream.next();\n\t\t\t\treturn { type: 'comment.cs', nextState: this.parent};\n\t\t\t}\n\t\t}\n\t\treturn { type: 'comment.cs' };\n\t}\n}\n\nexport class CSStatement extends CSState implements VSXML.IVSXMLWrapperState {\n\tprivate level:number;\n\tprivate plevel:number;\n\tprivate razorMode:boolean;\n\tprivate expression:boolean;\n\tprivate vsState: VSXML.VSXMLState;\n\tprivate firstToken: boolean;\n\tprivate firstTokenWasKeyword: boolean;\n\n\tconstructor(mode: Modes.IMode, parent: AbstractState, level: number, plevel: number, razorMode: boolean,\n\t\t\t\texpression: boolean, firstToken: boolean, firstTokenWasKeyword: boolean) {\n\t\tsuper(mode, 'expression', parent);\n\t\tthis.level = level;\n\t\tthis.plevel = plevel;\n\t\tthis.razorMode = razorMode;\n\t\tthis.expression = expression;\n\t\tthis.vsState = new VSXML.VSXMLExpression(mode, null);\n\t\tthis.firstToken = firstToken;\n\t\tthis.firstTokenWasKeyword = firstTokenWasKeyword;\n\t}\n\n\tpublic setVSXMLState(newVSState:VSXML.VSXMLState):void {\n\t\tthis.vsState = newVSState;\n\t}\n\n\tpublic makeClone():CSStatement {\n\t\tvar st = new CSStatement(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.level,\n\t\t\tthis.plevel, this.razorMode, this.expression, this.firstToken, this.firstTokenWasKeyword);\n\t\tif (this.vsState !== null) {\n\t\t\tst.setVSXMLState(<VSXML.VSXMLState>this.vsState.clone());\n\t\t}\n\t\treturn st;\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\treturn super.equals(other) &&\n\t\t\t\t(other instanceof CSStatement) &&\n\t\t\t\t((this.vsState === null && (<CSStatement>other).vsState === null) ||\n\t\t\t\t(this.vsState !== null && this.vsState.equals((<CSStatement>other).vsState)));\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\n\t\tif (isDigit(stream.peek(), 10)) {\n\t\t\tthis.firstToken = false;\n\t\t\treturn { nextState: new CSNumber(this.getMode(), this, stream.next()) };\n\t\t}\n\n\t\tvar token = stream.nextToken();\n\t\tvar acceptNestedModes = !this.firstTokenWasKeyword;\n\t\tvar nextStateAtEnd = (this.level <= 0 && this.plevel <= 0 && stream.eos()  ? this.parent : undefined);\n\n\t\tif (stream.eos()) {\n\t\t\tthis.firstTokenWasKeyword = false; // Set this for the state starting on the next line.\n\t\t}\n\n\t\tif (isKeyword(token)) {\n\t\t\tif (this.level <= 0) {\t// if we find a keyword outside of a block, we know that we are outside of an expression\n\t\t\t\tthis.expression = false;\n\t\t\t}\n\t\t\tif (this.firstToken) {\n\t\t\t\tthis.firstTokenWasKeyword = true;\n\t\t\t}\n\t\t\treturn { type: 'keyword.cs' };\n\t\t}\n\n\t\tthis.firstToken = false;\n\n\t\tif (this.razorMode && token === '<' && acceptNestedModes) {\n\t\t\tif (!stream.eos() && /[_:!\\/\\w]/.test(stream.peek())) {\n\t\t\t\treturn { nextState: new CSSimpleHTML(this.getMode(), this, htmlMode.States.Content) };\n\t\t\t}\n\t\t}\n\n\t\t// exit expressions on anything that doesn't look like part of the same expression\n\t\tif (this.razorMode && this.expression && this.level <= 0 && this.plevel <= 0&& !stream.eos()) {\n\t\t\tif (!/^(\\.|\\[|\\(|\\{\\w+)$/.test(stream.peekToken())) {\n\t\t\t\tnextStateAtEnd = this.parent;\n\t\t\t}\n\t\t}\n\n\t\tif (token === '/') {\n\t\t\tif (!stream.eos() && !stream.peekWhitespace()) {\n\t\t\t\tswitch(stream.peekToken()) {\n\t\t\t\t\tcase '/':\n\t\t\t\t\t\tstream.nextToken();\n\t\t\t\t\t\tif (!stream.eos() && stream.peekToken() === '/') {\n\t\t\t\t\t\t\tstream.nextToken();\n\t\t\t\t\t\t\tif (stream.eos()) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: 'comment.vs'\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (stream.peekToken() !== '/') {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: 'comment.vs',\n\t\t\t\t\t\t\t\t\tnextState: new VSXML.VSXMLEmbeddedState(this.getMode(), this.vsState, this)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstream.advanceToEOS();\n\t\t\t\t\t\treturn { type: 'comment.cs' };\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tstream.nextToken();\n\t\t\t\t\t\treturn { nextState: new CSComment(this.getMode(), this, '/') };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { type: 'punctuation.cs', nextState: nextStateAtEnd };\n\t\t}\n\t\tif (token === '@') {\t// a verbatim string (or a razor construct)\n\t\t\tif (!stream.eos()) {\n\t\t\t\tswitch(stream.peekToken()) {\n\t\t\t\tcase '\"':\n\t\t\t\t\tstream.nextToken();\n\t\t\t\t\treturn { nextState: new CSVerbatimString(this.getMode(), this) };\n\t\t\t\tcase '*':\n\t\t\t\t\tstream.nextToken();\n\t\t\t\t\treturn { nextState: new CSComment(this.getMode(), this, '@') };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (/@?\\w+/.test(token)) {\n\t\t\treturn { type: 'ident.cs', nextState: nextStateAtEnd };\n\t\t}\n\n\t\tif (token === '\"' || token === '\\'') { // string or character\n\t\t\treturn { nextState: new CSString(this.getMode(), this, token) };\n\t\t}\n\t\tif (brackets.stringIsBracket(token)) {\n\n\t\t\tvar tr: Modes.ITokenizationResult = {\n\t\t\t\ttype: brackets.tokenTypeFromString(token),\n\t\t\t\tnextState: nextStateAtEnd\n\t\t\t};\n\n\t\t\tif (this.razorMode) {\n\t\t\t\tif (token === '{') {\n\t\t\t\t\tthis.expression = false;\t// whenever we enter a block, we exit expression mode\n\t\t\t\t\tthis.level++;\n\t\t\t\t\tif (this.level === 1) {\n\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\ttr.nextState = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (token === '}') {\n\t\t\t\t\tthis.level--;\n\t\t\t\t\tif (this.level <= 0) {\n\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\ttr.nextState = this.parent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.expression) {\n\t\t\t\t\tif (token === '(') {\n\t\t\t\t\t\tthis.plevel++;\n\t\t\t\t\t\tif (this.plevel === 1) {\n\t\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\t\ttr.nextState = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (token === ')') {\n\t\t\t\t\t\tthis.plevel--;\n\t\t\t\t\t\tif (this.expression && this.plevel <= 0) {\t// we only leave csharp mode if we are in expression mode\n\t\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\t\ttr.nextState = this.parent;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (token === '[') {\n\t\t\t\t\t\tthis.plevel++;\n\t\t\t\t\t\ttr.nextState = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (token === ']') {\n\t\t\t\t\t\tthis.plevel--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tr;\n\t\t}\n\n\t\tif (ispunctuation(token)) {\n\t\t\treturn { type: 'punctuation.cs', nextState: nextStateAtEnd };\n\t\t}\n\n\t\tif (this.razorMode && this.expression && this.plevel <= 0) {\t// in razor mode exit on non-keywords in expressions\n\t\t\treturn { type: '', nextState: this.parent };\n\t\t}\n\n\t\treturn { type: '', nextState: nextStateAtEnd };\n\t}\n}\n\n// this state always returns to parent state if it leaves a html tag\nclass CSSimpleHTML extends CSState {\n\tprivate state:htmlMode.States;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, state:htmlMode.States) {\n\t\tsuper(mode, 'number', parent);\n\t\tthis.state = state;\n\t}\n\n\tpublic makeClone():CSSimpleHTML {\n\t\treturn new CSSimpleHTML(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.state);\n\t}\n\n\tprivate nextName(stream:Modes.IStream):string {\n\t\treturn stream.advanceIfRegExp(/^[_:\\w][_:\\w-.\\d]*/);\n\t}\n\n\tprivate nextAttrValue(stream:Modes.IStream):string {\n\t\treturn stream.advanceIfRegExp(/^('|').*?\\1/);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\n\t\tswitch (this.state) {\n\n\t\t\tcase htmlMode.States.WithinComment:\n\t\t\t\tif (stream.advanceUntil('-->', false).length > 0) {\n\t\t\t\t\treturn { type: htmlTokenTypes.COMMENT};\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('-->').length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_COMMENT, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase htmlMode.States.WithinDoctype:\n\t\t\t\tif (stream.advanceUntil('>', false).length > 0) {\n\t\t\t\t\treturn { type: htmlTokenTypes.DOCTYPE };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('>').length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_DOCTYPE, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase htmlMode.States.Content:\n\t\t\t\tif (stream.advanceIfString('!--').length > 0){\n\t\t\t\t\tthis.state = htmlMode.States.WithinComment;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_COMMENT };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfRegExp(/!DOCTYPE/i).length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.WithinDoctype;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_DOCTYPE };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('/').length > 0){\n\t\t\t\t\tthis.state = htmlMode.States.OpeningEndTag;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_END };\n\t\t\t\t}\n\t\t\t\tthis.state = htmlMode.States.OpeningStartTag;\n\t\t\t\treturn { type: htmlTokenTypes.DELIM_START };\n\n\t\t\tcase htmlMode.States.OpeningEndTag: {\n\t\t\t\tlet tagName = this.nextName(stream);\n\t\t\t\tif (tagName.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: htmlTokenTypes.getTag(tagName)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('>').length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_END, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tstream.advanceUntil('>', false);\n\t\t\t\treturn { type: '' };\n\t\t\t}\n\n\t\t\tcase htmlMode.States.OpeningStartTag: {\n\t\t\t\tlet tagName = this.nextName(stream);\n\t\t\t\tif (tagName.length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: htmlTokenTypes.getTag(tagName)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase htmlMode.States.WithinTag:\n\t\t\t\tif (stream.skipWhitespace().length > 0) {\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tvar name:string = this.nextName(stream);\n\t\t\t\tif (name.length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.AttributeName;\n\t\t\t\t\treturn { type: htmlTokenTypes.ATTRIB_NAME };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfRegExp(/^\\/?>/).length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_START, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tstream.next();\n\t\t\t\treturn { type: '' };\n\n\t\t\tcase htmlMode.States.AttributeName:\n\t\t\t\tif (stream.skipWhitespace().length > 0 || stream.eos()) {\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tif (stream.peek() === '=') {\n\t\t\t\t\tstream.next();\n\t\t\t\t\tthis.state = htmlMode.States.AttributeValue;\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\treturn this.tokenize(stream); // no advance yet - jump to WithinTag\n\n\t\t\tcase htmlMode.States.AttributeValue:\n\t\t\t\tif (stream.skipWhitespace().length > 0 || stream.eos()) {\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tvar value = this.nextAttrValue(stream);\n\t\t\t\tif (value.length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\t\treturn { type: htmlTokenTypes.ATTRIB_VALUE };\n\t\t\t\t}\n\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\treturn this.tokenize(stream); // no advance yet - jump to WithinTag\n\t\t}\n\t\tstream.next();\n\t\tthis.state = htmlMode.States.Content;\n\t\treturn { type: '', nextState: this.parent };\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport modes = require('vs/editor/common/modes');\nimport htmlMode = require('vs/languages/html/common/html');\nimport csharpTokenization = require('vs/languages/razor/common/csharpTokenization');\nimport {createWordRegExp, ModeWorkerManager} from 'vs/editor/common/modes/abstractMode';\nimport razorTokenTypes = require('vs/languages/razor/common/razorTokenTypes');\nimport {RAZORWorker} from 'vs/languages/razor/common/razorWorker';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {ILeavingNestedModeData} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\nimport {wireCancellationToken} from 'vs/base/common/async';\n\n// for a brief description of the razor syntax see http://www.mikesdotnetting.com/Article/153/Inline-Razor-Syntax-Overview\n\nclass RAZORState extends htmlMode.State {\n\n\tconstructor(mode:modes.IMode, kind:htmlMode.States, lastTagName:string, lastAttributeName:string, embeddedContentType:string, attributeValueQuote:string, attributeValue:string) {\n\t\tsuper(mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValue);\n\t}\n\n\tpublic makeClone():RAZORState {\n\t\treturn new RAZORState(this.getMode(), this.kind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValue);\n\t}\n\n\tpublic equals(other:modes.IState):boolean {\n\t\tif (other instanceof RAZORState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\n\t\tif (!stream.eos() && stream.peek() === '@') {\n\t\t\tstream.next();\n\t\t\tif (!stream.eos() && stream.peek() === '*') {\n\t\t\t\treturn { nextState: new csharpTokenization.CSComment(this.getMode(), this, '@') };\n\t\t\t}\n\t\t\tif (stream.eos() || stream.peek() !== '@') {\n\t\t\t\treturn { type: razorTokenTypes.EMBED_CS, nextState: new csharpTokenization.CSStatement(this.getMode(), this, 0, 0, true, true, true, false) };\n\t\t\t}\n\t\t}\n\n\t\treturn super.tokenize(stream);\n\t}\n}\n\nexport class RAZORMode extends htmlMode.HTMLMode<RAZORWorker> {\n\n\tconstructor(\n\t\tdescriptor:modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IThreadService threadService: IThreadService\n\t) {\n\t\tsuper(descriptor, instantiationService, modeService, threadService);\n\t}\n\n\tprotected _registerSupports(): void {\n\t\tmodes.HoverProviderRegistry.register(this.getId(), {\n\t\t\tprovideHover: (model, position, token): Thenable<modes.Hover> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideHover(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.ReferenceProviderRegistry.register(this.getId(), {\n\t\t\tprovideReferences: (model, position, context, token): Thenable<modes.Location[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideReferences(model.uri, position, context));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.SuggestRegistry.register(this.getId(), {\n\t\t\ttriggerCharacters: ['.', ':', '<', '\"', '=', '/'],\n\t\t\tshouldAutotriggerSuggest: true,\n\t\t\tprovideCompletionItems: (model, position, token): Thenable<modes.ISuggestResult[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideCompletionItems(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.DocumentHighlightProviderRegistry.register(this.getId(), {\n\t\t\tprovideDocumentHighlights: (model, position, token): Thenable<modes.DocumentHighlight[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideDocumentHighlights(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.LinkProviderRegistry.register(this.getId(), {\n\t\t\tprovideLinks: (model, token): Thenable<modes.ILink[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideLinks(model.uri));\n\t\t\t}\n\t\t}, true);\n\t}\n\n\tprotected _createModeWorkerManager(descriptor:modes.IModeDescriptor, instantiationService: IInstantiationService): ModeWorkerManager<RAZORWorker> {\n\t\treturn new ModeWorkerManager<RAZORWorker>(descriptor, 'vs/languages/razor/common/razorWorker', 'RAZORWorker', 'vs/languages/html/common/htmlWorker', instantiationService);\n\t}\n\n\tprotected _createRichEditSupport(): modes.IRichEditSupport {\n\t\treturn new RichEditSupport(this.getId(), null, {\n\n\t\t\twordPattern: createWordRegExp('#?%'),\n\n\t\t\tcomments: {\n\t\t\t\tblockComment: ['<!--', '-->']\n\t\t\t},\n\n\t\t\tbrackets: [\n\t\t\t\t['<!--', '-->'],\n\t\t\t\t['{', '}'],\n\t\t\t\t['(', ')']\n\t\t\t],\n\n\t\t\t__electricCharacterSupport: {\n\t\t\t\tcaseInsensitive: true,\n\t\t\t\tembeddedElectricCharacters: ['*', '}', ']', ')']\n\t\t\t},\n\n\t\t\tautoClosingPairs: [\n\t\t\t\t{ open: '{', close: '}' },\n\t\t\t\t{ open: '[', close: ']' },\n\t\t\t\t{ open: '(', close: ')' },\n\t\t\t\t{ open: '\"', close: '\"' },\n\t\t\t\t{ open: '\\'', close: '\\'' }\n\t\t\t],\n\t\t\tsurroundingPairs: [\n\t\t\t\t{ open: '\"', close: '\"' },\n\t\t\t\t{ open: '\\'', close: '\\'' }\n\t\t\t],\n\n\t\t\tonEnterRules: [\n\t\t\t\t{\n\t\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\t\tafterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n\t\t\t\t\taction: { indentAction: modes.IndentAction.IndentOutdent }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\t\taction: { indentAction: modes.IndentAction.Indent }\n\t\t\t\t}\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic getInitialState(): modes.IState {\n\t\treturn new RAZORState(this, htmlMode.States.Content, '', '', '', '', '');\n\t}\n\n\tpublic getLeavingNestedModeData(line:string, state:modes.IState): ILeavingNestedModeData {\n\t\tvar leavingNestedModeData = super.getLeavingNestedModeData(line, state);\n\t\tif (leavingNestedModeData) {\n\t\t\tleavingNestedModeData.stateAfterNestedMode = new RAZORState(this, htmlMode.States.Content, '', '', '', '', '');\n\t\t}\n\t\treturn leavingNestedModeData;\n\t}\n}\n"]}