{"version":3,"sources":["vs/languages/php/common/php.js","vs/languages/php/common/file:/C:/Alex/src/vscode/src/vs/languages/php/common/php.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","define","require","exports","objects","Modes","abstractMode_1","abstractState_1","modeService_1","richEditSupport_1","tokenizationSupport_1","suggestSupport_1","editorWorkerService_1","configuration_1","brackets","bracketsSource","tokenType","open","close","MAP","bracket","stringIsBracket","text","tokenTypeFromString","delimiters","separators","whitespace","isKeyword","createKeywordMatcher","isCompileTimeConstant","isPreDefinedVariable","isDelimiter","character","indexOf","isVariable","PHPState","_super","mode","name","parent","whitespaceTokenType","call","equals","other","AbstractState","safeEquals","tokenize","stream","setTokenRules","skipWhitespace","type","stateTokenize","Error","PHPString","delimiter","isAtBeginning","makeClone","getMode","safeClone","readChars","eos","next","goBack","nextState","PHPNumber","firstDigit","base","isDecimal","isExponent","peek","toLowerCase","isDigit","PHPLineComment","PHPDocComment","token","peekWhitespace","PHPStatement","advanceIfString","nextToken","toString","peekToken","PHPPlain","advanceIfStringCaseInsensitive","PHPEnterHTMLState","PHPMode","descriptor","modeService","configurationService","editorWorkerService","id","tokenizationSupport","TokenizationSupport","richEditSupport","RichEditSupport","getId","wordPattern","createWordRegExp","comments","lineComment","blockComment","autoClosingPairs","notIn","SuggestRegistry","register","TextualSuggestSupport","asyncCtor","getOrCreateMode","getInitialState","htmlMode","htmlState","setStateData","enterNestedMode","state","getNestedModeInitialState","myState","result","missingModePromise","getLeavingNestedModeData","line","match","exec","nestedModeBuffer","substring","index","bufferAfterNestedMode","stateAfterNestedMode","onReturningFromNestedMode","myStateAfterNestedMode","lastNestedModeState","IModeService","IConfigurationService","IEditorWorkerService","AbstractMode"],"mappings":"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","file":"vs/languages/php/common/php.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\ndefine(\"vs/languages/php/common/php\", [\"require\", \"exports\", 'vs/base/common/objects', 'vs/editor/common/modes', 'vs/editor/common/modes/abstractMode', 'vs/editor/common/modes/abstractState', 'vs/editor/common/services/modeService', 'vs/editor/common/modes/supports/richEditSupport', 'vs/editor/common/modes/supports/tokenizationSupport', 'vs/editor/common/modes/supports/suggestSupport', 'vs/editor/common/services/editorWorkerService', 'vs/platform/configuration/common/configuration'], function (require, exports, objects, Modes, abstractMode_1, abstractState_1, modeService_1, richEditSupport_1, tokenizationSupport_1, suggestSupport_1, editorWorkerService_1, configuration_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var brackets = (function () {\r\n        var bracketsSource = [\r\n            { tokenType: 'delimiter.bracket.php', open: '{', close: '}' },\r\n            { tokenType: 'delimiter.array.php', open: '[', close: ']' },\r\n            { tokenType: 'delimiter.parenthesis.php', open: '(', close: ')' }\r\n        ];\r\n        var MAP = Object.create(null);\r\n        for (var i = 0; i < bracketsSource.length; i++) {\r\n            var bracket = bracketsSource[i];\r\n            MAP[bracket.open] = {\r\n                tokenType: bracket.tokenType\r\n            };\r\n            MAP[bracket.close] = {\r\n                tokenType: bracket.tokenType\r\n            };\r\n        }\r\n        return {\r\n            stringIsBracket: function (text) {\r\n                return !!MAP[text];\r\n            },\r\n            tokenTypeFromString: function (text) {\r\n                return MAP[text].tokenType;\r\n            }\r\n        };\r\n    })();\r\n    var delimiters = '+-*%&|^~!=<>(){}[]/?;:.,@';\r\n    var separators = '+-*/%&|^~!=<>(){}[]\"\\'\\\\/?;:.,#';\r\n    var whitespace = '\\t ';\r\n    var isKeyword = objects.createKeywordMatcher([\r\n        'abstract', 'and', 'array', 'as', 'break',\r\n        'callable', 'case', 'catch', 'cfunction', 'class', 'clone',\r\n        'const', 'continue', 'declare', 'default', 'do',\r\n        'else', 'elseif', 'enddeclare', 'endfor', 'endforeach',\r\n        'endif', 'endswitch', 'endwhile', 'extends', 'false', 'final',\r\n        'for', 'foreach', 'function', 'global', 'goto',\r\n        'if', 'implements', 'interface', 'instanceof', 'insteadof',\r\n        'namespace', 'new', 'null', 'object', 'old_function', 'or', 'private',\r\n        'protected', 'public', 'resource', 'static', 'switch', 'throw', 'trait',\r\n        'try', 'true', 'use', 'var', 'while', 'xor',\r\n        'die', 'echo', 'empty', 'exit', 'eval',\r\n        'include', 'include_once', 'isset', 'list', 'require',\r\n        'require_once', 'return', 'print', 'unset', 'yield',\r\n        '__construct'\r\n    ]);\r\n    var isCompileTimeConstant = objects.createKeywordMatcher([\r\n        '__CLASS__',\r\n        '__DIR__',\r\n        '__FILE__',\r\n        '__LINE__',\r\n        '__NAMESPACE__',\r\n        '__METHOD__',\r\n        '__FUNCTION__',\r\n        '__TRAIT__'\r\n    ]);\r\n    var isPreDefinedVariable = objects.createKeywordMatcher([\r\n        '$GLOBALS',\r\n        '$_SERVER',\r\n        '$_GET',\r\n        '$_POST',\r\n        '$_FILES',\r\n        '$_REQUEST',\r\n        '$_SESSION',\r\n        '$_ENV',\r\n        '$_COOKIE',\r\n        '$php_errormsg',\r\n        '$HTTP_RAW_POST_DATA',\r\n        '$http_response_header',\r\n        '$argc',\r\n        '$argv'\r\n    ]);\r\n    var isDelimiter = function (character) {\r\n        return delimiters.indexOf(character) > -1;\r\n    };\r\n    var isVariable = function (character) {\r\n        return (character[0] === '$');\r\n    };\r\n    var PHPState = (function (_super) {\r\n        __extends(PHPState, _super);\r\n        function PHPState(mode, name, parent, whitespaceTokenType) {\r\n            if (whitespaceTokenType === void 0) { whitespaceTokenType = ''; }\r\n            _super.call(this, mode);\r\n            this.name = name;\r\n            this.parent = parent;\r\n            this.whitespaceTokenType = whitespaceTokenType;\r\n        }\r\n        PHPState.prototype.equals = function (other) {\r\n            if (other instanceof PHPState) {\r\n                return (_super.prototype.equals.call(this, other) &&\r\n                    this.name === other.name &&\r\n                    this.whitespaceTokenType === other.whitespaceTokenType &&\r\n                    abstractState_1.AbstractState.safeEquals(this.parent, other.parent));\r\n            }\r\n            return false;\r\n        };\r\n        PHPState.prototype.tokenize = function (stream) {\r\n            stream.setTokenRules(separators, whitespace);\r\n            if (stream.skipWhitespace().length > 0) {\r\n                return { type: this.whitespaceTokenType };\r\n            }\r\n            return this.stateTokenize(stream);\r\n        };\r\n        PHPState.prototype.stateTokenize = function (stream) {\r\n            throw new Error('To be implemented');\r\n        };\r\n        return PHPState;\r\n    }(abstractState_1.AbstractState));\r\n    exports.PHPState = PHPState;\r\n    var PHPString = (function (_super) {\r\n        __extends(PHPString, _super);\r\n        function PHPString(mode, parent, delimiter, isAtBeginning) {\r\n            if (isAtBeginning === void 0) { isAtBeginning = true; }\r\n            _super.call(this, mode, 'string', parent, 'string.php');\r\n            this.delimiter = delimiter;\r\n            this.isAtBeginning = isAtBeginning;\r\n        }\r\n        PHPString.prototype.makeClone = function () {\r\n            return new PHPString(this.getMode(), abstractState_1.AbstractState.safeClone(this.parent), this.delimiter, this.isAtBeginning);\r\n        };\r\n        PHPString.prototype.equals = function (other) {\r\n            if (other instanceof PHPString) {\r\n                return (_super.prototype.equals.call(this, other) &&\r\n                    this.delimiter === other.delimiter &&\r\n                    this.isAtBeginning === other.isAtBeginning);\r\n            }\r\n            return false;\r\n        };\r\n        PHPString.prototype.tokenize = function (stream) {\r\n            var readChars = this.isAtBeginning ? 1 : 0;\r\n            this.isAtBeginning = false;\r\n            while (!stream.eos()) {\r\n                var c = stream.next();\r\n                if (c === '\\\\') {\r\n                    if (readChars === 0) {\r\n                        if (stream.eos()) {\r\n                            return { type: 'string.php', nextState: this.parent };\r\n                        }\r\n                        else {\r\n                            stream.next();\r\n                        }\r\n                    }\r\n                    else {\r\n                        stream.goBack(1);\r\n                        return { type: 'string.php' };\r\n                    }\r\n                }\r\n                else if (c === this.delimiter) {\r\n                    return { type: 'string.php', nextState: this.parent };\r\n                }\r\n                readChars += 1;\r\n            }\r\n            return { type: 'string.php' };\r\n        };\r\n        return PHPString;\r\n    }(PHPState));\r\n    exports.PHPString = PHPString;\r\n    var PHPNumber = (function (_super) {\r\n        __extends(PHPNumber, _super);\r\n        function PHPNumber(mode, parent, firstDigit) {\r\n            _super.call(this, mode, 'number', parent);\r\n            this.firstDigit = firstDigit;\r\n        }\r\n        PHPNumber.prototype.makeClone = function () {\r\n            return new PHPNumber(this.getMode(), abstractState_1.AbstractState.safeClone(this.parent), this.firstDigit);\r\n        };\r\n        PHPNumber.prototype.equals = function (other) {\r\n            if (other instanceof PHPNumber) {\r\n                return (_super.prototype.equals.call(this, other) &&\r\n                    this.firstDigit === other.firstDigit);\r\n            }\r\n            return false;\r\n        };\r\n        PHPNumber.prototype.tokenize = function (stream) {\r\n            var character = this.firstDigit;\r\n            var base = 10, isDecimal = false, isExponent = false;\r\n            if (character === '0' && !stream.eos()) {\r\n                character = stream.peek();\r\n                if (character.toLowerCase() === 'x') {\r\n                    base = 16;\r\n                }\r\n                else if (character.toLowerCase() === 'b') {\r\n                    base = 2;\r\n                }\r\n                else if (character === '.') {\r\n                    base = 10;\r\n                }\r\n                else if (abstractMode_1.isDigit(character, 8)) {\r\n                    base = 8;\r\n                }\r\n                else {\r\n                    return { type: 'number.php', nextState: this.parent };\r\n                }\r\n                stream.next();\r\n            }\r\n            while (!stream.eos()) {\r\n                character = stream.peek();\r\n                if (abstractMode_1.isDigit(character, base)) {\r\n                    stream.next();\r\n                }\r\n                else if (base === 10) {\r\n                    if (character === '.' && !isExponent && !isDecimal) {\r\n                        isDecimal = true;\r\n                        stream.next();\r\n                    }\r\n                    else if (character === 'e' && !isExponent) {\r\n                        isExponent = true;\r\n                        stream.next();\r\n                        if (!stream.eos() && stream.peek() === '-') {\r\n                            stream.next();\r\n                        }\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else if (base === 8 && abstractMode_1.isDigit(character, 10)) {\r\n                    base = 10;\r\n                    stream.next();\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            var tokenType = 'number';\r\n            if (base === 16) {\r\n                tokenType += '.hex';\r\n            }\r\n            else if (base === 8) {\r\n                tokenType += '.octal';\r\n            }\r\n            else if (base === 2) {\r\n                tokenType += '.binary';\r\n            }\r\n            return { type: tokenType + '.php', nextState: this.parent };\r\n        };\r\n        return PHPNumber;\r\n    }(PHPState));\r\n    exports.PHPNumber = PHPNumber;\r\n    var PHPLineComment = (function (_super) {\r\n        __extends(PHPLineComment, _super);\r\n        function PHPLineComment(mode, parent) {\r\n            _super.call(this, mode, 'comment', parent, 'comment.php');\r\n        }\r\n        PHPLineComment.prototype.makeClone = function () {\r\n            return new PHPDocComment(this.getMode(), abstractState_1.AbstractState.safeClone(this.parent));\r\n        };\r\n        PHPLineComment.prototype.equals = function (other) {\r\n            if (other instanceof PHPLineComment) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        PHPLineComment.prototype.tokenize = function (stream) {\r\n            while (!stream.eos()) {\r\n                var token = stream.next();\r\n                if (token === '?' && !stream.eos() && stream.peek() === '>') {\r\n                    stream.goBack(1);\r\n                    return { type: 'comment.php', nextState: this.parent };\r\n                }\r\n            }\r\n            return { type: 'comment.php', nextState: this.parent };\r\n        };\r\n        return PHPLineComment;\r\n    }(PHPState));\r\n    exports.PHPLineComment = PHPLineComment;\r\n    var PHPDocComment = (function (_super) {\r\n        __extends(PHPDocComment, _super);\r\n        function PHPDocComment(mode, parent) {\r\n            _super.call(this, mode, 'comment', parent, 'comment.php');\r\n        }\r\n        PHPDocComment.prototype.makeClone = function () {\r\n            return new PHPDocComment(this.getMode(), abstractState_1.AbstractState.safeClone(this.parent));\r\n        };\r\n        PHPDocComment.prototype.equals = function (other) {\r\n            if (other instanceof PHPDocComment) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        PHPDocComment.prototype.tokenize = function (stream) {\r\n            while (!stream.eos()) {\r\n                var token = stream.next();\r\n                if (token === '*' && !stream.eos() && !stream.peekWhitespace() && stream.peek() === '/') {\r\n                    stream.next();\r\n                    return { type: 'comment.php', nextState: this.parent };\r\n                }\r\n            }\r\n            return { type: 'comment.php' };\r\n        };\r\n        return PHPDocComment;\r\n    }(PHPState));\r\n    exports.PHPDocComment = PHPDocComment;\r\n    var PHPStatement = (function (_super) {\r\n        __extends(PHPStatement, _super);\r\n        function PHPStatement(mode, parent) {\r\n            _super.call(this, mode, 'expression', parent);\r\n        }\r\n        PHPStatement.prototype.makeClone = function () {\r\n            return new PHPStatement(this.getMode(), abstractState_1.AbstractState.safeClone(this.parent));\r\n        };\r\n        PHPStatement.prototype.equals = function (other) {\r\n            if (other instanceof PHPStatement) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        PHPStatement.prototype.stateTokenize = function (stream) {\r\n            if (abstractMode_1.isDigit(stream.peek(), 10)) {\r\n                return { nextState: new PHPNumber(this.getMode(), this, stream.next()) };\r\n            }\r\n            if (stream.advanceIfString('?>').length) {\r\n                return { type: 'metatag.php', nextState: this.parent };\r\n            }\r\n            var token = stream.nextToken();\r\n            if (isKeyword(token.toString().toLowerCase())) {\r\n                return { type: 'keyword.php' };\r\n            }\r\n            else if (isCompileTimeConstant(token)) {\r\n                return { type: 'constant.php' };\r\n            }\r\n            else if (isPreDefinedVariable(token)) {\r\n                return { type: 'variable.predefined.php' };\r\n            }\r\n            else if (isVariable(token)) {\r\n                return { type: 'variable.php' };\r\n            }\r\n            else if (token === '/') {\r\n                if (!stream.eos() && !stream.peekWhitespace()) {\r\n                    switch (stream.peekToken()) {\r\n                        case '/':\r\n                            return { nextState: new PHPLineComment(this.getMode(), this) };\r\n                        case '*':\r\n                            stream.nextToken();\r\n                            return { nextState: new PHPDocComment(this.getMode(), this) };\r\n                    }\r\n                }\r\n            }\r\n            else if (token === '#') {\r\n                return { nextState: new PHPLineComment(this.getMode(), this) };\r\n            }\r\n            else if (token === '\"' || token === '\\'') {\r\n                return { nextState: new PHPString(this.getMode(), this, token) };\r\n            }\r\n            else if (brackets.stringIsBracket(token)) {\r\n                return {\r\n                    type: brackets.tokenTypeFromString(token)\r\n                };\r\n            }\r\n            else if (isDelimiter(token)) {\r\n                return { type: 'delimiter.php' };\r\n            }\r\n            return { type: '' };\r\n        };\r\n        return PHPStatement;\r\n    }(PHPState));\r\n    exports.PHPStatement = PHPStatement;\r\n    var PHPPlain = (function (_super) {\r\n        __extends(PHPPlain, _super);\r\n        function PHPPlain(mode, parent) {\r\n            _super.call(this, mode, 'plain', parent);\r\n        }\r\n        PHPPlain.prototype.makeClone = function () {\r\n            return new PHPPlain(this.getMode(), abstractState_1.AbstractState.safeClone(this.parent));\r\n        };\r\n        PHPPlain.prototype.equals = function (other) {\r\n            if (other instanceof PHPPlain) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        PHPPlain.prototype.stateTokenize = function (stream) {\r\n            if (stream.advanceIfStringCaseInsensitive('<?php').length ||\r\n                stream.advanceIfString('<?=').length || stream.advanceIfString('<%=').length ||\r\n                stream.advanceIfString('<?').length || stream.advanceIfString('<%').length) {\r\n                return {\r\n                    type: 'metatag.php',\r\n                    nextState: new PHPStatement(this.getMode(), new PHPEnterHTMLState(this.getMode(), this.parent))\r\n                };\r\n            }\r\n            stream.next();\r\n            return { type: '' };\r\n        };\r\n        return PHPPlain;\r\n    }(PHPState));\r\n    exports.PHPPlain = PHPPlain;\r\n    var PHPEnterHTMLState = (function (_super) {\r\n        __extends(PHPEnterHTMLState, _super);\r\n        function PHPEnterHTMLState(mode, parent) {\r\n            _super.call(this, mode, 'enterHTML', parent);\r\n        }\r\n        PHPEnterHTMLState.prototype.makeClone = function () {\r\n            return new PHPEnterHTMLState(this.getMode(), abstractState_1.AbstractState.safeClone(this.parent));\r\n        };\r\n        PHPEnterHTMLState.prototype.equals = function (other) {\r\n            if (other instanceof PHPEnterHTMLState) {\r\n                return (_super.prototype.equals.call(this, other));\r\n            }\r\n            return false;\r\n        };\r\n        return PHPEnterHTMLState;\r\n    }(PHPState));\r\n    exports.PHPEnterHTMLState = PHPEnterHTMLState;\r\n    var PHPMode = (function (_super) {\r\n        __extends(PHPMode, _super);\r\n        function PHPMode(descriptor, modeService, configurationService, editorWorkerService) {\r\n            _super.call(this, descriptor.id);\r\n            this.modeService = modeService;\r\n            this.tokenizationSupport = new tokenizationSupport_1.TokenizationSupport(this, this, true, false);\r\n            this.richEditSupport = new richEditSupport_1.RichEditSupport(this.getId(), null, {\r\n                wordPattern: abstractMode_1.createWordRegExp('$_'),\r\n                comments: {\r\n                    lineComment: '//',\r\n                    blockComment: ['/*', '*/']\r\n                },\r\n                brackets: [\r\n                    ['{', '}'],\r\n                    ['[', ']'],\r\n                    ['(', ')']\r\n                ],\r\n                autoClosingPairs: [\r\n                    { open: '{', close: '}', notIn: ['string.php'] },\r\n                    { open: '[', close: ']', notIn: ['string.php'] },\r\n                    { open: '(', close: ')', notIn: ['string.php'] },\r\n                    { open: '\"', close: '\"', notIn: ['string.php'] },\r\n                    { open: '\\'', close: '\\'', notIn: ['string.php'] }\r\n                ]\r\n            });\r\n            if (editorWorkerService) {\r\n                Modes.SuggestRegistry.register(this.getId(), new suggestSupport_1.TextualSuggestSupport(editorWorkerService, configurationService), true);\r\n            }\r\n        }\r\n        PHPMode.prototype.asyncCtor = function () {\r\n            return this.modeService.getOrCreateMode('text/html');\r\n        };\r\n        PHPMode.prototype.getInitialState = function () {\r\n            // Because AbstractMode doesn't allow the initial state to immediately enter a nested\r\n            // mode, we will enter a nested mode ourselves\r\n            var htmlMode = this.modeService.getMode('text/html');\r\n            var htmlState = htmlMode.tokenizationSupport.getInitialState();\r\n            htmlState.setStateData(new PHPEnterHTMLState(this, null));\r\n            return htmlState;\r\n        };\r\n        PHPMode.prototype.enterNestedMode = function (state) {\r\n            return state instanceof PHPEnterHTMLState;\r\n        };\r\n        PHPMode.prototype.getNestedModeInitialState = function (myState) {\r\n            // Recall previous HTML state, that was saved in .parent, and carried over by the PHP states\r\n            // Also, prevent a .clone() endless loop by clearing the .parent pointer\r\n            // (the result will have its stateData point to myState)\r\n            var result = myState.parent;\r\n            myState.parent = null;\r\n            return {\r\n                state: result,\r\n                missingModePromise: null\r\n            };\r\n        };\r\n        PHPMode.prototype.getLeavingNestedModeData = function (line, state) {\r\n            // Leave HTML if <? is found on a line\r\n            var match = /<\\?/i.exec(line);\r\n            if (match !== null) {\r\n                return {\r\n                    nestedModeBuffer: line.substring(0, match.index),\r\n                    bufferAfterNestedMode: line.substring(match.index),\r\n                    stateAfterNestedMode: new PHPPlain(this, null)\r\n                };\r\n            }\r\n            return null;\r\n        };\r\n        PHPMode.prototype.onReturningFromNestedMode = function (myStateAfterNestedMode, lastNestedModeState) {\r\n            // Record in .parent the last HTML state before we entered into PHP\r\n            // The PHP states will take care of passing .parent along\r\n            // such that when we enter HTML again, we can recover the HTML state from .parent\r\n            myStateAfterNestedMode.parent = lastNestedModeState;\r\n        };\r\n        PHPMode = __decorate([\r\n            __param(1, modeService_1.IModeService),\r\n            __param(2, configuration_1.IConfigurationService),\r\n            __param(3, editorWorkerService_1.IEditorWorkerService)\r\n        ], PHPMode);\r\n        return PHPMode;\r\n    }(abstractMode_1.AbstractMode));\r\n    exports.PHPMode = PHPMode;\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport WinJS = require('vs/base/common/winjs.base');\nimport objects = require('vs/base/common/objects');\nimport Modes = require('vs/editor/common/modes');\nimport {AbstractMode, isDigit, createWordRegExp} from 'vs/editor/common/modes/abstractMode';\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {TokenizationSupport, ILeavingNestedModeData, ITokenizationCustomization} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {TextualSuggestSupport} from 'vs/editor/common/modes/supports/suggestSupport';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\n\n\nvar brackets = (function() {\n\n\tlet bracketsSource = [\n\t\t{ tokenType:'delimiter.bracket.php', open: '{', close: '}' },\n\t\t{ tokenType:'delimiter.array.php', open: '[', close: ']' },\n\t\t{ tokenType:'delimiter.parenthesis.php', open: '(', close: ')' }\n\t];\n\n\tlet MAP: {\n\t\t[text:string]:{\n\t\t\ttokenType: string;\n\t\t}\n\t} = Object.create(null);\n\n\tfor (let i = 0; i < bracketsSource.length; i++) {\n\t\tlet bracket = bracketsSource[i];\n\t\tMAP[bracket.open] = {\n\t\t\ttokenType: bracket.tokenType\n\t\t};\n\t\tMAP[bracket.close] = {\n\t\t\ttokenType: bracket.tokenType\n\t\t};\n\t}\n\n\treturn {\n\t\tstringIsBracket: (text:string): boolean => {\n\t\t\treturn !!MAP[text];\n\t\t},\n\t\ttokenTypeFromString: (text:string): string => {\n\t\t\treturn MAP[text].tokenType;\n\t\t}\n\t};\n})();\n\nvar delimiters = '+-*%&|^~!=<>(){}[]/?;:.,@';\nvar separators = '+-*/%&|^~!=<>(){}[]\"\\'\\\\/?;:.,#';\n\nvar whitespace = '\\t ';\n\nvar isKeyword = objects.createKeywordMatcher([\n\t'abstract', 'and', 'array', 'as', 'break',\n\t'callable', 'case', 'catch', 'cfunction', 'class', 'clone',\n\t'const', 'continue', 'declare', 'default', 'do',\n\t'else', 'elseif', 'enddeclare', 'endfor', 'endforeach',\n\t'endif', 'endswitch', 'endwhile', 'extends', 'false', 'final',\n\t'for', 'foreach', 'function', 'global', 'goto',\n\t'if', 'implements', 'interface', 'instanceof', 'insteadof',\n\t'namespace', 'new', 'null', 'object', 'old_function', 'or', 'private',\n\t'protected', 'public', 'resource', 'static', 'switch', 'throw', 'trait',\n\t'try', 'true', 'use', 'var', 'while', 'xor',\n\t'die', 'echo', 'empty', 'exit', 'eval',\n\t'include', 'include_once', 'isset', 'list', 'require',\n\t'require_once', 'return', 'print', 'unset', 'yield',\n\t'__construct'\n]);\n\nvar isCompileTimeConstant = objects.createKeywordMatcher([\n\t'__CLASS__',\n\t'__DIR__',\n\t'__FILE__',\n\t'__LINE__',\n\t'__NAMESPACE__',\n\t'__METHOD__',\n\t'__FUNCTION__',\n\t'__TRAIT__'\n]);\n\nvar isPreDefinedVariable =  objects.createKeywordMatcher([\n\t'$GLOBALS',\n\t'$_SERVER',\n\t'$_GET',\n\t'$_POST',\n\t'$_FILES',\n\t'$_REQUEST',\n\t'$_SESSION',\n\t'$_ENV',\n\t'$_COOKIE',\n\t'$php_errormsg',\n\t'$HTTP_RAW_POST_DATA',\n\t'$http_response_header',\n\t'$argc',\n\t'$argv'\n]);\n\nvar isDelimiter = (character:string) => {\n\treturn delimiters.indexOf(character) > -1;\n};\n\nvar isVariable = (character:string) => {\n\treturn (character[0] === '$');\n};\n\nexport class PHPState extends AbstractState {\n\n\tprivate name:string;\n\tprivate whitespaceTokenType:string;\n\tpublic parent:Modes.IState;\n\n\tconstructor(mode:Modes.IMode, name:string, parent:Modes.IState, whitespaceTokenType:string='') {\n\t\tsuper(mode);\n\t\tthis.name = name;\n\t\tthis.parent = parent;\n\t\tthis.whitespaceTokenType = whitespaceTokenType;\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other) &&\n\t\t\t\tthis.name === other.name &&\n\t\t\t\tthis.whitespaceTokenType === other.whitespaceTokenType &&\n\t\t\t\tAbstractState.safeEquals(this.parent, other.parent)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tstream.setTokenRules(separators, whitespace);\n\t\tif (stream.skipWhitespace().length > 0) {\n\t\t\treturn { type: this.whitespaceTokenType };\n\t\t}\n\t\treturn this.stateTokenize(stream);\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tthrow new Error('To be implemented');\n\t}\n\n}\n\nexport class PHPString extends PHPState {\n\n\tprivate delimiter:string;\n\tprivate isAtBeginning:boolean;\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState, delimiter:string, isAtBeginning:boolean=true) {\n\t\tsuper(mode, 'string', parent, 'string.php');\n\t\tthis.delimiter = delimiter;\n\t\tthis.isAtBeginning = isAtBeginning;\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\treturn new PHPString(this.getMode(), AbstractState.safeClone(this.parent), this.delimiter, this.isAtBeginning);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPString) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other) &&\n\t\t\t\tthis.delimiter === other.delimiter &&\n\t\t\t\tthis.isAtBeginning === other.isAtBeginning\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar readChars = this.isAtBeginning ? 1 : 0;\n\t\tthis.isAtBeginning = false;\n\t\twhile (!stream.eos()) {\n\t\t\tvar c = stream.next();\n\t\t\tif (c === '\\\\') {\n\t\t\t\tif (readChars === 0) {\n\t\t\t\t\tif (stream.eos()) {\n\t\t\t\t\t\treturn { type: 'string.php', nextState: this.parent  };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstream.goBack(1);\n\t\t\t\t\treturn { type: 'string.php' };\n\t\t\t\t}\n\n\t\t\t} else if (c === this.delimiter) {\n\t\t\t\treturn { type: 'string.php' , nextState: this.parent };\n\t\t\t}\n\t\t\treadChars += 1;\n\t\t}\n\t\treturn { type: 'string.php' };\n\t}\n}\n\nexport class PHPNumber extends PHPState {\n\n\tprivate firstDigit:string;\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState, firstDigit:string) {\n\t\tsuper(mode, 'number', parent);\n\t\tthis.firstDigit = firstDigit;\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\treturn new PHPNumber(this.getMode(), AbstractState.safeClone(this.parent), this.firstDigit);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPNumber) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other) &&\n\t\t\t\tthis.firstDigit === other.firstDigit\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar character = this.firstDigit;\n\t\tvar base = 10, isDecimal = false, isExponent = false;\n\t\tif (character === '0' && !stream.eos()) {\n\t\t\tcharacter = stream.peek();\n\t\t\tif (character.toLowerCase() === 'x') { base = 16; }\n\t\t\telse if (character.toLowerCase() === 'b') { base = 2; }\n\t\t\telse if (character === '.') { base = 10; }\n\t\t\telse if (isDigit(character, 8)) { base = 8; }\n\t\t\telse {\n\t\t\t\treturn { type: 'number.php', nextState: this.parent };\n\t\t\t}\n\t\t\tstream.next();\n\t\t}\n\t\twhile (!stream.eos()) {\n\t\t\tcharacter = stream.peek();\n\t\t\tif (isDigit(character,base)) {\n\t\t\t\tstream.next();\n\t\t\t} else if (base === 10) {\n\t\t\t\tif (character === '.' && !isExponent && !isDecimal) {\n\t\t\t\t\tisDecimal = true;\n\t\t\t\t\tstream.next();\n\t\t\t\t} else if (character === 'e' && !isExponent) {\n\t\t\t\t\tisExponent = true;\n\t\t\t\t\tstream.next();\n\t\t\t\t\tif (!stream.eos() && stream.peek() === '-') {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (base === 8 && isDigit(character,10)) {\n\t\t\t\tbase = 10;\n\t\t\t\tstream.next();\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar tokenType = 'number';\n\t\tif (base === 16) {\n\t\t\ttokenType += '.hex';\n\t\t} else if (base === 8) {\n\t\t\ttokenType += '.octal';\n\t\t} else if (base === 2) {\n\t\t\ttokenType += '.binary';\n\t\t}\n\t\treturn { type: tokenType + '.php', nextState: this.parent };\n\t}\n}\n\nexport class PHPLineComment extends PHPState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'comment', parent, 'comment.php');\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\treturn new PHPDocComment(this.getMode(), AbstractState.safeClone(this.parent));\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPLineComment) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.next();\n\t\t\tif (token === '?' && !stream.eos() && stream.peek() === '>') {\n\t\t\t\tstream.goBack(1);\n\t\t\t\treturn { type: 'comment.php', nextState: this.parent};\n\t\t\t}\n\t\t}\n\t\treturn { type: 'comment.php', nextState: this.parent };\n\t}\n}\n\nexport class PHPDocComment extends PHPState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'comment', parent, 'comment.php');\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\treturn new PHPDocComment(this.getMode(), AbstractState.safeClone(this.parent));\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPDocComment) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.next();\n\t\t\tif (token === '*' && !stream.eos() && !stream.peekWhitespace() && stream.peek() === '/') {\n\t\t\t\tstream.next();\n\t\t\t\treturn { type: 'comment.php', nextState: this.parent};\n\t\t\t}\n\t\t}\n\t\treturn { type: 'comment.php' };\n\t}\n}\n\nexport class PHPStatement extends PHPState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'expression', parent);\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\treturn new PHPStatement(this.getMode(), AbstractState.safeClone(this.parent));\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPStatement) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tif (isDigit(stream.peek(), 10)) {\n\t\t\treturn { nextState: new PHPNumber(this.getMode(), this, stream.next()) };\n\t\t}\n\t\tif (stream.advanceIfString('?>').length) {\n\t\t\treturn { type: 'metatag.php', nextState: this.parent };\n\t\t}\n\n\t\tvar token = stream.nextToken();\n\t\tif (isKeyword(token.toString().toLowerCase())) {\n\t\t\treturn { type: 'keyword.php' };\n\t\t} else if (isCompileTimeConstant(token)) {\n\t\t\treturn { type: 'constant.php' };\n\t\t} else if (isPreDefinedVariable(token)) {\n\t\t\treturn { type: 'variable.predefined.php' };\n\t\t} else if (isVariable(token)) {\n\t\t\treturn { type: 'variable.php' };\n\t\t} else if (token === '/') {\n\t\t\tif (!stream.eos() && !stream.peekWhitespace()) {\n\t\t\t\tswitch(stream.peekToken()) {\n\t\t\t\t\tcase '/':\n\t\t\t\t\t\treturn { nextState: new PHPLineComment(this.getMode(), this) };\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tstream.nextToken();\n\t\t\t\t\t\treturn { nextState: new PHPDocComment(this.getMode(), this) };\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (token === '#') {\n\t\t\treturn { nextState: new PHPLineComment(this.getMode(), this) };\n\t\t} else if (token === '\"' || token === '\\'') {\n\t\t\treturn { nextState: new PHPString(this.getMode(), this, token) };\n\t\t} else if (brackets.stringIsBracket(token)) {\n\t\t\treturn {\n\t\t\t\ttype: brackets.tokenTypeFromString(token)\n\t\t\t};\n\t\t} else if (isDelimiter(token)) {\n\t\t\treturn { type: 'delimiter.php' };\n\t\t}\n\t\treturn { type: '' };\n\t}\n}\n\nexport class PHPPlain extends PHPState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'plain', parent);\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\treturn new PHPPlain(this.getMode(), AbstractState.safeClone(this.parent));\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPPlain) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tif (stream.advanceIfStringCaseInsensitive('<?php').length ||\n\t\tstream.advanceIfString('<?=').length || stream.advanceIfString('<%=').length ||\n\t\tstream.advanceIfString('<?').length || stream.advanceIfString('<%').length) {\n\t\t\treturn {\n\t\t\t\ttype: 'metatag.php',\n\t\t\t\tnextState: new PHPStatement(this.getMode(), new PHPEnterHTMLState(this.getMode(), this.parent))\n\t\t\t};\n\t\t}\n\t\tstream.next();\n\t\treturn { type: '' };\n\t}\n}\n\nexport class PHPEnterHTMLState extends PHPState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'enterHTML', parent);\n\t}\n\n\tpublic makeClone():AbstractState {\n\t\treturn new PHPEnterHTMLState(this.getMode(), AbstractState.safeClone(this.parent));\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof PHPEnterHTMLState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nexport class PHPMode extends AbstractMode implements ITokenizationCustomization {\n\n\tpublic tokenizationSupport: Modes.ITokenizationSupport;\n\tpublic richEditSupport: Modes.IRichEditSupport;\n\n\tprivate modeService:IModeService;\n\n\tconstructor(\n\t\tdescriptor:Modes.IModeDescriptor,\n\t\t@IModeService modeService: IModeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService\n\t) {\n\t\tsuper(descriptor.id);\n\t\tthis.modeService = modeService;\n\n\t\tthis.tokenizationSupport = new TokenizationSupport(this, this, true, false);\n\n\t\tthis.richEditSupport = new RichEditSupport(this.getId(), null, {\n\t\t\twordPattern: createWordRegExp('$_'),\n\n\t\t\tcomments: {\n\t\t\t\tlineComment: '//',\n\t\t\t\tblockComment: ['/*', '*/']\n\t\t\t},\n\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['(', ')']\n\t\t\t],\n\n\t\t\tautoClosingPairs: [\n\t\t\t\t{ open: '{', close: '}', notIn: ['string.php'] },\n\t\t\t\t{ open: '[', close: ']', notIn: ['string.php'] },\n\t\t\t\t{ open: '(', close: ')', notIn: ['string.php'] },\n\t\t\t\t{ open: '\"', close: '\"', notIn: ['string.php'] },\n\t\t\t\t{ open: '\\'', close: '\\'', notIn: ['string.php'] }\n\t\t\t]\n\t\t});\n\n\t\tif (editorWorkerService) {\n\t\t\tModes.SuggestRegistry.register(this.getId(), new TextualSuggestSupport(editorWorkerService, configurationService), true);\n\t\t}\n\t}\n\n\tpublic asyncCtor(): WinJS.Promise {\n\t\treturn this.modeService.getOrCreateMode('text/html');\n\t}\n\n\tpublic getInitialState():Modes.IState {\n\t\t// Because AbstractMode doesn't allow the initial state to immediately enter a nested\n\t\t// mode, we will enter a nested mode ourselves\n\t\tvar htmlMode = this.modeService.getMode('text/html');\n\t\tvar htmlState:Modes.IState = htmlMode.tokenizationSupport.getInitialState();\n\t\thtmlState.setStateData(new PHPEnterHTMLState(this, null));\n\t\treturn htmlState;\n\t}\n\n\tpublic enterNestedMode(state:Modes.IState):boolean {\n\t\treturn state instanceof PHPEnterHTMLState;\n\t}\n\n\tpublic getNestedModeInitialState(myState:Modes.IState): { state:Modes.IState; missingModePromise:WinJS.Promise; } {\n\t\t// Recall previous HTML state, that was saved in .parent, and carried over by the PHP states\n\t\t// Also, prevent a .clone() endless loop by clearing the .parent pointer\n\t\t// (the result will have its stateData point to myState)\n\t\tvar result = (<PHPState>myState).parent;\n\t\t(<PHPState>myState).parent = null;\n\t\treturn {\n\t\t\tstate: result,\n\t\t\tmissingModePromise: null\n\t\t};\n\t}\n\n\tpublic getLeavingNestedModeData(line:string, state:Modes.IState):ILeavingNestedModeData {\n\t\t// Leave HTML if <? is found on a line\n\t\tvar match:any = /<\\?/i.exec(line);\n\t\tif (match !== null) {\n\t\t\treturn {\n\t\t\t\tnestedModeBuffer: line.substring(0, match.index),\n\t\t\t\tbufferAfterNestedMode: line.substring(match.index),\n\t\t\t\tstateAfterNestedMode: new PHPPlain(this, null)\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic onReturningFromNestedMode(myStateAfterNestedMode:Modes.IState, lastNestedModeState:Modes.IState): void {\n\t\t// Record in .parent the last HTML state before we entered into PHP\n\t\t// The PHP states will take care of passing .parent along\n\t\t// such that when we enter HTML again, we can recover the HTML state from .parent\n\t\t(<PHPPlain>myStateAfterNestedMode).parent = lastNestedModeState;\n\t}\n}\n"]}