{"version":3,"sources":["vs/languages/less/common/lessWorker.js","vs/languages/less/common/file:/C:/Alex/src/vscode/src/vs/languages/less/common/parser/lessScanner.ts","vs/languages/less/common/file:/C:/Alex/src/vscode/src/vs/languages/less/common/parser/lessParser.ts","vs/languages/less/common/fake","vs/languages/less/common/file:/C:/Alex/src/vscode/src/vs/languages/less/common/services/intelliSense.ts","vs/languages/less/common/file:/C:/Alex/src/vscode/src/vs/languages/less/common/lessWorker.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","scanner","_FSL","charCodeAt","_NWL","_CAR","_LFD","_TIC","_DOT","customTokenValue","TokenType","CustomToken","Ellipsis","LessScanner","_super","apply","arguments","scan","triviaToken","trivia","offset","stream","pos","tokenType","escapedJavaScript","finishToken","advanceIfChars","call","comment","advanceWhileChar","ch","peekChar","advance","advanceIfChar","EscapedJavaScript","BadEscapedJavaScript","Scanner","lessScanner","cssParser","nodes","errors","LessParser","_parseStylesheetStatement","_tryParseMixinDeclaration","_parseVariableDeclaration","_parseImport","node","Import","accept","AtKeyword","ParenthesisL","Ident","finish","ParseError","IdentifierExpected","SemiColon","ParenthesisR","RightParenthesisExpected","URI","String","setMedialist","_parseMediaList","URIOrStringExpected","_parseMediaQuery","resyncStopToken","MediaQuery","addChild","_parseVariable","panic","VariableDeclaration","mark","setVariable","Colon","colonPosition","prevToken","setValue","_parseExpr","peek","semicolonPosition","token","VariableValueExpected","restoreAtMark","Variable","Delim","hasWhitespace","_parseTerm","term","Term","setExpression","_parseEscaped","createNode","NodeType","EscapedValue","TermExpected","_parseOperator","_parseGuardOperator","Operator","_parseRuleSetDeclaration","_parseKeyframe","_parseMedia","_tryParseRuleset","_parseMixinReference","_parseExtend","_parseSimpleSelectorBody","_parseSelectorCombinator","SelectorCombinator","_parseIdent","_parseSelectorIdent","_parseSelectorInterpolation","SelectorInterpolation","BadString","StringLiteralExpected","CurlyL","LeftCurlyExpected","CurlyR","RightCurlyExpected","MixinDeclaration","setIdentifier","_parseMixinDeclarationIdentifier","getParameters","_parseMixinParameter","Comma","setGuard","_parseGuard","_parseBody","bind","identifier","Identifier","consumeToken","referenceTypes","ReferenceType","Mixin","ExtendsReference","setSelector","_parseSimpleSelector","SelectorExpected","LeftParenthesisExpected","MixinReference","getArguments","_parseFunctionArgument","ExpressionExpected","Rule","_parsePrio","FunctionParameter","restNode","Node","DotExpected","varargsNode","setDefaultValue","LessGuard","isNegated","getConditions","_parseGuardCondition","ConditionExpected","GuardCondition","_parseFunctionIdentifier","Function","Parser","nls","data","cssIntellisense","LESSIntellisense","createFunctionProposals","proposals","result","forEach","push","label","name","typeLabel","example","documentationLabel","description","codeSnippet","type","getTermProposals","builtInProposals","getColorProposals","entry","colorProposals","localize","CSSIntellisense","cssWorker","lessParser","lessIntellisense","LessWorker","createIntellisense","createParser","CSSWorker"],"mappings":"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","file":"vs/languages/less/common/lessWorker.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/less/common/parser/lessScanner\", [\"require\", \"exports\", 'vs/languages/css/common/parser/cssScanner'], function (require, exports, scanner) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var _FSL = '/'.charCodeAt(0);\r\n    var _NWL = '\\n'.charCodeAt(0);\r\n    var _CAR = '\\r'.charCodeAt(0);\r\n    var _LFD = '\\f'.charCodeAt(0);\r\n    var _TIC = '`'.charCodeAt(0);\r\n    var _DOT = '.'.charCodeAt(0);\r\n    var customTokenValue = scanner.TokenType.CustomToken;\r\n    exports.Ellipsis = customTokenValue++;\r\n    var LessScanner = (function (_super) {\r\n        __extends(LessScanner, _super);\r\n        function LessScanner() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        LessScanner.prototype.scan = function () {\r\n            var triviaToken = this.trivia();\r\n            if (triviaToken !== null) {\r\n                return triviaToken;\r\n            }\r\n            var offset = this.stream.pos();\r\n            // LESS: escaped JavaScript code `let a = \"dddd\"`\r\n            var tokenType = this.escapedJavaScript();\r\n            if (tokenType !== null) {\r\n                return this.finishToken(offset, tokenType);\r\n            }\r\n            if (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {\r\n                return this.finishToken(offset, exports.Ellipsis);\r\n            }\r\n            return _super.prototype.scan.call(this);\r\n        };\r\n        LessScanner.prototype.comment = function () {\r\n            if (_super.prototype.comment.call(this)) {\r\n                return true;\r\n            }\r\n            if (this.stream.advanceIfChars([_FSL, _FSL])) {\r\n                this.stream.advanceWhileChar(function (ch) {\r\n                    switch (ch) {\r\n                        case _NWL:\r\n                        case _CAR:\r\n                        case _LFD:\r\n                            return false;\r\n                        default:\r\n                            return true;\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n        LessScanner.prototype.escapedJavaScript = function () {\r\n            var ch = this.stream.peekChar();\r\n            if (ch === _TIC) {\r\n                this.stream.advance(1);\r\n                this.stream.advanceWhileChar(function (ch) { return ch !== _TIC; });\r\n                return this.stream.advanceIfChar(_TIC) ? scanner.TokenType.EscapedJavaScript : scanner.TokenType.BadEscapedJavaScript;\r\n            }\r\n            return null;\r\n        };\r\n        return LessScanner;\r\n    }(scanner.Scanner));\r\n    exports.LessScanner = LessScanner;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/less/common/parser/lessParser\", [\"require\", \"exports\", './lessScanner', 'vs/languages/css/common/parser/cssScanner', 'vs/languages/css/common/parser/cssParser', 'vs/languages/css/common/parser/cssNodes', 'vs/languages/css/common/parser/cssErrors'], function (require, exports, lessScanner, scanner, cssParser, nodes, errors) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /// <summary>\r\n    /// A parser for LESS\r\n    /// http://lesscss.org/\r\n    /// </summary>\r\n    var LessParser = (function (_super) {\r\n        __extends(LessParser, _super);\r\n        function LessParser() {\r\n            _super.call(this, new lessScanner.LessScanner());\r\n        }\r\n        LessParser.prototype._parseStylesheetStatement = function () {\r\n            return this._tryParseMixinDeclaration() || _super.prototype._parseStylesheetStatement.call(this) || this._parseVariableDeclaration();\r\n        };\r\n        LessParser.prototype._parseImport = function () {\r\n            var node = this.create(nodes.Import);\r\n            if (!this.accept(scanner.TokenType.AtKeyword, '@import') && !this.accept(scanner.TokenType.AtKeyword, '@import-once') /* deprecated in less 1.4.1 */) {\r\n                return null;\r\n            }\r\n            // less 1.4.1: @import (css) \"lib\"\r\n            if (this.accept(scanner.TokenType.ParenthesisL)) {\r\n                if (!this.accept(scanner.TokenType.Ident)) {\r\n                    return this.finish(node, errors.ParseError.IdentifierExpected, [scanner.TokenType.SemiColon]);\r\n                }\r\n                if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                    return this.finish(node, errors.ParseError.RightParenthesisExpected, [scanner.TokenType.SemiColon]);\r\n                }\r\n            }\r\n            if (!this.accept(scanner.TokenType.URI) && !this.accept(scanner.TokenType.String)) {\r\n                return this.finish(node, errors.ParseError.URIOrStringExpected, [scanner.TokenType.SemiColon]);\r\n            }\r\n            node.setMedialist(this._parseMediaList());\r\n            return this.finish(node);\r\n        };\r\n        LessParser.prototype._parseMediaQuery = function (resyncStopToken) {\r\n            var node = _super.prototype._parseMediaQuery.call(this, resyncStopToken);\r\n            if (!node) {\r\n                var node = this.create(nodes.MediaQuery);\r\n                if (node.addChild(this._parseVariable())) {\r\n                    return this.finish(node);\r\n                }\r\n                return null;\r\n            }\r\n            return node;\r\n        };\r\n        LessParser.prototype._parseVariableDeclaration = function (panic) {\r\n            if (panic === void 0) { panic = []; }\r\n            var node = this.create(nodes.VariableDeclaration);\r\n            var mark = this.mark();\r\n            if (!node.setVariable(this._parseVariable())) {\r\n                return null;\r\n            }\r\n            if (this.accept(scanner.TokenType.Colon, ':')) {\r\n                node.colonPosition = this.prevToken.offset;\r\n                if (!node.setValue(this._parseExpr())) {\r\n                    return this.finish(node, errors.ParseError.VariableValueExpected, [], panic);\r\n                }\r\n            }\r\n            else {\r\n                this.restoreAtMark(mark);\r\n                return null; // at keyword, but no ':', not a variable declaration but some at keyword\r\n            }\r\n            if (this.peek(scanner.TokenType.SemiColon)) {\r\n                node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        LessParser.prototype._parseVariable = function () {\r\n            var node = this.create(nodes.Variable);\r\n            var mark = this.mark();\r\n            while (this.accept(scanner.TokenType.Delim, '@')) {\r\n                if (this.hasWhitespace()) {\r\n                    this.restoreAtMark(mark);\r\n                    return null;\r\n                }\r\n            }\r\n            if (!this.accept(scanner.TokenType.AtKeyword)) {\r\n                this.restoreAtMark(mark);\r\n                return null;\r\n            }\r\n            return node;\r\n        };\r\n        LessParser.prototype._parseTerm = function () {\r\n            var term = _super.prototype._parseTerm.call(this);\r\n            if (term) {\r\n                return term;\r\n            }\r\n            term = this.create(nodes.Term);\r\n            if (term.setExpression(this._parseVariable()) ||\r\n                term.setExpression(this._parseEscaped())) {\r\n                return this.finish(term);\r\n            }\r\n            return null;\r\n        };\r\n        LessParser.prototype._parseEscaped = function () {\r\n            var node = this.createNode(nodes.NodeType.EscapedValue);\r\n            if (this.accept(scanner.TokenType.EscapedJavaScript) ||\r\n                this.accept(scanner.TokenType.BadEscapedJavaScript)) {\r\n                return this.finish(node);\r\n            }\r\n            if (this.accept(scanner.TokenType.Delim, '~')) {\r\n                return this.finish(node, this.accept(scanner.TokenType.String) ? null : errors.ParseError.TermExpected);\r\n            }\r\n            return null;\r\n        };\r\n        LessParser.prototype._parseOperator = function () {\r\n            var node = this._parseGuardOperator();\r\n            if (node) {\r\n                return node;\r\n            }\r\n            else {\r\n                return _super.prototype._parseOperator.call(this);\r\n            }\r\n        };\r\n        LessParser.prototype._parseGuardOperator = function () {\r\n            var node = this.createNode(nodes.NodeType.Operator);\r\n            if (this.accept(scanner.TokenType.Delim, '>')) {\r\n                this.accept(scanner.TokenType.Delim, '=');\r\n                return node;\r\n            }\r\n            else if (this.accept(scanner.TokenType.Delim, '=')) {\r\n                this.accept(scanner.TokenType.Delim, '<');\r\n                return node;\r\n            }\r\n            else if (this.accept(scanner.TokenType.Delim, '<')) {\r\n                return node;\r\n            }\r\n            return null;\r\n        };\r\n        LessParser.prototype._parseRuleSetDeclaration = function () {\r\n            if (this.peek(scanner.TokenType.AtKeyword)) {\r\n                return this._parseKeyframe()\r\n                    || this._parseMedia()\r\n                    || this._parseVariableDeclaration(); // Variable declarations\r\n            }\r\n            return this._tryParseMixinDeclaration()\r\n                || this._tryParseRuleset(true) // nested ruleset\r\n                || this._parseMixinReference() // less mixin reference\r\n                || this._parseExtend() // less extend declaration\r\n                || _super.prototype._parseRuleSetDeclaration.call(this); // try css ruleset declaration as the last option\r\n        };\r\n        LessParser.prototype._parseSimpleSelectorBody = function () {\r\n            return this._parseSelectorCombinator() || _super.prototype._parseSimpleSelectorBody.call(this);\r\n        };\r\n        LessParser.prototype._parseSelectorCombinator = function () {\r\n            var node = this.createNode(nodes.NodeType.SelectorCombinator);\r\n            if (this.accept(scanner.TokenType.Delim, '&')) {\r\n                while (!this.hasWhitespace() && (this.accept(scanner.TokenType.Delim, '-') || node.addChild(this._parseIdent()) || this.accept(scanner.TokenType.Delim, '&'))) {\r\n                }\r\n                return this.finish(node);\r\n            }\r\n            return null;\r\n        };\r\n        LessParser.prototype._parseSelectorIdent = function () {\r\n            return this._parseIdent() || this._parseSelectorInterpolation();\r\n        };\r\n        LessParser.prototype._parseSelectorInterpolation = function () {\r\n            // Selector interpolation;  old: ~\"@{name}\", new: @{name}\r\n            var node = this.createNode(nodes.NodeType.SelectorInterpolation);\r\n            if (this.accept(scanner.TokenType.Delim, '~')) {\r\n                if (!this.hasWhitespace() && (this.accept(scanner.TokenType.String) || this.accept(scanner.TokenType.BadString))) {\r\n                    return this.finish(node);\r\n                }\r\n                return this.finish(node, errors.ParseError.StringLiteralExpected);\r\n            }\r\n            else if (this.accept(scanner.TokenType.Delim, '@')) {\r\n                if (this.hasWhitespace() || !this.accept(scanner.TokenType.CurlyL)) {\r\n                    return this.finish(node, errors.ParseError.LeftCurlyExpected);\r\n                }\r\n                if (!node.addChild(this._parseIdent())) {\r\n                    return this.finish(node, errors.ParseError.IdentifierExpected);\r\n                }\r\n                if (!this.accept(scanner.TokenType.CurlyR)) {\r\n                    return this.finish(node, errors.ParseError.RightCurlyExpected);\r\n                }\r\n                return this.finish(node);\r\n            }\r\n            return null;\r\n        };\r\n        LessParser.prototype._tryParseMixinDeclaration = function () {\r\n            if (!this.peek(scanner.TokenType.Delim, '.')) {\r\n                return null;\r\n            }\r\n            var mark = this.mark();\r\n            var node = this.create(nodes.MixinDeclaration);\r\n            if (!node.setIdentifier(this._parseMixinDeclarationIdentifier()) || !this.accept(scanner.TokenType.ParenthesisL)) {\r\n                this.restoreAtMark(mark);\r\n                return null;\r\n            }\r\n            if (node.getParameters().addChild(this._parseMixinParameter())) {\r\n                while (this.accept(scanner.TokenType.Comma) || this.accept(scanner.TokenType.SemiColon)) {\r\n                    if (!node.getParameters().addChild(this._parseMixinParameter())) {\r\n                        return this.finish(node, errors.ParseError.IdentifierExpected);\r\n                    }\r\n                }\r\n            }\r\n            if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                return this.finish(node, errors.ParseError.RightParenthesisExpected);\r\n            }\r\n            node.setGuard(this._parseGuard());\r\n            if (!this.peek(scanner.TokenType.CurlyL)) {\r\n                this.restoreAtMark(mark);\r\n                return null;\r\n            }\r\n            return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));\r\n        };\r\n        LessParser.prototype._parseMixinDeclarationIdentifier = function () {\r\n            var identifier = this.create(nodes.Identifier); // identifier should contain dot\r\n            this.consumeToken(); // .\r\n            if (this.hasWhitespace() || !this.accept(scanner.TokenType.Ident)) {\r\n                return null;\r\n            }\r\n            identifier.referenceTypes = [nodes.ReferenceType.Mixin];\r\n            return this.finish(identifier);\r\n        };\r\n        LessParser.prototype._parseExtend = function () {\r\n            if (!this.peek(scanner.TokenType.Delim, '&')) {\r\n                return null;\r\n            }\r\n            var mark = this.mark();\r\n            var node = this.create(nodes.ExtendsReference);\r\n            this.consumeToken(); // &\r\n            if (this.hasWhitespace() || !this.accept(scanner.TokenType.Colon) || !this.accept(scanner.TokenType.Ident, 'extend')) {\r\n                this.restoreAtMark(mark);\r\n                return null;\r\n            }\r\n            if (!this.accept(scanner.TokenType.ParenthesisL)) {\r\n                return this.finish(node, errors.ParseError.LeftParenthesisExpected);\r\n            }\r\n            if (!node.setSelector(this._parseSimpleSelector())) {\r\n                return this.finish(node, errors.ParseError.SelectorExpected);\r\n            }\r\n            if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                return this.finish(node, errors.ParseError.RightParenthesisExpected);\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        LessParser.prototype._parseMixinReference = function () {\r\n            if (!this.peek(scanner.TokenType.Delim, '.')) {\r\n                return null;\r\n            }\r\n            var node = this.create(nodes.MixinReference);\r\n            var identifier = this.create(nodes.Identifier);\r\n            this.consumeToken(); // dot, part of the identifier\r\n            if (this.hasWhitespace() || !this.accept(scanner.TokenType.Ident)) {\r\n                return this.finish(node, errors.ParseError.IdentifierExpected);\r\n            }\r\n            node.setIdentifier(this.finish(identifier));\r\n            if (!this.hasWhitespace() && this.accept(scanner.TokenType.ParenthesisL)) {\r\n                if (node.getArguments().addChild(this._parseFunctionArgument())) {\r\n                    while (this.accept(scanner.TokenType.Comma) || this.accept(scanner.TokenType.SemiColon)) {\r\n                        if (!node.getArguments().addChild(this._parseExpr())) {\r\n                            return this.finish(node, errors.ParseError.ExpressionExpected);\r\n                        }\r\n                    }\r\n                }\r\n                if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                    return this.finish(node, errors.ParseError.RightParenthesisExpected);\r\n                }\r\n                identifier.referenceTypes = [nodes.ReferenceType.Mixin];\r\n            }\r\n            else {\r\n                identifier.referenceTypes = [nodes.ReferenceType.Mixin, nodes.ReferenceType.Rule];\r\n            }\r\n            node.addChild(this._parsePrio());\r\n            return this.finish(node);\r\n        };\r\n        LessParser.prototype._parseMixinParameter = function () {\r\n            var node = this.create(nodes.FunctionParameter);\r\n            // special rest variable: @rest...\r\n            if (this.peek(scanner.TokenType.AtKeyword, '@rest')) {\r\n                var restNode = this.create(nodes.Node);\r\n                this.consumeToken();\r\n                if (!this.accept(lessScanner.Ellipsis)) {\r\n                    return this.finish(node, errors.ParseError.DotExpected, [], [scanner.TokenType.Comma, scanner.TokenType.ParenthesisR]);\r\n                }\r\n                node.setIdentifier(this.finish(restNode));\r\n                return this.finish(node);\r\n            }\r\n            // special var args: ...\r\n            if (this.peek(lessScanner.Ellipsis)) {\r\n                var varargsNode = this.create(nodes.Node);\r\n                this.consumeToken();\r\n                node.setIdentifier(this.finish(varargsNode));\r\n                return this.finish(node);\r\n            }\r\n            // default variable declaration: @param: 12 or @name\r\n            if (node.setIdentifier(this._parseVariable())) {\r\n                this.accept(scanner.TokenType.Colon);\r\n            }\r\n            node.setDefaultValue(this._parseExpr(true));\r\n            return this.finish(node);\r\n        };\r\n        LessParser.prototype._parseGuard = function () {\r\n            var node = this.create(nodes.LessGuard);\r\n            if (!this.accept(scanner.TokenType.Ident, 'when')) {\r\n                return null;\r\n            }\r\n            node.isNegated = this.accept(scanner.TokenType.Ident, 'not');\r\n            if (!node.getConditions().addChild(this._parseGuardCondition())) {\r\n                return this.finish(node, errors.ParseError.ConditionExpected);\r\n            }\r\n            while (this.accept(scanner.TokenType.Ident, 'and') || this.accept(scanner.TokenType.Comma, ',')) {\r\n                if (!node.getConditions().addChild(this._parseGuardCondition())) {\r\n                    return this.finish(node, errors.ParseError.ConditionExpected);\r\n                }\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        LessParser.prototype._parseGuardCondition = function () {\r\n            var node = this.create(nodes.GuardCondition);\r\n            if (!this.accept(scanner.TokenType.ParenthesisL)) {\r\n                return null;\r\n            }\r\n            if (!node.addChild(this._parseExpr())) {\r\n            }\r\n            if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                return this.finish(node, errors.ParseError.RightParenthesisExpected);\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        LessParser.prototype._parseFunctionIdentifier = function () {\r\n            if (this.peek(scanner.TokenType.Delim, '%')) {\r\n                var node = this.create(nodes.Identifier);\r\n                node.referenceTypes = [nodes.ReferenceType.Function];\r\n                this.consumeToken();\r\n                return this.finish(node);\r\n            }\r\n            return _super.prototype._parseFunctionIdentifier.call(this);\r\n        };\r\n        return LessParser;\r\n    }(cssParser.Parser));\r\n    exports.LessParser = LessParser;\r\n});\r\n\ndefine(\"vs/nls!vs/languages/less/common/services/intelliSense\",['vs/nls', 'vs/nls!vs/languages/less/common/lessWorker'], function(nls, data) { return nls.create(\"vs/languages/less/common/services/intelliSense\", data); });\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/less/common/services/intelliSense\", [\"require\", \"exports\", 'vs/languages/css/common/services/intelliSense', 'vs/nls!vs/languages/less/common/services/intelliSense'], function (require, exports, cssIntellisense, nls) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var LESSIntellisense = (function (_super) {\r\n        __extends(LESSIntellisense, _super);\r\n        function LESSIntellisense() {\r\n            _super.call(this, '@');\r\n        }\r\n        LESSIntellisense.prototype.createFunctionProposals = function (proposals, result) {\r\n            proposals.forEach(function (p) {\r\n                result.push({\r\n                    label: p.name,\r\n                    typeLabel: p.example,\r\n                    documentationLabel: p.description,\r\n                    codeSnippet: p.name + '({{}})',\r\n                    type: 'function'\r\n                });\r\n            });\r\n            return result;\r\n        };\r\n        LESSIntellisense.prototype.getTermProposals = function (result) {\r\n            this.createFunctionProposals(LESSIntellisense.builtInProposals, result);\r\n            return _super.prototype.getTermProposals.call(this, result);\r\n        };\r\n        LESSIntellisense.prototype.getColorProposals = function (entry, result) {\r\n            this.createFunctionProposals(LESSIntellisense.colorProposals, result);\r\n            return _super.prototype.getColorProposals.call(this, entry, result);\r\n        };\r\n        LESSIntellisense.builtInProposals = [\r\n            {\r\n                'name': 'escape',\r\n                'example': 'escape(@string);',\r\n                'description': nls.localize(0, null)\r\n            },\r\n            {\r\n                'name': 'e',\r\n                'example': 'e(@string);',\r\n                'description': nls.localize(1, null)\r\n            },\r\n            {\r\n                'name': 'replace',\r\n                'example': 'replace(@string, @pattern, @replacement[, @flags]);',\r\n                'description': nls.localize(2, null)\r\n            },\r\n            {\r\n                'name': 'unit',\r\n                'example': 'unit(@dimension, [@unit: \\'\\']);',\r\n                'description': nls.localize(3, null)\r\n            },\r\n            {\r\n                'name': 'color',\r\n                'example': 'color(@string);',\r\n                'description': nls.localize(4, null)\r\n            },\r\n            {\r\n                'name': 'convert',\r\n                'example': 'convert(@value, unit);',\r\n                'description': nls.localize(5, null)\r\n            },\r\n            {\r\n                'name': 'data-uri',\r\n                'example': 'data-uri([mimetype,] url);',\r\n                'description': nls.localize(6, null)\r\n            },\r\n            {\r\n                'name': 'length',\r\n                'example': 'length(@list);',\r\n                'description': nls.localize(7, null)\r\n            },\r\n            {\r\n                'name': 'extract',\r\n                'example': 'extract(@list, index);',\r\n                'description': nls.localize(8, null)\r\n            },\r\n            {\r\n                'name': 'abs',\r\n                'description': nls.localize(9, null),\r\n                'example': 'abs(number);'\r\n            },\r\n            {\r\n                'name': 'acos',\r\n                'description': nls.localize(10, null),\r\n                'example': 'acos(number);'\r\n            },\r\n            {\r\n                'name': 'asin',\r\n                'description': nls.localize(11, null),\r\n                'example': 'asin(number);'\r\n            },\r\n            {\r\n                'name': 'ceil',\r\n                'example': 'ceil(@number);',\r\n                'description': nls.localize(12, null)\r\n            },\r\n            {\r\n                'name': 'cos',\r\n                'description': nls.localize(13, null),\r\n                'example': 'cos(number);'\r\n            },\r\n            {\r\n                'name': 'floor',\r\n                'description': nls.localize(14, null),\r\n                'example': 'floor(@number);'\r\n            },\r\n            {\r\n                'name': 'percentage',\r\n                'description': nls.localize(15, null),\r\n                'example': 'percentage(@number);'\r\n            },\r\n            {\r\n                'name': 'round',\r\n                'description': nls.localize(16, null),\r\n                'example': 'round(number, [places: 0]);'\r\n            },\r\n            {\r\n                'name': 'sqrt',\r\n                'description': nls.localize(17, null),\r\n                'example': 'sqrt(number);'\r\n            },\r\n            {\r\n                'name': 'sin',\r\n                'description': nls.localize(18, null),\r\n                'example': 'sin(number);'\r\n            },\r\n            {\r\n                'name': 'tan',\r\n                'description': nls.localize(19, null),\r\n                'example': 'tan(number);'\r\n            },\r\n            {\r\n                'name': 'atan',\r\n                'description': nls.localize(20, null),\r\n                'example': 'atan(number);'\r\n            },\r\n            {\r\n                'name': 'pi',\r\n                'description': nls.localize(21, null),\r\n                'example': 'pi();'\r\n            },\r\n            {\r\n                'name': 'pow',\r\n                'description': nls.localize(22, null),\r\n                'example': 'pow(@base, @exponent);'\r\n            },\r\n            {\r\n                'name': 'mod',\r\n                'description': nls.localize(23, null),\r\n                'example': 'mod(number, number);'\r\n            },\r\n            {\r\n                'name': 'min',\r\n                'description': nls.localize(24, null),\r\n                'example': 'min(@x, @y);'\r\n            },\r\n            {\r\n                'name': 'max',\r\n                'description': nls.localize(25, null),\r\n                'example': 'max(@x, @y);'\r\n            }\r\n        ];\r\n        LESSIntellisense.colorProposals = [\r\n            {\r\n                'name': 'argb',\r\n                'example': 'argb(@color);',\r\n                'description': nls.localize(26, null)\r\n            },\r\n            {\r\n                'name': 'hsl',\r\n                'example': 'hsl(@hue, @saturation, @lightness);',\r\n                'description': nls.localize(27, null)\r\n            },\r\n            {\r\n                'name': 'hsla',\r\n                'example': 'hsla(@hue, @saturation, @lightness, @alpha);',\r\n                'description': nls.localize(28, null)\r\n            },\r\n            {\r\n                'name': 'hsv',\r\n                'example': 'hsv(@hue, @saturation, @value);',\r\n                'description': nls.localize(29, null)\r\n            },\r\n            {\r\n                'name': 'hsva',\r\n                'example': 'hsva(@hue, @saturation, @value, @alpha);',\r\n                'description': nls.localize(30, null)\r\n            },\r\n            {\r\n                'name': 'hue',\r\n                'example': 'hue(@color);',\r\n                'description': nls.localize(31, null)\r\n            },\r\n            {\r\n                'name': 'saturation',\r\n                'example': 'saturation(@color);',\r\n                'description': nls.localize(32, null)\r\n            },\r\n            {\r\n                'name': 'lightness',\r\n                'example': 'lightness(@color);',\r\n                'description': nls.localize(33, null)\r\n            },\r\n            {\r\n                'name': 'hsvhue',\r\n                'example': 'hsvhue(@color);',\r\n                'description': nls.localize(34, null)\r\n            },\r\n            {\r\n                'name': 'hsvsaturation',\r\n                'example': 'hsvsaturation(@color);',\r\n                'description': nls.localize(35, null)\r\n            },\r\n            {\r\n                'name': 'hsvvalue',\r\n                'example': 'hsvvalue(@color);',\r\n                'description': nls.localize(36, null)\r\n            },\r\n            {\r\n                'name': 'red',\r\n                'example': 'red(@color);',\r\n                'description': nls.localize(37, null)\r\n            },\r\n            {\r\n                'name': 'green',\r\n                'example': 'green(@color);',\r\n                'description': nls.localize(38, null)\r\n            },\r\n            {\r\n                'name': 'blue',\r\n                'example': 'blue(@color);',\r\n                'description': nls.localize(39, null)\r\n            },\r\n            {\r\n                'name': 'alpha',\r\n                'example': 'alpha(@color);',\r\n                'description': nls.localize(40, null)\r\n            },\r\n            {\r\n                'name': 'luma',\r\n                'example': 'luma(@color);',\r\n                'description': nls.localize(41, null)\r\n            },\r\n            {\r\n                'name': 'saturate',\r\n                'example': 'saturate(@color, 10%);',\r\n                'description': nls.localize(42, null)\r\n            },\r\n            {\r\n                'name': 'desaturate',\r\n                'example': 'desaturate(@color, 10%);',\r\n                'description': nls.localize(43, null)\r\n            },\r\n            {\r\n                'name': 'lighten',\r\n                'example': 'lighten(@color, 10%);',\r\n                'description': nls.localize(44, null)\r\n            },\r\n            {\r\n                'name': 'darken',\r\n                'example': 'darken(@color, 10%);',\r\n                'description': nls.localize(45, null)\r\n            },\r\n            {\r\n                'name': 'fadein',\r\n                'example': 'fadein(@color, 10%);',\r\n                'description': nls.localize(46, null)\r\n            },\r\n            {\r\n                'name': 'fadeout',\r\n                'example': 'fadeout(@color, 10%);',\r\n                'description': nls.localize(47, null)\r\n            },\r\n            {\r\n                'name': 'fade',\r\n                'example': 'fade(@color, 50%);',\r\n                'description': nls.localize(48, null)\r\n            },\r\n            {\r\n                'name': 'spin',\r\n                'example': 'spin(@color, 10);',\r\n                'description': nls.localize(49, null)\r\n            },\r\n            {\r\n                'name': 'mix',\r\n                'example': 'mix(@color1, @color2, [@weight: 50%]);',\r\n                'description': nls.localize(50, null)\r\n            },\r\n            {\r\n                'name': 'greyscale',\r\n                'example': 'greyscale(@color);',\r\n                'description': nls.localize(51, null)\r\n            },\r\n            {\r\n                'name': 'contrast',\r\n                'example': 'contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]);',\r\n                'description': nls.localize(52, null)\r\n            },\r\n            {\r\n                'name': 'multiply',\r\n                'example': 'multiply(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'screen',\r\n                'example': 'screen(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'overlay',\r\n                'example': 'overlay(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'softlight',\r\n                'example': 'softlight(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'hardlight',\r\n                'example': 'hardlight(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'difference',\r\n                'example': 'difference(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'exclusion',\r\n                'example': 'exclusion(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'average',\r\n                'example': 'average(@color1, @color2);'\r\n            },\r\n            {\r\n                'name': 'negation',\r\n                'example': 'negation(@color1, @color2);'\r\n            }\r\n        ];\r\n        return LESSIntellisense;\r\n    }(cssIntellisense.CSSIntellisense));\r\n    exports.LESSIntellisense = LESSIntellisense;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/less/common/lessWorker\", [\"require\", \"exports\", 'vs/languages/css/common/cssWorker', './parser/lessParser', './services/intelliSense'], function (require, exports, cssWorker, lessParser, lessIntellisense) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var LessWorker = (function (_super) {\r\n        __extends(LessWorker, _super);\r\n        function LessWorker() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        LessWorker.prototype.createIntellisense = function () {\r\n            return new lessIntellisense.LESSIntellisense();\r\n        };\r\n        LessWorker.prototype.createParser = function () {\r\n            return new lessParser.LessParser();\r\n        };\r\n        return LessWorker;\r\n    }(cssWorker.CSSWorker));\r\n    exports.LessWorker = LessWorker;\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport scanner = require('vs/languages/css/common/parser/cssScanner');\n\nconst _FSL = '/'.charCodeAt(0);\nconst _NWL = '\\n'.charCodeAt(0);\nconst _CAR = '\\r'.charCodeAt(0);\nconst _LFD = '\\f'.charCodeAt(0);\nconst _TIC = '`'.charCodeAt(0);\nconst _DOT = '.'.charCodeAt(0);\n\nlet customTokenValue = scanner.TokenType.CustomToken;\nexport const Ellipsis: scanner.TokenType = customTokenValue++;\n\nexport class LessScanner extends scanner.Scanner {\n\n\tpublic scan(): scanner.IToken {\n\n\t\tlet triviaToken = this.trivia();\n\t\tif (triviaToken !== null) {\n\t\t\treturn triviaToken;\n\t\t}\n\n\t\tlet offset = this.stream.pos();\n\n\t\t// LESS: escaped JavaScript code `let a = \"dddd\"`\n\t\tlet tokenType = this.escapedJavaScript();\n\t\tif (tokenType !== null) {\n\t\t\treturn this.finishToken(offset, tokenType);\n\t\t}\n\n\t\tif (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {\n\t\t\treturn this.finishToken(offset, Ellipsis);\n\t\t}\n\n\t\treturn super.scan();\n\t}\n\n\tprotected comment():boolean {\n\t\tif (super.comment()) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.stream.advanceIfChars([_FSL, _FSL])) {\n\t\t\tthis.stream.advanceWhileChar((ch:number) => {\n\t\t\t\tswitch(ch) {\n\t\t\t\t\tcase _NWL:\n\t\t\t\t\tcase _CAR:\n\t\t\t\t\tcase _LFD:\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate escapedJavaScript():scanner.TokenType {\n\t\tlet ch = this.stream.peekChar();\n\t\tif (ch === _TIC) {\n\t\t\tthis.stream.advance(1);\n\t\t\tthis.stream.advanceWhileChar((ch) => { return ch !== _TIC; });\n\t\t\treturn this.stream.advanceIfChar(_TIC) ? scanner.TokenType.EscapedJavaScript : scanner.TokenType.BadEscapedJavaScript;\n\t\t}\n\t\treturn null;\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport lessScanner = require ('./lessScanner');\nimport scanner = require('vs/languages/css/common/parser/cssScanner');\nimport cssParser = require('vs/languages/css/common/parser/cssParser');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport errors = require('vs/languages/css/common/parser/cssErrors');\n\n/// <summary>\n/// A parser for LESS\n/// http://lesscss.org/\n/// </summary>\nexport class LessParser extends cssParser.Parser {\n\n\tpublic constructor() {\n\t\tsuper(new lessScanner.LessScanner());\n\t}\n\n\tpublic _parseStylesheetStatement():nodes.Node {\n\t\treturn this._tryParseMixinDeclaration() || super._parseStylesheetStatement() || this._parseVariableDeclaration();\n\t}\n\n\tpublic _parseImport():nodes.Node {\n\t\tvar node = <nodes.Import> this.create(nodes.Import);\n\t\tif(!this.accept(scanner.TokenType.AtKeyword, '@import') && !this.accept(scanner.TokenType.AtKeyword, '@import-once') /* deprecated in less 1.4.1 */) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// less 1.4.1: @import (css) \"lib\"\n\t\tif (this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\tif (!this.accept(scanner.TokenType.Ident)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.IdentifierExpected, [ scanner.TokenType.SemiColon ] );\n\t\t\t}\n\t\t\tif (!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected, [ scanner.TokenType.SemiColon ]);\n\t\t\t}\n\t\t}\n\n\t\tif(!this.accept(scanner.TokenType.URI) && !this.accept(scanner.TokenType.String)) {\n\t\t\treturn this.finish(node, errors.ParseError.URIOrStringExpected, [ scanner.TokenType.SemiColon ]);\n\t\t}\n\n\t\tnode.setMedialist(this._parseMediaList());\n\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseMediaQuery(resyncStopToken: scanner.TokenType[]): nodes.Node {\n\t\tvar node = <nodes.MediaQuery> super._parseMediaQuery(resyncStopToken);\n\t\tif (!node) {\n\t\t\tvar node = <nodes.MediaQuery> this.create(nodes.MediaQuery);\n\t\t\tif (node.addChild(this._parseVariable())) {\n\t\t\t\treturn this.finish(node);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\treturn node;\n\t}\n\n\tpublic _parseVariableDeclaration(panic:scanner.TokenType[]=[]): nodes.VariableDeclaration {\n\t\tvar node = <nodes.VariableDeclaration> this.create(nodes.VariableDeclaration);\n\n\t\tvar mark= this.mark();\n\t\tif (!node.setVariable(this._parseVariable())) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this.accept(scanner.TokenType.Colon, ':')) {\n\t\t\tnode.colonPosition = this.prevToken.offset;\n\t\t\tif (!node.setValue(this._parseExpr())) {\n\t\t\t\treturn <nodes.VariableDeclaration> this.finish(node, errors.ParseError.VariableValueExpected, [], panic);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.restoreAtMark(mark);\n\t\t\treturn null; // at keyword, but no ':', not a variable declaration but some at keyword\n\t\t}\n\n\t\tif (this.peek(scanner.TokenType.SemiColon)) {\n\t\t\tnode.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist\n\t\t}\n\n\t\treturn <nodes.VariableDeclaration> this.finish(node);\n\t}\n\n\tpublic _parseVariable(): nodes.Variable {\n\t\tvar node = <nodes.Variable> this.create(nodes.Variable);\n\t\tvar mark= this.mark();\n\t\twhile (this.accept(scanner.TokenType.Delim, '@')) {\n\t\t\tif (this.hasWhitespace()) {\n\t\t\t\tthis.restoreAtMark(mark);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tif (!this.accept(scanner.TokenType.AtKeyword)) {\n\t\t\tthis.restoreAtMark(mark);\n\t\t\treturn null;\n\t\t}\n\t\treturn <nodes.Variable> node;\n\t}\n\n\tpublic _parseTerm(): nodes.Term {\n\t\tvar term = super._parseTerm();\n\t\tif (term) { return term; }\n\n\t\tterm = <nodes.Term> this.create(nodes.Term);\n\t\tif (term.setExpression(this._parseVariable()) ||\n\t\t\tterm.setExpression(this._parseEscaped())) {\n\n\t\t\treturn <nodes.Term> this.finish(term);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic _parseEscaped():nodes.Node {\n\t\tvar node = this.createNode(nodes.NodeType.EscapedValue);\n\t\tif(this.accept(scanner.TokenType.EscapedJavaScript) ||\n\t\t\tthis.accept(scanner.TokenType.BadEscapedJavaScript)) {\n\n\t\t\treturn this.finish(node);\n\t\t}\n\n\t\tif(this.accept(scanner.TokenType.Delim, '~')) {\n\t\t\treturn this.finish(node, this.accept(scanner.TokenType.String) ? null : errors.ParseError.TermExpected);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic _parseOperator(): nodes.Node {\n\t\tvar node = this._parseGuardOperator();\n\t\tif(node) {\n\t\t\treturn node;\n\t\t} else {\n\t\t\treturn super._parseOperator();\n\t\t}\n\t}\n\n\tpublic _parseGuardOperator(): nodes.Node {\n\t\tvar node = this.createNode(nodes.NodeType.Operator);\n\t\tif (this.accept(scanner.TokenType.Delim, '>')) {\n\t\t\tthis.accept(scanner.TokenType.Delim, '=');\n\t\t\treturn node;\n\t\t} else if (this.accept(scanner.TokenType.Delim,  '=')) {\n\t\t\tthis.accept(scanner.TokenType.Delim,  '<');\n\t\t\treturn node;\n\t\t} else if (this.accept(scanner.TokenType.Delim,  '<')) {\n\t\t\treturn node;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic _parseRuleSetDeclaration() : nodes.Node {\n\t\tif (this.peek(scanner.TokenType.AtKeyword)) {\n\t\t\treturn this._parseKeyframe()\n\t\t\t\t|| this._parseMedia()\n\t\t\t\t|| this._parseVariableDeclaration(); // Variable declarations\n\t\t}\n\t\treturn this._tryParseMixinDeclaration()\n\t\t\t|| this._tryParseRuleset(true)  // nested ruleset\n\t\t\t|| this._parseMixinReference() // less mixin reference\n\t\t\t|| this._parseExtend() // less extend declaration\n\t\t\t|| super._parseRuleSetDeclaration(); // try css ruleset declaration as the last option\n\t}\n\n\tpublic _parseSimpleSelectorBody(): nodes.Node {\n\t\treturn this._parseSelectorCombinator() || super._parseSimpleSelectorBody();\n\t}\n\n\tpublic _parseSelectorCombinator():nodes.Node {\n\t\tvar node = this.createNode(nodes.NodeType.SelectorCombinator);\n\t\tif (this.accept(scanner.TokenType.Delim, '&')) {\n\t\t\twhile (!this.hasWhitespace() && (this.accept(scanner.TokenType.Delim, '-') || node.addChild(this._parseIdent()) || this.accept(scanner.TokenType.Delim, '&'))) {\n\t\t\t\t//  support &-foo\n\t\t\t}\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic _parseSelectorIdent() : nodes.Node {\n\t\treturn this._parseIdent() || this._parseSelectorInterpolation();\n\t}\n\n\tpublic _parseSelectorInterpolation():nodes.Node {\n\t\t// Selector interpolation;  old: ~\"@{name}\", new: @{name}\n\t\tvar node = this.createNode(nodes.NodeType.SelectorInterpolation);\n\t\tif (this.accept(scanner.TokenType.Delim, '~')) {\n\t\t\tif (!this.hasWhitespace() && (this.accept(scanner.TokenType.String) || this.accept(scanner.TokenType.BadString))) {\n\t\t\t\treturn this.finish(node);\n\t\t\t}\n\t\t\treturn this.finish(node, errors.ParseError.StringLiteralExpected);\n\t\t} else if (this.accept(scanner.TokenType.Delim, '@')) {\n\t\t\tif (this.hasWhitespace() || !this.accept(scanner.TokenType.CurlyL)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.LeftCurlyExpected);\n\t\t\t}\n\t\t\tif (!node.addChild(this._parseIdent())) {\n\t\t\t\treturn this.finish(node, errors.ParseError.IdentifierExpected);\n\t\t\t}\n\t\t\tif (!this.accept(scanner.TokenType.CurlyR)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.RightCurlyExpected);\n\t\t\t}\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic _tryParseMixinDeclaration():nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.Delim, '.')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar mark = this.mark();\n\t\tvar node = <nodes.MixinDeclaration> this.create(nodes.MixinDeclaration);\n\n\t\tif (!node.setIdentifier(this._parseMixinDeclarationIdentifier()) || !this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\tthis.restoreAtMark(mark);\n\t\t\treturn null;\n\t\t}\n\n\t\tif (node.getParameters().addChild(this._parseMixinParameter())) {\n\t\t\twhile (this.accept(scanner.TokenType.Comma) || this.accept(scanner.TokenType.SemiColon)) {\n\t\t\t\tif (!node.getParameters().addChild(this._parseMixinParameter())) {\n\t\t\t\t\treturn this.finish(node, errors.ParseError.IdentifierExpected);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected);\n\t\t}\n\t\tnode.setGuard(this._parseGuard());\n\n\t\tif (!this.peek(scanner.TokenType.CurlyL)) {\n\t\t\tthis.restoreAtMark(mark);\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._parseBody(node, this._parseRuleSetDeclaration.bind(this));\n\t}\n\n\tpublic _parseMixinDeclarationIdentifier() : nodes.Identifier {\n\t\tvar identifier = <nodes.Identifier> this.create(nodes.Identifier); // identifier should contain dot\n\t\tthis.consumeToken(); // .\n\t\tif (this.hasWhitespace() || !this.accept(scanner.TokenType.Ident)) {\n\t\t\treturn null;\n\t\t}\n\t\tidentifier.referenceTypes = [ nodes.ReferenceType.Mixin ];\n\t\treturn this.finish(identifier);\n\t}\n\n\tpublic _parseExtend():nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.Delim, '&')) {\n\t\t\treturn null;\n\t\t}\n\t\tvar mark = this.mark();\n\n\t\tvar node = <nodes.ExtendsReference> this.create(nodes.ExtendsReference);\n\t\tthis.consumeToken(); // &\n\t\tif (this.hasWhitespace() || !this.accept(scanner.TokenType.Colon) || !this.accept(scanner.TokenType.Ident, 'extend')) {\n\t\t\tthis.restoreAtMark(mark);\n\t\t\treturn null;\n\t\t}\n\t\tif (!this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\treturn this.finish(node, errors.ParseError.LeftParenthesisExpected);\n\t\t}\n\t\tif (!node.setSelector(this._parseSimpleSelector())) {\n\t\t\treturn this.finish(node, errors.ParseError.SelectorExpected);\n\t\t}\n\t\tif (!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected);\n\t\t}\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseMixinReference():nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.Delim, '.')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = <nodes.MixinReference> this.create(nodes.MixinReference);\n\n\t\tvar identifier = <nodes.Identifier> this.create(nodes.Identifier);\n\t\tthis.consumeToken(); // dot, part of the identifier\n\t\tif (this.hasWhitespace() || !this.accept(scanner.TokenType.Ident)) {\n\t\t\treturn this.finish(node, errors.ParseError.IdentifierExpected);\n\t\t}\n\t\tnode.setIdentifier(this.finish(identifier));\n\n\t\tif (!this.hasWhitespace() && this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\tif (node.getArguments().addChild(this._parseFunctionArgument())) {\n\t\t\t\twhile (this.accept(scanner.TokenType.Comma) || this.accept(scanner.TokenType.SemiColon)) {\n\t\t\t\t\tif (!node.getArguments().addChild(this._parseExpr())) {\n\t\t\t\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected);\n\t\t\t}\n\t\t\tidentifier.referenceTypes = [ nodes.ReferenceType.Mixin ];\n\t\t} else {\n\t\t\tidentifier.referenceTypes = [ nodes.ReferenceType.Mixin, nodes.ReferenceType.Rule ];\n\t\t}\n\n\t\tnode.addChild(this._parsePrio());\n\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseMixinParameter():nodes.Node {\n\n\t\tvar node = <nodes.FunctionParameter> this.create(nodes.FunctionParameter);\n\n\t\t// special rest variable: @rest...\n\t\tif (this.peek(scanner.TokenType.AtKeyword, '@rest')) {\n\t\t\tvar restNode = this.create(nodes.Node);\n\t\t\tthis.consumeToken();\n\t\t\tif (!this.accept(lessScanner.Ellipsis)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.DotExpected, [], [scanner.TokenType.Comma, scanner.TokenType.ParenthesisR]);\n\t\t\t}\n\t\t\tnode.setIdentifier(this.finish(restNode));\n\t\t\treturn this.finish(node);\n\t\t}\n\n\t\t// special var args: ...\n\t\tif (this.peek(lessScanner.Ellipsis)) {\n\t\t\tvar varargsNode = this.create(nodes.Node);\n\t\t\tthis.consumeToken();\n\t\t\tnode.setIdentifier(this.finish(varargsNode));\n\t\t\treturn this.finish(node);\n\t\t}\n\n\t\t// default variable declaration: @param: 12 or @name\n\t\tif (node.setIdentifier(this._parseVariable())) {\n\t\t\tthis.accept(scanner.TokenType.Colon);\n\t\t}\n\t\tnode.setDefaultValue(this._parseExpr(true));\n\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseGuard():nodes.LessGuard {\n\n\t\tvar node = <nodes.LessGuard> this.create(nodes.LessGuard);\n\t\tif(!this.accept(scanner.TokenType.Ident, 'when')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tnode.isNegated = this.accept(scanner.TokenType.Ident, 'not');\n\n\t\tif(!node.getConditions().addChild(this._parseGuardCondition())) {\n\t\t\treturn <nodes.LessGuard> this.finish(node, errors.ParseError.ConditionExpected);\n\t\t}\n\t\twhile(this.accept(scanner.TokenType.Ident, 'and') || this.accept(scanner.TokenType.Comma, ',')) {\n\t\t\tif(!node.getConditions().addChild(this._parseGuardCondition())) {\n\t\t\t\treturn <nodes.LessGuard> this.finish(node, errors.ParseError.ConditionExpected);\n\t\t\t}\n\t\t}\n\n\t\treturn <nodes.LessGuard> this.finish(node);\n\t}\n\n\tpublic _parseGuardCondition():nodes.Node {\n\t\tvar node = this.create(nodes.GuardCondition);\n\t\tif(!this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif(!node.addChild(this._parseExpr())) {\n\t\t\t// empty (?)\n\t\t}\n\n\t\tif(!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected);\n\t\t}\n\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseFunctionIdentifier(): nodes.Identifier {\n\t\tif (this.peek(scanner.TokenType.Delim, '%')) {\n\t\t\tvar node = <nodes.Identifier> this.create(nodes.Identifier);\n\t\t\tnode.referenceTypes = [ nodes.ReferenceType.Function ];\n\t\t\tthis.consumeToken();\n\t\t\treturn this.finish(node);\n\t\t}\n\n\t\treturn super._parseFunctionIdentifier();\n\t}\n}\n","define(\"vs/nls!vs/languages/less/common/services/intelliSense\",['vs/nls', 'vs/nls!vs/languages/less/common/lessWorker'], function(nls, data) { return nls.create(\"vs/languages/less/common/services/intelliSense\", data); });","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport languageFacts = require('vs/languages/css/common/services/languageFacts');\nimport Modes = require('vs/editor/common/modes');\nimport cssIntellisense = require('vs/languages/css/common/services/intelliSense');\nimport nls = require('vs/nls');\n\nexport class LESSIntellisense extends cssIntellisense.CSSIntellisense {\n\n\tprivate static builtInProposals = [\n\t\t{\n\t\t\t'name': 'escape',\n\t\t\t'example': 'escape(@string);',\n\t\t\t'description': nls.localize('less.builtin.escape', 'URL encodes a string')\n\t\t},\n\t\t{\n\t\t\t'name': 'e',\n\t\t\t'example': 'e(@string);',\n\t\t\t'description': nls.localize('less.builtin.e', 'escape string content')\n\t\t},\n\t\t{\n\t\t\t'name': 'replace',\n\t\t\t'example': 'replace(@string, @pattern, @replacement[, @flags]);',\n\t\t\t'description': nls.localize('less.builtin.replace', 'string replace')\n\t\t},\n\t\t{\n\t\t\t'name': 'unit',\n\t\t\t'example': 'unit(@dimension, [@unit: \\'\\']);',\n\t\t\t'description': nls.localize('less.builtin.unit', 'remove or change the unit of a dimension')\n\t\t},\n\t\t{\n\t\t\t'name': 'color',\n\t\t\t'example': 'color(@string);',\n\t\t\t'description': nls.localize('less.builtin.color', 'parses a string to a color')\n\t\t},\n\t\t{\n\t\t\t'name': 'convert',\n\t\t\t'example': 'convert(@value, unit);',\n\t\t\t'description': nls.localize('less.builtin.convert', 'converts numbers from one type into another')\n\t\t},\n\t\t{\n\t\t\t'name': 'data-uri',\n\t\t\t'example': 'data-uri([mimetype,] url);',\n\t\t\t'description': nls.localize('less.builtin.data-uri', 'inlines a resource and falls back to `url()`')\n\t\t},\n\t\t{\n\t\t\t'name': 'length',\n\t\t\t'example': 'length(@list);',\n\t\t\t'description': nls.localize('less.builtin.length', 'returns the number of elements in a value list')\n\t\t},\n\t\t{\n\t\t\t'name': 'extract',\n\t\t\t'example': 'extract(@list, index);',\n\t\t\t'description': nls.localize('less.builtin.extract', 'returns a value at the specified position in the list')\n\t\t},\n\t\t{\n\t\t\t'name': 'abs',\n\t\t\t'description': nls.localize('less.builtin.abs', 'absolute value of a number'),\n\t\t\t'example': 'abs(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'acos',\n\t\t\t'description': nls.localize('less.builtin.acos', 'arccosine - inverse of cosine function'),\n\t\t\t'example': 'acos(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'asin',\n\t\t\t'description': nls.localize('less.builtin.asin', 'arcsine - inverse of sine function'),\n\t\t\t'example': 'asin(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'ceil',\n\t\t\t'example': 'ceil(@number);',\n\t\t\t'description': nls.localize('less.builtin.ceil', 'rounds up to an integer')\n\t\t},\n\t\t{\n\t\t\t'name': 'cos',\n\t\t\t'description': nls.localize('less.builtin.cos', 'cosine function'),\n\t\t\t'example': 'cos(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'floor',\n\t\t\t'description': nls.localize('less.builtin.floor', 'rounds down to an integer'),\n\t\t\t'example': 'floor(@number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'percentage',\n\t\t\t'description': nls.localize('less.builtin.percentage', 'converts to a %, e.g. 0.5 > 50%'),\n\t\t\t'example': 'percentage(@number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'round',\n\t\t\t'description': nls.localize('less.builtin.round', 'rounds a number to a number of places'),\n\t\t\t'example': 'round(number, [places: 0]);'\n\t\t},\n\t\t{\n\t\t\t'name': 'sqrt',\n\t\t\t'description': nls.localize('less.builtin.sqrt', 'calculates square root of a number'),\n\t\t\t'example': 'sqrt(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'sin',\n\t\t\t'description': nls.localize('less.builtin.sin', 'sine function'),\n\t\t\t'example': 'sin(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'tan',\n\t\t\t'description': nls.localize('less.builtin.tan', 'tangent function'),\n\t\t\t'example': 'tan(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'atan',\n\t\t\t'description': nls.localize('less.builtin.atan', 'arctangent - inverse of tangent function'),\n\t\t\t'example': 'atan(number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'pi',\n\t\t\t'description': nls.localize('less.builtin.pi', 'returns pi'),\n\t\t\t'example': 'pi();'\n\t\t},\n\t\t{\n\t\t\t'name': 'pow',\n\t\t\t'description': nls.localize('less.builtin.pow', 'first argument raised to the power of the second argument'),\n\t\t\t'example': 'pow(@base, @exponent);'\n\t\t},\n\t\t{\n\t\t\t'name': 'mod',\n\t\t\t'description': nls.localize('less.builtin.mod', 'first argument modulus second argument'),\n\t\t\t'example': 'mod(number, number);'\n\t\t},\n\t\t{\n\t\t\t'name': 'min',\n\t\t\t'description': nls.localize('less.builtin.min', 'returns the lowest of one or more values'),\n\t\t\t'example': 'min(@x, @y);'\n\t\t},\n\t\t{\n\t\t\t'name': 'max',\n\t\t\t'description': nls.localize('less.builtin.max', 'returns the lowest of one or more values'),\n\t\t\t'example': 'max(@x, @y);'\n\t\t}\n\t];\n\n\tprivate static colorProposals = [\n\t\t{\n\t\t\t'name': 'argb',\n\t\t\t'example': 'argb(@color);',\n\t\t\t'description': nls.localize('less.builtin.argb', 'creates a #AARRGGBB')\n\t\t},\n\t\t{\n\t\t\t'name': 'hsl',\n\t\t\t'example': 'hsl(@hue, @saturation, @lightness);',\n\t\t\t'description': nls.localize('less.builtin.hsl', 'creates a color')\n\t\t},\n\t\t{\n\t\t\t'name': 'hsla',\n\t\t\t'example': 'hsla(@hue, @saturation, @lightness, @alpha);',\n\t\t\t'description': nls.localize('less.builtin.hsla', 'creates a color')\n\t\t},\n\t\t{\n\t\t\t'name': 'hsv',\n\t\t\t'example': 'hsv(@hue, @saturation, @value);',\n\t\t\t'description': nls.localize('less.builtin.hsv', 'creates a color')\n\t\t},\n\t\t{\n\t\t\t'name': 'hsva',\n\t\t\t'example': 'hsva(@hue, @saturation, @value, @alpha);',\n\t\t\t'description': nls.localize('less.builtin.hsva', 'creates a color')\n\t\t},\n\t\t{\n\t\t\t'name': 'hue',\n\t\t\t'example': 'hue(@color);',\n\t\t\t'description': nls.localize('less.builtin.hue', 'returns the `hue` channel of `@color` in the HSL space')\n\t\t},\n\t\t{\n\t\t\t'name': 'saturation',\n\t\t\t'example': 'saturation(@color);',\n\t\t\t'description': nls.localize('less.builtin.saturation', 'returns the `saturation` channel of `@color` in the HSL space')\n\t\t},\n\t\t{\n\t\t\t'name': 'lightness',\n\t\t\t'example': 'lightness(@color);',\n\t\t\t'description': nls.localize('less.builtin.lightness', 'returns the `lightness` channel of `@color` in the HSL space')\n\t\t},\n\t\t{\n\t\t\t'name': 'hsvhue',\n\t\t\t'example': 'hsvhue(@color);',\n\t\t\t'description': nls.localize('less.builtin.hsvhue', 'returns the `hue` channel of `@color` in the HSV space')\n\t\t},\n\t\t{\n\t\t\t'name': 'hsvsaturation',\n\t\t\t'example': 'hsvsaturation(@color);',\n\t\t\t'description': nls.localize('less.builtin.hsvsaturation', 'returns the `saturation` channel of `@color` in the HSV space')\n\t\t},\n\t\t{\n\t\t\t'name': 'hsvvalue',\n\t\t\t'example': 'hsvvalue(@color);',\n\t\t\t'description': nls.localize('less.builtin.hsvvalue', 'returns the `value` channel of `@color` in the HSV space')\n\t\t},\n\t\t{\n\t\t\t'name': 'red',\n\t\t\t'example': 'red(@color);',\n\t\t\t'description': nls.localize('less.builtin.red', 'returns the `red` channel of `@color`')\n\t\t},\n\t\t{\n\t\t\t'name': 'green',\n\t\t\t'example': 'green(@color);',\n\t\t\t'description': nls.localize('less.builtin.green', 'returns the `green` channel of `@color`')\n\t\t},\n\t\t{\n\t\t\t'name': 'blue',\n\t\t\t'example': 'blue(@color);',\n\t\t\t'description': nls.localize('less.builtin.blue', 'returns the `blue` channel of `@color`')\n\t\t},\n\t\t{\n\t\t\t'name': 'alpha',\n\t\t\t'example': 'alpha(@color);',\n\t\t\t'description': nls.localize('less.builtin.alpha', 'returns the `alpha` channel of `@color`')\n\t\t},\n\t\t{\n\t\t\t'name': 'luma',\n\t\t\t'example': 'luma(@color);',\n\t\t\t'description': nls.localize('less.builtin.luma', 'returns the `luma` value (perceptual brightness) of `@color`')\n\t\t},\n\t\t{\n\t\t\t'name': 'saturate',\n\t\t\t'example': 'saturate(@color, 10%);',\n\t\t\t'description': nls.localize('less.builtin.saturate', 'return `@color` 10% points more saturated')\n\t\t},\n\t\t{\n\t\t\t'name': 'desaturate',\n\t\t\t'example': 'desaturate(@color, 10%);',\n\t\t\t'description': nls.localize('less.builtin.desaturate', 'return `@color` 10% points less saturated')\n\t\t},\n\t\t{\n\t\t\t'name': 'lighten',\n\t\t\t'example': 'lighten(@color, 10%);',\n\t\t\t'description': nls.localize('less.builtin.lighten', 'return `@color` 10% points lighter')\n\t\t},\n\t\t{\n\t\t\t'name': 'darken',\n\t\t\t'example': 'darken(@color, 10%);',\n\t\t\t'description': nls.localize('less.builtin.darken', 'return `@color` 10% points darker')\n\t\t},\n\t\t{\n\t\t\t'name': 'fadein',\n\t\t\t'example': 'fadein(@color, 10%);',\n\t\t\t'description': nls.localize('less.builtin.fadein', 'return `@color` 10% points less transparent')\n\t\t},\n\t\t{\n\t\t\t'name': 'fadeout',\n\t\t\t'example': 'fadeout(@color, 10%);',\n\t\t\t'description': nls.localize('less.builtin.fadeout', 'return `@color` 10% points more transparent')\n\t\t},\n\t\t{\n\t\t\t'name': 'fade',\n\t\t\t'example': 'fade(@color, 50%);',\n\t\t\t'description': nls.localize('less.builtin.fade', 'return `@color` with 50% transparency')\n\t\t},\n\t\t{\n\t\t\t'name': 'spin',\n\t\t\t'example': 'spin(@color, 10);',\n\t\t\t'description': nls.localize('less.builtin.spin', 'return `@color` with a 10 degree larger in hue')\n\t\t},\n\t\t{\n\t\t\t'name': 'mix',\n\t\t\t'example': 'mix(@color1, @color2, [@weight: 50%]);',\n\t\t\t'description': nls.localize('less.builtin.mix', 'return a mix of `@color1` and `@color2`')\n\t\t},\n\t\t{\n\t\t\t'name': 'greyscale',\n\t\t\t'example': 'greyscale(@color);',\n\t\t\t'description': nls.localize('less.builtin.greyscale', 'returns a grey, 100% desaturated color')\n\t\t},\n\t\t{\n\t\t\t'name': 'contrast',\n\t\t\t'example': 'contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]);',\n\t\t\t'description': nls.localize('less.builtin.contrast', 'return `@darkcolor` if `@color1 is> 43% luma` otherwise return `@lightcolor`, see notes')\n\t\t},\n\t\t{\n\t\t\t'name': 'multiply',\n\t\t\t'example': 'multiply(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'screen',\n\t\t\t'example': 'screen(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'overlay',\n\t\t\t'example': 'overlay(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'softlight',\n\t\t\t'example': 'softlight(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'hardlight',\n\t\t\t'example': 'hardlight(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'difference',\n\t\t\t'example': 'difference(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'exclusion',\n\t\t\t'example': 'exclusion(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'average',\n\t\t\t'example': 'average(@color1, @color2);'\n\t\t},\n\t\t{\n\t\t\t'name': 'negation',\n\t\t\t'example': 'negation(@color1, @color2);'\n\t\t}\n\t];\n\n\n\tconstructor() {\n\t\tsuper('@');\n\t}\n\n\tprivate createFunctionProposals(proposals: { name: string; example: string; description?: string; }[], result: Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tproposals.forEach((p) => {\n\t\t\tresult.push({\n\t\t\t\tlabel: p.name,\n\t\t\t\ttypeLabel: p.example,\n\t\t\t\tdocumentationLabel: p.description,\n\t\t\t\tcodeSnippet: p.name + '({{}})',\n\t\t\t\ttype: 'function'\n\t\t\t});\n\t\t});\n\t\treturn result;\n\t}\n\n\n\tpublic getTermProposals(result:Modes.ISuggestion[]):Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(LESSIntellisense.builtInProposals, result);\n\t\treturn super.getTermProposals(result);\n\t}\n\n\tprotected getColorProposals(entry: languageFacts.IEntry, result: Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(LESSIntellisense.colorProposals, result);\n\t\treturn super.getColorProposals(entry, result);\n\t}\n\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport cssWorker = require('vs/languages/css/common/cssWorker');\nimport cssIntellisense = require('vs/languages/css/common/services/intelliSense');\nimport cssParser = require('vs/languages/css/common/parser/cssParser');\nimport lessParser = require('./parser/lessParser');\nimport lessIntellisense = require('./services/intelliSense');\n\nexport class LessWorker extends cssWorker.CSSWorker {\n\n\tpublic createIntellisense(): cssIntellisense.CSSIntellisense {\n\t\treturn new lessIntellisense.LESSIntellisense();\n\t}\n\n\tpublic createParser(): cssParser.Parser {\n\t\treturn new lessParser.LessParser();\n\t}\n\n}\n"]}