{"version":3,"sources":["vs/languages/markdown/common/markdownWorker.js","vs/languages/markdown/common/file:/C:/Alex/src/vscode/src/vs/base/common/marked/marked.mock.ts","vs/languages/markdown/common/file:/C:/Alex/src/vscode/src/vs/editor/common/modes/textToHtmlTokenizer.ts","vs/languages/markdown/common/file:/C:/Alex/src/vscode/src/vs/languages/markdown/common/markdownWorker.ts"],"names":["define","require","exports","noop","value","Renderer","mock","marked","strings","nullMode_1","tokenizeToHtmlContent","text","mode","_tokenizeToHtmlContent","_getSafeTokenizationSupport","tokenizeToString","extraTokenClass","_tokenizeToString","tokenizationSupport","shouldGenerateEmbeddedModels","getInitialState","NullState","tokenize","buffer","state","deltaOffset","stopAtOffset","nullTokenize","result","tagName","style","children","emitToken","className","tokenText","push","emitNewLine","_tokenizeLines","length","escape","lines","split","currentState","i","_tokenizeLine","line","startState","tokenized","endState","tokens","offset","j","token","substring","startIndex","substr","safeType","type","replace","__decorate","this","decorators","target","key","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","WinJS","uri_1","Types","Paths","Marked","textToHtmlTokenizer_1","platform_1","modeService_1","resourceService_1","markers_1","Theme","MarkdownWorker","modeId","resourceService","markerService","modeService","theme","DARK","_modeId","prototype","_doConfigure","options","LIGHT","HC_BLACK","isArray","styles","cssLinks","TPromise","as","getEmitOutput","resource","absoluteWorkersResourcePath","_this","model","get","renderer","$this","image","href","title","out","fixHref","xhtml","superRenderLink","link","call","highlighter","code","lang","callback","mimeForLang","getModeIdForLanguageName","DEFAULT_MODE","getOrCreateMode","then","Promise","e","getValue","gfm","highlight","error","htmlResult","head","LIGHT_SCROLLBAR_CSS","DARK_SCROLLBAR_CSS","HC_BLACK_SCROLLBAR_CSS","map","join","isMacintosh","body","tail","parse","scheme","file","dirname","fsPath","toString","IResourceService","IMarkerService","IModeService"],"mappings":"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","file":"vs/languages/markdown/common/markdownWorker.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\ndefine(\"vs/base/common/marked/marked\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    function noop(value) {\r\n        return value;\r\n    }\r\n    noop.Renderer = function () {\r\n        // No-op\r\n    };\r\n    var mock = {\r\n        marked: noop\r\n    };\r\n    return mock;\r\n});\r\n\ndefine(\"vs/editor/common/modes/textToHtmlTokenizer\", [\"require\", \"exports\", 'vs/base/common/strings', 'vs/editor/common/modes/nullMode'], function (require, exports, strings, nullMode_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    function tokenizeToHtmlContent(text, mode) {\r\n        return _tokenizeToHtmlContent(text, _getSafeTokenizationSupport(mode));\r\n    }\r\n    exports.tokenizeToHtmlContent = tokenizeToHtmlContent;\r\n    function tokenizeToString(text, mode, extraTokenClass) {\r\n        return _tokenizeToString(text, _getSafeTokenizationSupport(mode), extraTokenClass);\r\n    }\r\n    exports.tokenizeToString = tokenizeToString;\r\n    function _getSafeTokenizationSupport(mode) {\r\n        if (mode && mode.tokenizationSupport) {\r\n            return mode.tokenizationSupport;\r\n        }\r\n        return {\r\n            shouldGenerateEmbeddedModels: false,\r\n            getInitialState: function () { return new nullMode_1.NullState(null, null); },\r\n            tokenize: function (buffer, state, deltaOffset, stopAtOffset) {\r\n                if (deltaOffset === void 0) { deltaOffset = 0; }\r\n                return nullMode_1.nullTokenize(null, buffer, state, deltaOffset, stopAtOffset);\r\n            }\r\n        };\r\n    }\r\n    function _tokenizeToHtmlContent(text, tokenizationSupport) {\r\n        var result = {\r\n            tagName: 'div',\r\n            style: 'white-space: pre-wrap',\r\n            children: []\r\n        };\r\n        var emitToken = function (className, tokenText) {\r\n            result.children.push({\r\n                tagName: 'span',\r\n                className: className,\r\n                text: tokenText\r\n            });\r\n        };\r\n        var emitNewLine = function () {\r\n            result.children.push({\r\n                tagName: 'br'\r\n            });\r\n        };\r\n        _tokenizeLines(text, tokenizationSupport, emitToken, emitNewLine);\r\n        return result;\r\n    }\r\n    function _tokenizeToString(text, tokenizationSupport, extraTokenClass) {\r\n        if (extraTokenClass === void 0) { extraTokenClass = ''; }\r\n        if (extraTokenClass && extraTokenClass.length > 0) {\r\n            extraTokenClass = ' ' + extraTokenClass;\r\n        }\r\n        var result = '';\r\n        var emitToken = function (className, tokenText) {\r\n            result += '<span class=\"' + className + extraTokenClass + '\">' + strings.escape(tokenText) + '</span>';\r\n        };\r\n        var emitNewLine = function () {\r\n            result += '<br/>';\r\n        };\r\n        result = '<div style=\"white-space: pre-wrap;\">';\r\n        _tokenizeLines(text, tokenizationSupport, emitToken, emitNewLine);\r\n        result += '</div>';\r\n        return result;\r\n    }\r\n    function _tokenizeLines(text, tokenizationSupport, emitToken, emitNewLine) {\r\n        var lines = text.split(/\\r\\n|\\r|\\n/);\r\n        var currentState = tokenizationSupport.getInitialState();\r\n        for (var i = 0; i < lines.length; i++) {\r\n            currentState = _tokenizeLine(lines[i], tokenizationSupport, emitToken, currentState);\r\n            // Keep new lines\r\n            if (i < lines.length - 1) {\r\n                emitNewLine();\r\n            }\r\n        }\r\n    }\r\n    function _tokenizeLine(line, tokenizationSupport, emitToken, startState) {\r\n        var tokenized = tokenizationSupport.tokenize(line, startState), endState = tokenized.endState, tokens = tokenized.tokens, offset = 0, tokenText;\r\n        // For each token inject spans with proper class names based on token type\r\n        for (var j = 0; j < tokens.length; j++) {\r\n            var token = tokens[j];\r\n            // Tokens only provide a startIndex from where they are valid from. As such, we need to\r\n            // look ahead the value of the token by advancing until the next tokens start inex or the\r\n            // end of the line.\r\n            if (j < tokens.length - 1) {\r\n                tokenText = line.substring(offset, tokens[j + 1].startIndex);\r\n                offset = tokens[j + 1].startIndex;\r\n            }\r\n            else {\r\n                tokenText = line.substr(offset);\r\n            }\r\n            var className = 'token';\r\n            var safeType = token.type.replace(/[^a-z0-9\\-]/gi, ' ');\r\n            if (safeType.length > 0) {\r\n                className += ' ' + safeType;\r\n            }\r\n            emitToken(className, tokenText);\r\n        }\r\n        return endState;\r\n    }\r\n});\r\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\ndefine(\"vs/languages/markdown/common/markdownWorker\", [\"require\", \"exports\", 'vs/base/common/winjs.base', 'vs/base/common/uri', 'vs/base/common/types', 'vs/base/common/paths', 'vs/base/common/marked/marked', 'vs/editor/common/modes/textToHtmlTokenizer', 'vs/base/common/platform', 'vs/editor/common/services/modeService', 'vs/editor/common/services/resourceService', 'vs/platform/markers/common/markers'], function (require, exports, WinJS, uri_1, Types, Paths, Marked, textToHtmlTokenizer_1, platform_1, modeService_1, resourceService_1, markers_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var Theme;\r\n    (function (Theme) {\r\n        Theme[Theme[\"LIGHT\"] = 0] = \"LIGHT\";\r\n        Theme[Theme[\"DARK\"] = 1] = \"DARK\";\r\n        Theme[Theme[\"HC_BLACK\"] = 2] = \"HC_BLACK\";\r\n    })(Theme || (Theme = {}));\r\n    var MarkdownWorker = (function () {\r\n        function MarkdownWorker(modeId, resourceService, markerService, modeService) {\r\n            this.theme = Theme.DARK;\r\n            this._modeId = modeId;\r\n            this.resourceService = resourceService;\r\n            this.markerService = markerService;\r\n            this.modeService = modeService;\r\n        }\r\n        MarkdownWorker.prototype._doConfigure = function (options) {\r\n            if (options && options.theme) {\r\n                this.theme = (options.theme === 'vs-dark') ? Theme.DARK : (options.theme === 'vs') ? Theme.LIGHT : Theme.HC_BLACK;\r\n            }\r\n            if (options && Types.isArray(options.styles)) {\r\n                this.cssLinks = options.styles;\r\n            }\r\n            return WinJS.TPromise.as(void 0);\r\n        };\r\n        MarkdownWorker.prototype.getEmitOutput = function (resource, absoluteWorkersResourcePath) {\r\n            var _this = this;\r\n            var model = this.resourceService.get(resource);\r\n            var cssLinks = this.cssLinks || [];\r\n            // Custom Renderer to fix href in images\r\n            var renderer = new Marked.marked.Renderer();\r\n            var $this = this;\r\n            renderer.image = function (href, title, text) {\r\n                var out = '<img src=\"' + $this.fixHref(resource, href) + '\" alt=\"' + text + '\"';\r\n                if (title) {\r\n                    out += ' title=\"' + title + '\"';\r\n                }\r\n                out += (this.options && this.options.xhtml) ? '/>' : '>';\r\n                return out;\r\n            };\r\n            // Custom Renderer to open links always in a new tab\r\n            var superRenderLink = renderer.link;\r\n            renderer.link = function (href, title, text) {\r\n                var link = superRenderLink.call(this, href, title, text);\r\n                // We cannot support local anchor tags because the iframe editor does not have a src set\r\n                if (href && href[0] === '#') {\r\n                    link = link.replace('href=', 'localhref=');\r\n                }\r\n                else {\r\n                    link = link.replace('<a', '<a target=\"_blank\"');\r\n                }\r\n                return link;\r\n            };\r\n            var modeService = this.modeService;\r\n            // Custom highlighter to use our modes to render code\r\n            var highlighter = function (code, lang, callback) {\r\n                // Lookup the mode and use the tokenizer to get the HTML\r\n                var mimeForLang = modeService.getModeIdForLanguageName(lang) || lang || MarkdownWorker.DEFAULT_MODE;\r\n                modeService.getOrCreateMode(mimeForLang).then(function (mode) {\r\n                    callback(null, textToHtmlTokenizer_1.tokenizeToString(code, mode));\r\n                });\r\n            };\r\n            return new WinJS.Promise(function (c, e) {\r\n                // Render markdown file contents to HTML\r\n                Marked.marked(model.getValue(), {\r\n                    gfm: true,\r\n                    renderer: renderer,\r\n                    highlight: highlighter\r\n                }, function (error, htmlResult) {\r\n                    // Compute head\r\n                    var head = [\r\n                        '<!DOCTYPE html>',\r\n                        '<html>',\r\n                        '<head>',\r\n                        '<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">',\r\n                        (cssLinks.length === 0) ? '<link rel=\"stylesheet\" href=\"' + absoluteWorkersResourcePath + '/markdown.css\" type=\"text/css\" media=\"screen\">' : '',\r\n                        (cssLinks.length === 0) ? '<link rel=\"stylesheet\" href=\"' + absoluteWorkersResourcePath + '/tokens.css\" type=\"text/css\" media=\"screen\">' : '',\r\n                        (_this.theme === Theme.LIGHT) ? MarkdownWorker.LIGHT_SCROLLBAR_CSS : (_this.theme === Theme.DARK) ? MarkdownWorker.DARK_SCROLLBAR_CSS : MarkdownWorker.HC_BLACK_SCROLLBAR_CSS,\r\n                        cssLinks.map(function (style) {\r\n                            return '<link rel=\"stylesheet\" href=\"' + _this.fixHref(resource, style) + '\" type=\"text/css\" media=\"screen\">';\r\n                        }).join('\\n'),\r\n                        '</head>',\r\n                        platform_1.isMacintosh ? '<body class=\"mac\">' : '<body>'\r\n                    ].join('\\n');\r\n                    // Compute body\r\n                    var body = [\r\n                        (_this.theme === Theme.LIGHT) ? '<div class=\"monaco-editor vs\">' : (_this.theme === Theme.DARK) ? '<div class=\"monaco-editor vs-dark\">' : '<div class=\"monaco-editor hc-black\">',\r\n                        htmlResult,\r\n                        '</div>',\r\n                    ].join('\\n');\r\n                    // Tail\r\n                    var tail = [\r\n                        '</body>',\r\n                        '</html>'\r\n                    ].join('\\n');\r\n                    c({\r\n                        head: head,\r\n                        body: body,\r\n                        tail: tail\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        MarkdownWorker.prototype.fixHref = function (resource, href) {\r\n            if (href) {\r\n                // Return early if href is already a URL\r\n                if (uri_1.default.parse(href).scheme) {\r\n                    return href;\r\n                }\r\n                // Otherwise convert to a file URI by joining the href with the resource location\r\n                return uri_1.default.file(Paths.join(Paths.dirname(resource.fsPath), href)).toString();\r\n            }\r\n            return href;\r\n        };\r\n        MarkdownWorker.DEFAULT_MODE = 'text/plain';\r\n        // Custom Scrollbar CSS (inlined because of pseudo elements that cannot be made theme aware)\r\n        MarkdownWorker.LIGHT_SCROLLBAR_CSS = [\r\n            '<style type=\"text/css\">',\r\n            '\t::-webkit-scrollbar {',\r\n            '\t\twidth: 14px;',\r\n            '\t\theight: 14px;',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb {',\r\n            '\t\tbackground-color: rgba(100, 100, 100, 0.4);',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb:hover {',\r\n            '\t\tbackground-color: rgba(100, 100, 100, 0.7);',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb:active {',\r\n            '\t\tbackground-color: rgba(0, 0, 0, 0.6);',\r\n            '\t}',\r\n            '</style>'\r\n        ].join('\\n');\r\n        MarkdownWorker.DARK_SCROLLBAR_CSS = [\r\n            '<style type=\"text/css\">',\r\n            '\t::-webkit-scrollbar {',\r\n            '\t\twidth: 14px;',\r\n            '\t\theight: 14px;',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb {',\r\n            '\t\tbackground-color: rgba(121, 121, 121, 0.4);',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb:hover {',\r\n            '\t\tbackground-color: rgba(100, 100, 100, 0.7);',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb:active {',\r\n            '\t\tbackground-color: rgba(85, 85, 85, 0.8);',\r\n            '\t}',\r\n            '</style>'\r\n        ].join('\\n');\r\n        MarkdownWorker.HC_BLACK_SCROLLBAR_CSS = [\r\n            '<style type=\"text/css\">',\r\n            '\t::-webkit-scrollbar {',\r\n            '\t\twidth: 14px;',\r\n            '\t\theight: 14px;',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb {',\r\n            '\t\tbackground-color: rgba(111, 195, 223, 0.3);',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb:hover {',\r\n            '\t\tbackground-color: rgba(111, 195, 223, 0.4);',\r\n            '\t}',\r\n            '',\r\n            '\t::-webkit-scrollbar-thumb:active {',\r\n            '\t\tbackground-color: rgba(111, 195, 223, 0.4);',\r\n            '\t}',\r\n            '</style>'\r\n        ].join('\\n');\r\n        MarkdownWorker = __decorate([\r\n            __param(1, resourceService_1.IResourceService),\r\n            __param(2, markers_1.IMarkerService),\r\n            __param(3, modeService_1.IModeService)\r\n        ], MarkdownWorker);\r\n        return MarkdownWorker;\r\n    }());\r\n    exports.MarkdownWorker = MarkdownWorker;\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction noop(value:string): string {\n\treturn value;\n}\n\n(<any>noop).Renderer = function() {\n\t// No-op\n};\n\nconst mock:any = {\n\tmarked: noop\n};\nexport = mock;","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport {IHTMLContentElement} from 'vs/base/common/htmlContent';\nimport * as strings from 'vs/base/common/strings';\nimport {IMode, IState, ITokenizationSupport} from 'vs/editor/common/modes';\nimport {NullState, nullTokenize} from 'vs/editor/common/modes/nullMode';\n\nexport function tokenizeToHtmlContent(text: string, mode: IMode): IHTMLContentElement {\n\treturn _tokenizeToHtmlContent(text, _getSafeTokenizationSupport(mode));\n}\n\nexport function tokenizeToString(text: string, mode: IMode, extraTokenClass?: string): string {\n\treturn _tokenizeToString(text, _getSafeTokenizationSupport(mode), extraTokenClass);\n}\n\nfunction _getSafeTokenizationSupport(mode: IMode): ITokenizationSupport {\n\tif (mode && mode.tokenizationSupport) {\n\t\treturn mode.tokenizationSupport;\n\t}\n\treturn {\n\t\tshouldGenerateEmbeddedModels: false,\n\t\tgetInitialState: () => new NullState(null, null),\n\t\ttokenize: (buffer:string, state: IState, deltaOffset:number = 0, stopAtOffset?:number) => nullTokenize(null, buffer, state, deltaOffset, stopAtOffset)\n\t};\n}\n\nfunction _tokenizeToHtmlContent(text: string, tokenizationSupport: ITokenizationSupport): IHTMLContentElement {\n\tvar result: IHTMLContentElement = {\n\t\ttagName: 'div',\n\t\tstyle: 'white-space: pre-wrap',\n\t\tchildren: []\n\t};\n\n\tvar emitToken = (className: string, tokenText: string) => {\n\t\tresult.children.push({\n\t\t\ttagName: 'span',\n\t\t\tclassName: className,\n\t\t\ttext: tokenText\n\t\t});\n\t};\n\n\tvar emitNewLine = () => {\n\t\tresult.children.push({\n\t\t\ttagName: 'br'\n\t\t});\n\t};\n\n\t_tokenizeLines(text, tokenizationSupport, emitToken, emitNewLine);\n\n\treturn result;\n}\n\nfunction _tokenizeToString(text: string, tokenizationSupport: ITokenizationSupport, extraTokenClass: string = ''): string {\n\tif (extraTokenClass && extraTokenClass.length > 0) {\n\t\textraTokenClass = ' ' + extraTokenClass;\n\t}\n\n\tvar result = '';\n\n\tvar emitToken = (className: string, tokenText: string) => {\n\t\tresult += '<span class=\"' + className + extraTokenClass + '\">' + strings.escape(tokenText) + '</span>';\n\t};\n\n\tvar emitNewLine = () => {\n\t\tresult += '<br/>';\n\t};\n\n\tresult = '<div style=\"white-space: pre-wrap;\">';\n\t_tokenizeLines(text, tokenizationSupport, emitToken, emitNewLine);\n\tresult += '</div>';\n\n\treturn result;\n}\n\ninterface IEmitTokenFunc {\n\t(className: string, innerText: string): void;\n}\ninterface IEmitNewLineFunc {\n\t(): void;\n}\n\nfunction _tokenizeLines(text: string, tokenizationSupport: ITokenizationSupport, emitToken: IEmitTokenFunc, emitNewLine: IEmitNewLineFunc): void {\n\tvar lines = text.split(/\\r\\n|\\r|\\n/);\n\tvar currentState = tokenizationSupport.getInitialState();\n\tfor (var i = 0; i < lines.length; i++) {\n\t\tcurrentState = _tokenizeLine(lines[i], tokenizationSupport, emitToken, currentState);\n\n\t\t// Keep new lines\n\t\tif (i < lines.length - 1) {\n\t\t\temitNewLine();\n\t\t}\n\t}\n}\n\nfunction _tokenizeLine(line: string, tokenizationSupport:ITokenizationSupport, emitToken: IEmitTokenFunc, startState: IState): IState {\n\tvar tokenized = tokenizationSupport.tokenize(line, startState),\n\t\tendState = tokenized.endState,\n\t\ttokens = tokenized.tokens,\n\t\toffset = 0,\n\t\ttokenText: string;\n\n\t// For each token inject spans with proper class names based on token type\n\tfor (var j = 0; j < tokens.length; j++) {\n\t\tvar token = tokens[j];\n\n\t\t// Tokens only provide a startIndex from where they are valid from. As such, we need to\n\t\t// look ahead the value of the token by advancing until the next tokens start inex or the\n\t\t// end of the line.\n\t\tif (j < tokens.length - 1) {\n\t\t\ttokenText = line.substring(offset, tokens[j + 1].startIndex);\n\t\t\toffset = tokens[j + 1].startIndex;\n\t\t} else {\n\t\t\ttokenText = line.substr(offset);\n\t\t}\n\n\t\tvar className = 'token';\n\t\tvar safeType = token.type.replace(/[^a-z0-9\\-]/gi, ' ');\n\t\tif (safeType.length > 0) {\n\t\t\tclassName += ' ' + safeType;\n\t\t}\n\t\temitToken(className, tokenText);\n\t}\n\n\treturn endState;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport WinJS = require('vs/base/common/winjs.base');\nimport URI from 'vs/base/common/uri';\nimport Types = require('vs/base/common/types');\nimport Modes = require('vs/editor/common/modes');\nimport Paths = require('vs/base/common/paths');\nimport Marked = require('vs/base/common/marked/marked');\nimport {tokenizeToString} from 'vs/editor/common/modes/textToHtmlTokenizer';\nimport {isMacintosh} from 'vs/base/common/platform';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IResourceService} from 'vs/editor/common/services/resourceService';\nimport {IMarkerService} from 'vs/platform/markers/common/markers';\n\nenum Theme {\n\tLIGHT,\n\tDARK,\n\tHC_BLACK\n}\n\nexport class MarkdownWorker {\n\n\tprivate static DEFAULT_MODE = 'text/plain';\n\n\tprivate cssLinks: string[];\n\tprivate theme: Theme = Theme.DARK;\n\n\t// Custom Scrollbar CSS (inlined because of pseudo elements that cannot be made theme aware)\n\tprivate static LIGHT_SCROLLBAR_CSS: string = [\n\t\t'<style type=\"text/css\">',\n\t\t'\t::-webkit-scrollbar {',\n\t\t'\t\twidth: 14px;',\n\t\t'\t\theight: 14px;',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb {',\n\t\t'\t\tbackground-color: rgba(100, 100, 100, 0.4);',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb:hover {',\n\t\t'\t\tbackground-color: rgba(100, 100, 100, 0.7);',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb:active {',\n\t\t'\t\tbackground-color: rgba(0, 0, 0, 0.6);',\n\t\t'\t}',\n\t\t'</style>'\n\t].join('\\n');\n\n\tprivate static DARK_SCROLLBAR_CSS: string = [\n\t\t'<style type=\"text/css\">',\n\t\t'\t::-webkit-scrollbar {',\n\t\t'\t\twidth: 14px;',\n\t\t'\t\theight: 14px;',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb {',\n\t\t'\t\tbackground-color: rgba(121, 121, 121, 0.4);',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb:hover {',\n\t\t'\t\tbackground-color: rgba(100, 100, 100, 0.7);',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb:active {',\n\t\t'\t\tbackground-color: rgba(85, 85, 85, 0.8);',\n\t\t'\t}',\n\t\t'</style>'\n\t].join('\\n');\n\n\tprivate static HC_BLACK_SCROLLBAR_CSS: string = [\n\t\t'<style type=\"text/css\">',\n\t\t'\t::-webkit-scrollbar {',\n\t\t'\t\twidth: 14px;',\n\t\t'\t\theight: 14px;',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb {',\n\t\t'\t\tbackground-color: rgba(111, 195, 223, 0.3);',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb:hover {',\n\t\t'\t\tbackground-color: rgba(111, 195, 223, 0.4);',\n\t\t'\t}',\n\t\t'',\n\t\t'\t::-webkit-scrollbar-thumb:active {',\n\t\t'\t\tbackground-color: rgba(111, 195, 223, 0.4);',\n\t\t'\t}',\n\t\t'</style>'\n\t].join('\\n');\n\n\tprivate modeService: IModeService;\n\tprivate resourceService:IResourceService;\n\tprivate markerService: IMarkerService;\n\tprivate _modeId: string;\n\n\tconstructor(\n\t\tmodeId: string,\n\t\t@IResourceService resourceService: IResourceService,\n\t\t@IMarkerService markerService: IMarkerService,\n\t\t@IModeService modeService: IModeService\n\t) {\n\t\tthis._modeId = modeId;\n\t\tthis.resourceService = resourceService;\n\t\tthis.markerService = markerService;\n\t\tthis.modeService = modeService;\n\t}\n\n\t_doConfigure(options: any): WinJS.TPromise<void> {\n\t\tif (options && options.theme) {\n\t\t\tthis.theme = (options.theme === 'vs-dark') ? Theme.DARK : (options.theme === 'vs') ? Theme.LIGHT : Theme.HC_BLACK;\n\t\t}\n\n\t\tif (options && Types.isArray(options.styles)) {\n\t\t\tthis.cssLinks = options.styles;\n\t\t}\n\n\t\treturn WinJS.TPromise.as(void 0);\n\t}\n\n\tpublic getEmitOutput(resource: URI, absoluteWorkersResourcePath: string): WinJS.TPromise<Modes.IEmitOutput> { // TODO@Ben technical debt: worker cannot resolve paths absolute\n\t\tlet model = this.resourceService.get(resource);\n\t\tlet cssLinks: string[] = this.cssLinks || [];\n\n\t\t// Custom Renderer to fix href in images\n\t\tlet renderer = new Marked.marked.Renderer();\n\t\tlet $this = this;\n\t\trenderer.image = function(href: string, title: string, text: string): string {\n\t\t\tlet out = '<img src=\"' + $this.fixHref(resource, href) + '\" alt=\"' + text + '\"';\n\t\t\tif (title) {\n\t\t\t\tout += ' title=\"' + title + '\"';\n\t\t\t}\n\n\t\t\tout += (this.options && this.options.xhtml) ? '/>' : '>';\n\n\t\t\treturn out;\n\t\t};\n\n\t\t// Custom Renderer to open links always in a new tab\n\t\tlet superRenderLink = renderer.link;\n\t\trenderer.link = function(href: string, title: string, text: string): string {\n\t\t\tlet link = superRenderLink.call(this, href, title, text);\n\n\t\t\t// We cannot support local anchor tags because the iframe editor does not have a src set\n\t\t\tif (href && href[0] === '#') {\n\t\t\t\tlink = link.replace('href=', 'localhref=');\n\t\t\t} else {\n\t\t\t\tlink = link.replace('<a', '<a target=\"_blank\"');\n\t\t\t}\n\n\t\t\treturn link;\n\t\t};\n\n\t\tlet modeService = this.modeService;\n\n\t\t// Custom highlighter to use our modes to render code\n\t\tlet highlighter = function(code: string, lang: string, callback?: (error: Error, result: string) => void) {\n\n\t\t\t// Lookup the mode and use the tokenizer to get the HTML\n\t\t\tlet mimeForLang = modeService.getModeIdForLanguageName(lang) || lang || MarkdownWorker.DEFAULT_MODE;\n\t\t\tmodeService.getOrCreateMode(mimeForLang).then((mode) => {\n\t\t\t\tcallback(null, tokenizeToString(code, mode));\n\t\t\t});\n\t\t};\n\n\t\treturn new WinJS.Promise((c, e) => {\n\n\t\t\t// Render markdown file contents to HTML\n\t\t\tMarked.marked(model.getValue(), {\n\t\t\t\tgfm: true, // GitHub flavored markdown\n\t\t\t\trenderer: renderer,\n\t\t\t\thighlight: highlighter\n\t\t\t}, (error: Error, htmlResult: string) => {\n\n\t\t\t\t// Compute head\n\t\t\t\tlet head = [\n\t\t\t\t\t'<!DOCTYPE html>',\n\t\t\t\t\t'<html>',\n\t\t\t\t\t'<head>',\n\t\t\t\t\t'<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">',\n\t\t\t\t\t(cssLinks.length === 0) ? '<link rel=\"stylesheet\" href=\"' + absoluteWorkersResourcePath + '/markdown.css\" type=\"text/css\" media=\"screen\">' : '',\n\t\t\t\t\t(cssLinks.length === 0) ? '<link rel=\"stylesheet\" href=\"' + absoluteWorkersResourcePath + '/tokens.css\" type=\"text/css\" media=\"screen\">' : '',\n\t\t\t\t\t(this.theme === Theme.LIGHT) ? MarkdownWorker.LIGHT_SCROLLBAR_CSS : (this.theme === Theme.DARK) ? MarkdownWorker.DARK_SCROLLBAR_CSS : MarkdownWorker.HC_BLACK_SCROLLBAR_CSS,\n\t\t\t\t\tcssLinks.map((style) => {\n\t\t\t\t\t\treturn '<link rel=\"stylesheet\" href=\"' + this.fixHref(resource, style) + '\" type=\"text/css\" media=\"screen\">';\n\t\t\t\t\t}).join('\\n'),\n\t\t\t\t\t'</head>',\n\t\t\t\t\tisMacintosh ? '<body class=\"mac\">' : '<body>'\n\t\t\t\t].join('\\n');\n\n\t\t\t\t// Compute body\n\t\t\t\tlet body = [\n\t\t\t\t\t(this.theme === Theme.LIGHT) ? '<div class=\"monaco-editor vs\">' : (this.theme === Theme.DARK) ? '<div class=\"monaco-editor vs-dark\">' : '<div class=\"monaco-editor hc-black\">',\n\t\t\t\t\thtmlResult,\n\t\t\t\t\t'</div>',\n\t\t\t\t].join('\\n');\n\n\t\t\t\t// Tail\n\t\t\t\tlet tail = [\n\t\t\t\t\t'</body>',\n\t\t\t\t\t'</html>'\n\t\t\t\t].join('\\n');\n\n\t\t\t\tc({\n\t\t\t\t\thead: head,\n\t\t\t\t\tbody: body,\n\t\t\t\t\ttail: tail\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate fixHref(resource: URI, href: string): string {\n\t\tif (href) {\n\n\t\t\t// Return early if href is already a URL\n\t\t\tif (URI.parse(href).scheme) {\n\t\t\t\treturn href;\n\t\t\t}\n\n\t\t\t// Otherwise convert to a file URI by joining the href with the resource location\n\t\t\treturn URI.file(Paths.join(Paths.dirname(resource.fsPath), href)).toString();\n\t\t}\n\n\t\treturn href;\n\t}\n}"]}