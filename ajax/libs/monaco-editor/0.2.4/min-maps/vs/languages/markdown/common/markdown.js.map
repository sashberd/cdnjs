{"version":3,"sources":["vs/languages/markdown/common/markdown.js","vs/languages/markdown/common/file:/C:/Alex/src/vscode/src/vs/languages/markdown/common/markdownTokenTypes.ts","vs/languages/markdown/common/file:/C:/Alex/src/vscode/src/vs/languages/markdown/common/markdown.ts"],"names":["define","require","exports","TOKEN_HEADER_LEAD","TOKEN_HEADER","TOKEN_EXT_HEADER","TOKEN_SEPARATOR","TOKEN_QUOTE","TOKEN_LIST","TOKEN_BLOCK","TOKEN_BLOCK_CODE","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Compile","Modes","threadService_1","html_1","markdownTokenTypes","modeService_1","instantiation_1","thread_1","configuration_1","editorWorkerService_1","abstractMode_1","monarchDefinition_1","monarchLexer_1","richEditSupport_1","async_1","language","displayName","name","defaultToken","autoClosingPairs","blockCommentStart","blockCommentEnd","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","codeblock","codeblockgh","switchTo","codeblockghend","linecontent","html","htmlTokenTypes","getTag","cases","@empty","@default","bracket","comment","tag","ATTRIB_NAME","DELIM_ASSIGN","ATTRIB_VALUE","$S2==style","$S2==script","$S3","embedded","$1==$S2","string","$#==$S2","MarkdownMode","_super","descriptor","instantiationService","threadService","modeService","editorWorkerService","configurationService","call","id","lexer","compile","_modeWorkerManager","ModeWorkerManager","_threadService","emitOutputSupport","configSupport","tokenizationSupport","createTokenizationSupport","richEditSupport","RichEditSupport","getId","createRichEditSupport","SuggestRegistry","register","triggerCharacters","shouldAutotriggerSuggest","provideCompletionItems","model","position","wireCancellationToken","textualSuggest","uri","_worker","runner","worker","configure","options","isInMainThread","_configureWorkers","w","_doConfigure","getEmitOutput","resource","absoluteWorkerResourcesPath","$_configureWorkers","AllWorkersAttr","$getEmitOutput","OneWorkerAttr","IInstantiationService","IThreadService","IModeService","IEditorWorkerService","IConfigurationService","AbstractMode"],"mappings":"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","file":"vs/languages/markdown/common/markdown.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\ndefine(\"vs/languages/markdown/common/markdownTokenTypes\", [\"require\", \"exports\"], function (require, exports) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.TOKEN_HEADER_LEAD = 'entity.name.tag';\r\n    exports.TOKEN_HEADER = 'entity.name.tag';\r\n    exports.TOKEN_EXT_HEADER = 'entity.other.attribute-name';\r\n    exports.TOKEN_SEPARATOR = 'meta.separator';\r\n    exports.TOKEN_QUOTE = 'comment';\r\n    exports.TOKEN_LIST = 'keyword';\r\n    exports.TOKEN_BLOCK = 'string';\r\n    exports.TOKEN_BLOCK_CODE = 'variable.source';\r\n});\r\n/*\r\n// old settings\r\nexport const TOKEN_HEADER_LEAD = 'white';\r\nexport const TOKEN_HEADER = 'keyword.1';\r\nexport const TOKEN_EXT_HEADER = 'keyword.header';\r\nexport const TOKEN_SEPARATOR = 'keyword.header';\r\nexport const TOKEN_QUOTE = 'comment';\r\nexport const TOKEN_LIST = 'string.list';\r\nexport const TOKEN_BLOCK = 'variable';\r\nexport const TOKEN_BLOCK_CODE = 'variable.code';\r\n*/ \r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\ndefine(\"vs/languages/markdown/common/markdown\", [\"require\", \"exports\", 'vs/editor/common/modes/monarch/monarchCompile', 'vs/editor/common/modes', 'vs/platform/thread/common/threadService', 'vs/languages/html/common/html', 'vs/languages/markdown/common/markdownTokenTypes', 'vs/editor/common/services/modeService', 'vs/platform/instantiation/common/instantiation', 'vs/platform/thread/common/thread', 'vs/platform/configuration/common/configuration', 'vs/editor/common/services/editorWorkerService', 'vs/editor/common/modes/abstractMode', 'vs/editor/common/modes/monarch/monarchDefinition', 'vs/editor/common/modes/monarch/monarchLexer', 'vs/editor/common/modes/supports/richEditSupport', 'vs/base/common/async'], function (require, exports, Compile, Modes, threadService_1, html_1, markdownTokenTypes, modeService_1, instantiation_1, thread_1, configuration_1, editorWorkerService_1, abstractMode_1, monarchDefinition_1, monarchLexer_1, richEditSupport_1, async_1) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    exports.language = {\r\n        displayName: 'Markdown',\r\n        name: 'md',\r\n        defaultToken: '',\r\n        autoClosingPairs: [],\r\n        blockCommentStart: '<!--',\r\n        blockCommentEnd: '-->',\r\n        // escape codes\r\n        control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n        noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n        escapes: /\\\\(?:@control)/,\r\n        // escape codes for javascript/CSS strings\r\n        jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n        // non matched elements\r\n        empty: [\r\n            'area', 'base', 'basefont', 'br', 'col', 'frame',\r\n            'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\r\n        ],\r\n        tokenizer: {\r\n            root: [\r\n                // headers (with #)\r\n                [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', markdownTokenTypes.TOKEN_HEADER_LEAD, markdownTokenTypes.TOKEN_HEADER, markdownTokenTypes.TOKEN_HEADER]],\r\n                // headers (with =)\r\n                [/^\\s*(=+|\\-+)\\s*$/, markdownTokenTypes.TOKEN_EXT_HEADER],\r\n                // headers (with ***)\r\n                [/^\\s*((\\*[ ]?)+)\\s*$/, markdownTokenTypes.TOKEN_SEPARATOR],\r\n                // quote\r\n                [/^\\s*>+/, markdownTokenTypes.TOKEN_QUOTE],\r\n                // list (starting with * or number)\r\n                [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, markdownTokenTypes.TOKEN_LIST],\r\n                // code block (4 spaces indent)\r\n                [/^(\\t|[ ]{4})[^ ].*$/, markdownTokenTypes.TOKEN_BLOCK],\r\n                // code block (3 tilde)\r\n                [/^\\s*~{3}\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblock' }],\r\n                // github style code blocks (with backticks and language)\r\n                [/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblockgh', nextEmbedded: '$1' }],\r\n                // github style code blocks (with backticks but no language)\r\n                [/^\\s*`{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblock' }],\r\n                // markup within lines\r\n                { include: '@linecontent' },\r\n            ],\r\n            codeblock: [\r\n                [/^\\s*~{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@pop' }],\r\n                [/^\\s*`{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@pop' }],\r\n                [/.*$/, markdownTokenTypes.TOKEN_BLOCK_CODE],\r\n            ],\r\n            // github style code blocks\r\n            codeblockgh: [\r\n                [/```\\s*$/, { token: '@rematch', switchTo: '@codeblockghend', nextEmbedded: '@pop' }],\r\n                [/[^`]*$/, markdownTokenTypes.TOKEN_BLOCK_CODE],\r\n            ],\r\n            codeblockghend: [\r\n                [/\\s*```/, { token: markdownTokenTypes.TOKEN_BLOCK_CODE, next: '@pop' }],\r\n                [/./, '@rematch', '@pop'],\r\n            ],\r\n            linecontent: [\r\n                // escapes\r\n                [/&\\w+;/, 'string.escape'],\r\n                [/@escapes/, 'escape'],\r\n                // various markup\r\n                [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\r\n                [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\r\n                [/\\b_[^_]+_\\b/, 'emphasis'],\r\n                [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\r\n                [/`([^\\\\`]|@escapes)+`/, 'variable'],\r\n                // links\r\n                [/\\{[^}]+\\}/, 'string.target'],\r\n                [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\r\n                [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\r\n                // or html\r\n                { include: 'html' },\r\n            ],\r\n            // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\r\n            // but currently there is a limitation in Monarch that prevents us from doing it: The opening\r\n            // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\r\n            // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\r\n            // we cannot correctly tokenize it in that mode yet.\r\n            html: [\r\n                // html tags\r\n                [/<(\\w+)\\/>/, html_1.htmlTokenTypes.getTag('$1')],\r\n                [/<(\\w+)/, {\r\n                        cases: {\r\n                            '@empty': { token: html_1.htmlTokenTypes.getTag('$1'), next: '@tag.$1' },\r\n                            '@default': { token: html_1.htmlTokenTypes.getTag('$1'), bracket: '@open', next: '@tag.$1' }\r\n                        }\r\n                    }],\r\n                [/<\\/(\\w+)\\s*>/, { token: html_1.htmlTokenTypes.getTag('$1'), bracket: '@close' }],\r\n                [/<!--/, 'comment', '@comment']\r\n            ],\r\n            comment: [\r\n                [/[^<\\-]+/, 'comment.content'],\r\n                [/-->/, 'comment', '@pop'],\r\n                [/<!--/, 'comment.content.invalid'],\r\n                [/[<\\-]/, 'comment.content']\r\n            ],\r\n            // Almost full HTML tag matching, complete with embedded scripts & styles\r\n            tag: [\r\n                [/[ \\t\\r\\n]+/, 'white'],\r\n                [/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [html_1.htmlTokenTypes.ATTRIB_NAME, html_1.htmlTokenTypes.DELIM_ASSIGN, html_1.htmlTokenTypes.ATTRIB_VALUE,\r\n                        { token: html_1.htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\r\n                        html_1.htmlTokenTypes.ATTRIB_VALUE]],\r\n                [/(type)(\\s*=\\s*)(')([^']+)(')/, [html_1.htmlTokenTypes.ATTRIB_NAME, html_1.htmlTokenTypes.DELIM_ASSIGN, html_1.htmlTokenTypes.ATTRIB_VALUE,\r\n                        { token: html_1.htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\r\n                        html_1.htmlTokenTypes.ATTRIB_VALUE]],\r\n                [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [html_1.htmlTokenTypes.ATTRIB_NAME, html_1.htmlTokenTypes.DELIM_ASSIGN, html_1.htmlTokenTypes.ATTRIB_VALUE]],\r\n                [/\\w+/, html_1.htmlTokenTypes.ATTRIB_NAME],\r\n                [/\\/>/, html_1.htmlTokenTypes.getTag('$S2'), '@pop'],\r\n                [/>/, {\r\n                        cases: {\r\n                            '$S2==style': { token: html_1.htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/css' },\r\n                            '$S2==script': {\r\n                                cases: {\r\n                                    '$S3': { token: html_1.htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: '$S3' },\r\n                                    '@default': { token: html_1.htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/javascript' }\r\n                                }\r\n                            },\r\n                            '@default': { token: html_1.htmlTokenTypes.getTag('$S2'), next: '@pop' }\r\n                        }\r\n                    }],\r\n            ],\r\n            embedded: [\r\n                [/[^\"'<]+/, ''],\r\n                [/<\\/(\\w+)\\s*>/, {\r\n                        cases: {\r\n                            '$1==$S2': { token: '@rematch', next: '@pop', nextEmbedded: '@pop' },\r\n                            '@default': ''\r\n                        }\r\n                    }],\r\n                [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n                [/\"/, 'string', '@string.\"'],\r\n                [/'/, 'string', '@string.\\''],\r\n                [/</, '']\r\n            ],\r\n            // scan embedded strings in javascript or css\r\n            string: [\r\n                [/[^\\\\\"']+/, 'string'],\r\n                [/@jsescapes/, 'string.escape'],\r\n                [/\\\\./, 'string.escape.invalid'],\r\n                [/[\"']/, {\r\n                        cases: {\r\n                            '$#==$S2': { token: 'string', next: '@pop' },\r\n                            '@default': 'string'\r\n                        }\r\n                    }]\r\n            ]\r\n        }\r\n    };\r\n    var MarkdownMode = (function (_super) {\r\n        __extends(MarkdownMode, _super);\r\n        function MarkdownMode(descriptor, instantiationService, threadService, modeService, editorWorkerService, configurationService) {\r\n            _super.call(this, descriptor.id);\r\n            var lexer = Compile.compile(exports.language);\r\n            this._modeWorkerManager = new abstractMode_1.ModeWorkerManager(descriptor, 'vs/languages/markdown/common/markdownWorker', 'MarkdownWorker', null, instantiationService);\r\n            this._threadService = threadService;\r\n            this.emitOutputSupport = this;\r\n            this.configSupport = this;\r\n            this.tokenizationSupport = monarchLexer_1.createTokenizationSupport(modeService, this, lexer);\r\n            this.richEditSupport = new richEditSupport_1.RichEditSupport(this.getId(), null, monarchDefinition_1.createRichEditSupport(lexer));\r\n            Modes.SuggestRegistry.register(this.getId(), {\r\n                triggerCharacters: [],\r\n                shouldAutotriggerSuggest: false,\r\n                provideCompletionItems: function (model, position, token) {\r\n                    return async_1.wireCancellationToken(token, editorWorkerService.textualSuggest(model.uri, position));\r\n                }\r\n            }, true);\r\n        }\r\n        MarkdownMode.prototype._worker = function (runner) {\r\n            return this._modeWorkerManager.worker(runner);\r\n        };\r\n        MarkdownMode.prototype.configure = function (options) {\r\n            if (this._threadService.isInMainThread) {\r\n                return this._configureWorkers(options);\r\n            }\r\n            else {\r\n                return this._worker(function (w) { return w._doConfigure(options); });\r\n            }\r\n        };\r\n        MarkdownMode.prototype._configureWorkers = function (options) {\r\n            return this._worker(function (w) { return w._doConfigure(options); });\r\n        };\r\n        MarkdownMode.prototype.getEmitOutput = function (resource, absoluteWorkerResourcesPath) {\r\n            return this._worker(function (w) { return w.getEmitOutput(resource, absoluteWorkerResourcesPath); });\r\n        };\r\n        MarkdownMode.$_configureWorkers = threadService_1.AllWorkersAttr(MarkdownMode, MarkdownMode.prototype._configureWorkers);\r\n        MarkdownMode.$getEmitOutput = threadService_1.OneWorkerAttr(MarkdownMode, MarkdownMode.prototype.getEmitOutput);\r\n        MarkdownMode = __decorate([\r\n            __param(1, instantiation_1.IInstantiationService),\r\n            __param(2, thread_1.IThreadService),\r\n            __param(3, modeService_1.IModeService),\r\n            __param(4, editorWorkerService_1.IEditorWorkerService),\r\n            __param(5, configuration_1.IConfigurationService)\r\n        ], MarkdownMode);\r\n        return MarkdownMode;\r\n    }(abstractMode_1.AbstractMode));\r\n    exports.MarkdownMode = MarkdownMode;\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport const TOKEN_HEADER_LEAD = 'entity.name.tag';\nexport const TOKEN_HEADER = 'entity.name.tag';\nexport const TOKEN_EXT_HEADER = 'entity.other.attribute-name';\nexport const TOKEN_SEPARATOR = 'meta.separator';\nexport const TOKEN_QUOTE = 'comment';\nexport const TOKEN_LIST = 'keyword';\nexport const TOKEN_BLOCK = 'string';\nexport const TOKEN_BLOCK_CODE = 'variable.source';\n\n/*\n// old settings\nexport const TOKEN_HEADER_LEAD = 'white';\nexport const TOKEN_HEADER = 'keyword.1';\nexport const TOKEN_EXT_HEADER = 'keyword.header';\nexport const TOKEN_SEPARATOR = 'keyword.header';\nexport const TOKEN_QUOTE = 'comment';\nexport const TOKEN_LIST = 'string.list';\nexport const TOKEN_BLOCK = 'variable';\nexport const TOKEN_BLOCK_CODE = 'variable.code';\n*/","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport WinJS = require('vs/base/common/winjs.base');\nimport URI from 'vs/base/common/uri';\nimport Types = require('vs/editor/common/modes/monarch/monarchTypes');\nimport Compile = require('vs/editor/common/modes/monarch/monarchCompile');\nimport Modes = require('vs/editor/common/modes');\nimport MarkdownWorker = require('vs/languages/markdown/common/markdownWorker');\nimport {OneWorkerAttr, AllWorkersAttr} from 'vs/platform/thread/common/threadService';\nimport {htmlTokenTypes} from 'vs/languages/html/common/html';\nimport markdownTokenTypes = require('vs/languages/markdown/common/markdownTokenTypes');\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IThreadService} from 'vs/platform/thread/common/thread';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\nimport {IEditorWorkerService} from 'vs/editor/common/services/editorWorkerService';\nimport {AbstractMode, ModeWorkerManager} from 'vs/editor/common/modes/abstractMode';\nimport {createRichEditSupport} from 'vs/editor/common/modes/monarch/monarchDefinition';\nimport {createTokenizationSupport} from 'vs/editor/common/modes/monarch/monarchLexer';\nimport {RichEditSupport} from 'vs/editor/common/modes/supports/richEditSupport';\nimport {wireCancellationToken} from 'vs/base/common/async';\n\nexport const language =\n\t<Types.ILanguage>{\n\t\tdisplayName: 'Markdown',\n\t\tname: 'md',\n\t\tdefaultToken: '',\n\n\t\tautoClosingPairs: [],\n\n\t\tblockCommentStart: '<!--',\n\t\tblockCommentEnd: '-->',\n\n\t\t// escape codes\n\t\tcontrol: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\t\tnoncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n\t\tescapes: /\\\\(?:@control)/,\n\n\t\t// escape codes for javascript/CSS strings\n\t\tjsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n\n\t\t// non matched elements\n\t\tempty: [\n\t\t\t'area', 'base', 'basefont', 'br', 'col', 'frame',\n\t\t\t'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'\n\t\t],\n\n\t\ttokenizer: {\n\t\t\troot: [\n\n\t\t\t\t// headers (with #)\n\t\t\t\t[/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', markdownTokenTypes.TOKEN_HEADER_LEAD, markdownTokenTypes.TOKEN_HEADER, markdownTokenTypes.TOKEN_HEADER]],\n\n\t\t\t\t// headers (with =)\n\t\t\t\t[/^\\s*(=+|\\-+)\\s*$/, markdownTokenTypes.TOKEN_EXT_HEADER],\n\n\t\t\t\t// headers (with ***)\n\t\t\t\t[/^\\s*((\\*[ ]?)+)\\s*$/, markdownTokenTypes.TOKEN_SEPARATOR],\n\n\t\t\t\t// quote\n\t\t\t\t[/^\\s*>+/, markdownTokenTypes.TOKEN_QUOTE],\n\n\t\t\t\t// list (starting with * or number)\n\t\t\t\t[/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, markdownTokenTypes.TOKEN_LIST],\n\n\t\t\t\t// code block (4 spaces indent)\n\t\t\t\t[/^(\\t|[ ]{4})[^ ].*$/, markdownTokenTypes.TOKEN_BLOCK],\n\n\t\t\t\t// code block (3 tilde)\n\t\t\t\t[/^\\s*~{3}\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblock' }],\n\n\t\t\t\t// github style code blocks (with backticks and language)\n\t\t\t\t[/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblockgh', nextEmbedded: '$1' }],\n\n\t\t\t\t// github style code blocks (with backticks but no language)\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@codeblock' }],\n\n\t\t\t\t// markup within lines\n\t\t\t\t{ include: '@linecontent' },\n\t\t\t],\n\n\t\t\tcodeblock: [\n\t\t\t\t[/^\\s*~{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@pop' }],\n\t\t\t\t[/^\\s*`{3}\\s*$/, { token: markdownTokenTypes.TOKEN_BLOCK, next: '@pop' }],\n\t\t\t\t[/.*$/, markdownTokenTypes.TOKEN_BLOCK_CODE],\n\t\t\t],\n\n\t\t\t// github style code blocks\n\t\t\tcodeblockgh: [\n\t\t\t\t[/```\\s*$/, { token: '@rematch', switchTo: '@codeblockghend', nextEmbedded: '@pop' }],\n\t\t\t\t[/[^`]*$/, markdownTokenTypes.TOKEN_BLOCK_CODE],\n\t\t\t],\n\n\t\t\tcodeblockghend: [\n\t\t\t\t[/\\s*```/, { token: markdownTokenTypes.TOKEN_BLOCK_CODE, next: '@pop' }],\n\t\t\t\t[/./, '@rematch', '@pop'],\n\t\t\t],\n\n\t\t\tlinecontent: [\n\n\t\t\t\t// escapes\n\t\t\t\t[/&\\w+;/, 'string.escape'],\n\t\t\t\t[/@escapes/, 'escape'],\n\n\t\t\t\t// various markup\n\t\t\t\t[/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\n\t\t\t\t[/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\n\t\t\t\t[/\\b_[^_]+_\\b/, 'emphasis'],\n\t\t\t\t[/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\n\t\t\t\t[/`([^\\\\`]|@escapes)+`/, 'variable'],\n\n\t\t\t\t// links\n\t\t\t\t[/\\{[^}]+\\}/, 'string.target'],\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\n\t\t\t\t[/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\n\n\t\t\t\t// or html\n\t\t\t\t{ include: 'html' },\n\t\t\t],\n\n\t\t\t// Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n\t\t\t// but currently there is a limitation in Monarch that prevents us from doing it: The opening\n\t\t\t// '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n\t\t\t// HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n\t\t\t// we cannot correctly tokenize it in that mode yet.\n\t\t\thtml: [\n\t\t\t\t// html tags\n\t\t\t\t[/<(\\w+)\\/>/, htmlTokenTypes.getTag('$1')],\n\t\t\t\t[/<(\\w+)/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'@empty': { token: htmlTokenTypes.getTag('$1'), next: '@tag.$1' },\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$1'), bracket: '@open', next: '@tag.$1' }\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[/<\\/(\\w+)\\s*>/, { token: htmlTokenTypes.getTag('$1'), bracket: '@close' }],\n\n\t\t\t\t[/<!--/, 'comment', '@comment']\n\t\t\t],\n\n\t\t\tcomment: [\n\t\t\t\t[/[^<\\-]+/, 'comment.content'],\n\t\t\t\t[/-->/, 'comment', '@pop'],\n\t\t\t\t[/<!--/, 'comment.content.invalid'],\n\t\t\t\t[/[<\\-]/, 'comment.content']\n\t\t\t],\n\n\t\t\t// Almost full HTML tag matching, complete with embedded scripts & styles\n\t\t\ttag: [\n\t\t\t\t[/[ \\t\\r\\n]+/, 'white'],\n\t\t\t\t[/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/(type)(\\s*=\\s*)(')([^']+)(')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE,\n\t\t\t\t\t{ token: htmlTokenTypes.ATTRIB_VALUE, switchTo: '@tag.$S2.$4' },\n\t\t\t\t\thtmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [htmlTokenTypes.ATTRIB_NAME, htmlTokenTypes.DELIM_ASSIGN, htmlTokenTypes.ATTRIB_VALUE]],\n\t\t\t\t[/\\w+/, htmlTokenTypes.ATTRIB_NAME],\n\t\t\t\t[/\\/>/, htmlTokenTypes.getTag('$S2'), '@pop'],\n\t\t\t\t[/>/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$S2==style': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/css' },\n\t\t\t\t\t\t'$S2==script': {\n\t\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t\t'$S3': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: '$S3' },\n\t\t\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), switchTo: '@embedded.$S2', nextEmbedded: 'text/javascript' }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'@default': { token: htmlTokenTypes.getTag('$S2'), next: '@pop' }\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t],\n\n\t\t\tembedded: [\n\t\t\t\t[/[^\"'<]+/, ''],\n\t\t\t\t[/<\\/(\\w+)\\s*>/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$1==$S2': { token: '@rematch', next: '@pop', nextEmbedded: '@pop' },\n\t\t\t\t\t\t'@default': ''\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\n\t\t\t\t[/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\n\t\t\t\t[/\"/, 'string', '@string.\"'],\n\t\t\t\t[/'/, 'string', '@string.\\''],\n\t\t\t\t[/</, '']\n\t\t\t],\n\n\t\t\t// scan embedded strings in javascript or css\n\t\t\tstring: [\n\t\t\t\t[/[^\\\\\"']+/, 'string'],\n\t\t\t\t[/@jsescapes/, 'string.escape'],\n\t\t\t\t[/\\\\./, 'string.escape.invalid'],\n\t\t\t\t[/[\"']/, {\n\t\t\t\t\tcases: {\n\t\t\t\t\t\t'$#==$S2': { token: 'string', next: '@pop' },\n\t\t\t\t\t\t'@default': 'string'\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t]\n\t\t}\n\t};\n\nexport class MarkdownMode extends AbstractMode implements Modes.IEmitOutputSupport {\n\n\tpublic emitOutputSupport: Modes.IEmitOutputSupport;\n\tpublic configSupport:Modes.IConfigurationSupport;\n\tpublic tokenizationSupport: Modes.ITokenizationSupport;\n\tpublic richEditSupport: Modes.IRichEditSupport;\n\n\tprivate _modeWorkerManager: ModeWorkerManager<MarkdownWorker.MarkdownWorker>;\n\tprivate _threadService:IThreadService;\n\n\tconstructor(\n\t\tdescriptor: Modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThreadService threadService: IThreadService,\n\t\t@IModeService modeService: IModeService,\n\t\t@IEditorWorkerService editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(descriptor.id);\n\t\tlet lexer = Compile.compile(language);\n\n\t\tthis._modeWorkerManager = new ModeWorkerManager<MarkdownWorker.MarkdownWorker>(descriptor, 'vs/languages/markdown/common/markdownWorker', 'MarkdownWorker', null, instantiationService);\n\t\tthis._threadService = threadService;\n\n\t\tthis.emitOutputSupport = this;\n\t\tthis.configSupport = this;\n\n\t\tthis.tokenizationSupport = createTokenizationSupport(modeService, this, lexer);\n\n\t\tthis.richEditSupport = new RichEditSupport(this.getId(), null, createRichEditSupport(lexer));\n\n\t\tModes.SuggestRegistry.register(this.getId(), {\n\t\t\ttriggerCharacters: [],\n\t\t\tshouldAutotriggerSuggest: false,\n\t\t\tprovideCompletionItems: (model, position, token) => {\n\t\t\t\treturn wireCancellationToken(token, editorWorkerService.textualSuggest(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\t}\n\n\tprivate _worker<T>(runner:(worker:MarkdownWorker.MarkdownWorker)=>WinJS.TPromise<T>): WinJS.TPromise<T> {\n\t\treturn this._modeWorkerManager.worker(runner);\n\t}\n\n\tpublic configure(options:any): WinJS.TPromise<void> {\n\t\tif (this._threadService.isInMainThread) {\n\t\t\treturn this._configureWorkers(options);\n\t\t} else {\n\t\t\treturn this._worker((w) => w._doConfigure(options));\n\t\t}\n\t}\n\n\tstatic $_configureWorkers = AllWorkersAttr(MarkdownMode, MarkdownMode.prototype._configureWorkers);\n\tprivate _configureWorkers(options:any): WinJS.TPromise<void> {\n\t\treturn this._worker((w) => w._doConfigure(options));\n\t}\n\n\tstatic $getEmitOutput = OneWorkerAttr(MarkdownMode, MarkdownMode.prototype.getEmitOutput);\n\tpublic getEmitOutput(resource: URI, absoluteWorkerResourcesPath?: string): WinJS.TPromise<Modes.IEmitOutput> { // TODO@Ben technical debt: worker cannot resolve paths absolute\n\t\treturn this._worker((w) => w.getEmitOutput(resource, absoluteWorkerResourcesPath));\n\t}\n}\n"]}