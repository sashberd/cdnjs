{"version":3,"sources":["vs/languages/sass/common/sassWorker.js","vs/languages/sass/common/file:/C:/Alex/src/vscode/src/vs/languages/sass/common/parser/sassScanner.ts","vs/languages/sass/common/fake","vs/languages/sass/common/file:/C:/Alex/src/vscode/src/vs/languages/sass/common/parser/sassErrors.ts","vs/languages/sass/common/file:/C:/Alex/src/vscode/src/vs/languages/sass/common/parser/sassParser.ts","vs/languages/sass/common/file:/C:/Alex/src/vscode/src/vs/languages/sass/common/services/intelliSense.ts","vs/languages/sass/common/file:/C:/Alex/src/vscode/src/vs/languages/sass/common/sassWorker.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","scanner","_FSL","charCodeAt","_NWL","_CAR","_LFD","_DLR","_HSH","_CUL","_EQS","_BNG","_LAN","_RAN","_DOT","customTokenValue","TokenType","CustomToken","VariableName","InterpolationFunction","Default","EqualsOperator","NotEqualsOperator","GreaterEqualsOperator","SmallerEqualsOperator","Ellipsis","SassScanner","_super","apply","arguments","scan","triviaToken","trivia","offset","stream","pos","advanceIfChar","content","ident","finishToken","join","goBackTo","advanceIfChars","Delim","call","comment","advanceWhileChar","ch","Scanner","nls","data","SassIssueType","id","message","ParseError","FromExpected","localize","ThroughOrToExpected","InExpected","sassScanner","sassErrors","cssParser","nodes","errors","SassParser","_parseStylesheetStatement","_parseVariableDeclaration","_parseWarnAndDebug","_parseControlStatement","_parseMixinDeclaration","_parseMixinContent","_parseMixinReference","_parseFunctionDeclaration","_parseImport","node","Import","accept","AtKeyword","URI","String","finish","URIOrStringExpected","Comma","setMedialist","_parseMediaList","panic","VariableDeclaration","setVariable","_parseVariable","Colon","colonPosition","prevToken","setValue","_parseExpr","Exclamation","Ident","UnknownKeyword","peek","SemiColon","semicolonPosition","token","VariableValueExpected","ColonExpected","_parseMediaFeatureName","_parseFunction","_parseIdent","_parseKeyframeSelector","Variable","referenceTypes","Identifier","hasContent","addChild","_parseInterpolation","hasWhitespace","_parseTerm","term","Term","setExpression","Interpolation","_parseBinaryExpr","CurlyR","RightCurlyExpected","ExpressionExpected","_parseOperator","createNode","NodeType","Operator","consumeToken","_parseUnaryOperator","Node","_parseRuleSetDeclaration","_parseKeyframe","_parseMedia","_parseFontFace","_parseExtends","_tryParseRuleset","_parseDeclaration","resyncStopTokens","Declaration","setProperty","_parseProperty","_parsePrio","CurlyL","setNestedProperties","_parseNestedProperties","PropertyValueExpected","NestedProperties","_parseBody","bind","ExtendsReference","setSelector","_parseSimpleSelector","SelectorExpected","_parseSimpleSelectorBody","_parseSelectorCombinator","_parseSelectorPlaceholder","SelectorCombinator","SelectorPlaceholder","Debug","parseStatement","_parseIfStatement","_parseForStatement","_parseEachStatement","_parseWhileStatement","_internalParseIfStatement","IfStatement","setElseClause","elseNode","ElseStatement","ForStatement","VariableNameExpected","EachStatement","WhileStatement","_parseFunctionBodyDeclaration","_parseReturnStatement","FunctionDeclaration","setIdentifier","ReferenceType","Function","IdentifierExpected","ParenthesisL","LeftParenthesisExpected","getParameters","_parseParameterDeclaration","ParenthesisR","RightParenthesisExpected","ReturnStatement","MixinDeclaration","Mixin","FunctionParameter","setDefaultValue","MixinContent","MixinReference","getArguments","_parseFunctionArgument","BodyDeclaration","_parseMixinReferenceBodyStatement","setContent","FunctionArgument","mark","argument","restoreAtMark","Parser","cssIntellisense","SASSIntellisense","createFunctionProposals","proposals","result","replaceFunction","match","p1","variableDefaults","forEach","push","label","func","substr","indexOf","typeLabel","documentationLabel","desc","codeSnippet","replace","type","getCompletionsForSelector","ruleSet","selectorFuncs","getTermProposals","builtInFuncs","getColorProposals","entry","colorProposals","getCompletionsForDeclarationProperty","$red","$green","$blue","$alpha","$color","$weight","$hue","$saturation","$lightness","$degrees","$amount","$string","$substring","$number","$limit","CSSIntellisense","cssWorker","sassParser","sassIntellisense","SassWorker","createIntellisense","createParser","CSSWorker"],"mappings":"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","file":"vs/languages/sass/common/sassWorker.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.2.3(84e204b238a1eff25d4c6f611fdcd76a494005a7)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/sass/common/parser/sassScanner\", [\"require\", \"exports\", 'vs/languages/css/common/parser/cssScanner'], function (require, exports, scanner) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var _FSL = '/'.charCodeAt(0);\r\n    var _NWL = '\\n'.charCodeAt(0);\r\n    var _CAR = '\\r'.charCodeAt(0);\r\n    var _LFD = '\\f'.charCodeAt(0);\r\n    var _DLR = '$'.charCodeAt(0);\r\n    var _HSH = '#'.charCodeAt(0);\r\n    var _CUL = '{'.charCodeAt(0);\r\n    var _EQS = '='.charCodeAt(0);\r\n    var _BNG = '!'.charCodeAt(0);\r\n    var _LAN = '<'.charCodeAt(0);\r\n    var _RAN = '>'.charCodeAt(0);\r\n    var _DOT = '.'.charCodeAt(0);\r\n    var customTokenValue = scanner.TokenType.CustomToken;\r\n    exports.VariableName = customTokenValue++;\r\n    exports.InterpolationFunction = customTokenValue++;\r\n    exports.Default = customTokenValue++;\r\n    exports.EqualsOperator = customTokenValue++;\r\n    exports.NotEqualsOperator = customTokenValue++;\r\n    exports.GreaterEqualsOperator = customTokenValue++;\r\n    exports.SmallerEqualsOperator = customTokenValue++;\r\n    exports.Ellipsis = customTokenValue++;\r\n    var SassScanner = (function (_super) {\r\n        __extends(SassScanner, _super);\r\n        function SassScanner() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        SassScanner.prototype.scan = function () {\r\n            // processes all whitespaces and comments\r\n            var triviaToken = this.trivia();\r\n            if (triviaToken !== null) {\r\n                return triviaToken;\r\n            }\r\n            var offset = this.stream.pos();\r\n            // sass variable\r\n            if (this.stream.advanceIfChar(_DLR)) {\r\n                var content = ['$'];\r\n                if (this.ident(content)) {\r\n                    return this.finishToken(offset, exports.VariableName, content.join(''));\r\n                }\r\n                else {\r\n                    this.stream.goBackTo(offset);\r\n                }\r\n            }\r\n            // Sass: interpolation function #{..})\r\n            if (this.stream.advanceIfChars([_HSH, _CUL])) {\r\n                return this.finishToken(offset, exports.InterpolationFunction);\r\n            }\r\n            // operator ==\r\n            if (this.stream.advanceIfChars([_EQS, _EQS])) {\r\n                return this.finishToken(offset, exports.EqualsOperator);\r\n            }\r\n            // operator !=\r\n            if (this.stream.advanceIfChars([_BNG, _EQS])) {\r\n                return this.finishToken(offset, exports.NotEqualsOperator);\r\n            }\r\n            // operators <, <=\r\n            if (this.stream.advanceIfChar(_LAN)) {\r\n                if (this.stream.advanceIfChar(_EQS)) {\r\n                    return this.finishToken(offset, exports.SmallerEqualsOperator);\r\n                }\r\n                return this.finishToken(offset, scanner.TokenType.Delim);\r\n            }\r\n            // ooperators >, >=\r\n            if (this.stream.advanceIfChar(_RAN)) {\r\n                if (this.stream.advanceIfChar(_EQS)) {\r\n                    return this.finishToken(offset, exports.GreaterEqualsOperator);\r\n                }\r\n                return this.finishToken(offset, scanner.TokenType.Delim);\r\n            }\r\n            // ellipis\r\n            if (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {\r\n                return this.finishToken(offset, exports.Ellipsis);\r\n            }\r\n            return _super.prototype.scan.call(this);\r\n        };\r\n        SassScanner.prototype.comment = function () {\r\n            if (_super.prototype.comment.call(this)) {\r\n                return true;\r\n            }\r\n            if (this.stream.advanceIfChars([_FSL, _FSL])) {\r\n                this.stream.advanceWhileChar(function (ch) {\r\n                    switch (ch) {\r\n                        case _NWL:\r\n                        case _CAR:\r\n                        case _LFD:\r\n                            return false;\r\n                        default:\r\n                            return true;\r\n                    }\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n        return SassScanner;\r\n    }(scanner.Scanner));\r\n    exports.SassScanner = SassScanner;\r\n});\r\n\ndefine(\"vs/nls!vs/languages/sass/common/parser/sassErrors\",['vs/nls', 'vs/nls!vs/languages/sass/common/sassWorker'], function(nls, data) { return nls.create(\"vs/languages/sass/common/parser/sassErrors\", data); });\ndefine(\"vs/languages/sass/common/parser/sassErrors\", [\"require\", \"exports\", 'vs/nls!vs/languages/sass/common/parser/sassErrors'], function (require, exports, nls) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var SassIssueType = (function () {\r\n        function SassIssueType(id, message) {\r\n            this.id = id;\r\n            this.message = message;\r\n        }\r\n        return SassIssueType;\r\n    }());\r\n    exports.SassIssueType = SassIssueType;\r\n    exports.ParseError = {\r\n        FromExpected: new SassIssueType('sass-fromexpected', nls.localize(0, null)),\r\n        ThroughOrToExpected: new SassIssueType('sass-throughexpected', nls.localize(1, null)),\r\n        InExpected: new SassIssueType('sass-fromexpected', nls.localize(2, null)),\r\n    };\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/sass/common/parser/sassParser\", [\"require\", \"exports\", './sassScanner', './sassErrors', 'vs/languages/css/common/parser/cssScanner', 'vs/languages/css/common/parser/cssParser', 'vs/languages/css/common/parser/cssNodes', 'vs/languages/css/common/parser/cssErrors'], function (require, exports, sassScanner, sassErrors, scanner, cssParser, nodes, errors) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    /// <summary>\r\n    /// A parser for Sass\r\n    /// http://sass-lang.com/documentation/file.SASS_REFERENCE.html\r\n    /// </summary>\r\n    var SassParser = (function (_super) {\r\n        __extends(SassParser, _super);\r\n        function SassParser() {\r\n            _super.call(this, new sassScanner.SassScanner());\r\n        }\r\n        SassParser.prototype._parseStylesheetStatement = function () {\r\n            return _super.prototype._parseStylesheetStatement.call(this)\r\n                || this._parseVariableDeclaration()\r\n                || this._parseWarnAndDebug()\r\n                || this._parseControlStatement()\r\n                || this._parseMixinDeclaration()\r\n                || this._parseMixinContent()\r\n                || this._parseMixinReference() // @include\r\n                || this._parseFunctionDeclaration();\r\n        };\r\n        SassParser.prototype._parseImport = function () {\r\n            var node = this.create(nodes.Import);\r\n            if (!this.accept(scanner.TokenType.AtKeyword, '@import')) {\r\n                return null;\r\n            }\r\n            if (!this.accept(scanner.TokenType.URI) && !this.accept(scanner.TokenType.String)) {\r\n                return this.finish(node, errors.ParseError.URIOrStringExpected);\r\n            }\r\n            while (this.accept(scanner.TokenType.Comma)) {\r\n                if (!this.accept(scanner.TokenType.URI) && !this.accept(scanner.TokenType.String)) {\r\n                    return this.finish(node, errors.ParseError.URIOrStringExpected);\r\n                }\r\n            }\r\n            node.setMedialist(this._parseMediaList());\r\n            return this.finish(node);\r\n        };\r\n        // Sass variables: $font-size: 12px;\r\n        SassParser.prototype._parseVariableDeclaration = function (panic) {\r\n            if (panic === void 0) { panic = []; }\r\n            var node = this.create(nodes.VariableDeclaration);\r\n            if (!node.setVariable(this._parseVariable())) {\r\n                return null;\r\n            }\r\n            if (!this.accept(scanner.TokenType.Colon, ':')) {\r\n                return this.finish(node, errors.ParseError.ColonExpected);\r\n            }\r\n            node.colonPosition = this.prevToken.offset;\r\n            if (!node.setValue(this._parseExpr())) {\r\n                return this.finish(node, errors.ParseError.VariableValueExpected, [], panic);\r\n            }\r\n            if (this.accept(scanner.TokenType.Exclamation)) {\r\n                if (!this.accept(scanner.TokenType.Ident, 'default', true)) {\r\n                    return this.finish(node, errors.ParseError.UnknownKeyword);\r\n                }\r\n            }\r\n            if (this.peek(scanner.TokenType.SemiColon)) {\r\n                node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseMediaFeatureName = function () {\r\n            return this._parseFunction() || this._parseIdent() || this._parseVariable(); // first function, the indent\r\n        };\r\n        SassParser.prototype._parseKeyframeSelector = function () {\r\n            return _super.prototype._parseKeyframeSelector.call(this) || this._parseMixinContent();\r\n        };\r\n        SassParser.prototype._parseVariable = function () {\r\n            var node = this.create(nodes.Variable);\r\n            if (!this.accept(sassScanner.VariableName)) {\r\n                return null;\r\n            }\r\n            return node;\r\n        };\r\n        SassParser.prototype._parseIdent = function (referenceTypes) {\r\n            var node = this.create(nodes.Identifier);\r\n            node.referenceTypes = referenceTypes;\r\n            var hasContent = false;\r\n            while (this.accept(scanner.TokenType.Ident) || node.addChild(this._parseInterpolation())) {\r\n                hasContent = true;\r\n                if (!this.hasWhitespace() && this.accept(scanner.TokenType.Delim, '-')) {\r\n                }\r\n                if (this.hasWhitespace()) {\r\n                    break;\r\n                }\r\n            }\r\n            return hasContent ? this.finish(node) : null;\r\n        };\r\n        SassParser.prototype._parseTerm = function () {\r\n            var term = _super.prototype._parseTerm.call(this);\r\n            if (term) {\r\n                return term;\r\n            }\r\n            term = this.create(nodes.Term);\r\n            if (term.setExpression(this._parseVariable())) {\r\n                return this.finish(term);\r\n            }\r\n            return null;\r\n        };\r\n        SassParser.prototype._parseInterpolation = function () {\r\n            var node = this.create(nodes.Interpolation);\r\n            if (this.accept(sassScanner.InterpolationFunction)) {\r\n                if (!node.addChild(this._parseBinaryExpr())) {\r\n                    return this.finish(node, errors.ParseError.ExpressionExpected);\r\n                }\r\n                if (!this.accept(scanner.TokenType.CurlyR)) {\r\n                    return this.finish(node, errors.ParseError.RightCurlyExpected);\r\n                }\r\n                return this.finish(node);\r\n            }\r\n            return null;\r\n        };\r\n        SassParser.prototype._parseOperator = function () {\r\n            var node = this.createNode(nodes.NodeType.Operator);\r\n            if (this.peek(sassScanner.EqualsOperator) || this.peek(sassScanner.NotEqualsOperator)\r\n                || this.peek(sassScanner.GreaterEqualsOperator) || this.peek(sassScanner.SmallerEqualsOperator)\r\n                || this.peek(scanner.TokenType.Delim, '>') || this.peek(scanner.TokenType.Delim, '<')\r\n                || this.peek(scanner.TokenType.Ident, 'and') || this.peek(scanner.TokenType.Ident, 'or')\r\n                || this.peek(scanner.TokenType.Delim, '%')) {\r\n                var node = this.createNode(nodes.NodeType.Operator);\r\n                this.consumeToken();\r\n                return this.finish(node);\r\n            }\r\n            return _super.prototype._parseOperator.call(this);\r\n        };\r\n        SassParser.prototype._parseUnaryOperator = function () {\r\n            if (this.peek(scanner.TokenType.Ident, 'not')) {\r\n                var node = this.create(nodes.Node);\r\n                this.consumeToken();\r\n                return this.finish(node);\r\n            }\r\n            return _super.prototype._parseUnaryOperator.call(this);\r\n        };\r\n        SassParser.prototype._parseRuleSetDeclaration = function () {\r\n            if (this.peek(scanner.TokenType.AtKeyword)) {\r\n                return this._parseKeyframe() // nested @keyframe\r\n                    || this._parseImport() // nested @import\r\n                    || this._parseMedia() // nested @media\r\n                    || this._parseFontFace() // nested @font-face\r\n                    || this._parseWarnAndDebug() // @warn and @debug statements\r\n                    || this._parseControlStatement() // @if, @while, @for, @each\r\n                    || this._parseFunctionDeclaration() // @function\r\n                    || this._parseExtends() // @extends\r\n                    || this._parseMixinReference() // @include\r\n                    || this._parseMixinContent() // @content\r\n                    || this._parseMixinDeclaration(); // nested @mixin\r\n            }\r\n            return this._parseVariableDeclaration() // variable declaration\r\n                || this._tryParseRuleset(true) // nested ruleset\r\n                || _super.prototype._parseRuleSetDeclaration.call(this); // try css ruleset declaration as last so in the error case, the ast will contain a declaration\r\n        };\r\n        SassParser.prototype._parseDeclaration = function (resyncStopTokens) {\r\n            var node = this.create(nodes.Declaration);\r\n            if (!node.setProperty(this._parseProperty())) {\r\n                return null;\r\n            }\r\n            if (!this.accept(scanner.TokenType.Colon, ':')) {\r\n                return this.finish(node, errors.ParseError.ColonExpected, [scanner.TokenType.Colon], resyncStopTokens);\r\n            }\r\n            node.colonPosition = this.prevToken.offset;\r\n            var hasContent = false;\r\n            if (node.setValue(this._parseExpr())) {\r\n                hasContent = true;\r\n                node.addChild(this._parsePrio());\r\n            }\r\n            if (this.peek(scanner.TokenType.CurlyL)) {\r\n                node.setNestedProperties(this._parseNestedProperties());\r\n            }\r\n            else {\r\n                if (!hasContent) {\r\n                    return this.finish(node, errors.ParseError.PropertyValueExpected);\r\n                }\r\n            }\r\n            if (this.peek(scanner.TokenType.SemiColon)) {\r\n                node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseNestedProperties = function () {\r\n            var node = this.create(nodes.NestedProperties);\r\n            return this._parseBody(node, this._parseDeclaration.bind(this));\r\n        };\r\n        SassParser.prototype._parseExtends = function () {\r\n            var node = this.create(nodes.ExtendsReference);\r\n            if (this.accept(scanner.TokenType.AtKeyword, '@extend')) {\r\n                if (!node.setSelector(this._parseSimpleSelector())) {\r\n                    return this.finish(node, errors.ParseError.SelectorExpected);\r\n                }\r\n                if (this.accept(scanner.TokenType.Exclamation)) {\r\n                    if (!this.accept(scanner.TokenType.Ident, 'optional', true)) {\r\n                        return this.finish(node, errors.ParseError.UnknownKeyword);\r\n                    }\r\n                }\r\n                return this.finish(node);\r\n            }\r\n            return null;\r\n        };\r\n        SassParser.prototype._parseSimpleSelectorBody = function () {\r\n            return this._parseSelectorCombinator() || this._parseSelectorPlaceholder() || _super.prototype._parseSimpleSelectorBody.call(this);\r\n        };\r\n        SassParser.prototype._parseSelectorCombinator = function () {\r\n            var node = this.createNode(nodes.NodeType.SelectorCombinator);\r\n            if (this.accept(scanner.TokenType.Delim, '&')) {\r\n                while (!this.hasWhitespace() && (this.accept(scanner.TokenType.Delim, '-') || node.addChild(this._parseIdent()) || this.accept(scanner.TokenType.Delim, '&'))) {\r\n                }\r\n                return this.finish(node);\r\n            }\r\n            return null;\r\n        };\r\n        SassParser.prototype._parseSelectorPlaceholder = function () {\r\n            var node = this.createNode(nodes.NodeType.SelectorPlaceholder);\r\n            if (this.accept(scanner.TokenType.Delim, '%')) {\r\n                this._parseIdent();\r\n                return this.finish(node);\r\n            }\r\n            return null;\r\n        };\r\n        SassParser.prototype._parseWarnAndDebug = function () {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@debug') && !this.peek(scanner.TokenType.AtKeyword, '@warn')) {\r\n                return null;\r\n            }\r\n            var node = this.createNode(nodes.NodeType.Debug);\r\n            this.consumeToken(); // @debug or @warn\r\n            node.addChild(this._parseExpr()); // optional\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseControlStatement = function (parseStatement) {\r\n            if (parseStatement === void 0) { parseStatement = this._parseRuleSetDeclaration.bind(this); }\r\n            if (!this.peek(scanner.TokenType.AtKeyword)) {\r\n                return null;\r\n            }\r\n            return this._parseIfStatement(parseStatement) || this._parseForStatement(parseStatement)\r\n                || this._parseEachStatement(parseStatement) || this._parseWhileStatement(parseStatement);\r\n        };\r\n        SassParser.prototype._parseIfStatement = function (parseStatement) {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@if')) {\r\n                return null;\r\n            }\r\n            return this._internalParseIfStatement(parseStatement);\r\n        };\r\n        SassParser.prototype._internalParseIfStatement = function (parseStatement) {\r\n            var node = this.create(nodes.IfStatement);\r\n            this.consumeToken(); // @if or if\r\n            if (!node.setExpression(this._parseBinaryExpr())) {\r\n                return this.finish(node, errors.ParseError.ExpressionExpected);\r\n            }\r\n            this._parseBody(node, parseStatement);\r\n            if (this.accept(scanner.TokenType.AtKeyword, '@else')) {\r\n                if (this.peek(scanner.TokenType.Ident, 'if')) {\r\n                    node.setElseClause(this._internalParseIfStatement(parseStatement));\r\n                }\r\n                else if (this.peek(scanner.TokenType.CurlyL)) {\r\n                    var elseNode = this.create(nodes.ElseStatement);\r\n                    this._parseBody(elseNode, parseStatement);\r\n                    node.setElseClause(elseNode);\r\n                }\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseForStatement = function (parseStatement) {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@for')) {\r\n                return null;\r\n            }\r\n            var node = this.create(nodes.ForStatement);\r\n            this.consumeToken(); // @for\r\n            if (!node.setVariable(this._parseVariable())) {\r\n                return this.finish(node, errors.ParseError.VariableNameExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (!this.accept(scanner.TokenType.Ident, 'from')) {\r\n                return this.finish(node, sassErrors.ParseError.FromExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (!node.addChild(this._parseBinaryExpr())) {\r\n                return this.finish(node, errors.ParseError.ExpressionExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (!this.accept(scanner.TokenType.Ident, 'to') && !this.accept(scanner.TokenType.Ident, 'through')) {\r\n                return this.finish(node, sassErrors.ParseError.ThroughOrToExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (!node.addChild(this._parseBinaryExpr())) {\r\n                return this.finish(node, errors.ParseError.ExpressionExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            return this._parseBody(node, parseStatement);\r\n        };\r\n        SassParser.prototype._parseEachStatement = function (parseStatement) {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@each')) {\r\n                return null;\r\n            }\r\n            var node = this.create(nodes.EachStatement);\r\n            this.consumeToken(); // @each\r\n            if (!node.setVariable(this._parseVariable())) {\r\n                return this.finish(node, errors.ParseError.VariableNameExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (!this.accept(scanner.TokenType.Ident, 'in')) {\r\n                return this.finish(node, sassErrors.ParseError.InExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (!node.addChild(this._parseExpr())) {\r\n                return this.finish(node, errors.ParseError.ExpressionExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            return this._parseBody(node, parseStatement);\r\n        };\r\n        SassParser.prototype._parseWhileStatement = function (parseStatement) {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@while')) {\r\n                return null;\r\n            }\r\n            var node = this.create(nodes.WhileStatement);\r\n            this.consumeToken(); // @while\r\n            if (!node.addChild(this._parseBinaryExpr())) {\r\n                return this.finish(node, errors.ParseError.ExpressionExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            return this._parseBody(node, parseStatement);\r\n        };\r\n        SassParser.prototype._parseFunctionBodyDeclaration = function () {\r\n            return this._parseVariableDeclaration() || this._parseReturnStatement()\r\n                || this._parseControlStatement(this._parseFunctionBodyDeclaration.bind(this));\r\n        };\r\n        SassParser.prototype._parseFunctionDeclaration = function () {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@function')) {\r\n                return null;\r\n            }\r\n            var node = this.create(nodes.FunctionDeclaration);\r\n            this.consumeToken(); // @function\r\n            if (!node.setIdentifier(this._parseIdent([nodes.ReferenceType.Function]))) {\r\n                return this.finish(node, errors.ParseError.IdentifierExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (!this.accept(scanner.TokenType.ParenthesisL)) {\r\n                return this.finish(node, errors.ParseError.LeftParenthesisExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (node.getParameters().addChild(this._parseParameterDeclaration())) {\r\n                while (this.accept(scanner.TokenType.Comma)) {\r\n                    if (!node.getParameters().addChild(this._parseParameterDeclaration())) {\r\n                        return this.finish(node, errors.ParseError.VariableNameExpected);\r\n                    }\r\n                }\r\n            }\r\n            if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                return this.finish(node, errors.ParseError.RightParenthesisExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            return this._parseBody(node, this._parseFunctionBodyDeclaration.bind(this));\r\n        };\r\n        SassParser.prototype._parseReturnStatement = function () {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@return')) {\r\n                return null;\r\n            }\r\n            var node = this.createNode(nodes.NodeType.ReturnStatement);\r\n            this.consumeToken(); // @function\r\n            if (!node.addChild(this._parseExpr())) {\r\n                return this.finish(node, errors.ParseError.ExpressionExpected);\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseMixinDeclaration = function () {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@mixin')) {\r\n                return null;\r\n            }\r\n            var node = this.create(nodes.MixinDeclaration);\r\n            this.consumeToken();\r\n            if (!node.setIdentifier(this._parseIdent([nodes.ReferenceType.Mixin]))) {\r\n                return this.finish(node, errors.ParseError.IdentifierExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (this.accept(scanner.TokenType.ParenthesisL)) {\r\n                if (node.getParameters().addChild(this._parseParameterDeclaration())) {\r\n                    while (this.accept(scanner.TokenType.Comma)) {\r\n                        if (!node.getParameters().addChild(this._parseParameterDeclaration())) {\r\n                            return this.finish(node, errors.ParseError.VariableNameExpected);\r\n                        }\r\n                    }\r\n                }\r\n                if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                    return this.finish(node, errors.ParseError.RightParenthesisExpected, [scanner.TokenType.CurlyR]);\r\n                }\r\n            }\r\n            return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));\r\n        };\r\n        SassParser.prototype._parseParameterDeclaration = function () {\r\n            var node = this.create(nodes.FunctionParameter);\r\n            if (!node.setIdentifier(this._parseVariable())) {\r\n                return null;\r\n            }\r\n            if (this.accept(sassScanner.Ellipsis)) {\r\n            }\r\n            if (this.accept(scanner.TokenType.Colon)) {\r\n                if (!node.setDefaultValue(this._parseExpr(true))) {\r\n                    return this.finish(node, errors.ParseError.VariableValueExpected, [], [scanner.TokenType.Comma, scanner.TokenType.ParenthesisR]);\r\n                }\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseMixinContent = function () {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@content')) {\r\n                return null;\r\n            }\r\n            var node = this.createNode(nodes.NodeType.MixinContent);\r\n            this.consumeToken();\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseMixinReference = function () {\r\n            if (!this.peek(scanner.TokenType.AtKeyword, '@include')) {\r\n                return null;\r\n            }\r\n            var node = this.create(nodes.MixinReference);\r\n            this.consumeToken();\r\n            if (!node.setIdentifier(this._parseIdent([nodes.ReferenceType.Mixin]))) {\r\n                return this.finish(node, errors.ParseError.IdentifierExpected, [scanner.TokenType.CurlyR]);\r\n            }\r\n            if (this.accept(scanner.TokenType.ParenthesisL)) {\r\n                if (node.getArguments().addChild(this._parseFunctionArgument())) {\r\n                    while (this.accept(scanner.TokenType.Comma)) {\r\n                        if (!node.getArguments().addChild(this._parseFunctionArgument())) {\r\n                            return this.finish(node, errors.ParseError.ExpressionExpected);\r\n                        }\r\n                    }\r\n                }\r\n                if (!this.accept(scanner.TokenType.ParenthesisR)) {\r\n                    return this.finish(node, errors.ParseError.RightParenthesisExpected);\r\n                }\r\n            }\r\n            if (this.peek(scanner.TokenType.CurlyL)) {\r\n                var content = this.create(nodes.BodyDeclaration);\r\n                this._parseBody(content, this._parseMixinReferenceBodyStatement.bind(this));\r\n                node.setContent(content);\r\n            }\r\n            return this.finish(node);\r\n        };\r\n        SassParser.prototype._parseMixinReferenceBodyStatement = function () {\r\n            return this._parseRuleSetDeclaration() || this._parseKeyframeSelector();\r\n        };\r\n        SassParser.prototype._parseFunctionArgument = function () {\r\n            // [variableName ':'] expression | variableName '...'\r\n            var node = this.create(nodes.FunctionArgument);\r\n            var pos = this.mark();\r\n            var argument = this._parseVariable();\r\n            if (argument) {\r\n                if (!this.accept(scanner.TokenType.Colon)) {\r\n                    if (this.accept(sassScanner.Ellipsis)) {\r\n                        node.setValue(argument);\r\n                        return this.finish(node);\r\n                    }\r\n                    else {\r\n                        this.restoreAtMark(pos);\r\n                    }\r\n                }\r\n                else {\r\n                    node.setIdentifier(argument);\r\n                }\r\n            }\r\n            if (node.setValue(this._parseExpr(true))) {\r\n                return this.finish(node);\r\n            }\r\n            return null;\r\n        };\r\n        return SassParser;\r\n    }(cssParser.Parser));\r\n    exports.SassParser = SassParser;\r\n});\r\n\ndefine(\"vs/nls!vs/languages/sass/common/services/intelliSense\",['vs/nls', 'vs/nls!vs/languages/sass/common/sassWorker'], function(nls, data) { return nls.create(\"vs/languages/sass/common/services/intelliSense\", data); });\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/sass/common/services/intelliSense\", [\"require\", \"exports\", 'vs/languages/css/common/services/intelliSense', 'vs/nls!vs/languages/sass/common/services/intelliSense'], function (require, exports, cssIntellisense, nls) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var SASSIntellisense = (function (_super) {\r\n        __extends(SASSIntellisense, _super);\r\n        function SASSIntellisense() {\r\n            _super.call(this, '$');\r\n        }\r\n        SASSIntellisense.prototype.createFunctionProposals = function (proposals, result) {\r\n            var replaceFunction = function (match, p1) { return p1 + ': {{' + (SASSIntellisense.variableDefaults[p1] || '') + '}}'; };\r\n            proposals.forEach(function (p) {\r\n                result.push({\r\n                    label: p.func.substr(0, p.func.indexOf('(')),\r\n                    typeLabel: p.func,\r\n                    documentationLabel: p.desc,\r\n                    codeSnippet: p.func.replace(/\\[?(\\$\\w+)\\]?/g, replaceFunction),\r\n                    type: 'function'\r\n                });\r\n            });\r\n            return result;\r\n        };\r\n        SASSIntellisense.prototype.getCompletionsForSelector = function (ruleSet, result) {\r\n            this.createFunctionProposals(SASSIntellisense.selectorFuncs, result);\r\n            return _super.prototype.getCompletionsForSelector.call(this, ruleSet, result);\r\n        };\r\n        SASSIntellisense.prototype.getTermProposals = function (result) {\r\n            this.createFunctionProposals(SASSIntellisense.builtInFuncs, result);\r\n            return _super.prototype.getTermProposals.call(this, result);\r\n        };\r\n        SASSIntellisense.prototype.getColorProposals = function (entry, result) {\r\n            this.createFunctionProposals(SASSIntellisense.colorProposals, result);\r\n            return _super.prototype.getColorProposals.call(this, entry, result);\r\n        };\r\n        SASSIntellisense.prototype.getCompletionsForDeclarationProperty = function (result) {\r\n            this.getCompletionsForSelector(null, result);\r\n            return _super.prototype.getCompletionsForDeclarationProperty.call(this, result);\r\n        };\r\n        SASSIntellisense.variableDefaults = {\r\n            '$red': '1',\r\n            '$green': '2',\r\n            '$blue': '3',\r\n            '$alpha': '1.0',\r\n            '$color': '$color',\r\n            '$weight': '0.5',\r\n            '$hue': '0',\r\n            '$saturation': '0%',\r\n            '$lightness': '0%',\r\n            '$degrees': '0',\r\n            '$amount': '0',\r\n            '$string': '\"\"',\r\n            '$substring': '\"s\"',\r\n            '$number': '0',\r\n            '$limit': '1'\r\n        };\r\n        SASSIntellisense.colorProposals = [\r\n            { func: 'red($color)', desc: nls.localize(0, null) },\r\n            { func: 'green($color)', desc: nls.localize(1, null) },\r\n            { func: 'blue($color)', desc: nls.localize(2, null) },\r\n            { func: 'mix($color, $color, [$weight])', desc: nls.localize(3, null) },\r\n            { func: 'hue($color)', desc: nls.localize(4, null) },\r\n            { func: 'saturation($color)', desc: nls.localize(5, null) },\r\n            { func: 'lightness($color)', desc: nls.localize(6, null) },\r\n            { func: 'adjust-hue($color, $degrees)', desc: nls.localize(7, null) },\r\n            { func: 'lighten($color, $amount)', desc: nls.localize(8, null) },\r\n            { func: 'darken($color, $amount)', desc: nls.localize(9, null) },\r\n            { func: 'saturate($color, $amount)', desc: nls.localize(10, null) },\r\n            { func: 'desaturate($color, $amount)', desc: nls.localize(11, null) },\r\n            { func: 'grayscale($color)', desc: nls.localize(12, null) },\r\n            { func: 'complement($color)', desc: nls.localize(13, null) },\r\n            { func: 'invert($color)', desc: nls.localize(14, null) },\r\n            { func: 'alpha($color)', desc: nls.localize(15, null) },\r\n            { func: 'opacity($color)', desc: 'Gets the alpha component (opacity) of a color.' },\r\n            { func: 'rgba($color, $alpha)', desc: nls.localize(16, null) },\r\n            { func: 'opacify($color, $amount)', desc: nls.localize(17, null) },\r\n            { func: 'fade-in($color, $amount)', desc: nls.localize(18, null) },\r\n            { func: 'transparentize($color, $amount) / fade-out($color, $amount)', desc: nls.localize(19, null) },\r\n            { func: 'adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: nls.localize(20, null) },\r\n            { func: 'scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])', desc: nls.localize(21, null) },\r\n            { func: 'change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: nls.localize(22, null) },\r\n            { func: 'ie-hex-str($color)', desc: nls.localize(23, null) }\r\n        ];\r\n        SASSIntellisense.selectorFuncs = [\r\n            { func: 'selector-nest($selectors…)', desc: nls.localize(24, null) },\r\n            { func: 'selector-append($selectors…)', desc: nls.localize(25, null) },\r\n            { func: 'selector-extend($selector, $extendee, $extender)', desc: nls.localize(26, null) },\r\n            { func: 'selector-replace($selector, $original, $replacement)', desc: nls.localize(27, null) },\r\n            { func: 'selector-unify($selector1, $selector2)', desc: nls.localize(28, null) },\r\n            { func: 'is-superselector($super, $sub)', desc: nls.localize(29, null) },\r\n            { func: 'simple-selectors($selector)', desc: nls.localize(30, null) },\r\n            { func: 'selector-parse($selector)', desc: nls.localize(31, null) }\r\n        ];\r\n        SASSIntellisense.builtInFuncs = [\r\n            { func: 'unquote($string)', desc: nls.localize(32, null) },\r\n            { func: 'quote($string)', desc: nls.localize(33, null) },\r\n            { func: 'str-length($string)', desc: nls.localize(34, null) },\r\n            { func: 'str-insert($string, $insert, $index)', desc: nls.localize(35, null) },\r\n            { func: 'str-index($string, $substring)', desc: nls.localize(36, null) },\r\n            { func: 'str-slice($string, $start-at, [$end-at])', desc: nls.localize(37, null) },\r\n            { func: 'to-upper-case($string)', desc: nls.localize(38, null) },\r\n            { func: 'to-lower-case($string)', desc: nls.localize(39, null) },\r\n            { func: 'percentage($number)', desc: nls.localize(40, null) },\r\n            { func: 'round($number)', desc: nls.localize(41, null) },\r\n            { func: 'ceil($number)', desc: nls.localize(42, null) },\r\n            { func: 'floor($number)', desc: nls.localize(43, null) },\r\n            { func: 'abs($number)', desc: nls.localize(44, null) },\r\n            { func: 'min($numbers)', desc: nls.localize(45, null) },\r\n            { func: 'max($numbers)', desc: nls.localize(46, null) },\r\n            { func: 'random([$limit])', desc: nls.localize(47, null) },\r\n            { func: 'length($list)', desc: nls.localize(48, null) },\r\n            { func: 'nth($list, $n)', desc: nls.localize(49, null) },\r\n            { func: 'set-nth($list, $n, $value)', desc: nls.localize(50, null) },\r\n            { func: 'join($list1, $list2, [$separator])', desc: nls.localize(51, null) },\r\n            { func: 'append($list1, $val, [$separator])', desc: nls.localize(52, null) },\r\n            { func: 'zip($lists)', desc: nls.localize(53, null) },\r\n            { func: 'index($list, $value)', desc: nls.localize(54, null) },\r\n            { func: 'list-separator(#list)', desc: nls.localize(55, null) },\r\n            { func: 'map-get($map, $key)', desc: nls.localize(56, null) },\r\n            { func: 'map-merge($map1, $map2)', desc: nls.localize(57, null) },\r\n            { func: 'map-remove($map, $keys)', desc: nls.localize(58, null) },\r\n            { func: 'map-keys($map)', desc: nls.localize(59, null) },\r\n            { func: 'map-values($map)', desc: nls.localize(60, null) },\r\n            { func: 'map-has-key($map, $key)', desc: nls.localize(61, null) },\r\n            { func: 'keywords($args)', desc: nls.localize(62, null) },\r\n            { func: 'feature-exists($feature)', desc: nls.localize(63, null) },\r\n            { func: 'variable-exists($name)', desc: nls.localize(64, null) },\r\n            { func: 'global-variable-exists($name)', desc: nls.localize(65, null) },\r\n            { func: 'function-exists($name)', desc: nls.localize(66, null) },\r\n            { func: 'mixin-exists($name)', desc: nls.localize(67, null) },\r\n            { func: 'inspect($value)', desc: nls.localize(68, null) },\r\n            { func: 'type-of($value)', desc: nls.localize(69, null) },\r\n            { func: 'unit($number)', desc: nls.localize(70, null) },\r\n            { func: 'unitless($number)', desc: nls.localize(71, null) },\r\n            { func: 'comparable($number1, $number2)', desc: nls.localize(72, null) },\r\n            { func: 'call($name, $args…)', desc: nls.localize(73, null) }\r\n        ];\r\n        return SASSIntellisense;\r\n    }(cssIntellisense.CSSIntellisense));\r\n    exports.SASSIntellisense = SASSIntellisense;\r\n});\r\n\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\ndefine(\"vs/languages/sass/common/sassWorker\", [\"require\", \"exports\", 'vs/languages/css/common/cssWorker', './parser/sassParser', './services/intelliSense'], function (require, exports, cssWorker, sassParser, sassIntellisense) {\r\n    /*---------------------------------------------------------------------------------------------\r\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n     *--------------------------------------------------------------------------------------------*/\r\n    'use strict';\r\n    var SassWorker = (function (_super) {\r\n        __extends(SassWorker, _super);\r\n        function SassWorker() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        SassWorker.prototype.createIntellisense = function () {\r\n            return new sassIntellisense.SASSIntellisense();\r\n        };\r\n        SassWorker.prototype.createParser = function () {\r\n            return new sassParser.SassParser();\r\n        };\r\n        return SassWorker;\r\n    }(cssWorker.CSSWorker));\r\n    exports.SassWorker = SassWorker;\r\n});\r\n\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport scanner = require('vs/languages/css/common/parser/cssScanner');\n\nconst _FSL = '/'.charCodeAt(0);\nconst _NWL = '\\n'.charCodeAt(0);\nconst _CAR = '\\r'.charCodeAt(0);\nconst _LFD = '\\f'.charCodeAt(0);\n\nconst _DLR = '$'.charCodeAt(0);\nconst _HSH = '#'.charCodeAt(0);\nconst _CUL = '{'.charCodeAt(0);\nconst _EQS = '='.charCodeAt(0);\nconst _BNG = '!'.charCodeAt(0);\nconst _LAN = '<'.charCodeAt(0);\nconst _RAN = '>'.charCodeAt(0);\nconst _DOT = '.'.charCodeAt(0);\n\nlet customTokenValue = scanner.TokenType.CustomToken;\n\nexport const VariableName = customTokenValue++;\nexport const InterpolationFunction: scanner.TokenType = customTokenValue++;\nexport const Default: scanner.TokenType = customTokenValue++;\nexport const EqualsOperator: scanner.TokenType = customTokenValue++;\nexport const NotEqualsOperator: scanner.TokenType = customTokenValue++;\nexport const GreaterEqualsOperator: scanner.TokenType = customTokenValue++;\nexport const SmallerEqualsOperator: scanner.TokenType = customTokenValue++;\nexport const Ellipsis: scanner.TokenType = customTokenValue++;\n\nexport class SassScanner extends scanner.Scanner {\n\n\tpublic scan(): scanner.IToken {\n\n\t\t// processes all whitespaces and comments\n\t\tconst triviaToken = this.trivia();\n\t\tif (triviaToken !== null) {\n\t\t\treturn triviaToken;\n\t\t}\n\n\t\tconst offset = this.stream.pos();\n\n\t\t// sass variable\n\t\tif (this.stream.advanceIfChar(_DLR)) {\n\t\t\tconst content = [ '$' ];\n\t\t\tif (this.ident(content)) {\n\t\t\t\treturn this.finishToken(offset, VariableName, content.join(''));\n\t\t\t} else {\n\t\t\t\tthis.stream.goBackTo(offset);\n\t\t\t}\n\t\t}\n\n\t\t// Sass: interpolation function #{..})\n\t\tif (this.stream.advanceIfChars([_HSH, _CUL])) {\n\t\t\treturn this.finishToken(offset, InterpolationFunction);\n\t\t}\n\n\t\t// operator ==\n\t\tif (this.stream.advanceIfChars([_EQS, _EQS])) {\n\t\t\treturn this.finishToken(offset, EqualsOperator);\n\t\t}\n\n\t\t// operator !=\n\t\tif (this.stream.advanceIfChars([_BNG, _EQS])) {\n\t\t\treturn this.finishToken(offset, NotEqualsOperator);\n\t\t}\n\n\t\t// operators <, <=\n\t\tif (this.stream.advanceIfChar(_LAN)) {\n\t\t\tif (this.stream.advanceIfChar(_EQS)) {\n\t\t\t\treturn this.finishToken(offset, SmallerEqualsOperator);\n\t\t\t}\n\t\t\treturn this.finishToken(offset, scanner.TokenType.Delim);\n\t\t}\n\n\t\t// ooperators >, >=\n\t\tif (this.stream.advanceIfChar(_RAN)) {\n\t\t\tif (this.stream.advanceIfChar(_EQS)) {\n\t\t\t\treturn this.finishToken(offset, GreaterEqualsOperator);\n\t\t\t}\n\t\t\treturn this.finishToken(offset, scanner.TokenType.Delim);\n\t\t}\n\n\t\t// ellipis\n\t\tif (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {\n\t\t\treturn this.finishToken(offset, Ellipsis);\n\t}\n\n\t\treturn super.scan();\n\t}\n\n\tprotected comment():boolean {\n\t\tif (super.comment()) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.stream.advanceIfChars([_FSL, _FSL])) {\n\t\t\tthis.stream.advanceWhileChar((ch:number) => {\n\t\t\t\tswitch(ch) {\n\t\t\t\t\tcase _NWL:\n\t\t\t\t\tcase _CAR:\n\t\t\t\t\tcase _LFD:\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}","define(\"vs/nls!vs/languages/sass/common/services/intelliSense\",['vs/nls', 'vs/nls!vs/languages/sass/common/sassWorker'], function(nls, data) { return nls.create(\"vs/languages/sass/common/services/intelliSense\", data); });","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport nls = require('vs/nls');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\n\nexport class SassIssueType implements nodes.IRule {\n\tid: string;\n\tmessage: string;\n\n\tpublic constructor(id:string, message: string) {\n\t\tthis.id = id;\n\t\tthis.message = message;\n\t}\n}\n\nexport var ParseError = {\n\tFromExpected: new SassIssueType('sass-fromexpected', nls.localize('expected.from', \"'from' expected\")),\n\tThroughOrToExpected: new SassIssueType('sass-throughexpected', nls.localize('expected.through', \"'through' or 'to' expected\")),\n\tInExpected: new SassIssueType('sass-fromexpected', nls.localize('expected.in', \"'in' expected\")),\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport sassScanner = require ('./sassScanner');\nimport sassErrors = require('./sassErrors');\nimport scanner = require('vs/languages/css/common/parser/cssScanner');\nimport cssParser = require('vs/languages/css/common/parser/cssParser');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\nimport errors = require('vs/languages/css/common/parser/cssErrors');\n\n/// <summary>\n/// A parser for Sass\n/// http://sass-lang.com/documentation/file.SASS_REFERENCE.html\n/// </summary>\nexport class SassParser extends cssParser.Parser {\n\n\tpublic constructor() {\n\t\tsuper(new sassScanner.SassScanner());\n\t}\n\n\tpublic _parseStylesheetStatement():nodes.Node {\n\t\treturn super._parseStylesheetStatement()\n\t\t\t|| this._parseVariableDeclaration()\n\t\t\t|| this._parseWarnAndDebug()\n\t\t\t|| this._parseControlStatement()\n\t\t\t|| this._parseMixinDeclaration()\n\t\t\t|| this._parseMixinContent()\n\t\t\t|| this._parseMixinReference() // @include\n\t\t\t|| this._parseFunctionDeclaration();\n\t}\n\n\tpublic _parseImport():nodes.Node {\n\t\tvar node = <nodes.Import> this.create(nodes.Import);\n\t\tif(!this.accept(scanner.TokenType.AtKeyword, '@import')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.accept(scanner.TokenType.URI) && !this.accept(scanner.TokenType.String)) {\n\t\t\treturn this.finish(node, errors.ParseError.URIOrStringExpected);\n\t\t}\n\t\twhile (this.accept(scanner.TokenType.Comma)) {\n\t\t\tif (!this.accept(scanner.TokenType.URI) && !this.accept(scanner.TokenType.String)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.URIOrStringExpected);\n\t\t\t}\n\t\t}\n\n\t\tnode.setMedialist(this._parseMediaList());\n\n\t\treturn this.finish(node);\n\t}\n\n\t// Sass variables: $font-size: 12px;\n\tpublic _parseVariableDeclaration(panic:scanner.TokenType[]=[]): nodes.VariableDeclaration {\n\t\tvar node = <nodes.VariableDeclaration> this.create(nodes.VariableDeclaration);\n\n\t\tif (!node.setVariable(this._parseVariable())) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.accept(scanner.TokenType.Colon, ':')) {\n\t\t\treturn this.finish(node, errors.ParseError.ColonExpected);\n\t\t}\n\t\tnode.colonPosition = this.prevToken.offset;\n\n\t\tif (!node.setValue(this._parseExpr())) {\n\t\t\treturn this.finish(node, errors.ParseError.VariableValueExpected, [], panic);\n\t\t}\n\n\t\tif (this.accept(scanner.TokenType.Exclamation)) {\n\t\t\tif (!this.accept(scanner.TokenType.Ident, 'default', true)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.UnknownKeyword);\n\t\t\t}\n\t\t}\n\n\t\tif (this.peek(scanner.TokenType.SemiColon)) {\n\t\t\tnode.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist\n\t\t}\n\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseMediaFeatureName() : nodes.Node {\n\t\treturn this._parseFunction() || this._parseIdent() || this._parseVariable(); // first function, the indent\n\t}\n\n\tpublic _parseKeyframeSelector():nodes.Node {\n\t\treturn super._parseKeyframeSelector() || this._parseMixinContent();\n\t}\n\n\tpublic _parseVariable(): nodes.Variable {\n\t\tvar node = <nodes.Variable> this.create(nodes.Variable);\n\t\tif (!this.accept(sassScanner.VariableName)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn <nodes.Variable> node;\n\t}\n\n\tpublic _parseIdent(referenceTypes?: nodes.ReferenceType[]): nodes.Identifier {\n\t\tvar node = <nodes.Identifier> this.create(nodes.Identifier);\n\t\tnode.referenceTypes = referenceTypes;\n\t\tvar hasContent = false;\n\t\twhile (this.accept(scanner.TokenType.Ident) || node.addChild(this._parseInterpolation())) {\n\t\t\thasContent = true;\n\t\t\tif (!this.hasWhitespace() && this.accept(scanner.TokenType.Delim, '-')) {\n\t\t\t\t// '-' is a valid char inside a ident (special treatment here to support #{foo}-#{bar})\n\t\t\t}\n\t\t\tif (this.hasWhitespace()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn hasContent ? this.finish(node) : null;\n\t}\n\n\tpublic _parseTerm(): nodes.Term {\n\t\tvar term = super._parseTerm();\n\t\tif (term) { return term; }\n\n\t\tterm = <nodes.Term> this.create(nodes.Term);\n\t\tif (term.setExpression(this._parseVariable())) {\n\t\t\treturn <nodes.Term> this.finish(term);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic _parseInterpolation():nodes.Node {\n\t\tvar node = this.create(nodes.Interpolation);\n\t\tif (this.accept(sassScanner.InterpolationFunction)) {\n\t\t\tif (!node.addChild(this._parseBinaryExpr())) {\n\t\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected);\n\t\t\t}\n\t\t\tif (!this.accept(scanner.TokenType.CurlyR)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.RightCurlyExpected);\n\t\t\t}\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic _parseOperator(): nodes.Node {\n\t\tvar node = this.createNode(nodes.NodeType.Operator);\n\t\tif (this.peek(sassScanner.EqualsOperator) || this.peek(sassScanner.NotEqualsOperator)\n\t\t\t|| this.peek(sassScanner.GreaterEqualsOperator) || this.peek(sassScanner.SmallerEqualsOperator)\n\t\t\t|| this.peek(scanner.TokenType.Delim, '>') || this.peek(scanner.TokenType.Delim, '<')\n\t\t\t|| this.peek(scanner.TokenType.Ident, 'and') || this.peek(scanner.TokenType.Ident, 'or')\n\t\t\t|| this.peek(scanner.TokenType.Delim, '%')\n\t\t\t) {\n\t\t\tvar node = this.createNode(nodes.NodeType.Operator);\n\t\t\tthis.consumeToken();\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn super._parseOperator();\n\t}\n\n\tpublic _parseUnaryOperator(): nodes.Node {\n\t\tif (this.peek(scanner.TokenType.Ident, 'not')) {\n\t\t\tvar node = this.create(nodes.Node);\n\t\t\tthis.consumeToken();\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn super._parseUnaryOperator();\n\t}\n\n\tpublic _parseRuleSetDeclaration() : nodes.Node {\n\t\tif (this.peek(scanner.TokenType.AtKeyword)) {\n\t\t\treturn this._parseKeyframe() // nested @keyframe\n\t\t\t\t|| this._parseImport() // nested @import\n\t\t\t\t|| this._parseMedia() // nested @media\n\t\t\t\t|| this._parseFontFace() // nested @font-face\n\t\t\t\t|| this._parseWarnAndDebug() // @warn and @debug statements\n\t\t\t\t|| this._parseControlStatement() // @if, @while, @for, @each\n\t\t\t\t|| this._parseFunctionDeclaration() // @function\n\t\t\t\t|| this._parseExtends() // @extends\n\t\t\t\t|| this._parseMixinReference() // @include\n\t\t\t\t|| this._parseMixinContent() // @content\n\t\t\t\t|| this._parseMixinDeclaration(); // nested @mixin\n\t\t}\n\t\treturn this._parseVariableDeclaration() // variable declaration\n\t\t\t|| this._tryParseRuleset(true) // nested ruleset\n\t\t\t|| super._parseRuleSetDeclaration(); // try css ruleset declaration as last so in the error case, the ast will contain a declaration\n\t}\n\n\tpublic _parseDeclaration(resyncStopTokens?:scanner.TokenType[]): nodes.Declaration {\n\t\tvar node = <nodes.Declaration> this.create(nodes.Declaration);\n\t\tif (!node.setProperty(this._parseProperty())) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.accept(scanner.TokenType.Colon, ':')) {\n\t\t\treturn this.finish(node, errors.ParseError.ColonExpected, [ scanner.TokenType.Colon ], resyncStopTokens);\n\t\t}\n\t\tnode.colonPosition = this.prevToken.offset;\n\n\t\tvar hasContent = false;\n\t\tif (node.setValue(this._parseExpr())) {\n\t\t\thasContent = true;\n\t\t\tnode.addChild(this._parsePrio());\n\t\t}\n\t\tif (this.peek(scanner.TokenType.CurlyL)) {\n\t\t\tnode.setNestedProperties(this._parseNestedProperties());\n\t\t} else {\n\t\t\tif (!hasContent) {\n\t\t\t\treturn this.finish(node, errors.ParseError.PropertyValueExpected);\n\t\t\t}\n\t\t}\n\t\tif (this.peek(scanner.TokenType.SemiColon)) {\n\t\t\tnode.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist\n\t\t}\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseNestedProperties(): nodes.NestedProperties {\n\t\tvar node = <nodes.NestedProperties> this.create(nodes.NestedProperties);\n\t\treturn this._parseBody(node, this._parseDeclaration.bind(this));\n\t}\n\n\tpublic _parseExtends(): nodes.Node {\n\t\tvar node = <nodes.ExtendsReference> this.create(nodes.ExtendsReference);\n\t\tif (this.accept(scanner.TokenType.AtKeyword, '@extend')) {\n\t\t\tif (!node.setSelector(this._parseSimpleSelector())) {\n\t\t\t\treturn this.finish(node, errors.ParseError.SelectorExpected);\n\t\t\t}\n\t\t\tif (this.accept(scanner.TokenType.Exclamation)) {\n\t\t\t\tif (!this.accept(scanner.TokenType.Ident, 'optional', true)) {\n\t\t\t\t\treturn this.finish(node, errors.ParseError.UnknownKeyword);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic _parseSimpleSelectorBody(): nodes.Node {\n\t\treturn this._parseSelectorCombinator() || this._parseSelectorPlaceholder() || super._parseSimpleSelectorBody();\n\t}\n\n\tpublic _parseSelectorCombinator():nodes.Node {\n\t\tvar node = this.createNode(nodes.NodeType.SelectorCombinator);\n\t\tif (this.accept(scanner.TokenType.Delim, '&')) {\n\t\t\twhile (!this.hasWhitespace() && (this.accept(scanner.TokenType.Delim, '-') || node.addChild(this._parseIdent()) || this.accept(scanner.TokenType.Delim, '&'))) {\n\t\t\t\t//  support &-foo\n\t\t\t}\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic _parseSelectorPlaceholder():nodes.Node {\n\t\tvar node = this.createNode(nodes.NodeType.SelectorPlaceholder);\n\t\tif (this.accept(scanner.TokenType.Delim, '%')) {\n\t\t\tthis._parseIdent();\n\t\t\treturn this.finish(node);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic _parseWarnAndDebug(): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@debug') && !this.peek(scanner.TokenType.AtKeyword, '@warn')) {\n\t\t\treturn null;\n\t\t}\n\t\tvar node = this.createNode(nodes.NodeType.Debug);\n\t\tthis.consumeToken(); // @debug or @warn\n\t\tnode.addChild(this._parseExpr()); // optional\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseControlStatement(parseStatement: () => nodes.Node = this._parseRuleSetDeclaration.bind(this)): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._parseIfStatement(parseStatement) || this._parseForStatement(parseStatement)\n\t\t\t|| this._parseEachStatement(parseStatement) || this._parseWhileStatement(parseStatement);\n\t}\n\n\tpublic _parseIfStatement(parseStatement: () => nodes.Node): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@if')) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._internalParseIfStatement(parseStatement);\n\t}\n\n\tprivate _internalParseIfStatement(parseStatement: () => nodes.Node): nodes.IfStatement {\n\t\tvar node = <nodes.IfStatement> this.create(nodes.IfStatement);\n\t\tthis.consumeToken(); // @if or if\n\t\tif (!node.setExpression(this._parseBinaryExpr())) {\n\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected);\n\t\t}\n\t\tthis._parseBody(node, parseStatement);\n\t\tif (this.accept(scanner.TokenType.AtKeyword, '@else')) {\n\t\t\tif (this.peek(scanner.TokenType.Ident, 'if')) {\n\t\t\t\tnode.setElseClause(this._internalParseIfStatement(parseStatement));\n\t\t\t} else if (this.peek(scanner.TokenType.CurlyL)) {\n\t\t\t\tvar elseNode = <nodes.BodyDeclaration> this.create(nodes.ElseStatement);\n\t\t\t\tthis._parseBody(elseNode, parseStatement);\n\t\t\t\tnode.setElseClause(elseNode);\n\t\t\t}\n\t\t}\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseForStatement(parseStatement: () => nodes.Node): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@for')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = <nodes.ForStatement> this.create(nodes.ForStatement);\n\t\tthis.consumeToken(); // @for\n\t\tif (!node.setVariable(this._parseVariable())) {\n\t\t\treturn this.finish(node, errors.ParseError.VariableNameExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\t\tif (!this.accept(scanner.TokenType.Ident, 'from')) {\n\t\t\treturn this.finish(node, sassErrors.ParseError.FromExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\t\tif (!node.addChild(this._parseBinaryExpr())) {\n\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\t\tif (!this.accept(scanner.TokenType.Ident, 'to') && !this.accept(scanner.TokenType.Ident, 'through')) {\n\t\t\treturn this.finish(node, sassErrors.ParseError.ThroughOrToExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\t\tif (!node.addChild(this._parseBinaryExpr())) {\n\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\n\t\treturn this._parseBody(node, parseStatement);\n\t}\n\n\tpublic _parseEachStatement(parseStatement: () => nodes.Node): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@each')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = <nodes.EachStatement> this.create(nodes.EachStatement);\n\t\tthis.consumeToken(); // @each\n\t\tif (!node.setVariable(this._parseVariable())) {\n\t\t\treturn this.finish(node, errors.ParseError.VariableNameExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\t\tif (!this.accept(scanner.TokenType.Ident, 'in')) {\n\t\t\treturn this.finish(node, sassErrors.ParseError.InExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\t\tif (!node.addChild(this._parseExpr())) {\n\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\n\t\treturn this._parseBody(node, parseStatement);\n\t}\n\n\tpublic _parseWhileStatement(parseStatement: () => nodes.Node): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@while')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = <nodes.WhileStatement> this.create(nodes.WhileStatement);\n\t\tthis.consumeToken(); // @while\n\t\tif (!node.addChild(this._parseBinaryExpr())) {\n\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\n\t\treturn this._parseBody(node, parseStatement);\n\t}\n\n\tpublic _parseFunctionBodyDeclaration(): nodes.Node {\n\t\treturn this._parseVariableDeclaration() || this._parseReturnStatement()\n\t\t\t|| this._parseControlStatement(this._parseFunctionBodyDeclaration.bind(this));\n\t}\n\n\tpublic _parseFunctionDeclaration(): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@function')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = <nodes.FunctionDeclaration> this.create(nodes.FunctionDeclaration);\n\t\tthis.consumeToken(); // @function\n\n\t\tif (!node.setIdentifier(this._parseIdent([nodes.ReferenceType.Function ]))) {\n\t\t\treturn this.finish(node, errors.ParseError.IdentifierExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\n\t\tif (!this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\treturn this.finish(node, errors.ParseError.LeftParenthesisExpected, [ scanner.TokenType.CurlyR ] );\n\t\t}\n\n\t\tif (node.getParameters().addChild(this._parseParameterDeclaration())) {\n\t\t\twhile (this.accept(scanner.TokenType.Comma)) {\n\t\t\t\tif (!node.getParameters().addChild(this._parseParameterDeclaration())) {\n\t\t\t\t\treturn this.finish(node, errors.ParseError.VariableNameExpected);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected, [ scanner.TokenType.CurlyR ] );\n\t\t}\n\n\t\treturn this._parseBody(node, this._parseFunctionBodyDeclaration.bind(this));\n\t}\n\n\tpublic _parseReturnStatement(): nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@return')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = this.createNode(nodes.NodeType.ReturnStatement);\n\t\tthis.consumeToken(); // @function\n\n\t\tif (!node.addChild(this._parseExpr())) {\n\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected);\n\t\t}\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseMixinDeclaration():nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@mixin')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = <nodes.MixinDeclaration> this.create(nodes.MixinDeclaration);\n\t\tthis.consumeToken();\n\n\t\tif (!node.setIdentifier(this._parseIdent([nodes.ReferenceType.Mixin]))) {\n\t\t\treturn this.finish(node, errors.ParseError.IdentifierExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\n\t\tif (this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\tif (node.getParameters().addChild(this._parseParameterDeclaration())) {\n\t\t\t\twhile (this.accept(scanner.TokenType.Comma)) {\n\t\t\t\t\tif (!node.getParameters().addChild(this._parseParameterDeclaration())) {\n\t\t\t\t\t\treturn this.finish(node, errors.ParseError.VariableNameExpected);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected, [ scanner.TokenType.CurlyR ] );\n\t\t\t}\n\t\t}\n\n\t\treturn this._parseBody(node, this._parseRuleSetDeclaration.bind(this));\n\t}\n\n\tpublic _parseParameterDeclaration():nodes.Node {\n\n\t\tvar node = <nodes.FunctionParameter> this.create(nodes.FunctionParameter);\n\n\t\tif (!node.setIdentifier(this._parseVariable())) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this.accept(sassScanner.Ellipsis)) {\n\t\t\t// ok\n\t\t}\n\n\t\tif (this.accept(scanner.TokenType.Colon)) {\n\t\t\tif (!node.setDefaultValue(this._parseExpr(true))) {\n\t\t\t\treturn this.finish(node, errors.ParseError.VariableValueExpected, [], [scanner.TokenType.Comma, scanner.TokenType.ParenthesisR]);\n\t\t\t}\n\t\t}\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseMixinContent():nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@content')) {\n\t\t\treturn null;\n\t\t}\n\t\tvar node = this.createNode(nodes.NodeType.MixinContent);\n\t\tthis.consumeToken();\n\t\treturn this.finish(node);\n\t}\n\n\n\tpublic _parseMixinReference():nodes.Node {\n\t\tif (!this.peek(scanner.TokenType.AtKeyword, '@include')) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar node = <nodes.MixinReference> this.create(nodes.MixinReference);\n\t\tthis.consumeToken();\n\n\t\tif (!node.setIdentifier(this._parseIdent([nodes.ReferenceType.Mixin]))) {\n\t\t\treturn this.finish(node, errors.ParseError.IdentifierExpected, [ scanner.TokenType.CurlyR ]);\n\t\t}\n\n\t\tif (this.accept(scanner.TokenType.ParenthesisL)) {\n\t\t\tif (node.getArguments().addChild(this._parseFunctionArgument())) {\n\t\t\t\twhile (this.accept(scanner.TokenType.Comma)) {\n\t\t\t\t\tif (!node.getArguments().addChild(this._parseFunctionArgument())) {\n\t\t\t\t\t\treturn this.finish(node, errors.ParseError.ExpressionExpected);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.accept(scanner.TokenType.ParenthesisR)) {\n\t\t\t\treturn this.finish(node, errors.ParseError.RightParenthesisExpected);\n\t\t\t}\n\t\t}\n\n\t\tif (this.peek(scanner.TokenType.CurlyL)) {\n\t\t\tvar content = <nodes.BodyDeclaration> this.create(nodes.BodyDeclaration);\n\t\t\tthis._parseBody(content, this._parseMixinReferenceBodyStatement.bind(this));\n\t\t\tnode.setContent(content);\n\t\t}\n\t\treturn this.finish(node);\n\t}\n\n\tpublic _parseMixinReferenceBodyStatement(): nodes.Node {\n\t\treturn this._parseRuleSetDeclaration() || this._parseKeyframeSelector();\n\t}\n\n\tpublic _parseFunctionArgument():nodes.Node {\n\t\t// [variableName ':'] expression | variableName '...'\n\t\tvar node = <nodes.FunctionArgument> this.create(nodes.FunctionArgument);\n\n\t\tvar pos = this.mark();\n\t\tvar argument = this._parseVariable();\n\t\tif (argument) {\n\t\t\tif (!this.accept(scanner.TokenType.Colon)) {\n\t\t\t\tif (this.accept(sassScanner.Ellipsis)) { // optional\n\t\t\t\t\tnode.setValue(argument);\n\t\t\t\t\treturn this.finish(node);\n\t\t\t\t} else {\n\t\t\t\t\tthis.restoreAtMark(pos);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode.setIdentifier(argument);\n\t\t\t}\n\t\t}\n\n\t\tif (node.setValue(this._parseExpr(true))) {\n\t\t\treturn this.finish(node);\n\t\t}\n\n\t\treturn null;\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport languageFacts = require('vs/languages/css/common/services/languageFacts');\nimport Modes = require('vs/editor/common/modes');\nimport cssIntellisense = require('vs/languages/css/common/services/intelliSense');\nimport nls = require('vs/nls');\nimport nodes = require('vs/languages/css/common/parser/cssNodes');\n\nexport class SASSIntellisense extends cssIntellisense.CSSIntellisense {\n\n\tprivate static variableDefaults: { [key: string]: string; } = {\n\t\t'$red': '1',\n\t\t'$green': '2',\n\t\t'$blue': '3',\n\t\t'$alpha': '1.0',\n\t\t'$color': '$color',\n\t\t'$weight': '0.5',\n\t\t'$hue': '0',\n\t\t'$saturation': '0%',\n\t\t'$lightness': '0%',\n\t\t'$degrees': '0',\n\t\t'$amount': '0',\n\t\t'$string': '\"\"',\n\t\t'$substring': '\"s\"',\n\t\t'$number': '0',\n\t\t'$limit': '1'\n\t};\n\n\tprivate static colorProposals = [\n\t\t{ func: 'red($color)', desc: nls.localize('sass.builtin.red', 'Gets the red component of a color.') },\n\t\t{ func: 'green($color)', desc: nls.localize('sass.builtin.green', 'Gets the green component of a color.') },\n\t\t{ func: 'blue($color)', desc: nls.localize('sass.builtin.blue', 'Gets the blue component of a color.') },\n\t\t{ func: 'mix($color, $color, [$weight])', desc: nls.localize('sass.builtin.mix', 'Mixes two colors together.') },\n\t\t{ func: 'hue($color)', desc: nls.localize('sass.builtin.hue', 'Gets the hue component of a color.') },\n\t\t{ func: 'saturation($color)', desc: nls.localize('sass.builtin.saturation', 'Gets the saturation component of a color.') },\n\t\t{ func: 'lightness($color)', desc: nls.localize('sass.builtin.lightness', 'Gets the lightness component of a color.') },\n\t\t{ func: 'adjust-hue($color, $degrees)', desc: nls.localize('sass.builtin.adjust-hue', 'Changes the hue of a color.') },\n\t\t{ func: 'lighten($color, $amount)', desc: nls.localize('sass.builtin.lighten', 'Makes a color lighter.') },\n\t\t{ func: 'darken($color, $amount)', desc: nls.localize('sass.builtin.darken', 'Makes a color darker.') },\n\t\t{ func: 'saturate($color, $amount)', desc: nls.localize('sass.builtin.saturate', 'Makes a color more saturated.') },\n\t\t{ func: 'desaturate($color, $amount)', desc: nls.localize('sass.builtin.desaturate', 'Makes a color less saturated.') },\n\t\t{ func: 'grayscale($color)', desc: nls.localize('sass.builtin.grayscale', 'Converts a color to grayscale.') },\n\t\t{ func: 'complement($color)', desc: nls.localize('sass.builtin.complement', 'Returns the complement of a color.') },\n\t\t{ func: 'invert($color)', desc: nls.localize('sass.builtin.invert', 'Returns the inverse of a color.') },\n\t\t{ func: 'alpha($color)', desc: nls.localize('sass.builtin.alpha', 'Gets the opacity component of a color.') },\n\t\t{ func: 'opacity($color)', desc: 'Gets the alpha component (opacity) of a color.' },\n\t\t{ func: 'rgba($color, $alpha)', desc: nls.localize('sass.builtin.rgba', 'Changes the alpha component for a color.') },\n\t\t{ func: 'opacify($color, $amount)', desc: nls.localize('sass.builtin.opacify', 'Makes a color more opaque.') },\n\t\t{ func: 'fade-in($color, $amount)', desc: nls.localize('sass.builtin.fade-in', 'Makes a color more opaque.') },\n\t\t{ func: 'transparentize($color, $amount) / fade-out($color, $amount)', desc: nls.localize('sass.builtin.transparentize', 'Makes a color more transparent.') },\n\t\t{ func: 'adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: nls.localize('sass.builtin.adjust-color', 'Increases or decreases one or more components of a color.') },\n\t\t{ func: 'scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])', desc: nls.localize('sass.builtin.scale-color', 'Fluidly scales one or more properties of a color.') },\n\t\t{ func: 'change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: nls.localize('sass.builtin.change-color', 'Changes one or more properties of a color.') },\n\t\t{ func: 'ie-hex-str($color)', desc: nls.localize('sass.builtin.ie-hex-str', 'Converts a color into the format understood by IE filters.') }\n\t];\n\n\tprivate static selectorFuncs = [\n\t\t{ func: 'selector-nest($selectors…)', desc: nls.localize('sass.builtin.selector-nest', 'Nests selector beneath one another like they would be nested in the stylesheet.') },\n\t\t{ func: 'selector-append($selectors…)', desc: nls.localize('sass.builtin.selector-append', 'Appends selectors to one another without spaces in between.') },\n\t\t{ func: 'selector-extend($selector, $extendee, $extender)', desc: nls.localize('sass.builtin.selector-extend', 'Extends $extendee with $extender within $selector.') },\n\t\t{ func: 'selector-replace($selector, $original, $replacement)', desc: nls.localize('sass.builtin.selector-replace', 'Replaces $original with $replacement within $selector.') },\n\t\t{ func: 'selector-unify($selector1, $selector2)', desc: nls.localize('sass.builtin.selector-unify', 'Unifies two selectors to produce a selector that matches elements matched by both.') },\n\t\t{ func: 'is-superselector($super, $sub)', desc: nls.localize('sass.builtin.is-superselector', 'Returns whether $super matches all the elements $sub does, and possibly more.') },\n\t\t{ func: 'simple-selectors($selector)', desc: nls.localize('sass.builtin.simple-selectors', 'Returns the simple selectors that comprise a compound selector.') },\n\t\t{ func: 'selector-parse($selector)', desc: nls.localize('sass.builtin.selector-parse', 'Parses a selector into the format returned by &.') }\n\t];\n\n\tprivate static builtInFuncs = [\n\t\t{ func: 'unquote($string)', desc: nls.localize('sass.builtin.unquote', 'Removes quotes from a string.') },\n\t\t{ func: 'quote($string)', desc: nls.localize('sass.builtin.quote', 'Adds quotes to a string.') },\n\t\t{ func: 'str-length($string)', desc: nls.localize('sass.builtin.str-length', 'Returns the number of characters in a string.') },\n\t\t{ func: 'str-insert($string, $insert, $index)', desc: nls.localize('sass.builtin.str-insert', 'Inserts $insert into $string at $index.') },\n\t\t{ func: 'str-index($string, $substring)', desc: nls.localize('sass.builtin.str-index', 'Returns the index of the first occurance of $substring in $string.') },\n\t\t{ func: 'str-slice($string, $start-at, [$end-at])', desc: nls.localize('sass.builtin.str-slice', 'Extracts a substring from $string.') },\n\t\t{ func: 'to-upper-case($string)', desc: nls.localize('sass.builtin.to-upper-case', 'Converts a string to upper case.') },\n\t\t{ func: 'to-lower-case($string)', desc: nls.localize('sass.builtin.to-lower-case', 'Converts a string to lower case.') },\n\t\t{ func: 'percentage($number)', desc: nls.localize('sass.builtin.percentage', 'Converts a unitless number to a percentage.') },\n\t\t{ func: 'round($number)', desc: nls.localize('sass.builtin.round', 'Rounds a number to the nearest whole number.') },\n\t\t{ func: 'ceil($number)', desc: nls.localize('sass.builtin.ceil', 'Rounds a number up to the next whole number.') },\n\t\t{ func: 'floor($number)', desc: nls.localize('sass.builtin.floor', 'Rounds a number down to the previous whole number.') },\n\t\t{ func: 'abs($number)', desc: nls.localize('sass.builtin.abs', 'Returns the absolute value of a number.') },\n\t\t{ func: 'min($numbers)', desc: nls.localize('sass.builtin.min', 'Finds the minimum of several numbers.') },\n\t\t{ func: 'max($numbers)', desc: nls.localize('sass.builtin.max', 'Finds the maximum of several numbers.') },\n\t\t{ func: 'random([$limit])', desc: nls.localize('sass.builtin.random', 'Returns a random number.') },\n\t\t{ func: 'length($list)', desc: nls.localize('sass.builtin.length', 'Returns the length of a list.') },\n\t\t{ func: 'nth($list, $n)', desc: nls.localize('sass.builtin.nth', 'Returns a specific item in a list.') },\n\t\t{ func: 'set-nth($list, $n, $value)', desc: nls.localize('sass.builtin.set-nth', 'Replaces the nth item in a list.') },\n\t\t{ func: 'join($list1, $list2, [$separator])', desc: nls.localize('sass.builtin.join', 'Joins together two lists into one.') },\n\t\t{ func: 'append($list1, $val, [$separator])', desc: nls.localize('sass.builtin.append', 'Appends a single value onto the end of a list.') },\n\t\t{ func: 'zip($lists)', desc: nls.localize('sass.builtin.zip', 'Combines several lists into a single multidimensional list.') },\n\t\t{ func: 'index($list, $value)', desc: nls.localize('sass.builtin.index', 'Returns the position of a value within a list.') },\n\t\t{ func: 'list-separator(#list)', desc: nls.localize('sass.builtin.list-separator', 'Returns the separator of a list.') },\n\t\t{ func: 'map-get($map, $key)', desc: nls.localize('sass.builtin.map-get', 'Returns the value in a map associated with a given key.') },\n\t\t{ func: 'map-merge($map1, $map2)', desc: nls.localize('sass.builtin.map-merge', 'Merges two maps together into a new map.') },\n\t\t{ func: 'map-remove($map, $keys)', desc: nls.localize('sass.builtin.map-remove', 'Returns a new map with keys removed.') },\n\t\t{ func: 'map-keys($map)', desc: nls.localize('sass.builtin.map-keys', 'Returns a list of all keys in a map.') },\n\t\t{ func: 'map-values($map)', desc: nls.localize('sass.builtin.map-values', 'Returns a list of all values in a map.') },\n\t\t{ func: 'map-has-key($map, $key)', desc: nls.localize('sass.builtin.map-has-key', 'Returns whether a map has a value associated with a given key.') },\n\t\t{ func: 'keywords($args)', desc: nls.localize('sass.builtin.keywords', 'Returns the keywords passed to a function that takes variable arguments.') },\n\t\t{ func: 'feature-exists($feature)', desc: nls.localize('sass.builtin.feature-exists', 'Returns whether a feature exists in the current Sass runtime.') },\n\t\t{ func: 'variable-exists($name)', desc: nls.localize('sass.builtin.variable-exists', 'Returns whether a variable with the given name exists in the current scope.') },\n\t\t{ func: 'global-variable-exists($name)', desc: nls.localize('sass.builtin.global-variable-exists', 'Returns whether a variable with the given name exists in the global scope.') },\n\t\t{ func: 'function-exists($name)', desc: nls.localize('sass.builtin.function-exists', 'Returns whether a function with the given name exists.') },\n\t\t{ func: 'mixin-exists($name)', desc: nls.localize('sass.builtin.mixin-exists', 'Returns whether a mixin with the given name exists.') },\n\t\t{ func: 'inspect($value)', desc: nls.localize('sass.builtin.inspect', 'Returns the string representation of a value as it would be represented in Sass.') },\n\t\t{ func: 'type-of($value)', desc: nls.localize('sass.builtin.type-of', 'Returns the type of a value.') },\n\t\t{ func: 'unit($number)', desc: nls.localize('sass.builtin.unit', 'Returns the unit(s) associated with a number.') },\n\t\t{ func: 'unitless($number)', desc: nls.localize('sass.builtin.unitless', 'Returns whether a number has units.') },\n\t\t{ func: 'comparable($number1, $number2)', desc: nls.localize('sass.builtin.comparable', 'Returns whether two numbers can be added, subtracted, or compared.') },\n\t\t{ func: 'call($name, $args…)', desc: nls.localize('sass.builtin.call', 'Dynamically calls a Sass function.') }\n\t];\n\n\tconstructor() {\n\t\tsuper('$');\n\t}\n\n\tprivate createFunctionProposals(proposals: {func: string; desc: string; }[], result: Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tvar replaceFunction = (match: string, p1: string) => p1 + ': {{' + (SASSIntellisense.variableDefaults[p1] || '') + '}}';\n\t\tproposals.forEach((p) => {\n\t\t\tresult.push({\n\t\t\t\tlabel: p.func.substr(0, p.func.indexOf('(')),\n\t\t\t\ttypeLabel: p.func,\n\t\t\t\tdocumentationLabel: p.desc,\n\t\t\t\tcodeSnippet: p.func.replace(/\\[?(\\$\\w+)\\]?/g, replaceFunction),\n\t\t\t\ttype: 'function'\n\t\t\t});\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic getCompletionsForSelector(ruleSet: nodes.RuleSet, result:Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(SASSIntellisense.selectorFuncs, result);\n\t\treturn super.getCompletionsForSelector(ruleSet, result);\n\t}\n\n\tpublic getTermProposals(result:Modes.ISuggestion[]):Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(SASSIntellisense.builtInFuncs, result);\n\t\treturn super.getTermProposals(result);\n\t}\n\n\tprotected getColorProposals(entry: languageFacts.IEntry, result: Modes.ISuggestion[]): Modes.ISuggestion[] {\n\t\tthis.createFunctionProposals(SASSIntellisense.colorProposals, result);\n\t\treturn super.getColorProposals(entry, result);\n\t}\n\n\tpublic getCompletionsForDeclarationProperty(result: Modes.ISuggestion[]): Modes.ISuggestion[]{\n\t\tthis.getCompletionsForSelector(null, result);\n\t\treturn super.getCompletionsForDeclarationProperty(result);\n\t}\n\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport cssWorker = require('vs/languages/css/common/cssWorker');\nimport cssParser = require('vs/languages/css/common/parser/cssParser');\nimport sassParser = require('./parser/sassParser');\nimport sassIntellisense = require('./services/intelliSense');\n\nexport class SassWorker extends cssWorker.CSSWorker {\n\n\tpublic createIntellisense(): sassIntellisense.SASSIntellisense {\n\t\treturn new sassIntellisense.SASSIntellisense();\n\t}\n\n\tpublic createParser(): cssParser.Parser {\n\t\treturn new sassParser.SassParser();\n\t}\n\n}\n"]}